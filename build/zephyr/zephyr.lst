
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:

	return fd_entry->obj;
}

int z_reserve_fd(void)
{
   0:	20002998 	.word	0x20002998
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&mutex, *(uintptr_t *)&timeout, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
   4:	00002119 	.word	0x00002119
   8:	0000bd6f 	.word	0x0000bd6f
   c:	00001fed 	.word	0x00001fed
		if (fdtable[fd].obj == NULL) {
  10:	00001fed 	.word	0x00001fed
  14:	00001fed 	.word	0x00001fed
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
  18:	00001fed 	.word	0x00001fed
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
  1c:	00001fed 	.word	0x00001fed
	errno = ENFILE;
  20:	00001fed 	.word	0x00001fed
	return -1;
  24:	00001fed 	.word	0x00001fed
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke1(*(uintptr_t *)&mutex, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
  28:	00001fed 	.word	0x00001fed
  2c:	00001ee5 	.word	0x00001ee5
	}

	k_mutex_unlock(&fdtable_lock);

	return fd;
}
  30:	00001fed 	.word	0x00001fed
		fdtable[fd].obj = FD_OBJ_RESERVED;
  34:	00001fed 	.word	0x00001fed
  38:	00001e91 	.word	0x00001e91
  3c:	0000bd5f 	.word	0x0000bd5f

00000040 <_irq_vector_table>:
  40:	000020d9 000020d9 000020d9 000020d9     . ... ... ... ..
		sys_pm_notify_power_state_exit(pm_state);
		_sys_pm_power_state_exit_post_ops(pm_state);
	}

	return pm_state;
}
  50:	000020d9 000020d9 000020d9 000020d9     . ... ... ... ..
  60:	000020d9 000020d9 000020d9 000020d9     . ... ... ... ..
  70:	000020d9 000020d9 000020d9 000020d9     . ... ... ... ..
  80:	000020d9 000020d9 000020d9 000020d9     . ... ... ... ..
  90:	000020d9 000020d9 000020d9 000020d9     . ... ... ... ..
  a0:	000020d9 000020d9 000020d9 000020d9     . ... ... ... ..
  b0:	000020d9 000020d9 000020d9 000020d9     . ... ... ... ..
  c0:	000020d9 000020d9 000020d9 000020d9     . ... ... ... ..
  d0:	000020d9 000020d9 000020d9 000020d9     . ... ... ... ..
  e0:	000020d9 000020d9 000020d9 000020d9     . ... ... ... ..
  f0:	000020d9 000020d9 000020d9 000020d9     . ... ... ... ..
 100:	000020d9 000020d9 000020d9 000020d9     . ... ... ... ..
 110:	000020d9 000020d9 000020d9 000020d9     . ... ... ... ..
 120:	000020d9 000020d9 000020d9 000020d9     . ... ... ... ..
 130:	000020d9 000020d9 000020d9 000020d9     . ... ... ... ..
 140:	000020d9 000020d9 000020d9 000020d9     . ... ... ... ..
 150:	000020d9                                . ..

Disassembly of section text:

00000154 <__aeabi_uldivmod>:
     154:	b953      	cbnz	r3, 16c <__aeabi_uldivmod+0x18>
     156:	b94a      	cbnz	r2, 16c <__aeabi_uldivmod+0x18>
     158:	2900      	cmp	r1, #0
     15a:	bf08      	it	eq
     15c:	2800      	cmpeq	r0, #0
     15e:	bf1c      	itt	ne
     160:	f04f 31ff 	movne.w	r1, #4294967295
     164:	f04f 30ff 	movne.w	r0, #4294967295
     168:	f000 b970 	b.w	44c <__aeabi_idiv0>
     16c:	f1ad 0c08 	sub.w	ip, sp, #8
     170:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     174:	f000 f806 	bl	184 <__udivmoddi4>
     178:	f8dd e004 	ldr.w	lr, [sp, #4]
     17c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     180:	b004      	add	sp, #16
     182:	4770      	bx	lr

00000184 <__udivmoddi4>:
     184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     188:	9e09      	ldr	r6, [sp, #36]	; 0x24
     18a:	4604      	mov	r4, r0
     18c:	4689      	mov	r9, r1
     18e:	2b00      	cmp	r3, #0
     190:	f040 8083 	bne.w	29a <CONFIG_SRAM_SIZE+0xda>
     194:	428a      	cmp	r2, r1
     196:	4615      	mov	r5, r2
     198:	d945      	bls.n	226 <CONFIG_SRAM_SIZE+0x66>
     19a:	fab2 f282 	clz	r2, r2
     19e:	b14a      	cbz	r2, 1b4 <__udivmoddi4+0x30>
     1a0:	f1c2 0720 	rsb	r7, r2, #32
     1a4:	fa01 f302 	lsl.w	r3, r1, r2
     1a8:	4095      	lsls	r5, r2
     1aa:	4094      	lsls	r4, r2
     1ac:	fa20 f707 	lsr.w	r7, r0, r7
     1b0:	ea47 0903 	orr.w	r9, r7, r3
     1b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     1b8:	0c23      	lsrs	r3, r4, #16
     1ba:	fa1f f885 	uxth.w	r8, r5
     1be:	fbb9 fcfe 	udiv	ip, r9, lr
     1c2:	fb0e 991c 	mls	r9, lr, ip, r9
     1c6:	fb0c f108 	mul.w	r1, ip, r8
     1ca:	ea43 4309 	orr.w	r3, r3, r9, lsl #16
     1ce:	4299      	cmp	r1, r3
     1d0:	d90a      	bls.n	1e8 <CONFIG_SRAM_SIZE+0x28>
     1d2:	18eb      	adds	r3, r5, r3
     1d4:	bf2c      	ite	cs
     1d6:	2001      	movcs	r0, #1
     1d8:	2000      	movcc	r0, #0
     1da:	4299      	cmp	r1, r3
     1dc:	d902      	bls.n	1e4 <CONFIG_SRAM_SIZE+0x24>
     1de:	2800      	cmp	r0, #0
     1e0:	f000 811d 	beq.w	41e <CONFIG_BT_HCI_TX_STACK_SIZE+0x1e>
     1e4:	f10c 3cff 	add.w	ip, ip, #4294967295
     1e8:	1a59      	subs	r1, r3, r1
     1ea:	b2a3      	uxth	r3, r4
     1ec:	fbb1 f0fe 	udiv	r0, r1, lr
     1f0:	fb0e 1110 	mls	r1, lr, r0, r1
     1f4:	fb00 f808 	mul.w	r8, r0, r8
     1f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
     1fc:	45a0      	cmp	r8, r4
     1fe:	d905      	bls.n	20c <CONFIG_SRAM_SIZE+0x4c>
     200:	192c      	adds	r4, r5, r4
     202:	d202      	bcs.n	20a <CONFIG_SRAM_SIZE+0x4a>
     204:	45a0      	cmp	r8, r4
     206:	f200 810e 	bhi.w	426 <CONFIG_BT_HCI_TX_STACK_SIZE+0x26>
     20a:	3801      	subs	r0, #1
     20c:	eba4 0408 	sub.w	r4, r4, r8
     210:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     214:	2700      	movs	r7, #0
     216:	b11e      	cbz	r6, 220 <CONFIG_SRAM_SIZE+0x60>
     218:	40d4      	lsrs	r4, r2
     21a:	2300      	movs	r3, #0
     21c:	e9c6 4300 	strd	r4, r3, [r6]
     220:	4639      	mov	r1, r7
     222:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     226:	2a00      	cmp	r2, #0
     228:	d051      	beq.n	2ce <CONFIG_SRAM_SIZE+0x10e>
     22a:	fab2 f282 	clz	r2, r2
     22e:	2a00      	cmp	r2, #0
     230:	f040 80af 	bne.w	392 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x92>
     234:	1b49      	subs	r1, r1, r5
     236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     23a:	fa1f f885 	uxth.w	r8, r5
     23e:	2701      	movs	r7, #1
     240:	0c23      	lsrs	r3, r4, #16
     242:	fbb1 fcfe 	udiv	ip, r1, lr
     246:	fb0e 111c 	mls	r1, lr, ip, r1
     24a:	fb08 f00c 	mul.w	r0, r8, ip
     24e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
     252:	4298      	cmp	r0, r3
     254:	d90a      	bls.n	26c <CONFIG_SRAM_SIZE+0xac>
     256:	18eb      	adds	r3, r5, r3
     258:	bf2c      	ite	cs
     25a:	2101      	movcs	r1, #1
     25c:	2100      	movcc	r1, #0
     25e:	4298      	cmp	r0, r3
     260:	d902      	bls.n	268 <CONFIG_SRAM_SIZE+0xa8>
     262:	2900      	cmp	r1, #0
     264:	f000 80d7 	beq.w	416 <CONFIG_BT_HCI_TX_STACK_SIZE+0x16>
     268:	f10c 3cff 	add.w	ip, ip, #4294967295
     26c:	1a19      	subs	r1, r3, r0
     26e:	b2a3      	uxth	r3, r4
     270:	fbb1 f0fe 	udiv	r0, r1, lr
     274:	fb0e 1110 	mls	r1, lr, r0, r1
     278:	fb08 f800 	mul.w	r8, r8, r0
     27c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
     280:	45a0      	cmp	r8, r4
     282:	d905      	bls.n	290 <CONFIG_SRAM_SIZE+0xd0>
     284:	192c      	adds	r4, r5, r4
     286:	d202      	bcs.n	28e <CONFIG_SRAM_SIZE+0xce>
     288:	45a0      	cmp	r8, r4
     28a:	f200 80c1 	bhi.w	410 <CONFIG_BT_HCI_TX_STACK_SIZE+0x10>
     28e:	3801      	subs	r0, #1
     290:	eba4 0408 	sub.w	r4, r4, r8
     294:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     298:	e7bd      	b.n	216 <CONFIG_SRAM_SIZE+0x56>
     29a:	428b      	cmp	r3, r1
     29c:	d908      	bls.n	2b0 <CONFIG_SRAM_SIZE+0xf0>
     29e:	2e00      	cmp	r6, #0
     2a0:	d074      	beq.n	38c <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x8c>
     2a2:	2700      	movs	r7, #0
     2a4:	e9c6 0100 	strd	r0, r1, [r6]
     2a8:	4638      	mov	r0, r7
     2aa:	4639      	mov	r1, r7
     2ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     2b0:	fab3 f783 	clz	r7, r3
     2b4:	b967      	cbnz	r7, 2d0 <CONFIG_SRAM_SIZE+0x110>
     2b6:	428b      	cmp	r3, r1
     2b8:	f0c0 80a4 	bcc.w	404 <CONFIG_BT_HCI_TX_STACK_SIZE+0x4>
     2bc:	4282      	cmp	r2, r0
     2be:	f240 80a1 	bls.w	404 <CONFIG_BT_HCI_TX_STACK_SIZE+0x4>
     2c2:	4638      	mov	r0, r7
     2c4:	2e00      	cmp	r6, #0
     2c6:	d0ab      	beq.n	220 <CONFIG_SRAM_SIZE+0x60>
     2c8:	e9c6 4900 	strd	r4, r9, [r6]
     2cc:	e7a8      	b.n	220 <CONFIG_SRAM_SIZE+0x60>
     2ce:	deff      	udf	#255	; 0xff
     2d0:	f1c7 0520 	rsb	r5, r7, #32
     2d4:	40bb      	lsls	r3, r7
     2d6:	fa02 fc07 	lsl.w	ip, r2, r7
     2da:	fa01 f407 	lsl.w	r4, r1, r7
     2de:	40ea      	lsrs	r2, r5
     2e0:	fa20 f805 	lsr.w	r8, r0, r5
     2e4:	40e9      	lsrs	r1, r5
     2e6:	fa00 fe07 	lsl.w	lr, r0, r7
     2ea:	431a      	orrs	r2, r3
     2ec:	ea48 0404 	orr.w	r4, r8, r4
     2f0:	ea4f 4812 	mov.w	r8, r2, lsr #16
     2f4:	0c20      	lsrs	r0, r4, #16
     2f6:	fa1f f982 	uxth.w	r9, r2
     2fa:	fbb1 faf8 	udiv	sl, r1, r8
     2fe:	fb08 111a 	mls	r1, r8, sl, r1
     302:	fb0a fb09 	mul.w	fp, sl, r9
     306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     30a:	458b      	cmp	fp, r1
     30c:	d90a      	bls.n	324 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x24>
     30e:	1851      	adds	r1, r2, r1
     310:	bf2c      	ite	cs
     312:	2301      	movcs	r3, #1
     314:	2300      	movcc	r3, #0
     316:	458b      	cmp	fp, r1
     318:	d902      	bls.n	320 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x20>
     31a:	2b00      	cmp	r3, #0
     31c:	f000 8088 	beq.w	430 <CONFIG_BT_HCI_TX_STACK_SIZE+0x30>
     320:	f10a 3aff 	add.w	sl, sl, #4294967295
     324:	eba1 010b 	sub.w	r1, r1, fp
     328:	b2a4      	uxth	r4, r4
     32a:	fbb1 f0f8 	udiv	r0, r1, r8
     32e:	fb08 1110 	mls	r1, r8, r0, r1
     332:	fb00 f909 	mul.w	r9, r0, r9
     336:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
     33a:	4589      	cmp	r9, r1
     33c:	d904      	bls.n	348 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x48>
     33e:	1851      	adds	r1, r2, r1
     340:	d201      	bcs.n	346 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x46>
     342:	4589      	cmp	r9, r1
     344:	d87b      	bhi.n	43e <CONFIG_BT_HCI_TX_STACK_SIZE+0x3e>
     346:	3801      	subs	r0, #1
     348:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
     34c:	eba1 0109 	sub.w	r1, r1, r9
     350:	fba0 890c 	umull	r8, r9, r0, ip
     354:	4549      	cmp	r1, r9
     356:	4644      	mov	r4, r8
     358:	464b      	mov	r3, r9
     35a:	d302      	bcc.n	362 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x62>
     35c:	d106      	bne.n	36c <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x6c>
     35e:	45c6      	cmp	lr, r8
     360:	d204      	bcs.n	36c <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x6c>
     362:	3801      	subs	r0, #1
     364:	ebb8 040c 	subs.w	r4, r8, ip
     368:	eb69 0302 	sbc.w	r3, r9, r2
     36c:	2e00      	cmp	r6, #0
     36e:	d05d      	beq.n	42c <CONFIG_BT_HCI_TX_STACK_SIZE+0x2c>
     370:	ebbe 0204 	subs.w	r2, lr, r4
     374:	eb61 0103 	sbc.w	r1, r1, r3
     378:	fa01 f505 	lsl.w	r5, r1, r5
     37c:	fa22 f307 	lsr.w	r3, r2, r7
     380:	40f9      	lsrs	r1, r7
     382:	2700      	movs	r7, #0
     384:	431d      	orrs	r5, r3
     386:	e9c6 5100 	strd	r5, r1, [r6]
     38a:	e749      	b.n	220 <CONFIG_SRAM_SIZE+0x60>
     38c:	4637      	mov	r7, r6
     38e:	4630      	mov	r0, r6
     390:	e746      	b.n	220 <CONFIG_SRAM_SIZE+0x60>
     392:	f1c2 0020 	rsb	r0, r2, #32
     396:	4095      	lsls	r5, r2
     398:	fa01 f702 	lsl.w	r7, r1, r2
     39c:	fa21 f300 	lsr.w	r3, r1, r0
     3a0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     3a4:	fa24 f100 	lsr.w	r1, r4, r0
     3a8:	fa1f f885 	uxth.w	r8, r5
     3ac:	4094      	lsls	r4, r2
     3ae:	4339      	orrs	r1, r7
     3b0:	fbb3 f0fe 	udiv	r0, r3, lr
     3b4:	0c0f      	lsrs	r7, r1, #16
     3b6:	fb0e 3310 	mls	r3, lr, r0, r3
     3ba:	fb00 fc08 	mul.w	ip, r0, r8
     3be:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
     3c2:	459c      	cmp	ip, r3
     3c4:	d907      	bls.n	3d6 <CONFIG_BT_DEVICE_APPEARANCE+0x14>
     3c6:	18eb      	adds	r3, r5, r3
     3c8:	bf2c      	ite	cs
     3ca:	2701      	movcs	r7, #1
     3cc:	2700      	movcc	r7, #0
     3ce:	459c      	cmp	ip, r3
     3d0:	d900      	bls.n	3d4 <CONFIG_BT_DEVICE_APPEARANCE+0x12>
     3d2:	b38f      	cbz	r7, 438 <CONFIG_BT_HCI_TX_STACK_SIZE+0x38>
     3d4:	3801      	subs	r0, #1
     3d6:	eba3 030c 	sub.w	r3, r3, ip
     3da:	b289      	uxth	r1, r1
     3dc:	fbb3 f7fe 	udiv	r7, r3, lr
     3e0:	fb0e 3317 	mls	r3, lr, r7, r3
     3e4:	fb07 fc08 	mul.w	ip, r7, r8
     3e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
     3ec:	458c      	cmp	ip, r1
     3ee:	d904      	bls.n	3fa <CONFIG_LOG_PROCESS_THREAD_SLEEP_MS+0x12>
     3f0:	1869      	adds	r1, r5, r1
     3f2:	d201      	bcs.n	3f8 <CONFIG_LOG_PROCESS_THREAD_SLEEP_MS+0x10>
     3f4:	458c      	cmp	ip, r1
     3f6:	d825      	bhi.n	444 <CONFIG_BT_HCI_TX_STACK_SIZE+0x44>
     3f8:	3f01      	subs	r7, #1
     3fa:	eba1 010c 	sub.w	r1, r1, ip
     3fe:	ea47 4700 	orr.w	r7, r7, r0, lsl #16
     402:	e71d      	b.n	240 <CONFIG_SRAM_SIZE+0x80>
     404:	1a84      	subs	r4, r0, r2
     406:	eb61 0303 	sbc.w	r3, r1, r3
     40a:	2001      	movs	r0, #1
     40c:	4699      	mov	r9, r3
     40e:	e759      	b.n	2c4 <CONFIG_SRAM_SIZE+0x104>
     410:	3802      	subs	r0, #2
     412:	442c      	add	r4, r5
     414:	e73c      	b.n	290 <CONFIG_SRAM_SIZE+0xd0>
     416:	f1ac 0c02 	sub.w	ip, ip, #2
     41a:	442b      	add	r3, r5
     41c:	e726      	b.n	26c <CONFIG_SRAM_SIZE+0xac>
     41e:	f1ac 0c02 	sub.w	ip, ip, #2
     422:	442b      	add	r3, r5
     424:	e6e0      	b.n	1e8 <CONFIG_SRAM_SIZE+0x28>
     426:	3802      	subs	r0, #2
     428:	442c      	add	r4, r5
     42a:	e6ef      	b.n	20c <CONFIG_SRAM_SIZE+0x4c>
     42c:	4637      	mov	r7, r6
     42e:	e6f7      	b.n	220 <CONFIG_SRAM_SIZE+0x60>
     430:	f1aa 0a02 	sub.w	sl, sl, #2
     434:	4411      	add	r1, r2
     436:	e775      	b.n	324 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x24>
     438:	3802      	subs	r0, #2
     43a:	442b      	add	r3, r5
     43c:	e7cb      	b.n	3d6 <CONFIG_BT_DEVICE_APPEARANCE+0x14>
     43e:	3802      	subs	r0, #2
     440:	4411      	add	r1, r2
     442:	e781      	b.n	348 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x48>
     444:	3f02      	subs	r7, #2
     446:	4429      	add	r1, r5
     448:	e7d7      	b.n	3fa <CONFIG_LOG_PROCESS_THREAD_SLEEP_MS+0x12>
     44a:	bf00      	nop

0000044c <__aeabi_idiv0>:
     44c:	4770      	bx	lr
     44e:	bf00      	nop

00000450 <disconnected>:
	}
}

static void disconnected(struct bt_conn *conn, u8_t reason)
{
	printk("Disconnected (reason %u)\n", reason);
     450:	4801      	ldr	r0, [pc, #4]	; (458 <disconnected+0x8>)
     452:	f00a bc17 	b.w	ac84 <printk>
     456:	bf00      	nop
     458:	0000f091 	.word	0x0000f091

0000045c <bt_ready>:
	.le_param_req		= le_param_req,
	.le_param_updated	= le_param_updated
};

static void bt_ready(int err)
{
     45c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if (err) 
     45e:	4601      	mov	r1, r0
     460:	b128      	cbz	r0, 46e <bt_ready+0x12>
	{
		printk("BLE init failed with error code %d\n", err);
     462:	4816      	ldr	r0, [pc, #88]	; (4bc <bt_ready+0x60>)
	//Start advertising
	err = bt_le_adv_start(BT_LE_ADV_CONN, ad, ARRAY_SIZE(ad),
			      sd, ARRAY_SIZE(sd));
	if (err) 
	{
		printk("Advertising failed to start (err %d)\n", err);
     464:	f00a fc0e 	bl	ac84 <printk>
	}

	printk("Advertising successfully started\n");

	k_sem_give(&ble_init_ok);
}
     468:	b005      	add	sp, #20
     46a:	f85d fb04 	ldr.w	pc, [sp], #4
	bt_conn_cb_register(&conn_callbacks);
     46e:	4814      	ldr	r0, [pc, #80]	; (4c0 <bt_ready+0x64>)
     470:	f005 fbd6 	bl	5c20 <bt_conn_cb_register>
	err = my_service_init();
     474:	f000 f91e 	bl	6b4 <my_service_init>
	if (err) 
     478:	4601      	mov	r1, r0
     47a:	b108      	cbz	r0, 480 <bt_ready+0x24>
		printk("Failed to init LBS (err:%d)\n", err);
     47c:	4811      	ldr	r0, [pc, #68]	; (4c4 <bt_ready+0x68>)
     47e:	e7f1      	b.n	464 <bt_ready+0x8>
	err = bt_le_adv_start(BT_LE_ADV_CONN, ad, ARRAY_SIZE(ad),
     480:	22a0      	movs	r2, #160	; 0xa0
     482:	2301      	movs	r3, #1
     484:	f8ad 200a 	strh.w	r2, [sp, #10]
     488:	22f0      	movs	r2, #240	; 0xf0
     48a:	f8ad 0008 	strh.w	r0, [sp, #8]
     48e:	f8ad 200c 	strh.w	r2, [sp, #12]
     492:	f88d 3009 	strb.w	r3, [sp, #9]
     496:	9300      	str	r3, [sp, #0]
     498:	490b      	ldr	r1, [pc, #44]	; (4c8 <bt_ready+0x6c>)
     49a:	4b0c      	ldr	r3, [pc, #48]	; (4cc <bt_ready+0x70>)
     49c:	2202      	movs	r2, #2
     49e:	a802      	add	r0, sp, #8
     4a0:	f00b fea6 	bl	c1f0 <bt_le_adv_start>
	if (err) 
     4a4:	4601      	mov	r1, r0
     4a6:	b108      	cbz	r0, 4ac <bt_ready+0x50>
		printk("Advertising failed to start (err %d)\n", err);
     4a8:	4809      	ldr	r0, [pc, #36]	; (4d0 <bt_ready+0x74>)
     4aa:	e7db      	b.n	464 <bt_ready+0x8>
	printk("Advertising successfully started\n");
     4ac:	4809      	ldr	r0, [pc, #36]	; (4d4 <bt_ready+0x78>)
     4ae:	f00a fbe9 	bl	ac84 <printk>
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
     4b2:	4809      	ldr	r0, [pc, #36]	; (4d8 <bt_ready+0x7c>)
     4b4:	f009 fce6 	bl	9e84 <z_impl_k_sem_give>
     4b8:	e7d6      	b.n	468 <bt_ready+0xc>
     4ba:	bf00      	nop
     4bc:	0000ef29 	.word	0x0000ef29
     4c0:	20004920 	.word	0x20004920
     4c4:	0000ef4d 	.word	0x0000ef4d
     4c8:	0000e808 	.word	0x0000e808
     4cc:	0000e818 	.word	0x0000e818
     4d0:	0000ef6a 	.word	0x0000ef6a
     4d4:	0000ef90 	.word	0x0000ef90
     4d8:	20004c80 	.word	0x20004c80

000004dc <bt_addr_le_to_str.constprop.5>:
 *  @param len Length of data to be copied to user string buffer. Refer to
 *  BT_ADDR_LE_STR_LEN about recommended value.
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
     4dc:	b570      	push	{r4, r5, r6, lr}
				    size_t len)
{
	char type[10];

	switch (addr->type) {
     4de:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
     4e0:	b08a      	sub	sp, #40	; 0x28
     4e2:	4604      	mov	r4, r0
     4e4:	460e      	mov	r6, r1
     4e6:	ad07      	add	r5, sp, #28
	switch (addr->type) {
     4e8:	2b03      	cmp	r3, #3
     4ea:	d820      	bhi.n	52e <bt_addr_le_to_str.constprop.5+0x52>
     4ec:	e8df f003 	tbb	[pc, r3]
     4f0:	1d1b1902 	.word	0x1d1b1902
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
     4f4:	4911      	ldr	r1, [pc, #68]	; (53c <bt_addr_le_to_str.constprop.5+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
     4f6:	4628      	mov	r0, r5
     4f8:	f00b fc74 	bl	bde4 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
     4fc:	7863      	ldrb	r3, [r4, #1]
     4fe:	9505      	str	r5, [sp, #20]
     500:	9304      	str	r3, [sp, #16]
     502:	78a3      	ldrb	r3, [r4, #2]
     504:	4a0e      	ldr	r2, [pc, #56]	; (540 <bt_addr_le_to_str.constprop.5+0x64>)
     506:	9303      	str	r3, [sp, #12]
     508:	78e3      	ldrb	r3, [r4, #3]
     50a:	211e      	movs	r1, #30
     50c:	9302      	str	r3, [sp, #8]
     50e:	7923      	ldrb	r3, [r4, #4]
     510:	4630      	mov	r0, r6
     512:	9301      	str	r3, [sp, #4]
     514:	7963      	ldrb	r3, [r4, #5]
     516:	9300      	str	r3, [sp, #0]
     518:	79a3      	ldrb	r3, [r4, #6]
     51a:	f00a fbc0 	bl	ac9e <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
     51e:	b00a      	add	sp, #40	; 0x28
     520:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
     522:	4908      	ldr	r1, [pc, #32]	; (544 <bt_addr_le_to_str.constprop.5+0x68>)
     524:	e7e7      	b.n	4f6 <bt_addr_le_to_str.constprop.5+0x1a>
		strcpy(type, "public-id");
     526:	4908      	ldr	r1, [pc, #32]	; (548 <bt_addr_le_to_str.constprop.5+0x6c>)
     528:	e7e5      	b.n	4f6 <bt_addr_le_to_str.constprop.5+0x1a>
		strcpy(type, "random-id");
     52a:	4908      	ldr	r1, [pc, #32]	; (54c <bt_addr_le_to_str.constprop.5+0x70>)
     52c:	e7e3      	b.n	4f6 <bt_addr_le_to_str.constprop.5+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
     52e:	4a08      	ldr	r2, [pc, #32]	; (550 <bt_addr_le_to_str.constprop.5+0x74>)
     530:	210a      	movs	r1, #10
     532:	4628      	mov	r0, r5
     534:	f00a fbb3 	bl	ac9e <snprintk>
		break;
     538:	e7e0      	b.n	4fc <bt_addr_le_to_str.constprop.5+0x20>
     53a:	bf00      	nop
     53c:	0000eee4 	.word	0x0000eee4
     540:	0000ef06 	.word	0x0000ef06
     544:	0000eeeb 	.word	0x0000eeeb
     548:	0000eef2 	.word	0x0000eef2
     54c:	0000eefc 	.word	0x0000eefc
     550:	0001033d 	.word	0x0001033d

00000554 <connected>:
{
     554:	b510      	push	{r4, lr}
	my_connection = conn;
     556:	4b13      	ldr	r3, [pc, #76]	; (5a4 <connected+0x50>)
{
     558:	b092      	sub	sp, #72	; 0x48
     55a:	4604      	mov	r4, r0
	my_connection = conn;
     55c:	6018      	str	r0, [r3, #0]
	if (err) 
     55e:	b121      	cbz	r1, 56a <connected+0x16>
		printk("Connection failed (err %u)\n", err);
     560:	4811      	ldr	r0, [pc, #68]	; (5a8 <connected+0x54>)
     562:	f00a fb8f 	bl	ac84 <printk>
}
     566:	b012      	add	sp, #72	; 0x48
     568:	bd10      	pop	{r4, pc}
	else if(bt_conn_get_info(conn, &info))
     56a:	a903      	add	r1, sp, #12
     56c:	f005 fe18 	bl	61a0 <bt_conn_get_info>
     570:	b118      	cbz	r0, 57a <connected+0x26>
		printk("Could not parse connection info\n");
     572:	480e      	ldr	r0, [pc, #56]	; (5ac <connected+0x58>)
     574:	f00a fb86 	bl	ac84 <printk>
     578:	e7f5      	b.n	566 <connected+0x12>
		bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
     57a:	4620      	mov	r0, r4
     57c:	f00b feed 	bl	c35a <bt_conn_get_dst>
     580:	a90a      	add	r1, sp, #40	; 0x28
     582:	f7ff ffab 	bl	4dc <bt_addr_le_to_str.constprop.5>
		printk("Connection established!		\n\
     586:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
     58a:	f89d 200d 	ldrb.w	r2, [sp, #13]
     58e:	9301      	str	r3, [sp, #4]
     590:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
     594:	a90a      	add	r1, sp, #40	; 0x28
     596:	9300      	str	r3, [sp, #0]
     598:	4805      	ldr	r0, [pc, #20]	; (5b0 <connected+0x5c>)
     59a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
     59e:	f00a fb71 	bl	ac84 <printk>
     5a2:	e7e0      	b.n	566 <connected+0x12>
     5a4:	20000170 	.word	0x20000170
     5a8:	0000efb2 	.word	0x0000efb2
     5ac:	0000efce 	.word	0x0000efce
     5b0:	0000efef 	.word	0x0000efef

000005b4 <le_param_updated>:
{
     5b4:	b510      	push	{r4, lr}
     5b6:	b092      	sub	sp, #72	; 0x48
	if(bt_conn_get_info(conn, &info))
     5b8:	a903      	add	r1, sp, #12
{
     5ba:	4604      	mov	r4, r0
	if(bt_conn_get_info(conn, &info))
     5bc:	f005 fdf0 	bl	61a0 <bt_conn_get_info>
     5c0:	b120      	cbz	r0, 5cc <le_param_updated+0x18>
		printk("Could not parse connection info\n");
     5c2:	480b      	ldr	r0, [pc, #44]	; (5f0 <le_param_updated+0x3c>)
     5c4:	f00a fb5e 	bl	ac84 <printk>
}
     5c8:	b012      	add	sp, #72	; 0x48
     5ca:	bd10      	pop	{r4, pc}
		bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
     5cc:	4620      	mov	r0, r4
     5ce:	f00b fec4 	bl	c35a <bt_conn_get_dst>
     5d2:	a90a      	add	r1, sp, #40	; 0x28
     5d4:	f7ff ff82 	bl	4dc <bt_addr_le_to_str.constprop.5>
		printk("Connection parameters updated!	\n\
     5d8:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
     5dc:	f8bd 2020 	ldrh.w	r2, [sp, #32]
     5e0:	9300      	str	r3, [sp, #0]
     5e2:	a90a      	add	r1, sp, #40	; 0x28
     5e4:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
     5e8:	4802      	ldr	r0, [pc, #8]	; (5f4 <CONFIG_BT_COMPANY_ID+0x3>)
     5ea:	f00a fb4b 	bl	ac84 <printk>
}
     5ee:	e7eb      	b.n	5c8 <le_param_updated+0x14>
     5f0:	0000efce 	.word	0x0000efce
     5f4:	0000f0b3 	.word	0x0000f0b3

000005f8 <error>:


static void error(void)
{
     5f8:	b508      	push	{r3, lr}
	while (true) {
		printk("Error!\n");
     5fa:	4c04      	ldr	r4, [pc, #16]	; (60c <error+0x14>)
     5fc:	4620      	mov	r0, r4
     5fe:	f00a fb41 	bl	ac84 <printk>
	return z_impl_k_sleep(ms);
     602:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     606:	f009 fc0f 	bl	9e28 <z_impl_k_sleep>
     60a:	e7f7      	b.n	5fc <error+0x4>
     60c:	0000f0ab 	.word	0x0000f0ab

00000610 <main>:

void main(void)
{
	
	int err = 0;
	u32_t number = 0;
     610:	2300      	movs	r3, #0
{
     612:	b513      	push	{r0, r1, r4, lr}

	printk("Starting Nordic BLE peripheral tutorial\n");
     614:	4813      	ldr	r0, [pc, #76]	; (664 <main+0x54>)
	u32_t number = 0;
     616:	9301      	str	r3, [sp, #4]
	printk("Starting Nordic BLE peripheral tutorial\n");
     618:	f00a fb34 	bl	ac84 <printk>

	
	err = bt_enable(bt_ready);
     61c:	4812      	ldr	r0, [pc, #72]	; (668 <main+0x58>)
     61e:	f004 fd71 	bl	5104 <bt_enable>

	if (err) 
     622:	b120      	cbz	r0, 62e <main+0x1e>
	{
		printk("BLE initialization failed\n");
     624:	4811      	ldr	r0, [pc, #68]	; (66c <main+0x5c>)
	if (!err) 
	{
		printk("Bluetooth initialized\n");
	} else 
	{
		printk("BLE initialization did not complete in time\n");
     626:	f00a fb2d 	bl	ac84 <printk>
		error(); //Catch error
     62a:	f7ff ffe5 	bl	5f8 <error>
	return z_impl_k_sem_take(sem, timeout);
     62e:	2164      	movs	r1, #100	; 0x64
     630:	480f      	ldr	r0, [pc, #60]	; (670 <main+0x60>)
     632:	f009 fc53 	bl	9edc <z_impl_k_sem_take>
	if (!err) 
     636:	b998      	cbnz	r0, 660 <main+0x50>
		printk("Bluetooth initialized\n");
     638:	480e      	ldr	r0, [pc, #56]	; (674 <main+0x64>)
     63a:	f00a fb23 	bl	ac84 <printk>
	}

	err = my_service_init();
     63e:	f000 f839 	bl	6b4 <my_service_init>

	for (;;) 
	{
		// Main loop
		my_service_send(my_connection, (u8_t *)&number, sizeof(number));
     642:	4c0d      	ldr	r4, [pc, #52]	; (678 <main+0x68>)
     644:	2204      	movs	r2, #4
     646:	6820      	ldr	r0, [r4, #0]
     648:	eb0d 0102 	add.w	r1, sp, r2
     64c:	f000 f844 	bl	6d8 <my_service_send>
		number++;
     650:	9b01      	ldr	r3, [sp, #4]
     652:	3301      	adds	r3, #1
     654:	9301      	str	r3, [sp, #4]
	return z_impl_k_sleep(ms);
     656:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     65a:	f009 fbe5 	bl	9e28 <z_impl_k_sleep>
     65e:	e7f1      	b.n	644 <main+0x34>
		printk("BLE initialization did not complete in time\n");
     660:	4806      	ldr	r0, [pc, #24]	; (67c <main+0x6c>)
     662:	e7e0      	b.n	626 <main+0x16>
     664:	0000f156 	.word	0x0000f156
     668:	0000045d 	.word	0x0000045d
     66c:	0000f17f 	.word	0x0000f17f
     670:	20004c80 	.word	0x20004c80
     674:	0000f19a 	.word	0x0000f19a
     678:	20000170 	.word	0x20000170
     67c:	0000f1b1 	.word	0x0000f1b1

00000680 <on_cccd_changed>:
}
/* This function is called whenever the CCCD register has been changed by the client*/
void on_cccd_changed(const struct bt_gatt_attr *attr, u16_t value)
{
    ARG_UNUSED(attr);
    switch(value)
     680:	2902      	cmp	r1, #2
     682:	d902      	bls.n	68a <on_cccd_changed+0xa>
        case 0: 
            // Stop sending stuff
            break;
        
        default: 
            printk("Error, CCCD has been set to an invalid value");     
     684:	4801      	ldr	r0, [pc, #4]	; (68c <on_cccd_changed+0xc>)
     686:	f00a bafd 	b.w	ac84 <printk>
    }
}
     68a:	4770      	bx	lr
     68c:	0000f247 	.word	0x0000f247

00000690 <on_receive>:
{
     690:	b510      	push	{r4, lr}
     692:	461c      	mov	r4, r3
	printk("Received data, handle %d, conn %p",
     694:	4602      	mov	r2, r0
     696:	8a09      	ldrh	r1, [r1, #16]
     698:	4802      	ldr	r0, [pc, #8]	; (6a4 <on_receive+0x14>)
     69a:	f00a faf3 	bl	ac84 <printk>
}
     69e:	4620      	mov	r0, r4
     6a0:	bd10      	pop	{r4, pc}
     6a2:	bf00      	nop
     6a4:	0000f274 	.word	0x0000f274

000006a8 <on_sent>:
	printk("Data sent to Address %p", conn);
     6a8:	4601      	mov	r1, r0
     6aa:	4801      	ldr	r0, [pc, #4]	; (6b0 <on_sent+0x8>)
     6ac:	f00a baea 	b.w	ac84 <printk>
     6b0:	0000f296 	.word	0x0000f296

000006b4 <my_service_init>:
{
     6b4:	b508      	push	{r3, lr}
    memset(&data_rx, 0, MAX_TRANSMIT_SIZE);
     6b6:	22f0      	movs	r2, #240	; 0xf0
     6b8:	2100      	movs	r1, #0
     6ba:	4805      	ldr	r0, [pc, #20]	; (6d0 <my_service_init+0x1c>)
     6bc:	f00b fc19 	bl	bef2 <memset>
    memset(&data_tx, 0, MAX_TRANSMIT_SIZE);
     6c0:	22f0      	movs	r2, #240	; 0xf0
     6c2:	2100      	movs	r1, #0
     6c4:	4803      	ldr	r0, [pc, #12]	; (6d4 <my_service_init+0x20>)
     6c6:	f00b fc14 	bl	bef2 <memset>
}
     6ca:	2000      	movs	r0, #0
     6cc:	bd08      	pop	{r3, pc}
     6ce:	bf00      	nop
     6d0:	2000129a 	.word	0x2000129a
     6d4:	2000138a 	.word	0x2000138a

000006d8 <my_service_send>:
);

/* This function sends a notification to a Client with the provided data,
given that the Client Characteristic Control Descripter has been set to Notify (0x1) */
void my_service_send(struct bt_conn *conn, const u8_t *data, uint16_t len)
{
     6d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    to check whether notification has been enabled by the peer or not.
    Attribute table: 0 = Service, 1 = Primary service, 2 = RX, 3 = TX, 4 = CCC.
    */
    const struct bt_gatt_attr *attr = &my_service.attrs[3]; 

    struct bt_gatt_notify_params params = 
     6da:	2300      	movs	r3, #0
{
     6dc:	b08d      	sub	sp, #52	; 0x34
    {
        .uuid   = BT_UUID_MY_SERIVCE_TX,
     6de:	ac01      	add	r4, sp, #4
{
     6e0:	4606      	mov	r6, r0
     6e2:	460f      	mov	r7, r1
     6e4:	46a4      	mov	ip, r4
    struct bt_gatt_notify_params params = 
     6e6:	f8cd 3026 	str.w	r3, [sp, #38]	; 0x26
     6ea:	f8cd 302a 	str.w	r3, [sp, #42]	; 0x2a
     6ee:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
        .uuid   = BT_UUID_MY_SERIVCE_TX,
     6f2:	4b13      	ldr	r3, [pc, #76]	; (740 <my_service_send+0x68>)
     6f4:	f103 0e10 	add.w	lr, r3, #16
     6f8:	4625      	mov	r5, r4
     6fa:	6818      	ldr	r0, [r3, #0]
     6fc:	6859      	ldr	r1, [r3, #4]
     6fe:	3308      	adds	r3, #8
     700:	c503      	stmia	r5!, {r0, r1}
     702:	4573      	cmp	r3, lr
     704:	462c      	mov	r4, r5
     706:	d1f7      	bne.n	6f8 <my_service_send+0x20>
     708:	781b      	ldrb	r3, [r3, #0]
    struct bt_gatt_notify_params params = 
     70a:	490e      	ldr	r1, [pc, #56]	; (744 <my_service_send+0x6c>)
        .uuid   = BT_UUID_MY_SERIVCE_TX,
     70c:	702b      	strb	r3, [r5, #0]
    struct bt_gatt_notify_params params = 
     70e:	4b0e      	ldr	r3, [pc, #56]	; (748 <my_service_send+0x70>)
     710:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
        .len    = len,
        .func   = on_sent
    };

    // Check whether notifications are enabled or not
    if(bt_gatt_is_subscribed(conn, attr, BT_GATT_CCC_NOTIFY)) 
     714:	4630      	mov	r0, r6
     716:	2201      	movs	r2, #1
    struct bt_gatt_notify_params params = 
     718:	f8cd c018 	str.w	ip, [sp, #24]
     71c:	e9cd 1707 	strd	r1, r7, [sp, #28]
     720:	930a      	str	r3, [sp, #40]	; 0x28
    if(bt_gatt_is_subscribed(conn, attr, BT_GATT_CCC_NOTIFY)) 
     722:	f00c fb77 	bl	ce14 <bt_gatt_is_subscribed>
     726:	b148      	cbz	r0, 73c <my_service_send+0x64>
    {
        // Send the notification
	    if(bt_gatt_notify_cb(conn, &params))
     728:	a906      	add	r1, sp, #24
     72a:	4630      	mov	r0, r6
     72c:	f007 fb56 	bl	7ddc <bt_gatt_notify_cb>
     730:	b110      	cbz	r0, 738 <my_service_send+0x60>
        {
            printk("Error, unable to send notification\n");
     732:	4806      	ldr	r0, [pc, #24]	; (74c <my_service_send+0x74>)
        }
    }
    else
    {
        printk("Error, notification not enabled on the selected attribute\n");
     734:	f00a faa6 	bl	ac84 <printk>
    }
}
     738:	b00d      	add	sp, #52	; 0x34
     73a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        printk("Error, notification not enabled on the selected attribute\n");
     73c:	4804      	ldr	r0, [pc, #16]	; (750 <my_service_send+0x78>)
     73e:	e7f9      	b.n	734 <my_service_send+0x5c>
     740:	0000e7f4 	.word	0x0000e7f4
     744:	0000e85c 	.word	0x0000e85c
     748:	000006a9 	.word	0x000006a9
     74c:	0000f1e8 	.word	0x0000f1e8
     750:	0000f20c 	.word	0x0000f20c

00000754 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
     754:	680b      	ldr	r3, [r1, #0]
     756:	3301      	adds	r3, #1
     758:	600b      	str	r3, [r1, #0]
	return _char_out(c);
     75a:	4b01      	ldr	r3, [pc, #4]	; (760 <char_out+0xc>)
     75c:	681b      	ldr	r3, [r3, #0]
     75e:	4718      	bx	r3
     760:	2000495c 	.word	0x2000495c

00000764 <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
     764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     768:	b085      	sub	sp, #20
     76a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
     76c:	469b      	mov	fp, r3
     76e:	2c01      	cmp	r4, #1
     770:	bfb8      	it	lt
     772:	2401      	movlt	r4, #1
     774:	2b01      	cmp	r3, #1
     776:	bf0c      	ite	eq
     778:	2330      	moveq	r3, #48	; 0x30
     77a:	2320      	movne	r3, #32
     77c:	4616      	mov	r6, r2
     77e:	4682      	mov	sl, r0
     780:	4688      	mov	r8, r1
     782:	2501      	movs	r5, #1
     784:	270a      	movs	r7, #10
     786:	2200      	movs	r2, #0
     788:	f8df 906c 	ldr.w	r9, [pc, #108]	; 7f8 <_printk_dec_ulong+0x94>
     78c:	9302      	str	r3, [sp, #8]
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 10) {
		if (found_largest_digit != 0 || remainder >= pos) {
     78e:	fbb6 f3f9 	udiv	r3, r6, r9
     792:	9301      	str	r3, [sp, #4]
     794:	b90a      	cbnz	r2, 79a <_printk_dec_ulong+0x36>
     796:	45b1      	cmp	r9, r6
     798:	d81c      	bhi.n	7d4 <_printk_dec_ulong+0x70>
			found_largest_digit = 1;
			out((int)(remainder / pos + 48), ctx);
     79a:	9b01      	ldr	r3, [sp, #4]
     79c:	4641      	mov	r1, r8
     79e:	f103 0030 	add.w	r0, r3, #48	; 0x30
     7a2:	47d0      	blx	sl
			found_largest_digit = 1;
     7a4:	2201      	movs	r2, #1
			digits++;
     7a6:	3501      	adds	r5, #1
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
		remainder %= pos;
     7a8:	9b01      	ldr	r3, [sp, #4]
		remaining--;
     7aa:	3f01      	subs	r7, #1
		remainder %= pos;
     7ac:	fb09 6613 	mls	r6, r9, r3, r6
		pos /= 10;
     7b0:	230a      	movs	r3, #10
	while (pos >= 10) {
     7b2:	2f01      	cmp	r7, #1
		pos /= 10;
     7b4:	fbb9 f9f3 	udiv	r9, r9, r3
	while (pos >= 10) {
     7b8:	d1e9      	bne.n	78e <_printk_dec_ulong+0x2a>
	}
	out((int)(remainder + 48), ctx);
     7ba:	4641      	mov	r1, r8
     7bc:	f106 0030 	add.w	r0, r6, #48	; 0x30
     7c0:	47d0      	blx	sl

	if (padding == PAD_SPACE_AFTER) {
     7c2:	f1bb 0f03 	cmp.w	fp, #3
     7c6:	d102      	bne.n	7ce <_printk_dec_ulong+0x6a>
		remaining = min_width - digits;
     7c8:	1b64      	subs	r4, r4, r5
		while (remaining-- > 0) {
     7ca:	2c00      	cmp	r4, #0
     7cc:	dc0e      	bgt.n	7ec <_printk_dec_ulong+0x88>
			out(' ', ctx);
		}
	}
}
     7ce:	b005      	add	sp, #20
     7d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
     7d4:	42bc      	cmp	r4, r7
     7d6:	dbe7      	blt.n	7a8 <_printk_dec_ulong+0x44>
				&& padding < PAD_SPACE_AFTER) {
     7d8:	f1bb 0f02 	cmp.w	fp, #2
     7dc:	d8e4      	bhi.n	7a8 <_printk_dec_ulong+0x44>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
     7de:	4641      	mov	r1, r8
     7e0:	9802      	ldr	r0, [sp, #8]
     7e2:	9203      	str	r2, [sp, #12]
			digits++;
     7e4:	3501      	adds	r5, #1
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
     7e6:	47d0      	blx	sl
			digits++;
     7e8:	9a03      	ldr	r2, [sp, #12]
     7ea:	e7dd      	b.n	7a8 <_printk_dec_ulong+0x44>
			out(' ', ctx);
     7ec:	4641      	mov	r1, r8
     7ee:	2020      	movs	r0, #32
     7f0:	47d0      	blx	sl
     7f2:	3c01      	subs	r4, #1
     7f4:	e7e9      	b.n	7ca <_printk_dec_ulong+0x66>
     7f6:	bf00      	nop
     7f8:	3b9aca00 	.word	0x3b9aca00

000007fc <__printk_hook_install>:
	_char_out = fn;
     7fc:	4b01      	ldr	r3, [pc, #4]	; (804 <CONFIG_HEAP_MEM_POOL_SIZE+0x4>)
     7fe:	6018      	str	r0, [r3, #0]
}
     800:	4770      	bx	lr
     802:	bf00      	nop
     804:	2000495c 	.word	0x2000495c

00000808 <vprintk>:
	struct out_context ctx = { 0 };
     808:	2300      	movs	r3, #0
{
     80a:	b507      	push	{r0, r1, r2, lr}
	z_vprintk(char_out, &ctx, fmt, ap);
     80c:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
     80e:	9301      	str	r3, [sp, #4]
	z_vprintk(char_out, &ctx, fmt, ap);
     810:	4803      	ldr	r0, [pc, #12]	; (820 <vprintk+0x18>)
     812:	460b      	mov	r3, r1
     814:	a901      	add	r1, sp, #4
     816:	f00a f8c5 	bl	a9a4 <z_vprintk>
}
     81a:	b003      	add	sp, #12
     81c:	f85d fb04 	ldr.w	pc, [sp], #4
     820:	00000755 	.word	0x00000755

00000824 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
     824:	b530      	push	{r4, r5, lr}
	struct str_context ctx = { str, size, 0 };
     826:	2500      	movs	r5, #0
{
     828:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
     82a:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
     82e:	4604      	mov	r4, r0

	z_vprintk((out_func_t)str_out, &ctx, fmt, ap);
     830:	a901      	add	r1, sp, #4
     832:	4805      	ldr	r0, [pc, #20]	; (848 <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
     834:	9503      	str	r5, [sp, #12]
	z_vprintk((out_func_t)str_out, &ctx, fmt, ap);
     836:	f00a f8b5 	bl	a9a4 <z_vprintk>

	if (ctx.count < ctx.max) {
     83a:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
     83e:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
     840:	bfb8      	it	lt
     842:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
     844:	b005      	add	sp, #20
     846:	bd30      	pop	{r4, r5, pc}
     848:	0000a97f 	.word	0x0000a97f

0000084c <nordicsemi_nrf53_init>:
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
     84c:	f04f 0320 	mov.w	r3, #32
     850:	f3ef 8111 	mrs	r1, BASEPRI
     854:	f383 8811 	msr	BASEPRI, r3
     858:	f3bf 8f6f 	isb	sy
	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_CACHE
#ifdef CONFIG_SOC_NRF5340_CPUAPP
	/* Enable the instruction & data cache */
	NRF_CACHE->ENABLE = CACHE_ENABLE_ENABLE_Msk;
     85c:	2301      	movs	r3, #1
     85e:	4a09      	ldr	r2, [pc, #36]	; (884 <nordicsemi_nrf53_init+0x38>)
     860:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
#endif /* CONFIG_SOC_NRF5340_CPUNET */
#endif

#if defined(CONFIG_SOC_NRF5340_CPUAPP) && \
	!defined(CONFIG_TRUSTED_EXECUTION_NONSECURE)
	*((u32_t *)0x500046D0) = 0x1;
     864:	f502 525b 	add.w	r2, r2, #14016	; 0x36c0
     868:	3210      	adds	r2, #16
#endif

#if defined(CONFIG_SOC_DCDC_NRF53X_APP)
	NRF_REGULATORS->VREGMAIN.DCDCEN = 1;
     86a:	6353      	str	r3, [r2, #52]	; 0x34
	*((u32_t *)0x500046D0) = 0x1;
     86c:	6013      	str	r3, [r2, #0]
#endif
#if defined(CONFIG_SOC_DCDC_NRF53X_NET)
	NRF_REGULATORS->VREGRADIO.DCDCEN = 1;
     86e:	f8c2 3234 	str.w	r3, [r2, #564]	; 0x234
#endif
#if defined(CONFIG_SOC_DCDC_NRF53X_HV)
	NRF_REGULATORS->VREGH.DCDCEN = 1;
     872:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     876:	f381 8811 	msr	BASEPRI, r1
     87a:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
     87e:	2000      	movs	r0, #0
     880:	4770      	bx	lr
     882:	bf00      	nop
     884:	50001000 	.word	0x50001000

00000888 <tc_aes128_set_encrypt_key>:

#define subbyte(a, o)(sbox[((a) >> (o))&0xff] << (o))
#define subword(a)(subbyte(a, 24)|subbyte(a, 16)|subbyte(a, 8)|subbyte(a, 0))

int tc_aes128_set_encrypt_key(TCAesKeySched_t s, const uint8_t *k)
{
     888:	b5f0      	push	{r4, r5, r6, r7, lr}
     88a:	4607      	mov	r7, r0
     88c:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
     88e:	4e27      	ldr	r6, [pc, #156]	; (92c <tc_aes128_set_encrypt_key+0xa4>)
     890:	ad01      	add	r5, sp, #4
{
     892:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
     894:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
     896:	c50f      	stmia	r5!, {r0, r1, r2, r3}
     898:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
     89a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
     89c:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
     8a0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
		0x20000000, 0x40000000, 0x80000000, 0x1b000000, 0x36000000
	};
	unsigned int i;
	unsigned int t;

	if (s == (TCAesKeySched_t) 0) {
     8a4:	2f00      	cmp	r7, #0
     8a6:	d03d      	beq.n	924 <tc_aes128_set_encrypt_key+0x9c>
		return TC_CRYPTO_FAIL;
	} else if (k == (const uint8_t *) 0) {
     8a8:	2c00      	cmp	r4, #0
     8aa:	d03d      	beq.n	928 <tc_aes128_set_encrypt_key+0xa0>
     8ac:	1f38      	subs	r0, r7, #4
     8ae:	4602      	mov	r2, r0
     8b0:	4621      	mov	r1, r4
     8b2:	3410      	adds	r4, #16
		return TC_CRYPTO_FAIL;
	}

	for (i = 0; i < Nk; ++i) {
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
     8b4:	784b      	ldrb	r3, [r1, #1]
     8b6:	780d      	ldrb	r5, [r1, #0]
     8b8:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
     8ba:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
     8be:	78cd      	ldrb	r5, [r1, #3]
     8c0:	3104      	adds	r1, #4
     8c2:	432b      	orrs	r3, r5
     8c4:	f811 5c02 	ldrb.w	r5, [r1, #-2]
	for (i = 0; i < Nk; ++i) {
     8c8:	428c      	cmp	r4, r1
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
     8ca:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
     8ce:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
     8d2:	d1ef      	bne.n	8b4 <tc_aes128_set_encrypt_key+0x2c>
     8d4:	2104      	movs	r1, #4
	}

	for (; i < (Nb * (Nr + 1)); ++i) {
		t = s->words[i-1];
		if ((i % Nk) == 0) {
			t = subword(rotword(t)) ^ rconst[i/Nk];
     8d6:	4c16      	ldr	r4, [pc, #88]	; (930 <tc_aes128_set_encrypt_key+0xa8>)
		if ((i % Nk) == 0) {
     8d8:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
     8da:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
     8dc:	d118      	bne.n	910 <tc_aes128_set_encrypt_key+0x88>
	return (((a) >> 24)|((a) << 8));
     8de:	ea4f 6333 	mov.w	r3, r3, ror #24
			t = subword(rotword(t)) ^ rconst[i/Nk];
     8e2:	0e1a      	lsrs	r2, r3, #24
     8e4:	5ca5      	ldrb	r5, [r4, r2]
     8e6:	b2da      	uxtb	r2, r3
     8e8:	5ca2      	ldrb	r2, [r4, r2]
     8ea:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
     8ee:	f3c3 4507 	ubfx	r5, r3, #16, #8
     8f2:	5d65      	ldrb	r5, [r4, r5]
     8f4:	f3c3 2307 	ubfx	r3, r3, #8, #8
     8f8:	5ce3      	ldrb	r3, [r4, r3]
     8fa:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
     8fe:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
     902:	ad0c      	add	r5, sp, #48	; 0x30
     904:	f021 0303 	bic.w	r3, r1, #3
     908:	442b      	add	r3, r5
     90a:	f853 3c2c 	ldr.w	r3, [r3, #-44]
     90e:	4053      	eors	r3, r2
		}
		s->words[i] = s->words[i-Nk] ^ t;
     910:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
     914:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
     916:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
     918:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
     91a:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
     91c:	d1dc      	bne.n	8d8 <tc_aes128_set_encrypt_key+0x50>
	}

	return TC_CRYPTO_SUCCESS;
     91e:	2001      	movs	r0, #1
}
     920:	b00d      	add	sp, #52	; 0x34
     922:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
     924:	4638      	mov	r0, r7
     926:	e7fb      	b.n	920 <tc_aes128_set_encrypt_key+0x98>
     928:	4620      	mov	r0, r4
     92a:	e7f9      	b.n	920 <tc_aes128_set_encrypt_key+0x98>
     92c:	0000e78c 	.word	0x0000e78c
     930:	0000f2b2 	.word	0x0000f2b2

00000934 <tc_aes_encrypt>:
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
	(void) _copy(s, sizeof(t), t, sizeof(t));
}

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
     934:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     938:	4615      	mov	r5, r2
     93a:	b089      	sub	sp, #36	; 0x24
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
     93c:	4607      	mov	r7, r0
     93e:	2800      	cmp	r0, #0
     940:	d059      	beq.n	9f6 <tc_aes_encrypt+0xc2>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
     942:	2900      	cmp	r1, #0
     944:	d05a      	beq.n	9fc <tc_aes_encrypt+0xc8>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
     946:	2a00      	cmp	r2, #0
     948:	d05a      	beq.n	a00 <tc_aes_encrypt+0xcc>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
     94a:	2310      	movs	r3, #16
     94c:	460a      	mov	r2, r1
     94e:	4668      	mov	r0, sp
     950:	4619      	mov	r1, r3
		s[i] = sbox[s[i]];
     952:	f8df 90b0 	ldr.w	r9, [pc, #176]	; a04 <tc_aes_encrypt+0xd0>
	(void)_copy(state, sizeof(state), in, sizeof(state));
     956:	f00a f9d7 	bl	ad08 <_copy>
	add_round_key(state, s->words);
     95a:	4629      	mov	r1, r5
     95c:	4668      	mov	r0, sp
     95e:	f00a f9eb 	bl	ad38 <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
     962:	46c8      	mov	r8, r9
     964:	f105 0610 	add.w	r6, r5, #16
     968:	35a0      	adds	r5, #160	; 0xa0
     96a:	466c      	mov	r4, sp
{
     96c:	466a      	mov	r2, sp
     96e:	2310      	movs	r3, #16
		s[i] = sbox[s[i]];
     970:	7811      	ldrb	r1, [r2, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
     972:	3b01      	subs	r3, #1
		s[i] = sbox[s[i]];
     974:	f819 1001 	ldrb.w	r1, [r9, r1]
     978:	f802 1b01 	strb.w	r1, [r2], #1
	for (i = 0; i < (Nb * Nk); ++i) {
     97c:	d1f8      	bne.n	970 <tc_aes_encrypt+0x3c>
		sub_bytes(state);
		shift_rows(state);
     97e:	4668      	mov	r0, sp
     980:	f00a fa1f 	bl	adc2 <shift_rows>
	mult_row_column(t, s);
     984:	4669      	mov	r1, sp
     986:	a804      	add	r0, sp, #16
     988:	f00a fa54 	bl	ae34 <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
     98c:	a901      	add	r1, sp, #4
     98e:	a805      	add	r0, sp, #20
     990:	f00a fa50 	bl	ae34 <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
     994:	a902      	add	r1, sp, #8
     996:	a806      	add	r0, sp, #24
     998:	f00a fa4c 	bl	ae34 <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
     99c:	a903      	add	r1, sp, #12
     99e:	a807      	add	r0, sp, #28
     9a0:	f00a fa48 	bl	ae34 <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
     9a4:	2310      	movs	r3, #16
     9a6:	4668      	mov	r0, sp
     9a8:	4619      	mov	r1, r3
     9aa:	eb0d 0203 	add.w	r2, sp, r3
     9ae:	f00a f9ab 	bl	ad08 <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
     9b2:	4631      	mov	r1, r6
     9b4:	4668      	mov	r0, sp
     9b6:	3610      	adds	r6, #16
     9b8:	f00a f9be 	bl	ad38 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
     9bc:	42ae      	cmp	r6, r5
     9be:	d1d4      	bne.n	96a <tc_aes_encrypt+0x36>
     9c0:	2610      	movs	r6, #16
		s[i] = sbox[s[i]];
     9c2:	7823      	ldrb	r3, [r4, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
     9c4:	3e01      	subs	r6, #1
		s[i] = sbox[s[i]];
     9c6:	f818 3003 	ldrb.w	r3, [r8, r3]
     9ca:	f804 3b01 	strb.w	r3, [r4], #1
	for (i = 0; i < (Nb * Nk); ++i) {
     9ce:	d1f8      	bne.n	9c2 <tc_aes_encrypt+0x8e>
	}

	sub_bytes(state);
	shift_rows(state);
     9d0:	4668      	mov	r0, sp
     9d2:	f00a f9f6 	bl	adc2 <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
     9d6:	4629      	mov	r1, r5
     9d8:	4668      	mov	r0, sp
     9da:	f00a f9ad 	bl	ad38 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
     9de:	2310      	movs	r3, #16
     9e0:	466a      	mov	r2, sp
     9e2:	4619      	mov	r1, r3
     9e4:	4638      	mov	r0, r7
     9e6:	f00a f98f 	bl	ad08 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
     9ea:	4668      	mov	r0, sp
     9ec:	2210      	movs	r2, #16
     9ee:	4631      	mov	r1, r6
     9f0:	f00a f997 	bl	ad22 <_set>

	return TC_CRYPTO_SUCCESS;
     9f4:	2001      	movs	r0, #1
}
     9f6:	b009      	add	sp, #36	; 0x24
     9f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return TC_CRYPTO_FAIL;
     9fc:	4608      	mov	r0, r1
     9fe:	e7fa      	b.n	9f6 <tc_aes_encrypt+0xc2>
     a00:	4610      	mov	r0, r2
     a02:	e7f8      	b.n	9f6 <tc_aes_encrypt+0xc2>
     a04:	0000f2b2 	.word	0x0000f2b2

00000a08 <compress>:
	n |= ((unsigned int)(*((*c)++)));
	return n;
}

static void compress(unsigned int *iv, const uint8_t *data)
{
     a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	unsigned int t1, t2;
	unsigned int work_space[16];
	unsigned int n;
	unsigned int i;

	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
     a0c:	6803      	ldr	r3, [r0, #0]
{
     a0e:	b09d      	sub	sp, #116	; 0x74
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
     a10:	9302      	str	r3, [sp, #8]
     a12:	6843      	ldr	r3, [r0, #4]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
     a14:	2700      	movs	r7, #0
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
     a16:	9303      	str	r3, [sp, #12]
     a18:	6883      	ldr	r3, [r0, #8]
{
     a1a:	9100      	str	r1, [sp, #0]
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
     a1c:	9304      	str	r3, [sp, #16]
     a1e:	68c3      	ldr	r3, [r0, #12]
     a20:	4965      	ldr	r1, [pc, #404]	; (bb8 <compress+0x1b0>)
     a22:	9305      	str	r3, [sp, #20]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
     a24:	6903      	ldr	r3, [r0, #16]
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
     a26:	9c02      	ldr	r4, [sp, #8]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
     a28:	9306      	str	r3, [sp, #24]
     a2a:	6943      	ldr	r3, [r0, #20]
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
     a2c:	e9dd e205 	ldrd	lr, r2, [sp, #20]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
     a30:	9307      	str	r3, [sp, #28]
     a32:	6983      	ldr	r3, [r0, #24]
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
     a34:	e9dd 6a03 	ldrd	r6, sl, [sp, #12]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
     a38:	9308      	str	r3, [sp, #32]
     a3a:	69c3      	ldr	r3, [r0, #28]
     a3c:	e9dd cb07 	ldrd	ip, fp, [sp, #28]
     a40:	4698      	mov	r8, r3
     a42:	9309      	str	r3, [sp, #36]	; 0x24
	n = (((unsigned int)(*((*c)++))) << 24);
     a44:	9b00      	ldr	r3, [sp, #0]
     a46:	59dd      	ldr	r5, [r3, r7]

	for (i = 0; i < 16; ++i) {
		n = BigEndian(&data);
		t1 = work_space[i] = n;
     a48:	ab0c      	add	r3, sp, #48	; 0x30
     a4a:	ba2d      	rev	r5, r5
     a4c:	51dd      	str	r5, [r3, r7]
	return (((a) >> n) | ((a) << (32 - n)));
     a4e:	f851 3b04 	ldr.w	r3, [r1], #4
     a52:	3704      	adds	r7, #4
     a54:	eb05 0903 	add.w	r9, r5, r3
     a58:	ea4f 25f2 	mov.w	r5, r2, ror #11
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
     a5c:	ea85 15b2 	eor.w	r5, r5, r2, ror #6
     a60:	ea85 6572 	eor.w	r5, r5, r2, ror #25
     a64:	444d      	add	r5, r9
     a66:	ea2b 0302 	bic.w	r3, fp, r2
     a6a:	ea02 090c 	and.w	r9, r2, ip
     a6e:	ea83 0309 	eor.w	r3, r3, r9
     a72:	442b      	add	r3, r5
     a74:	4443      	add	r3, r8
		t2 = Sigma0(a) + Maj(a, b, c);
     a76:	ea86 050a 	eor.w	r5, r6, sl
	return (((a) >> n) | ((a) << (32 - n)));
     a7a:	ea4f 3874 	mov.w	r8, r4, ror #13
		t2 = Sigma0(a) + Maj(a, b, c);
     a7e:	ea88 08b4 	eor.w	r8, r8, r4, ror #2
     a82:	4025      	ands	r5, r4
     a84:	ea06 090a 	and.w	r9, r6, sl
     a88:	ea85 0509 	eor.w	r5, r5, r9
     a8c:	ea88 58b4 	eor.w	r8, r8, r4, ror #22
     a90:	44a8      	add	r8, r5
	for (i = 0; i < 16; ++i) {
     a92:	2f40      	cmp	r7, #64	; 0x40
		h = g; g = f; f = e; e = d + t1;
     a94:	eb03 050e 	add.w	r5, r3, lr
		d = c; c = b; b = a; a = t1 + t2;
     a98:	4443      	add	r3, r8
     a9a:	46d6      	mov	lr, sl
     a9c:	46d8      	mov	r8, fp
	for (i = 0; i < 16; ++i) {
     a9e:	d17d      	bne.n	b9c <compress+0x194>
     aa0:	4946      	ldr	r1, [pc, #280]	; (bbc <compress+0x1b4>)
     aa2:	910a      	str	r1, [sp, #40]	; 0x28
     aa4:	2110      	movs	r1, #16
	}

	for ( ; i < 64; ++i) {
		s0 = work_space[(i+1)&0x0f];
     aa6:	1c4f      	adds	r7, r1, #1
     aa8:	f10d 0e70 	add.w	lr, sp, #112	; 0x70
     aac:	970b      	str	r7, [sp, #44]	; 0x2c
     aae:	f007 070f 	and.w	r7, r7, #15
     ab2:	eb0e 0787 	add.w	r7, lr, r7, lsl #2
     ab6:	f857 7c40 	ldr.w	r7, [r7, #-64]
		s0 = sigma0(s0);
		s1 = work_space[(i+14)&0x0f];
		s1 = sigma1(s1);

		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
     aba:	f001 090f 	and.w	r9, r1, #15
	return (((a) >> n) | ((a) << (32 - n)));
     abe:	ea4f 48b7 	mov.w	r8, r7, ror #18
		s0 = work_space[(i+1)&0x0f];
     ac2:	9700      	str	r7, [sp, #0]
		s0 = sigma0(s0);
     ac4:	ea88 18f7 	eor.w	r8, r8, r7, ror #7
		s1 = work_space[(i+14)&0x0f];
     ac8:	f101 070e 	add.w	r7, r1, #14
     acc:	f007 070f 	and.w	r7, r7, #15
     ad0:	eb0e 0787 	add.w	r7, lr, r7, lsl #2
     ad4:	f857 7c40 	ldr.w	r7, [r7, #-64]
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
     ad8:	3109      	adds	r1, #9
	return (((a) >> n) | ((a) << (32 - n)));
     ada:	ea4f 4ef7 	mov.w	lr, r7, ror #19
		s1 = work_space[(i+14)&0x0f];
     ade:	9701      	str	r7, [sp, #4]
		s1 = sigma1(s1);
     ae0:	ea8e 4e77 	eor.w	lr, lr, r7, ror #17
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
     ae4:	f001 010f 	and.w	r1, r1, #15
     ae8:	af1c      	add	r7, sp, #112	; 0x70
     aea:	eb07 0989 	add.w	r9, r7, r9, lsl #2
     aee:	eb07 0181 	add.w	r1, r7, r1, lsl #2
     af2:	f851 1c40 	ldr.w	r1, [r1, #-64]
     af6:	f859 7c40 	ldr.w	r7, [r9, #-64]
     afa:	4439      	add	r1, r7
		s0 = sigma0(s0);
     afc:	9f00      	ldr	r7, [sp, #0]
     afe:	ea88 08d7 	eor.w	r8, r8, r7, lsr #3
		s1 = sigma1(s1);
     b02:	9f01      	ldr	r7, [sp, #4]
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
     b04:	4441      	add	r1, r8
		s1 = sigma1(s1);
     b06:	ea8e 2e97 	eor.w	lr, lr, r7, lsr #10
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
     b0a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
     b0c:	4471      	add	r1, lr
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
     b0e:	f857 eb04 	ldr.w	lr, [r7], #4
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
     b12:	f849 1c40 	str.w	r1, [r9, #-64]
	return (((a) >> n) | ((a) << (32 - n)));
     b16:	ea4f 29f5 	mov.w	r9, r5, ror #11
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
     b1a:	970a      	str	r7, [sp, #40]	; 0x28
     b1c:	ea89 19b5 	eor.w	r9, r9, r5, ror #6
     b20:	ea2c 0705 	bic.w	r7, ip, r5
     b24:	ea05 0802 	and.w	r8, r5, r2
     b28:	ea89 6975 	eor.w	r9, r9, r5, ror #25
     b2c:	ea87 0708 	eor.w	r7, r7, r8
     b30:	444f      	add	r7, r9
     b32:	4477      	add	r7, lr
     b34:	4439      	add	r1, r7
     b36:	4459      	add	r1, fp
	return (((a) >> n) | ((a) << (32 - n)));
     b38:	ea4f 3773 	mov.w	r7, r3, ror #13
		t2 = Sigma0(a) + Maj(a, b, c);
     b3c:	ea84 0b06 	eor.w	fp, r4, r6
     b40:	ea0b 0b03 	and.w	fp, fp, r3
     b44:	ea87 07b3 	eor.w	r7, r7, r3, ror #2
     b48:	ea04 0e06 	and.w	lr, r4, r6
     b4c:	ea87 57b3 	eor.w	r7, r7, r3, ror #22
     b50:	ea8b 0e0e 	eor.w	lr, fp, lr
     b54:	44be      	add	lr, r7
		h = g; g = f; f = e; e = d + t1;
		d = c; c = b; b = a; a = t1 + t2;
     b56:	448e      	add	lr, r1
		h = g; g = f; f = e; e = d + t1;
     b58:	eb01 070a 	add.w	r7, r1, sl
		d = c; c = b; b = a; a = t1 + t2;
     b5c:	990b      	ldr	r1, [sp, #44]	; 0x2c
     b5e:	46b2      	mov	sl, r6
	for ( ; i < 64; ++i) {
     b60:	2940      	cmp	r1, #64	; 0x40
     b62:	46e3      	mov	fp, ip
     b64:	d121      	bne.n	baa <compress+0x1a2>
	}

	iv[0] += a; iv[1] += b; iv[2] += c; iv[3] += d;
     b66:	9902      	ldr	r1, [sp, #8]
     b68:	4471      	add	r1, lr
     b6a:	6001      	str	r1, [r0, #0]
     b6c:	9903      	ldr	r1, [sp, #12]
     b6e:	4419      	add	r1, r3
     b70:	9b04      	ldr	r3, [sp, #16]
     b72:	6041      	str	r1, [r0, #4]
     b74:	4423      	add	r3, r4
     b76:	6083      	str	r3, [r0, #8]
     b78:	9b05      	ldr	r3, [sp, #20]
     b7a:	4433      	add	r3, r6
     b7c:	60c3      	str	r3, [r0, #12]
	iv[4] += e; iv[5] += f; iv[6] += g; iv[7] += h;
     b7e:	9b06      	ldr	r3, [sp, #24]
     b80:	443b      	add	r3, r7
     b82:	6103      	str	r3, [r0, #16]
     b84:	9b07      	ldr	r3, [sp, #28]
     b86:	442b      	add	r3, r5
     b88:	6143      	str	r3, [r0, #20]
     b8a:	9b08      	ldr	r3, [sp, #32]
     b8c:	4413      	add	r3, r2
     b8e:	6183      	str	r3, [r0, #24]
     b90:	9b09      	ldr	r3, [sp, #36]	; 0x24
     b92:	4463      	add	r3, ip
     b94:	61c3      	str	r3, [r0, #28]
}
     b96:	b01d      	add	sp, #116	; 0x74
     b98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     b9c:	46e3      	mov	fp, ip
     b9e:	46b2      	mov	sl, r6
     ba0:	4694      	mov	ip, r2
     ba2:	4626      	mov	r6, r4
		h = g; g = f; f = e; e = d + t1;
     ba4:	462a      	mov	r2, r5
		d = c; c = b; b = a; a = t1 + t2;
     ba6:	461c      	mov	r4, r3
     ba8:	e74c      	b.n	a44 <compress+0x3c>
     baa:	4694      	mov	ip, r2
     bac:	4626      	mov	r6, r4
     bae:	462a      	mov	r2, r5
     bb0:	461c      	mov	r4, r3
		h = g; g = f; f = e; e = d + t1;
     bb2:	463d      	mov	r5, r7
		d = c; c = b; b = a; a = t1 + t2;
     bb4:	4673      	mov	r3, lr
     bb6:	e776      	b.n	aa6 <compress+0x9e>
     bb8:	0000e898 	.word	0x0000e898
     bbc:	0000e8d8 	.word	0x0000e8d8

00000bc0 <tc_sha256_init>:
{
     bc0:	b510      	push	{r4, lr}
	if (s == (TCSha256State_t) 0) {
     bc2:	4604      	mov	r4, r0
     bc4:	b1c8      	cbz	r0, bfa <tc_sha256_init+0x3a>
	_set((uint8_t *) s, 0x00, sizeof(*s));
     bc6:	2270      	movs	r2, #112	; 0x70
     bc8:	2100      	movs	r1, #0
     bca:	f00a f8aa 	bl	ad22 <_set>
	s->iv[1] = 0xbb67ae85;
     bce:	4b0b      	ldr	r3, [pc, #44]	; (bfc <tc_sha256_init+0x3c>)
     bd0:	4a0b      	ldr	r2, [pc, #44]	; (c00 <tc_sha256_init+0x40>)
	s->iv[3] = 0xa54ff53a;
     bd2:	490c      	ldr	r1, [pc, #48]	; (c04 <tc_sha256_init+0x44>)
	s->iv[1] = 0xbb67ae85;
     bd4:	e9c4 2300 	strd	r2, r3, [r4]
	s->iv[3] = 0xa54ff53a;
     bd8:	4b0b      	ldr	r3, [pc, #44]	; (c08 <tc_sha256_init+0x48>)
	s->iv[5] = 0x9b05688c;
     bda:	480c      	ldr	r0, [pc, #48]	; (c0c <tc_sha256_init+0x4c>)
	s->iv[3] = 0xa54ff53a;
     bdc:	e9c4 1302 	strd	r1, r3, [r4, #8]
	s->iv[5] = 0x9b05688c;
     be0:	4b0b      	ldr	r3, [pc, #44]	; (c10 <tc_sha256_init+0x50>)
     be2:	e9c4 0304 	strd	r0, r3, [r4, #16]
	return TC_CRYPTO_SUCCESS;
     be6:	2001      	movs	r0, #1
	s->iv[6] = 0x1f83d9ab;
     be8:	4b0a      	ldr	r3, [pc, #40]	; (c14 <tc_sha256_init+0x54>)
     bea:	61a3      	str	r3, [r4, #24]
	s->iv[7] = 0x5be0cd19;
     bec:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
     bf0:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
     bf4:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
     bf8:	61e3      	str	r3, [r4, #28]
}
     bfa:	bd10      	pop	{r4, pc}
     bfc:	bb67ae85 	.word	0xbb67ae85
     c00:	6a09e667 	.word	0x6a09e667
     c04:	3c6ef372 	.word	0x3c6ef372
     c08:	a54ff53a 	.word	0xa54ff53a
     c0c:	510e527f 	.word	0x510e527f
     c10:	9b05688c 	.word	0x9b05688c
     c14:	1f83d9ab 	.word	0x1f83d9ab

00000c18 <enable_logger>:

K_THREAD_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(struct device *arg)
{
     c18:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
     c1a:	2200      	movs	r2, #0
{
     c1c:	b087      	sub	sp, #28
		k_timer_init(&log_process_thread_timer,
     c1e:	490d      	ldr	r1, [pc, #52]	; (c54 <enable_logger+0x3c>)
     c20:	480d      	ldr	r0, [pc, #52]	; (c58 <enable_logger+0x40>)
     c22:	f00d fa91 	bl	e148 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
     c26:	2400      	movs	r4, #0
     c28:	230e      	movs	r3, #14
     c2a:	4d0c      	ldr	r5, [pc, #48]	; (c5c <enable_logger+0x44>)
     c2c:	e9cd 4302 	strd	r4, r3, [sp, #8]
     c30:	e9cd 4404 	strd	r4, r4, [sp, #16]
     c34:	e9cd 4400 	strd	r4, r4, [sp]
     c38:	4b09      	ldr	r3, [pc, #36]	; (c60 <enable_logger+0x48>)
     c3a:	f44f 7240 	mov.w	r2, #768	; 0x300
     c3e:	4909      	ldr	r1, [pc, #36]	; (c64 <enable_logger+0x4c>)
     c40:	4628      	mov	r0, r5
     c42:	f009 f9c3 	bl	9fcc <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
     c46:	4908      	ldr	r1, [pc, #32]	; (c68 <enable_logger+0x50>)
     c48:	4628      	mov	r0, r5
     c4a:	f00d f99f 	bl	df8c <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
     c4e:	4620      	mov	r0, r4
     c50:	b007      	add	sp, #28
     c52:	bd30      	pop	{r4, r5, pc}
     c54:	00000c6d 	.word	0x00000c6d
     c58:	20000188 	.word	0x20000188
     c5c:	200001d0 	.word	0x200001d0
     c60:	0000102d 	.word	0x0000102d
     c64:	20001698 	.word	0x20001698
     c68:	0000f3b2 	.word	0x0000f3b2

00000c6c <log_process_thread_timer_expiry_fn>:
	z_impl_k_sem_give(sem);
     c6c:	4801      	ldr	r0, [pc, #4]	; (c74 <log_process_thread_timer_expiry_fn+0x8>)
     c6e:	f009 b909 	b.w	9e84 <z_impl_k_sem_give>
     c72:	bf00      	nop
     c74:	20004c98 	.word	0x20004c98

00000c78 <log_core_init>:
{
     c78:	b508      	push	{r3, lr}
		log_msg_pool_init();
     c7a:	f000 fa33 	bl	10e4 <log_msg_pool_init>
		log_list_init(&list);
     c7e:	4809      	ldr	r0, [pc, #36]	; (ca4 <log_core_init+0x2c>)
     c80:	f00a fc3b 	bl	b4fa <log_list_init>
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
     c84:	2304      	movs	r3, #4
     c86:	2228      	movs	r2, #40	; 0x28
     c88:	4907      	ldr	r1, [pc, #28]	; (ca8 <log_core_init+0x30>)
     c8a:	4808      	ldr	r0, [pc, #32]	; (cac <log_core_init+0x34>)
     c8c:	f00c ff48 	bl	db20 <k_mem_slab_init>
		timestamp_func = k_cycle_get_32_wrapper;
     c90:	4b07      	ldr	r3, [pc, #28]	; (cb0 <log_core_init+0x38>)
     c92:	4a08      	ldr	r2, [pc, #32]	; (cb4 <log_core_init+0x3c>)
	log_output_timestamp_freq_set(freq);
     c94:	f44f 4000 	mov.w	r0, #32768	; 0x8000
		timestamp_func = k_cycle_get_32_wrapper;
     c98:	601a      	str	r2, [r3, #0]
}
     c9a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	log_output_timestamp_freq_set(freq);
     c9e:	f000 bc61 	b.w	1564 <log_output_timestamp_freq_set>
     ca2:	bf00      	nop
     ca4:	20000180 	.word	0x20000180
     ca8:	20003ad8 	.word	0x20003ad8
     cac:	200001b4 	.word	0x200001b4
     cb0:	20004960 	.word	0x20004960
     cb4:	0000b539 	.word	0x0000b539

00000cb8 <dropped_notify>:
{
     cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
     cba:	2500      	movs	r5, #0
     cbc:	4b0c      	ldr	r3, [pc, #48]	; (cf0 <dropped_notify+0x38>)
     cbe:	e8d3 7fef 	ldaex	r7, [r3]
     cc2:	e8c3 5fe2 	stlex	r2, r5, [r3]
     cc6:	2a00      	cmp	r2, #0
     cc8:	d1f9      	bne.n	cbe <dropped_notify+0x6>
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
     cca:	4c0a      	ldr	r4, [pc, #40]	; (cf4 <dropped_notify+0x3c>)
     ccc:	4e0a      	ldr	r6, [pc, #40]	; (cf8 <dropped_notify+0x40>)
     cce:	1b36      	subs	r6, r6, r4
     cd0:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
     cd2:	42b5      	cmp	r5, r6
     cd4:	db00      	blt.n	cd8 <dropped_notify+0x20>
}
     cd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
     cd8:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
     cda:	795b      	ldrb	r3, [r3, #5]
     cdc:	b12b      	cbz	r3, cea <dropped_notify+0x32>
	if (backend->api->dropped != NULL) {
     cde:	6823      	ldr	r3, [r4, #0]
     ce0:	68db      	ldr	r3, [r3, #12]
     ce2:	b113      	cbz	r3, cea <dropped_notify+0x32>
		backend->api->dropped(backend, cnt);
     ce4:	4639      	mov	r1, r7
     ce6:	4620      	mov	r0, r4
     ce8:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
     cea:	3501      	adds	r5, #1
     cec:	3410      	adds	r4, #16
     cee:	e7f0      	b.n	cd2 <dropped_notify+0x1a>
     cf0:	20000178 	.word	0x20000178
     cf4:	0000e77c 	.word	0x0000e77c
     cf8:	0000e78c 	.word	0x0000e78c

00000cfc <log_dropped>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
     cfc:	4b04      	ldr	r3, [pc, #16]	; (d10 <log_dropped+0x14>)
     cfe:	e8d3 2fef 	ldaex	r2, [r3]
     d02:	3201      	adds	r2, #1
     d04:	e8c3 2fe1 	stlex	r1, r2, [r3]
     d08:	2900      	cmp	r1, #0
     d0a:	d1f8      	bne.n	cfe <log_dropped+0x2>
}
     d0c:	4770      	bx	lr
     d0e:	bf00      	nop
     d10:	20000178 	.word	0x20000178

00000d14 <log_source_name_get>:
 * @return Source ID.
 */
static inline u32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((u8_t *)data - (u8_t *)__log_const_start)/
     d14:	4a04      	ldr	r2, [pc, #16]	; (d28 <log_source_name_get+0x14>)
     d16:	4b05      	ldr	r3, [pc, #20]	; (d2c <log_source_name_get+0x18>)
     d18:	1a9b      	subs	r3, r3, r2
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
     d1a:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
     d1e:	bf34      	ite	cc
     d20:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
     d24:	2000      	movcs	r0, #0
}
     d26:	4770      	bx	lr
     d28:	0000e6dc 	.word	0x0000e6dc
     d2c:	0000e77c 	.word	0x0000e77c

00000d30 <log_backend_enable>:
	id += backend - log_backend_get(0);
     d30:	4b09      	ldr	r3, [pc, #36]	; (d58 <log_backend_enable+0x28>)
	log_backend_id_set(backend, id);
     d32:	6842      	ldr	r2, [r0, #4]
	id += backend - log_backend_get(0);
     d34:	1ac3      	subs	r3, r0, r3
     d36:	111b      	asrs	r3, r3, #4
     d38:	3301      	adds	r3, #1
{
     d3a:	b510      	push	{r4, lr}
	log_backend_id_set(backend, id);
     d3c:	7113      	strb	r3, [r2, #4]
	backend->cb->active = true;
     d3e:	2201      	movs	r2, #1
	log_backend_activate(backend, ctx);
     d40:	6843      	ldr	r3, [r0, #4]
	if (!backend_attached) {
     d42:	4c06      	ldr	r4, [pc, #24]	; (d5c <log_backend_enable+0x2c>)
     d44:	715a      	strb	r2, [r3, #5]
     d46:	7822      	ldrb	r2, [r4, #0]
	backend->cb->ctx = ctx;
     d48:	6019      	str	r1, [r3, #0]
     d4a:	b912      	cbnz	r2, d52 <log_backend_enable+0x22>
     d4c:	4804      	ldr	r0, [pc, #16]	; (d60 <log_backend_enable+0x30>)
     d4e:	f009 f899 	bl	9e84 <z_impl_k_sem_give>
	backend_attached = true;
     d52:	2301      	movs	r3, #1
     d54:	7023      	strb	r3, [r4, #0]
}
     d56:	bd10      	pop	{r4, pc}
     d58:	0000e77c 	.word	0x0000e77c
     d5c:	2000147a 	.word	0x2000147a
     d60:	20004c98 	.word	0x20004c98

00000d64 <log_init>:
{
     d64:	b570      	push	{r4, r5, r6, lr}
     d66:	4b0f      	ldr	r3, [pc, #60]	; (da4 <log_init+0x40>)
     d68:	e8d3 5fef 	ldaex	r5, [r3]
     d6c:	1c6a      	adds	r2, r5, #1
     d6e:	e8c3 2fe1 	stlex	r1, r2, [r3]
     d72:	2900      	cmp	r1, #0
     d74:	d1f8      	bne.n	d68 <log_init+0x4>
	if (atomic_inc(&initialized) != 0) {
     d76:	b92d      	cbnz	r5, d84 <log_init+0x20>
	return __log_backends_end - __log_backends_start;
     d78:	4c0b      	ldr	r4, [pc, #44]	; (da8 <log_init+0x44>)
     d7a:	4e0c      	ldr	r6, [pc, #48]	; (dac <log_init+0x48>)
     d7c:	1b36      	subs	r6, r6, r4
     d7e:	1136      	asrs	r6, r6, #4
	for (i = 0; i < log_backend_count_get(); i++) {
     d80:	42b5      	cmp	r5, r6
     d82:	db00      	blt.n	d86 <log_init+0x22>
}
     d84:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
     d86:	7b23      	ldrb	r3, [r4, #12]
     d88:	b143      	cbz	r3, d9c <log_init+0x38>
			if (backend->api->init != NULL) {
     d8a:	6823      	ldr	r3, [r4, #0]
     d8c:	695b      	ldr	r3, [r3, #20]
     d8e:	b103      	cbz	r3, d92 <log_init+0x2e>
				backend->api->init();
     d90:	4798      	blx	r3
			log_backend_enable(backend, NULL, CONFIG_LOG_MAX_LEVEL);
     d92:	2204      	movs	r2, #4
     d94:	2100      	movs	r1, #0
     d96:	4620      	mov	r0, r4
     d98:	f7ff ffca 	bl	d30 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
     d9c:	3501      	adds	r5, #1
     d9e:	3410      	adds	r4, #16
     da0:	e7ee      	b.n	d80 <log_init+0x1c>
     da2:	bf00      	nop
     da4:	2000017c 	.word	0x2000017c
     da8:	0000e77c 	.word	0x0000e77c
     dac:	0000e78c 	.word	0x0000e78c

00000db0 <log_strdup>:
	return (((const char *)addr >= (const char *)RO_START) &&
     db0:	4b14      	ldr	r3, [pc, #80]	; (e04 <log_strdup+0x54>)
{
     db2:	b537      	push	{r0, r1, r2, r4, r5, lr}
	return (((const char *)addr >= (const char *)RO_START) &&
     db4:	4298      	cmp	r0, r3
{
     db6:	4604      	mov	r4, r0
	return (((const char *)addr >= (const char *)RO_START) &&
     db8:	d302      	bcc.n	dc0 <log_strdup+0x10>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
     dba:	4b13      	ldr	r3, [pc, #76]	; (e08 <log_strdup+0x58>)
     dbc:	4298      	cmp	r0, r3
     dbe:	d31b      	bcc.n	df8 <log_strdup+0x48>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
     dc0:	2200      	movs	r2, #0
     dc2:	a901      	add	r1, sp, #4
     dc4:	4811      	ldr	r0, [pc, #68]	; (e0c <log_strdup+0x5c>)
     dc6:	f008 fc37 	bl	9638 <k_mem_slab_alloc>
	if (err != 0) {
     dca:	4605      	mov	r5, r0
     dcc:	b9b8      	cbnz	r0, dfe <log_strdup+0x4e>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
     dce:	2201      	movs	r2, #1
     dd0:	9b01      	ldr	r3, [sp, #4]
     dd2:	e8d3 1fef 	ldaex	r1, [r3]
     dd6:	e8c3 2fe0 	stlex	r0, r2, [r3]
     dda:	2800      	cmp	r0, #0
     ddc:	d1f9      	bne.n	dd2 <log_strdup+0x22>
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
     dde:	9801      	ldr	r0, [sp, #4]
     de0:	4621      	mov	r1, r4
     de2:	221f      	movs	r2, #31
     de4:	3004      	adds	r0, #4
     de6:	f00b f807 	bl	bdf8 <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
     dea:	237e      	movs	r3, #126	; 0x7e
     dec:	9c01      	ldr	r4, [sp, #4]
     dee:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	dup->buf[sizeof(dup->buf) - 1] = '\0';
     df2:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
	return dup->buf;
     df6:	3404      	adds	r4, #4
}
     df8:	4620      	mov	r0, r4
     dfa:	b003      	add	sp, #12
     dfc:	bd30      	pop	{r4, r5, pc}
		return (char *)log_strdup_fail_msg;
     dfe:	4c04      	ldr	r4, [pc, #16]	; (e10 <log_strdup+0x60>)
     e00:	e7fa      	b.n	df8 <log_strdup+0x48>
     e02:	bf00      	nop
     e04:	0000e3b8 	.word	0x0000e3b8
     e08:	00010de4 	.word	0x00010de4
     e0c:	200001b4 	.word	0x200001b4
     e10:	0000f3ba 	.word	0x0000f3ba

00000e14 <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (u8_t *)buf);
     e14:	b148      	cbz	r0, e2a <log_is_strdup+0x16>
     e16:	4b05      	ldr	r3, [pc, #20]	; (e2c <log_is_strdup+0x18>)
     e18:	4298      	cmp	r0, r3
     e1a:	d305      	bcc.n	e28 <log_is_strdup+0x14>
     e1c:	33a0      	adds	r3, #160	; 0xa0
     e1e:	4298      	cmp	r0, r3
     e20:	bf2c      	ite	cs
     e22:	2000      	movcs	r0, #0
     e24:	2001      	movcc	r0, #1
     e26:	4770      	bx	lr
     e28:	2000      	movs	r0, #0
}
     e2a:	4770      	bx	lr
     e2c:	20003ad8 	.word	0x20003ad8

00000e30 <z_impl_log_process>:
{
     e30:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!backend_attached && !bypass) {
     e34:	4b44      	ldr	r3, [pc, #272]	; (f48 <z_impl_log_process+0x118>)
{
     e36:	4605      	mov	r5, r0
	if (!backend_attached && !bypass) {
     e38:	781b      	ldrb	r3, [r3, #0]
     e3a:	b903      	cbnz	r3, e3e <z_impl_log_process+0xe>
     e3c:	b340      	cbz	r0, e90 <z_impl_log_process+0x60>
	__asm__ volatile(
     e3e:	f04f 0320 	mov.w	r3, #32
     e42:	f3ef 8611 	mrs	r6, BASEPRI
     e46:	f383 8811 	msr	BASEPRI, r3
     e4a:	f3bf 8f6f 	isb	sy
	msg = log_list_head_get(&list);
     e4e:	483f      	ldr	r0, [pc, #252]	; (f4c <z_impl_log_process+0x11c>)
     e50:	f00a fb63 	bl	b51a <log_list_head_get>
     e54:	4604      	mov	r4, r0
	__asm__ volatile(
     e56:	f386 8811 	msr	BASEPRI, r6
     e5a:	f3bf 8f6f 	isb	sy
	if (msg != NULL) {
     e5e:	b158      	cbz	r0, e78 <z_impl_log_process+0x48>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
     e60:	4b3b      	ldr	r3, [pc, #236]	; (f50 <z_impl_log_process+0x120>)
     e62:	e8d3 2fef 	ldaex	r2, [r3]
     e66:	3a01      	subs	r2, #1
     e68:	e8c3 2fe1 	stlex	r1, r2, [r3]
     e6c:	2900      	cmp	r1, #0
     e6e:	d1f8      	bne.n	e62 <z_impl_log_process+0x32>
	if (!bypass) {
     e70:	b18d      	cbz	r5, e96 <z_impl_log_process+0x66>
	log_msg_put(msg);
     e72:	4620      	mov	r0, r4
     e74:	f00a fc5e 	bl	b734 <log_msg_put>
	if (!bypass && dropped_cnt) {
     e78:	b925      	cbnz	r5, e84 <z_impl_log_process+0x54>
     e7a:	4b36      	ldr	r3, [pc, #216]	; (f54 <z_impl_log_process+0x124>)
     e7c:	681b      	ldr	r3, [r3, #0]
     e7e:	b10b      	cbz	r3, e84 <z_impl_log_process+0x54>
		dropped_notify();
     e80:	f7ff ff1a 	bl	cb8 <dropped_notify>
	return (log_list_head_peek(&list) != NULL);
     e84:	4831      	ldr	r0, [pc, #196]	; (f4c <z_impl_log_process+0x11c>)
     e86:	f00a fb46 	bl	b516 <log_list_head_peek>
     e8a:	1c05      	adds	r5, r0, #0
     e8c:	bf18      	it	ne
     e8e:	2501      	movne	r5, #1
}
     e90:	4628      	mov	r0, r5
     e92:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    !panic_mode) {
     e96:	4b30      	ldr	r3, [pc, #192]	; (f58 <z_impl_log_process+0x128>)
		if (IS_ENABLED(CONFIG_LOG_DETECT_MISSED_STRDUP) &&
     e98:	781b      	ldrb	r3, [r3, #0]
     e9a:	b9ab      	cbnz	r3, ec8 <z_impl_log_process+0x98>
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
     e9c:	7a23      	ldrb	r3, [r4, #8]
	if (!log_msg_is_std(msg)) {
     e9e:	07db      	lsls	r3, r3, #31
     ea0:	d412      	bmi.n	ec8 <z_impl_log_process+0x98>
	msg_str = log_msg_str_get(msg);
     ea2:	f00a fc56 	bl	b752 <log_msg_str_get>
     ea6:	4681      	mov	r9, r0
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
     ea8:	4620      	mov	r0, r4
     eaa:	f00a fc23 	bl	b6f4 <log_msg_nargs_get>
     eae:	4601      	mov	r1, r0
     eb0:	4648      	mov	r0, r9
     eb2:	f00a fb45 	bl	b540 <z_log_get_s_mask>
     eb6:	4607      	mov	r7, r0
	return ((u8_t *)data - (u8_t *)__log_const_start)/
     eb8:	4b28      	ldr	r3, [pc, #160]	; (f5c <z_impl_log_process+0x12c>)
				LOG_ERR(ERR_MSG, idx, msg_str);
     eba:	4a29      	ldr	r2, [pc, #164]	; (f60 <z_impl_log_process+0x130>)
     ebc:	f8df b0b8 	ldr.w	fp, [pc, #184]	; f78 <z_impl_log_process+0x148>
     ec0:	1a9b      	subs	r3, r3, r2
     ec2:	f3c3 0ac9 	ubfx	sl, r3, #3, #10
	while (mask) {
     ec6:	b937      	cbnz	r7, ed6 <z_impl_log_process+0xa6>
     ec8:	4e26      	ldr	r6, [pc, #152]	; (f64 <z_impl_log_process+0x134>)
     eca:	4f27      	ldr	r7, [pc, #156]	; (f68 <z_impl_log_process+0x138>)
     ecc:	f04f 0800 	mov.w	r8, #0
     ed0:	1bbf      	subs	r7, r7, r6
     ed2:	113f      	asrs	r7, r7, #4
     ed4:	e034      	b.n	f40 <z_impl_log_process+0x110>
		idx = 31 - __builtin_clz(mask);
     ed6:	fab7 f687 	clz	r6, r7
     eda:	f1c6 061f 	rsb	r6, r6, #31
		str = (const char *)log_msg_arg_get(msg, idx);
     ede:	4631      	mov	r1, r6
     ee0:	4620      	mov	r0, r4
     ee2:	f00a fc0a 	bl	b6fa <log_msg_arg_get>
	return (((const char *)addr >= (const char *)RO_START) &&
     ee6:	4b21      	ldr	r3, [pc, #132]	; (f6c <z_impl_log_process+0x13c>)
		str = (const char *)log_msg_arg_get(msg, idx);
     ee8:	4602      	mov	r2, r0
	return (((const char *)addr >= (const char *)RO_START) &&
     eea:	4298      	cmp	r0, r3
     eec:	d302      	bcc.n	ef4 <z_impl_log_process+0xc4>
		if (!is_rodata(str) && !log_is_strdup(str) &&
     eee:	4b20      	ldr	r3, [pc, #128]	; (f70 <z_impl_log_process+0x140>)
     ef0:	4298      	cmp	r0, r3
     ef2:	d314      	bcc.n	f1e <z_impl_log_process+0xee>
     ef4:	4610      	mov	r0, r2
     ef6:	f7ff ff8d 	bl	e14 <log_is_strdup>
     efa:	b980      	cbnz	r0, f1e <z_impl_log_process+0xee>
     efc:	4b1d      	ldr	r3, [pc, #116]	; (f74 <z_impl_log_process+0x144>)
     efe:	429a      	cmp	r2, r3
     f00:	d00d      	beq.n	f1e <z_impl_log_process+0xee>
				LOG_ERR(ERR_MSG, idx, msg_str);
     f02:	f028 033f 	bic.w	r3, r8, #63	; 0x3f
     f06:	f043 0301 	orr.w	r3, r3, #1
     f0a:	f363 0807 	bfi	r8, r3, #0, #8
     f0e:	f36a 188f 	bfi	r8, sl, #6, #10
     f12:	4643      	mov	r3, r8
     f14:	464a      	mov	r2, r9
     f16:	4631      	mov	r1, r6
     f18:	4658      	mov	r0, fp
     f1a:	f00a fb52 	bl	b5c2 <log_2>
		mask &= ~BIT(idx);
     f1e:	2301      	movs	r3, #1
     f20:	fa03 f606 	lsl.w	r6, r3, r6
     f24:	ea27 0706 	bic.w	r7, r7, r6
     f28:	e7cd      	b.n	ec6 <z_impl_log_process+0x96>
	return backend->cb->active;
     f2a:	6873      	ldr	r3, [r6, #4]
			if (log_backend_is_active(backend) &&
     f2c:	795b      	ldrb	r3, [r3, #5]
     f2e:	b123      	cbz	r3, f3a <z_impl_log_process+0x10a>
	backend->api->put(backend, msg);
     f30:	6833      	ldr	r3, [r6, #0]
     f32:	4621      	mov	r1, r4
     f34:	681b      	ldr	r3, [r3, #0]
     f36:	4630      	mov	r0, r6
     f38:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
     f3a:	f108 0801 	add.w	r8, r8, #1
     f3e:	3610      	adds	r6, #16
     f40:	45b8      	cmp	r8, r7
     f42:	dbf2      	blt.n	f2a <z_impl_log_process+0xfa>
     f44:	e795      	b.n	e72 <z_impl_log_process+0x42>
     f46:	bf00      	nop
     f48:	2000147a 	.word	0x2000147a
     f4c:	20000180 	.word	0x20000180
     f50:	20000174 	.word	0x20000174
     f54:	20000178 	.word	0x20000178
     f58:	2000147b 	.word	0x2000147b
     f5c:	0000e73c 	.word	0x0000e73c
     f60:	0000e6dc 	.word	0x0000e6dc
     f64:	0000e77c 	.word	0x0000e77c
     f68:	0000e78c 	.word	0x0000e78c
     f6c:	0000e3b8 	.word	0x0000e3b8
     f70:	00010de4 	.word	0x00010de4
     f74:	0000f3ba 	.word	0x0000f3ba
     f78:	0000f3d8 	.word	0x0000f3d8

00000f7c <msg_finalize>:
	msg->hdr.timestamp = timestamp_func();
     f7c:	4b24      	ldr	r3, [pc, #144]	; (1010 <msg_finalize+0x94>)
{
     f7e:	b570      	push	{r4, r5, r6, lr}
	msg->hdr.timestamp = timestamp_func();
     f80:	681b      	ldr	r3, [r3, #0]
	msg->hdr.ids = src_level;
     f82:	8141      	strh	r1, [r0, #10]
{
     f84:	4605      	mov	r5, r0
	msg->hdr.timestamp = timestamp_func();
     f86:	4798      	blx	r3
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
     f88:	4c22      	ldr	r4, [pc, #136]	; (1014 <msg_finalize+0x98>)
     f8a:	60e8      	str	r0, [r5, #12]
     f8c:	e8d4 3fef 	ldaex	r3, [r4]
     f90:	3301      	adds	r3, #1
     f92:	e8c4 3fe2 	stlex	r2, r3, [r4]
     f96:	2a00      	cmp	r2, #0
     f98:	d1f8      	bne.n	f8c <msg_finalize+0x10>
	__asm__ volatile(
     f9a:	f04f 0320 	mov.w	r3, #32
     f9e:	f3ef 8611 	mrs	r6, BASEPRI
     fa2:	f383 8811 	msr	BASEPRI, r3
     fa6:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
     faa:	481b      	ldr	r0, [pc, #108]	; (1018 <msg_finalize+0x9c>)
     fac:	4629      	mov	r1, r5
     fae:	f00a faa8 	bl	b502 <log_list_add_tail>
	__asm__ volatile(
     fb2:	f386 8811 	msr	BASEPRI, r6
     fb6:	f3bf 8f6f 	isb	sy
	if (panic_mode) {
     fba:	4b18      	ldr	r3, [pc, #96]	; (101c <msg_finalize+0xa0>)
     fbc:	781a      	ldrb	r2, [r3, #0]
     fbe:	b17a      	cbz	r2, fe0 <msg_finalize+0x64>
	__asm__ volatile(
     fc0:	f04f 0320 	mov.w	r3, #32
     fc4:	f3ef 8411 	mrs	r4, BASEPRI
     fc8:	f383 8811 	msr	BASEPRI, r3
     fcc:	f3bf 8f6f 	isb	sy
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
     fd0:	2000      	movs	r0, #0
     fd2:	f7ff ff2d 	bl	e30 <z_impl_log_process>
	__asm__ volatile(
     fd6:	f384 8811 	msr	BASEPRI, r4
     fda:	f3bf 8f6f 	isb	sy
}
     fde:	bd70      	pop	{r4, r5, r6, pc}
	} else if (proc_tid != NULL && buffered_cnt == 1) {
     fe0:	490f      	ldr	r1, [pc, #60]	; (1020 <msg_finalize+0xa4>)
     fe2:	6823      	ldr	r3, [r4, #0]
     fe4:	6809      	ldr	r1, [r1, #0]
     fe6:	2900      	cmp	r1, #0
     fe8:	d0f9      	beq.n	fde <msg_finalize+0x62>
     fea:	2b01      	cmp	r3, #1
     fec:	d106      	bne.n	ffc <msg_finalize+0x80>
}
     fee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_impl_k_timer_start(timer, duration, period);
     ff2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
     ff6:	480b      	ldr	r0, [pc, #44]	; (1024 <msg_finalize+0xa8>)
     ff8:	f009 ba38 	b.w	a46c <z_impl_k_timer_start>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
     ffc:	2b0a      	cmp	r3, #10
     ffe:	d1ee      	bne.n	fde <msg_finalize+0x62>
	z_impl_k_timer_stop(timer);
    1000:	4808      	ldr	r0, [pc, #32]	; (1024 <msg_finalize+0xa8>)
    1002:	f00d f8ad 	bl	e160 <z_impl_k_timer_stop>
}
    1006:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_impl_k_sem_give(sem);
    100a:	4807      	ldr	r0, [pc, #28]	; (1028 <msg_finalize+0xac>)
    100c:	f008 bf3a 	b.w	9e84 <z_impl_k_sem_give>
    1010:	20004960 	.word	0x20004960
    1014:	20000174 	.word	0x20000174
    1018:	20000180 	.word	0x20000180
    101c:	2000147b 	.word	0x2000147b
    1020:	2000023c 	.word	0x2000023c
    1024:	20000188 	.word	0x20000188
    1028:	20004c98 	.word	0x20004c98

0000102c <log_process_thread_func>:
{
    102c:	b508      	push	{r3, lr}
	log_init();
    102e:	f7ff fe99 	bl	d64 <log_init>
	return z_impl_k_current_get();
    1032:	f008 ff21 	bl	9e78 <z_impl_k_current_get>
	proc_tid = process_tid;
    1036:	4b0b      	ldr	r3, [pc, #44]	; (1064 <log_process_thread_func+0x38>)
    1038:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    103a:	b130      	cbz	r0, 104a <log_process_thread_func+0x1e>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    103c:	4b0a      	ldr	r3, [pc, #40]	; (1068 <log_process_thread_func+0x3c>)
	    process_tid &&
    103e:	681b      	ldr	r3, [r3, #0]
    1040:	2b09      	cmp	r3, #9
    1042:	dd02      	ble.n	104a <log_process_thread_func+0x1e>
	z_impl_k_sem_give(sem);
    1044:	4809      	ldr	r0, [pc, #36]	; (106c <log_process_thread_func+0x40>)
    1046:	f008 ff1d 	bl	9e84 <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
    104a:	4c08      	ldr	r4, [pc, #32]	; (106c <log_process_thread_func+0x40>)
    104c:	2000      	movs	r0, #0
    104e:	f7ff feef 	bl	e30 <z_impl_log_process>
		if (log_process(false) == false) {
    1052:	2800      	cmp	r0, #0
    1054:	d1fa      	bne.n	104c <log_process_thread_func+0x20>
    1056:	f04f 31ff 	mov.w	r1, #4294967295
    105a:	4620      	mov	r0, r4
    105c:	f008 ff3e 	bl	9edc <z_impl_k_sem_take>
    1060:	e7f4      	b.n	104c <log_process_thread_func+0x20>
    1062:	bf00      	nop
    1064:	2000023c 	.word	0x2000023c
    1068:	20000174 	.word	0x20000174
    106c:	20004c98 	.word	0x20004c98

00001070 <z_impl_log_panic>:
{
    1070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
    1072:	4f0e      	ldr	r7, [pc, #56]	; (10ac <z_impl_log_panic+0x3c>)
    1074:	783d      	ldrb	r5, [r7, #0]
    1076:	b975      	cbnz	r5, 1096 <z_impl_log_panic+0x26>
	log_init();
    1078:	f7ff fe74 	bl	d64 <log_init>
	return __log_backends_end - __log_backends_start;
    107c:	4c0c      	ldr	r4, [pc, #48]	; (10b0 <z_impl_log_panic+0x40>)
    107e:	4e0d      	ldr	r6, [pc, #52]	; (10b4 <z_impl_log_panic+0x44>)
    1080:	1b36      	subs	r6, r6, r4
    1082:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    1084:	42b5      	cmp	r5, r6
    1086:	db07      	blt.n	1098 <z_impl_log_panic+0x28>
    1088:	2000      	movs	r0, #0
    108a:	f7ff fed1 	bl	e30 <z_impl_log_process>
		while (log_process(false) == true) {
    108e:	2800      	cmp	r0, #0
    1090:	d1fa      	bne.n	1088 <z_impl_log_panic+0x18>
	panic_mode = true;
    1092:	2301      	movs	r3, #1
    1094:	703b      	strb	r3, [r7, #0]
}
    1096:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
    1098:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    109a:	795b      	ldrb	r3, [r3, #5]
    109c:	b11b      	cbz	r3, 10a6 <z_impl_log_panic+0x36>
	backend->api->panic(backend);
    109e:	6823      	ldr	r3, [r4, #0]
    10a0:	4620      	mov	r0, r4
    10a2:	691b      	ldr	r3, [r3, #16]
    10a4:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    10a6:	3501      	adds	r5, #1
    10a8:	3410      	adds	r4, #16
    10aa:	e7eb      	b.n	1084 <z_impl_log_panic+0x14>
    10ac:	2000147b 	.word	0x2000147b
    10b0:	0000e77c 	.word	0x0000e77c
    10b4:	0000e78c 	.word	0x0000e78c

000010b8 <log_free>:
{
    10b8:	b507      	push	{r0, r1, r2, lr}
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
    10ba:	3804      	subs	r0, #4
    10bc:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    10be:	e8d0 3fef 	ldaex	r3, [r0]
    10c2:	1e5a      	subs	r2, r3, #1
    10c4:	e8c0 2fe1 	stlex	r1, r2, [r0]
    10c8:	2900      	cmp	r1, #0
    10ca:	d1f8      	bne.n	10be <log_free+0x6>
	if (atomic_dec(&dup->refcount) == 1) {
    10cc:	2b01      	cmp	r3, #1
    10ce:	d103      	bne.n	10d8 <log_free+0x20>
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
    10d0:	a901      	add	r1, sp, #4
    10d2:	4803      	ldr	r0, [pc, #12]	; (10e0 <log_free+0x28>)
    10d4:	f008 fadc 	bl	9690 <k_mem_slab_free>
}
    10d8:	b003      	add	sp, #12
    10da:	f85d fb04 	ldr.w	pc, [sp], #4
    10de:	bf00      	nop
    10e0:	200001b4 	.word	0x200001b4

000010e4 <log_msg_pool_init>:
static u8_t __noinit __aligned(sizeof(void *))
		log_msg_pool_buf[CONFIG_LOG_BUFFER_SIZE];

void log_msg_pool_init(void)
{
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
    10e4:	2320      	movs	r3, #32
    10e6:	4902      	ldr	r1, [pc, #8]	; (10f0 <log_msg_pool_init+0xc>)
    10e8:	461a      	mov	r2, r3
    10ea:	4802      	ldr	r0, [pc, #8]	; (10f4 <log_msg_pool_init+0x10>)
    10ec:	f00c bd18 	b.w	db20 <k_mem_slab_init>
    10f0:	20003b78 	.word	0x20003b78
    10f4:	20000240 	.word	0x20000240

000010f8 <log_msg_no_space_handle>:
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
	union log_msg_chunk *msg = NULL;
    10f8:	2300      	movs	r3, #0
{
    10fa:	b537      	push	{r0, r1, r2, r4, r5, lr}

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			log_dropped();
			err = k_mem_slab_alloc(&log_msg_pool,
    10fc:	4d09      	ldr	r5, [pc, #36]	; (1124 <log_msg_no_space_handle+0x2c>)
	union log_msg_chunk *msg = NULL;
    10fe:	9301      	str	r3, [sp, #4]
    1100:	2001      	movs	r0, #1
    1102:	f7ff fe95 	bl	e30 <z_impl_log_process>
    1106:	4604      	mov	r4, r0
			log_dropped();
    1108:	f7ff fdf8 	bl	cfc <log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
    110c:	2200      	movs	r2, #0
    110e:	a901      	add	r1, sp, #4
    1110:	4628      	mov	r0, r5
    1112:	f008 fa91 	bl	9638 <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
    1116:	b108      	cbz	r0, 111c <log_msg_no_space_handle+0x24>
    1118:	2c00      	cmp	r4, #0
    111a:	d1f1      	bne.n	1100 <log_msg_no_space_handle+0x8>
	} else {
		log_dropped();
	}
	return msg;

}
    111c:	9801      	ldr	r0, [sp, #4]
    111e:	b003      	add	sp, #12
    1120:	bd30      	pop	{r4, r5, pc}
    1122:	bf00      	nop
    1124:	20000240 	.word	0x20000240

00001128 <log_msg_chunk_alloc>:
{
    1128:	b507      	push	{r0, r1, r2, lr}
	union log_msg_chunk *msg = NULL;
    112a:	2200      	movs	r2, #0
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
    112c:	a901      	add	r1, sp, #4
    112e:	4806      	ldr	r0, [pc, #24]	; (1148 <log_msg_chunk_alloc+0x20>)
	union log_msg_chunk *msg = NULL;
    1130:	9201      	str	r2, [sp, #4]
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
    1132:	f008 fa81 	bl	9638 <k_mem_slab_alloc>
	if (err != 0) {
    1136:	b110      	cbz	r0, 113e <log_msg_chunk_alloc+0x16>
		msg = log_msg_no_space_handle();
    1138:	f7ff ffde 	bl	10f8 <log_msg_no_space_handle>
    113c:	9001      	str	r0, [sp, #4]
}
    113e:	9801      	ldr	r0, [sp, #4]
    1140:	b003      	add	sp, #12
    1142:	f85d fb04 	ldr.w	pc, [sp], #4
    1146:	bf00      	nop
    1148:	20000240 	.word	0x20000240

0000114c <msg_free>:
{
    114c:	b5f0      	push	{r4, r5, r6, r7, lr}
    114e:	7a04      	ldrb	r4, [r0, #8]
	}
}

u32_t log_msg_nargs_get(struct log_msg *msg)
{
	return msg->hdr.params.std.nargs;
    1150:	7a46      	ldrb	r6, [r0, #9]
{
    1152:	b085      	sub	sp, #20
	if (log_msg_is_std(msg) && nargs) {
    1154:	f014 0401 	ands.w	r4, r4, #1
{
    1158:	9001      	str	r0, [sp, #4]
	return msg->hdr.params.std.nargs;
    115a:	ea4f 1616 	mov.w	r6, r6, lsr #4
	if (log_msg_is_std(msg) && nargs) {
    115e:	d00e      	beq.n	117e <msg_free+0x32>
	if (msg->hdr.params.generic.ext == 1) {
    1160:	9b01      	ldr	r3, [sp, #4]
    1162:	7a1a      	ldrb	r2, [r3, #8]
    1164:	0792      	lsls	r2, r2, #30
    1166:	d504      	bpl.n	1172 <msg_free+0x26>
		cont_free(msg->payload.ext.next);
    1168:	695b      	ldr	r3, [r3, #20]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    116a:	4c18      	ldr	r4, [pc, #96]	; (11cc <msg_free+0x80>)
    116c:	9303      	str	r3, [sp, #12]
	while (cont != NULL) {
    116e:	9b03      	ldr	r3, [sp, #12]
    1170:	bb2b      	cbnz	r3, 11be <msg_free+0x72>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
    1172:	a901      	add	r1, sp, #4
    1174:	4815      	ldr	r0, [pc, #84]	; (11cc <msg_free+0x80>)
    1176:	f008 fa8b 	bl	9690 <k_mem_slab_free>
}
    117a:	b005      	add	sp, #20
    117c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (log_msg_is_std(msg) && nargs) {
    117e:	2e00      	cmp	r6, #0
    1180:	d0ee      	beq.n	1160 <msg_free+0x14>
		for (i = 0; i < nargs; i++) {
    1182:	4625      	mov	r5, r4
    1184:	e017      	b.n	11b6 <msg_free+0x6a>
			void *buf = (void *)log_msg_arg_get(msg, i);
    1186:	4629      	mov	r1, r5
    1188:	f00a fab7 	bl	b6fa <log_msg_arg_get>
    118c:	4607      	mov	r7, r0
			if (log_is_strdup(buf)) {
    118e:	f7ff fe41 	bl	e14 <log_is_strdup>
    1192:	b178      	cbz	r0, 11b4 <msg_free+0x68>
				if (smask == 0) {
    1194:	b93c      	cbnz	r4, 11a6 <msg_free+0x5a>
					smask = z_log_get_s_mask(
    1196:	9b01      	ldr	r3, [sp, #4]
    1198:	4631      	mov	r1, r6
    119a:	6918      	ldr	r0, [r3, #16]
    119c:	f00a f9d0 	bl	b540 <z_log_get_s_mask>
					if (smask == 0) {
    11a0:	4604      	mov	r4, r0
    11a2:	2800      	cmp	r0, #0
    11a4:	d0dc      	beq.n	1160 <msg_free+0x14>
				if (smask & BIT(i)) {
    11a6:	fa24 f305 	lsr.w	r3, r4, r5
    11aa:	07db      	lsls	r3, r3, #31
    11ac:	d502      	bpl.n	11b4 <msg_free+0x68>
					log_free(buf);
    11ae:	4638      	mov	r0, r7
    11b0:	f7ff ff82 	bl	10b8 <log_free>
		for (i = 0; i < nargs; i++) {
    11b4:	3501      	adds	r5, #1
    11b6:	42ae      	cmp	r6, r5
    11b8:	9801      	ldr	r0, [sp, #4]
    11ba:	d8e4      	bhi.n	1186 <msg_free+0x3a>
    11bc:	e7d0      	b.n	1160 <msg_free+0x14>
		next = cont->next;
    11be:	681d      	ldr	r5, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    11c0:	a903      	add	r1, sp, #12
    11c2:	4620      	mov	r0, r4
    11c4:	f008 fa64 	bl	9690 <k_mem_slab_free>
		cont = next;
    11c8:	9503      	str	r5, [sp, #12]
    11ca:	e7d0      	b.n	116e <msg_free+0x22>
    11cc:	20000240 	.word	0x20000240

000011d0 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *log_output,
			   const char *fmt, ...)
{
    11d0:	b40e      	push	{r1, r2, r3}
    11d2:	b503      	push	{r0, r1, lr}
    11d4:	ab03      	add	r3, sp, #12
    11d6:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(args, fmt);
#if !defined(CONFIG_NEWLIB_LIBC) && !defined(CONFIG_ARCH_POSIX) && \
    defined(CONFIG_LOG_ENABLE_FANCY_OUTPUT_FORMATTING)
	length = z_prf(out_func, (void *)log_output, (char *)fmt, args);
#else
	z_vprintk(out_func, (void *)log_output, fmt, args);
    11da:	4601      	mov	r1, r0
    11dc:	4804      	ldr	r0, [pc, #16]	; (11f0 <print_formatted+0x20>)
	va_start(args, fmt);
    11de:	9301      	str	r3, [sp, #4]
	z_vprintk(out_func, (void *)log_output, fmt, args);
    11e0:	f009 fbe0 	bl	a9a4 <z_vprintk>
#endif
	va_end(args);

	return length;
}
    11e4:	2000      	movs	r0, #0
    11e6:	b002      	add	sp, #8
    11e8:	f85d eb04 	ldr.w	lr, [sp], #4
    11ec:	b003      	add	sp, #12
    11ee:	4770      	bx	lr
    11f0:	0000bafb 	.word	0x0000bafb

000011f4 <prefix_print>:
}

static u32_t prefix_print(const struct log_output *log_output,
			 u32_t flags, bool func_on, u32_t timestamp, u8_t level,
			 u8_t domain_id, u16_t source_id)
{
    11f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (stamp) {
    11f8:	f011 0402 	ands.w	r4, r1, #2
{
    11fc:	b085      	sub	sp, #20
    11fe:	4606      	mov	r6, r0
    1200:	4690      	mov	r8, r2
    1202:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    1206:	f001 0901 	and.w	r9, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    120a:	f001 0508 	and.w	r5, r1, #8
	if (stamp) {
    120e:	d007      	beq.n	1220 <prefix_print+0x2c>
	if (!format) {
    1210:	f011 0f44 	tst.w	r1, #68	; 0x44
    1214:	d137      	bne.n	1286 <prefix_print+0x92>
		length = print_formatted(log_output, "[%08lu] ", timestamp);
    1216:	461a      	mov	r2, r3
    1218:	4932      	ldr	r1, [pc, #200]	; (12e4 <prefix_print+0xf0>)
    121a:	f7ff ffd9 	bl	11d0 <print_formatted>
		length += timestamp_print(log_output, flags, timestamp);
    121e:	4604      	mov	r4, r0
	if (color) {
    1220:	f1b9 0f00 	cmp.w	r9, #0
    1224:	d00a      	beq.n	123c <prefix_print+0x48>
		const char *color = start && (colors[level] != NULL) ?
    1226:	4b30      	ldr	r3, [pc, #192]	; (12e8 <prefix_print+0xf4>)
		print_formatted(log_output, "%s", color);
    1228:	4930      	ldr	r1, [pc, #192]	; (12ec <prefix_print+0xf8>)
		const char *color = start && (colors[level] != NULL) ?
    122a:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
		print_formatted(log_output, "%s", color);
    122e:	4b30      	ldr	r3, [pc, #192]	; (12f0 <prefix_print+0xfc>)
    1230:	4630      	mov	r0, r6
    1232:	2a00      	cmp	r2, #0
    1234:	bf08      	it	eq
    1236:	461a      	moveq	r2, r3
    1238:	f7ff ffca 	bl	11d0 <print_formatted>
	if (level_on) {
    123c:	b13d      	cbz	r5, 124e <prefix_print+0x5a>
		total += print_formatted(log_output, "<%s> ", severity[level]);
    123e:	4b2d      	ldr	r3, [pc, #180]	; (12f4 <prefix_print+0x100>)
    1240:	492d      	ldr	r1, [pc, #180]	; (12f8 <prefix_print+0x104>)
    1242:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
    1246:	4630      	mov	r0, r6
    1248:	f7ff ffc2 	bl	11d0 <print_formatted>
    124c:	4605      	mov	r5, r0
	total += print_formatted(log_output,
    124e:	f1b8 0f00 	cmp.w	r8, #0
    1252:	d044      	beq.n	12de <prefix_print+0xea>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
    1254:	2301      	movs	r3, #1
    1256:	fa03 f707 	lsl.w	r7, r3, r7
	total += print_formatted(log_output,
    125a:	4b28      	ldr	r3, [pc, #160]	; (12fc <prefix_print+0x108>)
    125c:	f017 0f10 	tst.w	r7, #16
    1260:	4f27      	ldr	r7, [pc, #156]	; (1300 <prefix_print+0x10c>)
    1262:	bf18      	it	ne
    1264:	461f      	movne	r7, r3
    1266:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
    126a:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
    126e:	f7ff fd51 	bl	d14 <log_source_name_get>
    1272:	4639      	mov	r1, r7
    1274:	4602      	mov	r2, r0
    1276:	4630      	mov	r0, r6
    1278:	f7ff ffaa 	bl	11d0 <print_formatted>
    127c:	4428      	add	r0, r5
		length += ids_print(log_output, level_on, func_on,
				    domain_id, source_id, level);
	}

	return length;
}
    127e:	4420      	add	r0, r4
    1280:	b005      	add	sp, #20
    1282:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (freq != 0U) {
    1286:	4a1f      	ldr	r2, [pc, #124]	; (1304 <prefix_print+0x110>)
    1288:	6811      	ldr	r1, [r2, #0]
    128a:	b331      	cbz	r1, 12da <prefix_print+0xe6>
		timestamp /= timestamp_div;
    128c:	4a1e      	ldr	r2, [pc, #120]	; (1308 <prefix_print+0x114>)
    128e:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
    1292:	6814      	ldr	r4, [r2, #0]
		ms = (remainder * 1000U) / freq;
    1294:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
		timestamp /= timestamp_div;
    1298:	fbb3 f3f4 	udiv	r3, r3, r4
		seconds = timestamp / freq;
    129c:	fbb3 f4f1 	udiv	r4, r3, r1
		seconds -= hours * 3600U;
    12a0:	fbb4 f2fe 	udiv	r2, r4, lr
    12a4:	fb0e 4e12 	mls	lr, lr, r2, r4
		remainder = timestamp % freq;
    12a8:	fb01 3414 	mls	r4, r1, r4, r3
		ms = (remainder * 1000U) / freq;
    12ac:	fb0c f404 	mul.w	r4, ip, r4
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    12b0:	fbb4 fbf1 	udiv	fp, r4, r1
		mins = seconds / 60U;
    12b4:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    12b8:	fb01 441b 	mls	r4, r1, fp, r4
    12bc:	fb0c f404 	mul.w	r4, ip, r4
		mins = seconds / 60U;
    12c0:	fbbe f3fa 	udiv	r3, lr, sl
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    12c4:	fbb4 f1f1 	udiv	r1, r4, r1
			length = print_formatted(log_output,
    12c8:	e9cd b101 	strd	fp, r1, [sp, #4]
    12cc:	fb0a e113 	mls	r1, sl, r3, lr
    12d0:	9100      	str	r1, [sp, #0]
    12d2:	490e      	ldr	r1, [pc, #56]	; (130c <prefix_print+0x118>)
    12d4:	f7ff ff7c 	bl	11d0 <print_formatted>
    12d8:	e7a1      	b.n	121e <prefix_print+0x2a>
		length = 0;
    12da:	4608      	mov	r0, r1
    12dc:	e79f      	b.n	121e <prefix_print+0x2a>
	total += print_formatted(log_output,
    12de:	4f08      	ldr	r7, [pc, #32]	; (1300 <prefix_print+0x10c>)
    12e0:	e7c1      	b.n	1266 <prefix_print+0x72>
    12e2:	bf00      	nop
    12e4:	0000f454 	.word	0x0000f454
    12e8:	0000e998 	.word	0x0000e998
    12ec:	0000fc94 	.word	0x0000fc94
    12f0:	0000f446 	.word	0x0000f446
    12f4:	0000e9ac 	.word	0x0000e9ac
    12f8:	0000f479 	.word	0x0000f479
    12fc:	0000f450 	.word	0x0000f450
    1300:	0000f44b 	.word	0x0000f44b
    1304:	2000025c 	.word	0x2000025c
    1308:	20000260 	.word	0x20000260
    130c:	0000f45d 	.word	0x0000f45d

00001310 <postfix_print>:

static void postfix_print(const struct log_output *log_output,
			  u32_t flags, u8_t level)
{
    1310:	b538      	push	{r3, r4, r5, lr}
    1312:	460c      	mov	r4, r1
	if (color) {
    1314:	07e1      	lsls	r1, r4, #31
{
    1316:	4605      	mov	r5, r0
	if (color) {
    1318:	d503      	bpl.n	1322 <postfix_print+0x12>
		print_formatted(log_output, "%s", color);
    131a:	4a08      	ldr	r2, [pc, #32]	; (133c <postfix_print+0x2c>)
    131c:	4908      	ldr	r1, [pc, #32]	; (1340 <postfix_print+0x30>)
    131e:	f7ff ff57 	bl	11d0 <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    1322:	06e2      	lsls	r2, r4, #27
    1324:	d408      	bmi.n	1338 <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    1326:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
    1328:	4628      	mov	r0, r5
	color_postfix(log_output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(log_output, flags);
}
    132a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\n");
    132e:	bf4c      	ite	mi
    1330:	4904      	ldrmi	r1, [pc, #16]	; (1344 <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
    1332:	4905      	ldrpl	r1, [pc, #20]	; (1348 <postfix_print+0x38>)
    1334:	f7ff bf4c 	b.w	11d0 <print_formatted>
}
    1338:	bd38      	pop	{r3, r4, r5, pc}
    133a:	bf00      	nop
    133c:	0000f446 	.word	0x0000f446
    1340:	0000fc94 	.word	0x0000fc94
    1344:	0000f154 	.word	0x0000f154
    1348:	0000f437 	.word	0x0000f437

0000134c <hexdump_line_print>:
{
    134c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1350:	4698      	mov	r8, r3
    1352:	9b08      	ldr	r3, [sp, #32]
    1354:	4604      	mov	r4, r0
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    1356:	06dd      	lsls	r5, r3, #27
{
    1358:	460e      	mov	r6, r1
    135a:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    135c:	d405      	bmi.n	136a <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    135e:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
    1360:	bf4c      	ite	mi
    1362:	4929      	ldrmi	r1, [pc, #164]	; (1408 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x80>)
		print_formatted(ctx, "\r\n");
    1364:	4929      	ldrpl	r1, [pc, #164]	; (140c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x84>)
    1366:	f7ff ff33 	bl	11d0 <print_formatted>
{
    136a:	2500      	movs	r5, #0
		print_formatted(log_output, " ");
    136c:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 1414 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x8c>
	for (int i = 0; i < prefix_offset; i++) {
    1370:	4545      	cmp	r5, r8
    1372:	db2a      	blt.n	13ca <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x42>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    1374:	2500      	movs	r5, #0
			print_formatted(log_output, "   ");
    1376:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 1418 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x90>
			print_formatted(log_output, "%02x ", data[i]);
    137a:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 141c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x94>
			print_formatted(log_output, " ");
    137e:	f8df a094 	ldr.w	sl, [pc, #148]	; 1414 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x8c>
		if (i < length) {
    1382:	42bd      	cmp	r5, r7
    1384:	d22e      	bcs.n	13e4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5c>
			print_formatted(log_output, "%02x ", data[i]);
    1386:	5d72      	ldrb	r2, [r6, r5]
    1388:	4649      	mov	r1, r9
    138a:	4620      	mov	r0, r4
    138c:	f7ff ff20 	bl	11d0 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    1390:	3501      	adds	r5, #1
    1392:	2d10      	cmp	r5, #16
    1394:	d11f      	bne.n	13d6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4e>
	print_formatted(log_output, "|");
    1396:	491e      	ldr	r1, [pc, #120]	; (1410 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x88>)
    1398:	4620      	mov	r0, r4
    139a:	f7ff ff19 	bl	11d0 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    139e:	2500      	movs	r5, #0
			print_formatted(log_output, " ");
    13a0:	f8df 8070 	ldr.w	r8, [pc, #112]	; 1414 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x8c>
			print_formatted(log_output, "%c",
    13a4:	f8df 9078 	ldr.w	r9, [pc, #120]	; 1420 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x98>
		if (i < length) {
    13a8:	42af      	cmp	r7, r5
    13aa:	d927      	bls.n	13fc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x74>
			      isprint((int)c) ? c : '.');
    13ac:	5d72      	ldrb	r2, [r6, r5]
			print_formatted(log_output, "%c",
    13ae:	4649      	mov	r1, r9
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isprint(int c)
{
	return (int)((((unsigned)c) >= ' ') &&
    13b0:	f1a2 0320 	sub.w	r3, r2, #32
    13b4:	2b5f      	cmp	r3, #95	; 0x5f
    13b6:	bf28      	it	cs
    13b8:	222e      	movcs	r2, #46	; 0x2e
    13ba:	4620      	mov	r0, r4
    13bc:	f7ff ff08 	bl	11d0 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    13c0:	3501      	adds	r5, #1
    13c2:	2d10      	cmp	r5, #16
    13c4:	d113      	bne.n	13ee <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x66>
}
    13c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, " ");
    13ca:	4649      	mov	r1, r9
    13cc:	4620      	mov	r0, r4
    13ce:	f7ff feff 	bl	11d0 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    13d2:	3501      	adds	r5, #1
    13d4:	e7cc      	b.n	1370 <hexdump_line_print+0x24>
		if (i > 0 && !(i % 8)) {
    13d6:	076a      	lsls	r2, r5, #29
    13d8:	d1d3      	bne.n	1382 <hexdump_line_print+0x36>
			print_formatted(log_output, " ");
    13da:	4651      	mov	r1, sl
    13dc:	4620      	mov	r0, r4
    13de:	f7ff fef7 	bl	11d0 <print_formatted>
    13e2:	e7ce      	b.n	1382 <hexdump_line_print+0x36>
			print_formatted(log_output, "   ");
    13e4:	4641      	mov	r1, r8
    13e6:	4620      	mov	r0, r4
    13e8:	f7ff fef2 	bl	11d0 <print_formatted>
    13ec:	e7d0      	b.n	1390 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x8>
		if (i > 0 && !(i % 8)) {
    13ee:	076b      	lsls	r3, r5, #29
    13f0:	d1da      	bne.n	13a8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x20>
			print_formatted(log_output, " ");
    13f2:	4641      	mov	r1, r8
    13f4:	4620      	mov	r0, r4
    13f6:	f7ff feeb 	bl	11d0 <print_formatted>
    13fa:	e7d5      	b.n	13a8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x20>
			print_formatted(log_output, " ");
    13fc:	4641      	mov	r1, r8
    13fe:	4620      	mov	r0, r4
    1400:	f7ff fee6 	bl	11d0 <print_formatted>
    1404:	e7dc      	b.n	13c0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x38>
    1406:	bf00      	nop
    1408:	0000f154 	.word	0x0000f154
    140c:	0000f437 	.word	0x0000f437
    1410:	0000f414 	.word	0x0000f414
    1414:	00010cb0 	.word	0x00010cb0
    1418:	00010cae 	.word	0x00010cae
    141c:	0000f40e 	.word	0x0000f40e
    1420:	0000f416 	.word	0x0000f416

00001424 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *log_output,
			    struct log_msg *msg,
			    u32_t flags)
{
    1424:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return msg->hdr.ids.level;
    1428:	7a8b      	ldrb	r3, [r1, #10]
    142a:	4617      	mov	r7, r2
		log_output_msg_syst_process(log_output, msg, flags);
		return;
	}

	prefix_offset = raw_string ?
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    142c:	f013 0407 	ands.w	r4, r3, #7
{
    1430:	b08a      	sub	sp, #40	; 0x28
    1432:	4605      	mov	r5, r0
    1434:	460e      	mov	r6, r1
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    1436:	7a0a      	ldrb	r2, [r1, #8]
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    1438:	d01c      	beq.n	1474 <log_output_msg_process+0x50>
    143a:	43d2      	mvns	r2, r2
	return msg->hdr.ids.source_id;
    143c:	8949      	ldrh	r1, [r1, #10]
    143e:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    1442:	0989      	lsrs	r1, r1, #6
    1444:	9102      	str	r1, [sp, #8]
    1446:	e9cd 4300 	strd	r4, r3, [sp]
    144a:	f002 0201 	and.w	r2, r2, #1
    144e:	68f3      	ldr	r3, [r6, #12]
    1450:	4639      	mov	r1, r7
    1452:	f7ff fecf 	bl	11f4 <prefix_print>
    1456:	4681      	mov	r9, r0
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    1458:	7a33      	ldrb	r3, [r6, #8]
					 level, domain_id, source_id);

	if (log_msg_is_std(msg)) {
    145a:	07da      	lsls	r2, r3, #31
    145c:	d40c      	bmi.n	1478 <log_output_msg_process+0x54>
		std_print(msg, log_output);
    145e:	4629      	mov	r1, r5
    1460:	4630      	mov	r0, r6
    1462:	f00a f9e0 	bl	b826 <std_print>
		raw_string_print(msg, log_output);
	} else {
		hexdump_print(msg, log_output, prefix_offset, flags);
	}

	if (!raw_string) {
    1466:	b34c      	cbz	r4, 14bc <log_output_msg_process+0x98>
		postfix_print(log_output, flags, level);
    1468:	4622      	mov	r2, r4
    146a:	4639      	mov	r1, r7
    146c:	4628      	mov	r0, r5
    146e:	f7ff ff4f 	bl	1310 <postfix_print>
    1472:	e023      	b.n	14bc <log_output_msg_process+0x98>
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    1474:	46a1      	mov	r9, r4
    1476:	e7ef      	b.n	1458 <log_output_msg_process+0x34>
	} else if (raw_string) {
    1478:	bb34      	cbnz	r4, 14c8 <log_output_msg_process+0xa4>
	size_t offset = 0;
    147a:	4627      	mov	r7, r4
		length = log_output->size;
    147c:	68eb      	ldr	r3, [r5, #12]
		log_msg_hexdump_data_get(msg, log_output->buf, &length, offset);
    147e:	aa06      	add	r2, sp, #24
		length = log_output->size;
    1480:	9306      	str	r3, [sp, #24]
		log_msg_hexdump_data_get(msg, log_output->buf, &length, offset);
    1482:	68a9      	ldr	r1, [r5, #8]
    1484:	463b      	mov	r3, r7
    1486:	4630      	mov	r0, r6
    1488:	f00a f9b9 	bl	b7fe <log_msg_hexdump_data_get>
		log_output->control_block->offset = length;
    148c:	9a06      	ldr	r2, [sp, #24]
    148e:	686b      	ldr	r3, [r5, #4]
    1490:	601a      	str	r2, [r3, #0]
		if (length != 0) {
    1492:	b13a      	cbz	r2, 14a4 <log_output_msg_process+0x80>
			eol = (log_output->buf[length - 1] == '\n');
    1494:	68ab      	ldr	r3, [r5, #8]
    1496:	4413      	add	r3, r2
    1498:	f813 4c01 	ldrb.w	r4, [r3, #-1]
    149c:	f1a4 030a 	sub.w	r3, r4, #10
    14a0:	425c      	negs	r4, r3
    14a2:	415c      	adcs	r4, r3
		log_output_flush(log_output);
    14a4:	4628      	mov	r0, r5
    14a6:	f00a fb1b 	bl	bae0 <log_output_flush>
		offset += length;
    14aa:	9b06      	ldr	r3, [sp, #24]
    14ac:	441f      	add	r7, r3
	} while (length > 0);
    14ae:	2b00      	cmp	r3, #0
    14b0:	d1e4      	bne.n	147c <log_output_msg_process+0x58>
	if (eol) {
    14b2:	b11c      	cbz	r4, 14bc <log_output_msg_process+0x98>
		print_formatted(log_output, "\r");
    14b4:	4914      	ldr	r1, [pc, #80]	; (1508 <log_output_msg_process+0xe4>)
    14b6:	4628      	mov	r0, r5
    14b8:	f7ff fe8a 	bl	11d0 <print_formatted>
	}

	log_output_flush(log_output);
    14bc:	4628      	mov	r0, r5
    14be:	f00a fb0f 	bl	bae0 <log_output_flush>
}
    14c2:	b00a      	add	sp, #40	; 0x28
    14c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	print_formatted(log_output, "%s", log_msg_str_get(msg));
    14c8:	4630      	mov	r0, r6
    14ca:	f00a f942 	bl	b752 <log_msg_str_get>
    14ce:	490f      	ldr	r1, [pc, #60]	; (150c <log_output_msg_process+0xe8>)
    14d0:	4602      	mov	r2, r0
    14d2:	4628      	mov	r0, r5
    14d4:	f7ff fe7c 	bl	11d0 <print_formatted>
	u32_t offset = 0U;
    14d8:	f04f 0800 	mov.w	r8, #0
		length = sizeof(buf);
    14dc:	f04f 0a10 	mov.w	sl, #16
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    14e0:	aa05      	add	r2, sp, #20
    14e2:	4643      	mov	r3, r8
    14e4:	a906      	add	r1, sp, #24
    14e6:	4630      	mov	r0, r6
		length = sizeof(buf);
    14e8:	f8cd a014 	str.w	sl, [sp, #20]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    14ec:	f00a f987 	bl	b7fe <log_msg_hexdump_data_get>
		if (length) {
    14f0:	9a05      	ldr	r2, [sp, #20]
    14f2:	2a00      	cmp	r2, #0
    14f4:	d0b8      	beq.n	1468 <log_output_msg_process+0x44>
			hexdump_line_print(log_output, buf, length,
    14f6:	464b      	mov	r3, r9
    14f8:	9700      	str	r7, [sp, #0]
    14fa:	a906      	add	r1, sp, #24
    14fc:	4628      	mov	r0, r5
    14fe:	f7ff ff25 	bl	134c <hexdump_line_print>
			offset += length;
    1502:	9b05      	ldr	r3, [sp, #20]
    1504:	4498      	add	r8, r3
    1506:	e7eb      	b.n	14e0 <log_output_msg_process+0xbc>
    1508:	0000f419 	.word	0x0000f419
    150c:	0000fc94 	.word	0x0000fc94

00001510 <log_output_dropped_process>:
	postfix_print(log_output, flags, level);
	log_output_flush(log_output);
}

void log_output_dropped_process(const struct log_output *log_output, u32_t cnt)
{
    1510:	b573      	push	{r0, r1, r4, r5, r6, lr}
	int len;
	static const char prefix[] = DROPPED_COLOR_PREFIX "--- ";
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = log_output->func;
	struct device *dev = (struct device *)log_output->control_block->ctx;
    1512:	e9d0 4300 	ldrd	r4, r3, [r0]
    1516:	685d      	ldr	r5, [r3, #4]

	cnt = MIN(cnt, 9999);
	len = snprintf(buf, sizeof(buf), "%d", cnt);
    1518:	f242 730f 	movw	r3, #9999	; 0x270f
    151c:	428b      	cmp	r3, r1
    151e:	bf28      	it	cs
    1520:	460b      	movcs	r3, r1
    1522:	4a0d      	ldr	r2, [pc, #52]	; (1558 <log_output_dropped_process+0x48>)
    1524:	2105      	movs	r1, #5
    1526:	4668      	mov	r0, sp
    1528:	f001 ff9a 	bl	3460 <snprintf>
    152c:	4606      	mov	r6, r0

	buffer_write(outf, (u8_t *)prefix, sizeof(prefix) - 1, dev);
    152e:	462b      	mov	r3, r5
    1530:	4620      	mov	r0, r4
    1532:	220b      	movs	r2, #11
    1534:	4909      	ldr	r1, [pc, #36]	; (155c <log_output_dropped_process+0x4c>)
    1536:	f00a f969 	bl	b80c <buffer_write>
	buffer_write(outf, buf, len, dev);
    153a:	462b      	mov	r3, r5
    153c:	4632      	mov	r2, r6
    153e:	4669      	mov	r1, sp
    1540:	4620      	mov	r0, r4
    1542:	f00a f963 	bl	b80c <buffer_write>
	buffer_write(outf, (u8_t *)postfix, sizeof(postfix) - 1, dev);
    1546:	462b      	mov	r3, r5
    1548:	221b      	movs	r2, #27
    154a:	4905      	ldr	r1, [pc, #20]	; (1560 <log_output_dropped_process+0x50>)
    154c:	4620      	mov	r0, r4
    154e:	f00a f95d 	bl	b80c <buffer_write>
}
    1552:	b002      	add	sp, #8
    1554:	bd70      	pop	{r4, r5, r6, pc}
    1556:	bf00      	nop
    1558:	00010a6d 	.word	0x00010a6d
    155c:	0000f43a 	.word	0x0000f43a
    1560:	0000f41b 	.word	0x0000f41b

00001564 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(u32_t frequency)
{
	timestamp_div = 1U;
    1564:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    1566:	2100      	movs	r1, #0
	timestamp_div = 1U;
    1568:	4a07      	ldr	r2, [pc, #28]	; (1588 <log_output_timestamp_freq_set+0x24>)
{
    156a:	b510      	push	{r4, lr}
	while (frequency > 1000000) {
    156c:	4c07      	ldr	r4, [pc, #28]	; (158c <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
    156e:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
    1570:	42a0      	cmp	r0, r4
    1572:	d804      	bhi.n	157e <log_output_timestamp_freq_set+0x1a>
    1574:	b101      	cbz	r1, 1578 <log_output_timestamp_freq_set+0x14>
    1576:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    1578:	4b05      	ldr	r3, [pc, #20]	; (1590 <log_output_timestamp_freq_set+0x2c>)
    157a:	6018      	str	r0, [r3, #0]
}
    157c:	bd10      	pop	{r4, pc}
		frequency /= 2U;
    157e:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    1580:	005b      	lsls	r3, r3, #1
    1582:	2101      	movs	r1, #1
    1584:	e7f4      	b.n	1570 <log_output_timestamp_freq_set+0xc>
    1586:	bf00      	nop
    1588:	20000260 	.word	0x20000260
    158c:	000f4240 	.word	0x000f4240
    1590:	2000025c 	.word	0x2000025c

00001594 <panic>:
 * @param log_output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const log_output)
{
	log_output_flush(log_output);
    1594:	4801      	ldr	r0, [pc, #4]	; (159c <panic+0x8>)
    1596:	f00a baa3 	b.w	bae0 <log_output_flush>
    159a:	bf00      	nop
    159c:	0000e9d8 	.word	0x0000e9d8

000015a0 <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const log_output, u32_t cnt)
{
	log_output_dropped_process(log_output, cnt);
    15a0:	4801      	ldr	r0, [pc, #4]	; (15a8 <dropped+0x8>)
    15a2:	f7ff bfb5 	b.w	1510 <log_output_dropped_process>
    15a6:	bf00      	nop
    15a8:	0000e9d8 	.word	0x0000e9d8

000015ac <log_backend_uart_init>:

	log_backend_std_put(&log_output, flag, msg);
}

static void log_backend_uart_init(void)
{
    15ac:	b508      	push	{r3, lr}
	if (z_syscall_trap()) {
		return (struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    15ae:	4803      	ldr	r0, [pc, #12]	; (15bc <log_backend_uart_init+0x10>)
    15b0:	f007 feae 	bl	9310 <z_impl_device_get_binding>
 * @param ctx		User context.
 */
static inline void log_output_ctx_set(const struct log_output *log_output,
				      void *ctx)
{
	log_output->control_block->ctx = ctx;
    15b4:	4b02      	ldr	r3, [pc, #8]	; (15c0 <log_backend_uart_init+0x14>)
    15b6:	6058      	str	r0, [r3, #4]

	dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
	assert(dev);

	log_output_ctx_set(&log_output, dev);
}
    15b8:	bd08      	pop	{r3, pc}
    15ba:	bf00      	nop
    15bc:	0000f49f 	.word	0x0000f49f
    15c0:	2000026c 	.word	0x2000026c

000015c4 <put>:
{
    15c4:	b510      	push	{r4, lr}
    15c6:	460c      	mov	r4, r1
	log_msg_get(msg);
    15c8:	4608      	mov	r0, r1
    15ca:	f00a f88a 	bl	b6e2 <log_msg_get>
	log_output_msg_process(log_output, msg, flags);
    15ce:	4621      	mov	r1, r4
    15d0:	4804      	ldr	r0, [pc, #16]	; (15e4 <put+0x20>)
    15d2:	220f      	movs	r2, #15
    15d4:	f7ff ff26 	bl	1424 <log_output_msg_process>
	log_msg_put(msg);
    15d8:	4620      	mov	r0, r4
}
    15da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    15de:	f00a b8a9 	b.w	b734 <log_msg_put>
    15e2:	bf00      	nop
    15e4:	0000e9d8 	.word	0x0000e9d8

000015e8 <console_out>:
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    15e8:	280a      	cmp	r0, #10
{
    15ea:	b538      	push	{r3, r4, r5, lr}
    15ec:	4604      	mov	r4, r0
    15ee:	4d07      	ldr	r5, [pc, #28]	; (160c <console_out+0x24>)
	if ('\n' == c) {
    15f0:	d104      	bne.n	15fc <console_out+0x14>
    15f2:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->driver_api;

	api->poll_out(dev, out_char);
    15f4:	6843      	ldr	r3, [r0, #4]
    15f6:	210d      	movs	r1, #13
    15f8:	685b      	ldr	r3, [r3, #4]
    15fa:	4798      	blx	r3
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
    15fc:	6828      	ldr	r0, [r5, #0]
    15fe:	6843      	ldr	r3, [r0, #4]
    1600:	b2e1      	uxtb	r1, r4
    1602:	685b      	ldr	r3, [r3, #4]
    1604:	4798      	blx	r3

	return c;
}
    1606:	4620      	mov	r0, r4
    1608:	bd38      	pop	{r3, r4, r5, pc}
    160a:	bf00      	nop
    160c:	20000278 	.word	0x20000278

00001610 <uart_console_hook_install>:
 *
 * @return N/A
 */

void uart_console_hook_install(void)
{
    1610:	b510      	push	{r4, lr}
	__stdout_hook_install(console_out);
    1612:	4c04      	ldr	r4, [pc, #16]	; (1624 <uart_console_hook_install+0x14>)
    1614:	4620      	mov	r0, r4
    1616:	f001 ff1d 	bl	3454 <__stdout_hook_install>
	__printk_hook_install(console_out);
    161a:	4620      	mov	r0, r4
}
    161c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__printk_hook_install(console_out);
    1620:	f7ff b8ec 	b.w	7fc <__printk_hook_install>
    1624:	000015e9 	.word	0x000015e9

00001628 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
    1628:	b508      	push	{r3, lr}
    162a:	4804      	ldr	r0, [pc, #16]	; (163c <uart_console_init+0x14>)
    162c:	f007 fe70 	bl	9310 <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    1630:	4b03      	ldr	r3, [pc, #12]	; (1640 <uart_console_init+0x18>)
    1632:	6018      	str	r0, [r3, #0]
		}
	}
	k_busy_wait(1000000);
#endif

	uart_console_hook_install();
    1634:	f7ff ffec 	bl	1610 <uart_console_hook_install>

	return 0;
}
    1638:	2000      	movs	r0, #0
    163a:	bd08      	pop	{r3, pc}
    163c:	0000f49f 	.word	0x0000f49f
    1640:	20000278 	.word	0x20000278

00001644 <nrf_power_clock_isr>:
	}
#endif
}

void nrf_power_clock_isr(void *arg)
{
    1644:	b508      	push	{r3, lr}
#endif
}

NRF_STATIC_INLINE bool nrf_clock_event_check(NRF_CLOCK_Type const * p_reg, nrf_clock_event_t event)
{
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    1646:	4b11      	ldr	r3, [pc, #68]	; (168c <nrf_power_clock_isr+0x48>)
    1648:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(NRF_CLOCK, evt) &&
    164a:	b16a      	cbz	r2, 1668 <nrf_power_clock_isr+0x24>
    return p_reg->INTENSET & mask;
    164c:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    1650:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
	if (ret) {
    1654:	07d1      	lsls	r1, r2, #31
    1656:	d507      	bpl.n	1668 <nrf_power_clock_isr+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    1658:	2200      	movs	r2, #0
	struct device *dev = DEVICE_GET(clock_nrf);

	if (clock_event_check_and_clean(NRF_CLOCK_EVENT_HFCLKSTARTED,
					NRF_CLOCK_INT_HF_STARTED_MASK)) {
		struct nrf_clock_control_sub_data *data =
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    165a:	480d      	ldr	r0, [pc, #52]	; (1690 <nrf_power_clock_isr+0x4c>)
    165c:	601a      	str	r2, [r3, #0]

		/* Check needed due to anomaly 201:
		 * HFCLKSTARTED may be generated twice.
		 */
		if (!data->started) {
    165e:	6883      	ldr	r3, [r0, #8]
    1660:	7a59      	ldrb	r1, [r3, #9]
    1662:	b909      	cbnz	r1, 1668 <nrf_power_clock_isr+0x24>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    1664:	f00a fabc 	bl	bbe0 <clkstarted_handle>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    1668:	4b0a      	ldr	r3, [pc, #40]	; (1694 <nrf_power_clock_isr+0x50>)
    166a:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(NRF_CLOCK, evt) &&
    166c:	b16a      	cbz	r2, 168a <nrf_power_clock_isr+0x46>
    return p_reg->INTENSET & mask;
    166e:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    1672:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
	if (ret) {
    1676:	0792      	lsls	r2, r2, #30
    1678:	d507      	bpl.n	168a <nrf_power_clock_isr+0x46>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    167a:	2200      	movs	r2, #0
					NRF_CLOCK_INT_LF_STARTED_MASK)) {
		if (IS_ENABLED(
			CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
			z_nrf_clock_calibration_lfclk_started(dev);
		}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    167c:	2101      	movs	r1, #1
    167e:	601a      	str	r2, [r3, #0]
    1680:	4803      	ldr	r0, [pc, #12]	; (1690 <nrf_power_clock_isr+0x4c>)
	usb_power_isr();

	if (IS_ENABLED(CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
		z_nrf_clock_calibration_isr();
	}
}
    1682:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    1686:	f00a baab 	b.w	bbe0 <clkstarted_handle>
}
    168a:	bd08      	pop	{r3, pc}
    168c:	50005100 	.word	0x50005100
    1690:	20004b9c 	.word	0x20004b9c
    1694:	50005104 	.word	0x50005104

00001698 <bt_rpmsg_init>:

static int bt_rpmsg_init(struct device *unused)
{
	ARG_UNUSED(unused);

	return bt_hci_driver_register(&drv);
    1698:	4801      	ldr	r0, [pc, #4]	; (16a0 <bt_rpmsg_init+0x8>)
    169a:	f003 b8a9 	b.w	47f0 <bt_hci_driver_register>
    169e:	bf00      	nop
    16a0:	0000ea1c 	.word	0x0000ea1c

000016a4 <bt_rpmsg_send>:
{
    16a4:	b510      	push	{r4, lr}
	 * pointer to an enum causes issues on qemu_x86 because the true
	 * size is 8-bit, but the enum is 32-bit on qemu_x86. So we put in
	 * a temporary cast to 8-bit to ensure only 8 bits are read from
	 * the pointer.
	 */
	return (enum bt_buf_type)(*(u8_t *)net_buf_user_data(buf));
    16a6:	7d01      	ldrb	r1, [r0, #20]
    16a8:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
    16aa:	b1a1      	cbz	r1, 16d6 <bt_rpmsg_send+0x32>
    16ac:	2902      	cmp	r1, #2
    16ae:	d013      	beq.n	16d8 <bt_rpmsg_send+0x34>
		BT_ERR("Unknown type %u", bt_buf_get_type(buf));
    16b0:	2301      	movs	r3, #1
    16b2:	f04f 0200 	mov.w	r2, #0
    16b6:	4813      	ldr	r0, [pc, #76]	; (1704 <bt_rpmsg_send+0x60>)
    16b8:	f363 0207 	bfi	r2, r3, #0, #8
    16bc:	4b12      	ldr	r3, [pc, #72]	; (1708 <bt_rpmsg_send+0x64>)
    16be:	1a1b      	subs	r3, r3, r0
    16c0:	08db      	lsrs	r3, r3, #3
    16c2:	4812      	ldr	r0, [pc, #72]	; (170c <bt_rpmsg_send+0x68>)
    16c4:	f363 128f 	bfi	r2, r3, #6, #10
		BT_ERR("Failed to send (err %d)", err);
    16c8:	f009 ff67 	bl	b59a <log_1>
	net_buf_unref(buf);
    16cc:	4620      	mov	r0, r4
    16ce:	f006 fe63 	bl	8398 <net_buf_unref>
}
    16d2:	2000      	movs	r0, #0
    16d4:	bd10      	pop	{r4, pc}
		pkt_indicator = RPMSG_CMD;
    16d6:	2101      	movs	r1, #1
	net_buf_push_u8(buf, pkt_indicator);
    16d8:	f104 0008 	add.w	r0, r4, #8
    16dc:	f00b fc8d 	bl	cffa <net_buf_simple_push_u8>
	err = bt_rpmsg_platform_send(buf);
    16e0:	4620      	mov	r0, r4
    16e2:	f000 fab7 	bl	1c54 <bt_rpmsg_platform_send>
	if (err < 0) {
    16e6:	1e01      	subs	r1, r0, #0
    16e8:	daf0      	bge.n	16cc <bt_rpmsg_send+0x28>
		BT_ERR("Failed to send (err %d)", err);
    16ea:	2301      	movs	r3, #1
    16ec:	f04f 0200 	mov.w	r2, #0
    16f0:	4804      	ldr	r0, [pc, #16]	; (1704 <bt_rpmsg_send+0x60>)
    16f2:	f363 0207 	bfi	r2, r3, #0, #8
    16f6:	4b04      	ldr	r3, [pc, #16]	; (1708 <bt_rpmsg_send+0x64>)
    16f8:	1a1b      	subs	r3, r3, r0
    16fa:	08db      	lsrs	r3, r3, #3
    16fc:	f363 128f 	bfi	r2, r3, #6, #10
    1700:	4803      	ldr	r0, [pc, #12]	; (1710 <bt_rpmsg_send+0x6c>)
    1702:	e7e1      	b.n	16c8 <bt_rpmsg_send+0x24>
    1704:	0000e6dc 	.word	0x0000e6dc
    1708:	0000e704 	.word	0x0000e704
    170c:	0000f5ad 	.word	0x0000f5ad
    1710:	0000f5bd 	.word	0x0000f5bd

00001714 <bt_rpmsg_rx>:
{
    1714:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	pkt_indicator = *data++;
    1718:	4680      	mov	r8, r0
{
    171a:	460c      	mov	r4, r1
	pkt_indicator = *data++;
    171c:	f818 1b01 	ldrb.w	r1, [r8], #1
{
    1720:	4606      	mov	r6, r0
	switch (pkt_indicator) {
    1722:	2902      	cmp	r1, #2
	remaining -= sizeof(pkt_indicator);
    1724:	f104 33ff 	add.w	r3, r4, #4294967295
	switch (pkt_indicator) {
    1728:	d06d      	beq.n	1806 <bt_rpmsg_rx+0xf2>
    172a:	2904      	cmp	r1, #4
    172c:	f040 80b8 	bne.w	18a0 <bt_rpmsg_rx+0x18c>
	if (remaining < sizeof(hdr)) {
    1730:	2b01      	cmp	r3, #1
    1732:	d810      	bhi.n	1756 <bt_rpmsg_rx+0x42>
		BT_ERR("Not enough data for event header");
    1734:	2301      	movs	r3, #1
    1736:	f04f 0100 	mov.w	r1, #0
    173a:	4a63      	ldr	r2, [pc, #396]	; (18c8 <bt_rpmsg_rx+0x1b4>)
    173c:	f363 0107 	bfi	r1, r3, #0, #8
    1740:	4b62      	ldr	r3, [pc, #392]	; (18cc <bt_rpmsg_rx+0x1b8>)
    1742:	4863      	ldr	r0, [pc, #396]	; (18d0 <bt_rpmsg_rx+0x1bc>)
    1744:	1a9b      	subs	r3, r3, r2
    1746:	08db      	lsrs	r3, r3, #3
    1748:	f363 118f 	bfi	r1, r3, #6, #10
		BT_ERR("Event payload length is not correct");
    174c:	f009 ff18 	bl	b580 <log_0>
}
    1750:	b002      	add	sp, #8
    1752:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (evt_type) {
    1756:	7843      	ldrb	r3, [r0, #1]
    1758:	2b3e      	cmp	r3, #62	; 0x3e
    175a:	d11c      	bne.n	1796 <bt_rpmsg_rx+0x82>
		switch (subevt_type) {
    175c:	78c7      	ldrb	r7, [r0, #3]
    175e:	1ebb      	subs	r3, r7, #2
    1760:	425f      	negs	r7, r3
    1762:	415f      	adcs	r7, r3
	memcpy((void *)&hdr, data, sizeof(hdr));
    1764:	2202      	movs	r2, #2
    1766:	4641      	mov	r1, r8
    1768:	a801      	add	r0, sp, #4
    176a:	f00a fb98 	bl	be9e <memcpy>
	if (remaining != hdr.len) {
    176e:	f89d 3005 	ldrb.w	r3, [sp, #5]
	remaining -= sizeof(hdr);
    1772:	3c03      	subs	r4, #3
	if (remaining != hdr.len) {
    1774:	429c      	cmp	r4, r3
	data += sizeof(hdr);
    1776:	f106 0603 	add.w	r6, r6, #3
	if (remaining != hdr.len) {
    177a:	d00e      	beq.n	179a <bt_rpmsg_rx+0x86>
		BT_ERR("Event payload length is not correct");
    177c:	2301      	movs	r3, #1
    177e:	f04f 0100 	mov.w	r1, #0
    1782:	4a51      	ldr	r2, [pc, #324]	; (18c8 <bt_rpmsg_rx+0x1b4>)
    1784:	f363 0107 	bfi	r1, r3, #0, #8
    1788:	4b50      	ldr	r3, [pc, #320]	; (18cc <bt_rpmsg_rx+0x1b8>)
    178a:	4852      	ldr	r0, [pc, #328]	; (18d4 <bt_rpmsg_rx+0x1c0>)
    178c:	1a9b      	subs	r3, r3, r2
    178e:	08db      	lsrs	r3, r3, #3
    1790:	f363 118f 	bfi	r1, r3, #6, #10
    1794:	e7da      	b.n	174c <bt_rpmsg_rx+0x38>
		return false;
    1796:	2700      	movs	r7, #0
    1798:	e7e4      	b.n	1764 <bt_rpmsg_rx+0x50>
	buf = bt_buf_get_evt(hdr.evt, discardable, K_NO_WAIT);
    179a:	2200      	movs	r2, #0
    179c:	4639      	mov	r1, r7
    179e:	f89d 0004 	ldrb.w	r0, [sp, #4]
    17a2:	f004 f851 	bl	5848 <bt_buf_get_evt>
	if (!buf) {
    17a6:	4605      	mov	r5, r0
    17a8:	b970      	cbnz	r0, 17c8 <bt_rpmsg_rx+0xb4>
		if (discardable) {
    17aa:	2f00      	cmp	r7, #0
    17ac:	d1d0      	bne.n	1750 <bt_rpmsg_rx+0x3c>
			BT_ERR("No available event buffers!");
    17ae:	2301      	movs	r3, #1
    17b0:	f04f 0100 	mov.w	r1, #0
    17b4:	4a44      	ldr	r2, [pc, #272]	; (18c8 <bt_rpmsg_rx+0x1b4>)
    17b6:	f363 0107 	bfi	r1, r3, #0, #8
    17ba:	4b44      	ldr	r3, [pc, #272]	; (18cc <bt_rpmsg_rx+0x1b8>)
    17bc:	4846      	ldr	r0, [pc, #280]	; (18d8 <bt_rpmsg_rx+0x1c4>)
    17be:	1a9b      	subs	r3, r3, r2
    17c0:	08db      	lsrs	r3, r3, #3
    17c2:	f363 118f 	bfi	r1, r3, #6, #10
    17c6:	e7c1      	b.n	174c <bt_rpmsg_rx+0x38>
	net_buf_add_mem(buf, &hdr, sizeof(hdr));
    17c8:	f100 0808 	add.w	r8, r0, #8
    17cc:	2202      	movs	r2, #2
    17ce:	a901      	add	r1, sp, #4
    17d0:	4640      	mov	r0, r8
    17d2:	f00b fbf9 	bl	cfc8 <net_buf_simple_add_mem>
	*prio = bt_hci_evt_is_prio(hdr.evt);
    17d6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 * @return true if the event can be processed in the RX thread, false
 *         if it cannot.
 */
static inline bool bt_hci_evt_is_prio(u8_t evt)
{
	switch (evt) {
    17da:	2a1a      	cmp	r2, #26
    17dc:	d811      	bhi.n	1802 <bt_rpmsg_rx+0xee>
    17de:	2301      	movs	r3, #1
    17e0:	4093      	lsls	r3, r2
    17e2:	4a3e      	ldr	r2, [pc, #248]	; (18dc <bt_rpmsg_rx+0x1c8>)
    17e4:	4213      	tst	r3, r2
    17e6:	bf14      	ite	ne
    17e8:	2701      	movne	r7, #1
    17ea:	2700      	moveq	r7, #0
	net_buf_add_mem(buf, data, remaining);
    17ec:	4622      	mov	r2, r4
    17ee:	4631      	mov	r1, r6
    17f0:	4640      	mov	r0, r8
    17f2:	f00b fbe9 	bl	cfc8 <net_buf_simple_add_mem>
		if (prio) {
    17f6:	2f00      	cmp	r7, #0
    17f8:	d161      	bne.n	18be <bt_rpmsg_rx+0x1aa>
			bt_recv(buf);
    17fa:	4628      	mov	r0, r5
    17fc:	f002 ff78 	bl	46f0 <bt_recv>
    1800:	e7a6      	b.n	1750 <bt_rpmsg_rx+0x3c>
	case BT_HCI_EVT_NUM_COMPLETED_PACKETS:
	case BT_HCI_EVT_DATA_BUF_OVERFLOW:
#endif
		return true;
	default:
		return false;
    1802:	2700      	movs	r7, #0
    1804:	e7f2      	b.n	17ec <bt_rpmsg_rx+0xd8>
	if (remaining < sizeof(hdr)) {
    1806:	2b03      	cmp	r3, #3
    1808:	d80c      	bhi.n	1824 <bt_rpmsg_rx+0x110>
		BT_ERR("Not enough data for ACL header");
    180a:	2301      	movs	r3, #1
    180c:	f04f 0100 	mov.w	r1, #0
    1810:	4a2d      	ldr	r2, [pc, #180]	; (18c8 <bt_rpmsg_rx+0x1b4>)
    1812:	f363 0107 	bfi	r1, r3, #0, #8
    1816:	4b2d      	ldr	r3, [pc, #180]	; (18cc <bt_rpmsg_rx+0x1b8>)
    1818:	4831      	ldr	r0, [pc, #196]	; (18e0 <bt_rpmsg_rx+0x1cc>)
    181a:	1a9b      	subs	r3, r3, r2
    181c:	08db      	lsrs	r3, r3, #3
    181e:	f363 118f 	bfi	r1, r3, #6, #10
    1822:	e793      	b.n	174c <bt_rpmsg_rx+0x38>
	buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_NO_WAIT);
    1824:	2100      	movs	r1, #0
    1826:	2003      	movs	r0, #3
    1828:	f003 ffd2 	bl	57d0 <bt_buf_get_rx>
	if (buf) {
    182c:	4605      	mov	r5, r0
    182e:	b320      	cbz	r0, 187a <bt_rpmsg_rx+0x166>
		memcpy((void *)&hdr, data, sizeof(hdr));
    1830:	2204      	movs	r2, #4
    1832:	4641      	mov	r1, r8
    1834:	eb0d 0002 	add.w	r0, sp, r2
    1838:	f00a fb31 	bl	be9e <memcpy>
		net_buf_add_mem(buf, &hdr, sizeof(hdr));
    183c:	2204      	movs	r2, #4
    183e:	f105 0708 	add.w	r7, r5, #8
    1842:	eb0d 0102 	add.w	r1, sp, r2
    1846:	4638      	mov	r0, r7
    1848:	f00b fbbe 	bl	cfc8 <net_buf_simple_add_mem>
	if (remaining != sys_le16_to_cpu(hdr.len)) {
    184c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
		remaining -= sizeof(hdr);
    1850:	3c05      	subs	r4, #5
	if (remaining != sys_le16_to_cpu(hdr.len)) {
    1852:	429c      	cmp	r4, r3
    1854:	d01e      	beq.n	1894 <bt_rpmsg_rx+0x180>
		BT_ERR("ACL payload length is not correct");
    1856:	2301      	movs	r3, #1
    1858:	f04f 0100 	mov.w	r1, #0
    185c:	4a1a      	ldr	r2, [pc, #104]	; (18c8 <bt_rpmsg_rx+0x1b4>)
    185e:	f363 0107 	bfi	r1, r3, #0, #8
    1862:	4b1a      	ldr	r3, [pc, #104]	; (18cc <bt_rpmsg_rx+0x1b8>)
    1864:	481f      	ldr	r0, [pc, #124]	; (18e4 <bt_rpmsg_rx+0x1d0>)
    1866:	1a9b      	subs	r3, r3, r2
    1868:	08db      	lsrs	r3, r3, #3
    186a:	f363 118f 	bfi	r1, r3, #6, #10
    186e:	f009 fe87 	bl	b580 <log_0>
		net_buf_unref(buf);
    1872:	4628      	mov	r0, r5
    1874:	f006 fd90 	bl	8398 <net_buf_unref>
	if (buf) {
    1878:	e76a      	b.n	1750 <bt_rpmsg_rx+0x3c>
		BT_ERR("No available ACL buffers!");
    187a:	2301      	movs	r3, #1
    187c:	f04f 0100 	mov.w	r1, #0
    1880:	4a11      	ldr	r2, [pc, #68]	; (18c8 <bt_rpmsg_rx+0x1b4>)
    1882:	f363 0107 	bfi	r1, r3, #0, #8
    1886:	4b11      	ldr	r3, [pc, #68]	; (18cc <bt_rpmsg_rx+0x1b8>)
    1888:	4817      	ldr	r0, [pc, #92]	; (18e8 <bt_rpmsg_rx+0x1d4>)
    188a:	1a9b      	subs	r3, r3, r2
    188c:	08db      	lsrs	r3, r3, #3
    188e:	f363 118f 	bfi	r1, r3, #6, #10
    1892:	e75b      	b.n	174c <bt_rpmsg_rx+0x38>
	net_buf_add_mem(buf, data, remaining);
    1894:	4622      	mov	r2, r4
    1896:	1d71      	adds	r1, r6, #5
    1898:	4638      	mov	r0, r7
    189a:	f00b fb95 	bl	cfc8 <net_buf_simple_add_mem>
	if (buf) {
    189e:	e7ac      	b.n	17fa <bt_rpmsg_rx+0xe6>
		BT_ERR("Unknown HCI type %u", pkt_indicator);
    18a0:	2301      	movs	r3, #1
    18a2:	f04f 0200 	mov.w	r2, #0
    18a6:	4808      	ldr	r0, [pc, #32]	; (18c8 <bt_rpmsg_rx+0x1b4>)
    18a8:	f363 0207 	bfi	r2, r3, #0, #8
    18ac:	4b07      	ldr	r3, [pc, #28]	; (18cc <bt_rpmsg_rx+0x1b8>)
    18ae:	1a1b      	subs	r3, r3, r0
    18b0:	08db      	lsrs	r3, r3, #3
    18b2:	f363 128f 	bfi	r2, r3, #6, #10
    18b6:	480d      	ldr	r0, [pc, #52]	; (18ec <bt_rpmsg_rx+0x1d8>)
    18b8:	f009 fe6f 	bl	b59a <log_1>
		return;
    18bc:	e748      	b.n	1750 <bt_rpmsg_rx+0x3c>
			bt_recv_prio(buf);
    18be:	4628      	mov	r0, r5
    18c0:	f002 ff40 	bl	4744 <bt_recv_prio>
    18c4:	e744      	b.n	1750 <bt_rpmsg_rx+0x3c>
    18c6:	bf00      	nop
    18c8:	0000e6dc 	.word	0x0000e6dc
    18cc:	0000e704 	.word	0x0000e704
    18d0:	0000f4dd 	.word	0x0000f4dd
    18d4:	0000f4fe 	.word	0x0000f4fe
    18d8:	0000f522 	.word	0x0000f522
    18dc:	0408c000 	.word	0x0408c000
    18e0:	0000f53e 	.word	0x0000f53e
    18e4:	0000f577 	.word	0x0000f577
    18e8:	0000f55d 	.word	0x0000f55d
    18ec:	0000f599 	.word	0x0000f599

000018f0 <virtio_set_status>:
	return *(volatile u8_t *)addr;
}

static ALWAYS_INLINE void sys_write8(u8_t data, mem_addr_t addr)
{
	*(volatile u8_t *)addr = data;
    18f0:	4b01      	ldr	r3, [pc, #4]	; (18f8 <virtio_set_status+0x8>)
    18f2:	7019      	strb	r1, [r3, #0]
}

static void virtio_set_status(struct virtio_device *vdev, unsigned char status)
{
	sys_write8(status, VDEV_STATUS_ADDR);
}
    18f4:	4770      	bx	lr
    18f6:	bf00      	nop
    18f8:	20070000 	.word	0x20070000

000018fc <ns_bind_cb>:
{
	rpmsg_destroy_ept(ep);
}

static void ns_bind_cb(struct rpmsg_device *rdev, const char *name, u32_t dest)
{
    18fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	(void)rpmsg_create_ept(&ep,
    18fe:	4b09      	ldr	r3, [pc, #36]	; (1924 <ns_bind_cb+0x28>)
    1900:	9302      	str	r3, [sp, #8]
    1902:	4b09      	ldr	r3, [pc, #36]	; (1928 <ns_bind_cb+0x2c>)
    1904:	e9cd 2300 	strd	r2, r3, [sp]
    1908:	460a      	mov	r2, r1
    190a:	f04f 33ff 	mov.w	r3, #4294967295
    190e:	4601      	mov	r1, r0
    1910:	4806      	ldr	r0, [pc, #24]	; (192c <ns_bind_cb+0x30>)
    1912:	f007 faf1 	bl	8ef8 <rpmsg_create_ept>
	z_impl_k_sem_give(sem);
    1916:	4806      	ldr	r0, [pc, #24]	; (1930 <ns_bind_cb+0x34>)
				dest,
				endpoint_cb,
				rpmsg_service_unbind);

	k_sem_give(&ready_sem);
}
    1918:	b005      	add	sp, #20
    191a:	f85d eb04 	ldr.w	lr, [sp], #4
    191e:	f008 bab1 	b.w	9e84 <z_impl_k_sem_give>
    1922:	bf00      	nop
    1924:	0000bd4d 	.word	0x0000bd4d
    1928:	0000bd51 	.word	0x0000bd51
    192c:	20000304 	.word	0x20000304
    1930:	20004cb0 	.word	0x20004cb0

00001934 <virtio_notify>:
	status = ipm_send(ipm_tx_handle, 0, 0, NULL, 0);
    1934:	4b0f      	ldr	r3, [pc, #60]	; (1974 <virtio_notify+0x40>)
{
    1936:	b513      	push	{r0, r1, r4, lr}
	status = ipm_send(ipm_tx_handle, 0, 0, NULL, 0);
    1938:	6818      	ldr	r0, [r3, #0]
			   const void *data, int size)
{
	const struct ipm_driver_api *api =
		(const struct ipm_driver_api *)ipmdev->driver_api;

	return api->send(ipmdev, wait, id, data, size);
    193a:	2300      	movs	r3, #0
    193c:	6842      	ldr	r2, [r0, #4]
    193e:	9300      	str	r3, [sp, #0]
    1940:	6814      	ldr	r4, [r2, #0]
    1942:	4619      	mov	r1, r3
    1944:	461a      	mov	r2, r3
    1946:	47a0      	blx	r4
	if (status != 0) {
    1948:	4601      	mov	r1, r0
    194a:	b180      	cbz	r0, 196e <virtio_notify+0x3a>
		BT_ERR("ipm_send failed to notify: %d", status);
    194c:	2301      	movs	r3, #1
    194e:	f04f 0200 	mov.w	r2, #0
    1952:	4809      	ldr	r0, [pc, #36]	; (1978 <virtio_notify+0x44>)
    1954:	f363 0207 	bfi	r2, r3, #0, #8
    1958:	4b08      	ldr	r3, [pc, #32]	; (197c <virtio_notify+0x48>)
    195a:	1a1b      	subs	r3, r3, r0
    195c:	08db      	lsrs	r3, r3, #3
    195e:	4808      	ldr	r0, [pc, #32]	; (1980 <virtio_notify+0x4c>)
    1960:	f363 128f 	bfi	r2, r3, #6, #10
}
    1964:	b002      	add	sp, #8
    1966:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_ERR("ipm_send failed to notify: %d", status);
    196a:	f009 be16 	b.w	b59a <log_1>
}
    196e:	b002      	add	sp, #8
    1970:	bd10      	pop	{r4, pc}
    1972:	bf00      	nop
    1974:	20000348 	.word	0x20000348
    1978:	0000e6dc 	.word	0x0000e6dc
    197c:	0000e70c 	.word	0x0000e70c
    1980:	0000f75e 	.word	0x0000f75e

00001984 <bt_rpmsg_rx_thread>:

static void bt_rpmsg_rx_thread(void *p1, void *p2, void *p3)
{
    1984:	b538      	push	{r3, r4, r5, lr}
	return z_impl_k_sem_take(sem, timeout);
    1986:	4d06      	ldr	r5, [pc, #24]	; (19a0 <bt_rpmsg_rx_thread+0x1c>)

	while (1) {
		int status = k_sem_take(&rx_sem, K_FOREVER);

		if (status == 0) {
			virtqueue_notification(vq[0]);
    1988:	4c06      	ldr	r4, [pc, #24]	; (19a4 <bt_rpmsg_rx_thread+0x20>)
    198a:	f04f 31ff 	mov.w	r1, #4294967295
    198e:	4628      	mov	r0, r5
    1990:	f008 faa4 	bl	9edc <z_impl_k_sem_take>
		if (status == 0) {
    1994:	2800      	cmp	r0, #0
    1996:	d1f8      	bne.n	198a <bt_rpmsg_rx_thread+0x6>
			virtqueue_notification(vq[0]);
    1998:	6820      	ldr	r0, [r4, #0]
    199a:	f00b ff5c 	bl	d856 <virtqueue_notification>
    199e:	e7f4      	b.n	198a <bt_rpmsg_rx_thread+0x6>
    19a0:	20004cc8 	.word	0x20004cc8
    19a4:	20000414 	.word	0x20000414

000019a8 <ipm_callback>:
	z_impl_k_sem_give(sem);
    19a8:	4801      	ldr	r0, [pc, #4]	; (19b0 <ipm_callback+0x8>)
    19aa:	f008 ba6b 	b.w	9e84 <z_impl_k_sem_give>
    19ae:	bf00      	nop
    19b0:	20004cc8 	.word	0x20004cc8

000019b4 <bt_rpmsg_platform_init>:
		}
	}
}

int bt_rpmsg_platform_init(void)
{
    19b4:	b570      	push	{r4, r5, r6, lr}
	int err;
	struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
    19b6:	4b84      	ldr	r3, [pc, #528]	; (1bc8 <bt_rpmsg_platform_init+0x214>)
{
    19b8:	b088      	sub	sp, #32
	struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
    19ba:	9306      	str	r3, [sp, #24]
    19bc:	2306      	movs	r3, #6
    19be:	f88d 301c 	strb.w	r3, [sp, #28]
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    19c2:	2300      	movs	r3, #0
    19c4:	f06f 0207 	mvn.w	r2, #7
    19c8:	e9cd 3304 	strd	r3, r3, [sp, #16]
    19cc:	e9cd 3202 	strd	r3, r2, [sp, #8]
    19d0:	e9cd 3300 	strd	r3, r3, [sp]
    19d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
    19d8:	4b7c      	ldr	r3, [pc, #496]	; (1bcc <bt_rpmsg_platform_init+0x218>)
    19da:	497d      	ldr	r1, [pc, #500]	; (1bd0 <bt_rpmsg_platform_init+0x21c>)
    19dc:	487d      	ldr	r0, [pc, #500]	; (1bd4 <bt_rpmsg_platform_init+0x220>)
    19de:	f008 faf5 	bl	9fcc <z_impl_k_thread_create>
			bt_rpmsg_rx_thread, NULL, NULL, NULL,
			K_PRIO_COOP(CONFIG_BT_RPMSG_NRF53_RX_PRIO),
			0, K_NO_WAIT);

	/* Libmetal setup */
	err = metal_init(&metal_params);
    19e2:	a806      	add	r0, sp, #24
    19e4:	f007 fa18 	bl	8e18 <metal_init>
	if (err) {
    19e8:	4604      	mov	r4, r0
    19ea:	b188      	cbz	r0, 1a10 <bt_rpmsg_platform_init+0x5c>
		BT_ERR("metal_init: failed - error code %d", err);
    19ec:	2301      	movs	r3, #1
    19ee:	f04f 0200 	mov.w	r2, #0
    19f2:	4979      	ldr	r1, [pc, #484]	; (1bd8 <bt_rpmsg_platform_init+0x224>)
    19f4:	f363 0207 	bfi	r2, r3, #0, #8
    19f8:	4b78      	ldr	r3, [pc, #480]	; (1bdc <bt_rpmsg_platform_init+0x228>)
    19fa:	1a5b      	subs	r3, r3, r1
    19fc:	08db      	lsrs	r3, r3, #3
    19fe:	4601      	mov	r1, r0
    1a00:	4877      	ldr	r0, [pc, #476]	; (1be0 <bt_rpmsg_platform_init+0x22c>)
    1a02:	f363 128f 	bfi	r2, r3, #6, #10
		return err;
	}

	err = metal_register_generic_device(&shm_device);
	if (err) {
		BT_ERR("Couldn't register shared memory device: %d", err);
    1a06:	f009 fdc8 	bl	b59a <log_1>

	/* Wait til nameservice ep is setup */
	k_sem_take(&ready_sem, K_FOREVER);

	return 0;
}
    1a0a:	4620      	mov	r0, r4
    1a0c:	b008      	add	sp, #32
    1a0e:	bd70      	pop	{r4, r5, r6, pc}
	err = metal_register_generic_device(&shm_device);
    1a10:	4874      	ldr	r0, [pc, #464]	; (1be4 <bt_rpmsg_platform_init+0x230>)
    1a12:	f007 f9e1 	bl	8dd8 <metal_register_generic_device>
	if (err) {
    1a16:	4604      	mov	r4, r0
    1a18:	b168      	cbz	r0, 1a36 <bt_rpmsg_platform_init+0x82>
		BT_ERR("Couldn't register shared memory device: %d", err);
    1a1a:	2301      	movs	r3, #1
    1a1c:	f04f 0200 	mov.w	r2, #0
    1a20:	496d      	ldr	r1, [pc, #436]	; (1bd8 <bt_rpmsg_platform_init+0x224>)
    1a22:	f363 0207 	bfi	r2, r3, #0, #8
    1a26:	4b6d      	ldr	r3, [pc, #436]	; (1bdc <bt_rpmsg_platform_init+0x228>)
    1a28:	1a5b      	subs	r3, r3, r1
    1a2a:	08db      	lsrs	r3, r3, #3
    1a2c:	4601      	mov	r1, r0
    1a2e:	f363 128f 	bfi	r2, r3, #6, #10
    1a32:	486d      	ldr	r0, [pc, #436]	; (1be8 <bt_rpmsg_platform_init+0x234>)
    1a34:	e7e7      	b.n	1a06 <bt_rpmsg_platform_init+0x52>
	err = metal_device_open("generic", SHM_DEVICE_NAME, &device);
    1a36:	4d6d      	ldr	r5, [pc, #436]	; (1bec <bt_rpmsg_platform_init+0x238>)
    1a38:	496d      	ldr	r1, [pc, #436]	; (1bf0 <bt_rpmsg_platform_init+0x23c>)
    1a3a:	462a      	mov	r2, r5
    1a3c:	486d      	ldr	r0, [pc, #436]	; (1bf4 <bt_rpmsg_platform_init+0x240>)
    1a3e:	f00b fc65 	bl	d30c <metal_device_open>
	if (err) {
    1a42:	4604      	mov	r4, r0
    1a44:	b168      	cbz	r0, 1a62 <bt_rpmsg_platform_init+0xae>
		BT_ERR("metal_device_open failed: %d", err);
    1a46:	2301      	movs	r3, #1
    1a48:	f04f 0200 	mov.w	r2, #0
    1a4c:	4962      	ldr	r1, [pc, #392]	; (1bd8 <bt_rpmsg_platform_init+0x224>)
    1a4e:	f363 0207 	bfi	r2, r3, #0, #8
    1a52:	4b62      	ldr	r3, [pc, #392]	; (1bdc <bt_rpmsg_platform_init+0x228>)
    1a54:	1a5b      	subs	r3, r3, r1
    1a56:	08db      	lsrs	r3, r3, #3
    1a58:	4601      	mov	r1, r0
    1a5a:	f363 128f 	bfi	r2, r3, #6, #10
    1a5e:	4866      	ldr	r0, [pc, #408]	; (1bf8 <bt_rpmsg_platform_init+0x244>)
    1a60:	e7d1      	b.n	1a06 <bt_rpmsg_platform_init+0x52>
	io = metal_device_io_region(device, 0);
    1a62:	682b      	ldr	r3, [r5, #0]
 * @return I/O accessor handle, or NULL on failure.
 */
static inline struct metal_io_region *
metal_device_io_region(struct metal_device *device, unsigned index)
{
	return (index < device->num_regions
    1a64:	4d65      	ldr	r5, [pc, #404]	; (1bfc <bt_rpmsg_platform_init+0x248>)
		? &device->regions[index]
		: NULL);
    1a66:	689a      	ldr	r2, [r3, #8]
    1a68:	b98a      	cbnz	r2, 1a8e <bt_rpmsg_platform_init+0xda>
		BT_ERR("metal_device_io_region failed to get region");
    1a6a:	2301      	movs	r3, #1
    1a6c:	f04f 0100 	mov.w	r1, #0
    1a70:	4a59      	ldr	r2, [pc, #356]	; (1bd8 <bt_rpmsg_platform_init+0x224>)
    1a72:	f363 0107 	bfi	r1, r3, #0, #8
    1a76:	4b59      	ldr	r3, [pc, #356]	; (1bdc <bt_rpmsg_platform_init+0x228>)
	io = metal_device_io_region(device, 0);
    1a78:	6028      	str	r0, [r5, #0]
    1a7a:	1a9b      	subs	r3, r3, r2
    1a7c:	08db      	lsrs	r3, r3, #3
		BT_ERR("metal_device_io_region failed to get region");
    1a7e:	4860      	ldr	r0, [pc, #384]	; (1c00 <bt_rpmsg_platform_init+0x24c>)
    1a80:	f363 118f 	bfi	r1, r3, #6, #10
		BT_ERR("Could not get RX IPM device handle");
    1a84:	f009 fd7c 	bl	b580 <log_0>
		return -ENODEV;
    1a88:	f06f 0412 	mvn.w	r4, #18
    1a8c:	e7bd      	b.n	1a0a <bt_rpmsg_platform_init+0x56>
    1a8e:	330c      	adds	r3, #12
	io = metal_device_io_region(device, 0);
    1a90:	602b      	str	r3, [r5, #0]
    1a92:	485c      	ldr	r0, [pc, #368]	; (1c04 <bt_rpmsg_platform_init+0x250>)
    1a94:	f007 fc3c 	bl	9310 <z_impl_device_get_binding>
	ipm_tx_handle = device_get_binding("IPM_0");
    1a98:	4b5b      	ldr	r3, [pc, #364]	; (1c08 <bt_rpmsg_platform_init+0x254>)
    1a9a:	6018      	str	r0, [r3, #0]
	if (!ipm_tx_handle) {
    1a9c:	b960      	cbnz	r0, 1ab8 <bt_rpmsg_platform_init+0x104>
		BT_ERR("Could not get TX IPM device handle");
    1a9e:	2301      	movs	r3, #1
    1aa0:	f04f 0100 	mov.w	r1, #0
    1aa4:	4a4c      	ldr	r2, [pc, #304]	; (1bd8 <bt_rpmsg_platform_init+0x224>)
    1aa6:	f363 0107 	bfi	r1, r3, #0, #8
    1aaa:	4b4c      	ldr	r3, [pc, #304]	; (1bdc <bt_rpmsg_platform_init+0x228>)
    1aac:	4857      	ldr	r0, [pc, #348]	; (1c0c <bt_rpmsg_platform_init+0x258>)
    1aae:	1a9b      	subs	r3, r3, r2
    1ab0:	08db      	lsrs	r3, r3, #3
    1ab2:	f363 118f 	bfi	r1, r3, #6, #10
    1ab6:	e7e5      	b.n	1a84 <bt_rpmsg_platform_init+0xd0>
    1ab8:	4855      	ldr	r0, [pc, #340]	; (1c10 <bt_rpmsg_platform_init+0x25c>)
    1aba:	f007 fc29 	bl	9310 <z_impl_device_get_binding>
	if (!ipm_rx_handle) {
    1abe:	b960      	cbnz	r0, 1ada <bt_rpmsg_platform_init+0x126>
		BT_ERR("Could not get RX IPM device handle");
    1ac0:	2301      	movs	r3, #1
    1ac2:	f04f 0100 	mov.w	r1, #0
    1ac6:	4a44      	ldr	r2, [pc, #272]	; (1bd8 <bt_rpmsg_platform_init+0x224>)
    1ac8:	f363 0107 	bfi	r1, r3, #0, #8
    1acc:	4b43      	ldr	r3, [pc, #268]	; (1bdc <bt_rpmsg_platform_init+0x228>)
    1ace:	4851      	ldr	r0, [pc, #324]	; (1c14 <bt_rpmsg_platform_init+0x260>)
    1ad0:	1a9b      	subs	r3, r3, r2
    1ad2:	08db      	lsrs	r3, r3, #3
    1ad4:	f363 118f 	bfi	r1, r3, #6, #10
    1ad8:	e7d4      	b.n	1a84 <bt_rpmsg_platform_init+0xd0>
					 ipm_callback_t cb, void *context)
{
	const struct ipm_driver_api *api =
		(const struct ipm_driver_api *)ipmdev->driver_api;

	api->register_callback(ipmdev, cb, context);
    1ada:	6843      	ldr	r3, [r0, #4]
    1adc:	4622      	mov	r2, r4
    1ade:	685b      	ldr	r3, [r3, #4]
    1ae0:	494d      	ldr	r1, [pc, #308]	; (1c18 <bt_rpmsg_platform_init+0x264>)
    1ae2:	4798      	blx	r3
#endif

#if (CONFIG_HEAP_MEM_POOL_SIZE > 0)
static inline void *metal_allocate_memory(unsigned int size)
{
	return k_malloc(size);
    1ae4:	20b8      	movs	r0, #184	; 0xb8
    1ae6:	f007 fe8d 	bl	9804 <k_malloc>
	uint32_t vq_size = sizeof(struct virtqueue) +
		 num_desc_extra * sizeof(struct vq_desc_extra);

	vqs = (struct virtqueue *)metal_allocate_memory(vq_size);

	if (vqs) {
    1aea:	4606      	mov	r6, r0
    1aec:	b118      	cbz	r0, 1af6 <bt_rpmsg_platform_init+0x142>
		memset(vqs, 0x00, vq_size);
    1aee:	22b8      	movs	r2, #184	; 0xb8
    1af0:	4621      	mov	r1, r4
    1af2:	f00a f9fe 	bl	bef2 <memset>
	vq[0] = virtqueue_allocate(VRING_SIZE);
    1af6:	4c49      	ldr	r4, [pc, #292]	; (1c1c <bt_rpmsg_platform_init+0x268>)
    1af8:	6026      	str	r6, [r4, #0]
	if (!vq[0]) {
    1afa:	b986      	cbnz	r6, 1b1e <bt_rpmsg_platform_init+0x16a>
		BT_ERR("virtqueue_allocate failed to alloc vq[0]");
    1afc:	2301      	movs	r3, #1
    1afe:	f04f 0100 	mov.w	r1, #0
    1b02:	4a35      	ldr	r2, [pc, #212]	; (1bd8 <bt_rpmsg_platform_init+0x224>)
    1b04:	f363 0107 	bfi	r1, r3, #0, #8
    1b08:	4b34      	ldr	r3, [pc, #208]	; (1bdc <bt_rpmsg_platform_init+0x228>)
    1b0a:	4845      	ldr	r0, [pc, #276]	; (1c20 <bt_rpmsg_platform_init+0x26c>)
    1b0c:	1a9b      	subs	r3, r3, r2
    1b0e:	08db      	lsrs	r3, r3, #3
    1b10:	f363 118f 	bfi	r1, r3, #6, #10
		BT_ERR("virtqueue_allocate failed to alloc vq[1]");
    1b14:	f009 fd34 	bl	b580 <log_0>
		return -ENOMEM;
    1b18:	f06f 040b 	mvn.w	r4, #11
    1b1c:	e775      	b.n	1a0a <bt_rpmsg_platform_init+0x56>
    1b1e:	20b8      	movs	r0, #184	; 0xb8
    1b20:	f007 fe70 	bl	9804 <k_malloc>
	if (vqs) {
    1b24:	4606      	mov	r6, r0
    1b26:	b118      	cbz	r0, 1b30 <bt_rpmsg_platform_init+0x17c>
		memset(vqs, 0x00, vq_size);
    1b28:	22b8      	movs	r2, #184	; 0xb8
    1b2a:	2100      	movs	r1, #0
    1b2c:	f00a f9e1 	bl	bef2 <memset>
	vq[1] = virtqueue_allocate(VRING_SIZE);
    1b30:	6066      	str	r6, [r4, #4]
	if (!vq[1]) {
    1b32:	b966      	cbnz	r6, 1b4e <bt_rpmsg_platform_init+0x19a>
		BT_ERR("virtqueue_allocate failed to alloc vq[1]");
    1b34:	2301      	movs	r3, #1
    1b36:	f04f 0100 	mov.w	r1, #0
    1b3a:	4a27      	ldr	r2, [pc, #156]	; (1bd8 <bt_rpmsg_platform_init+0x224>)
    1b3c:	f363 0107 	bfi	r1, r3, #0, #8
    1b40:	4b26      	ldr	r3, [pc, #152]	; (1bdc <bt_rpmsg_platform_init+0x228>)
    1b42:	4838      	ldr	r0, [pc, #224]	; (1c24 <bt_rpmsg_platform_init+0x270>)
    1b44:	1a9b      	subs	r3, r3, r2
    1b46:	08db      	lsrs	r3, r3, #3
    1b48:	f363 118f 	bfi	r1, r3, #6, #10
    1b4c:	e7e2      	b.n	1b14 <bt_rpmsg_platform_init+0x160>
	rvrings[0].io = io;
    1b4e:	4b36      	ldr	r3, [pc, #216]	; (1c28 <bt_rpmsg_platform_init+0x274>)
	rvrings[0].info.vaddr = (void *)VRING_TX_ADDRESS;
    1b50:	4a36      	ldr	r2, [pc, #216]	; (1c2c <bt_rpmsg_platform_init+0x278>)
	rvrings[0].vq = vq[0];
    1b52:	6824      	ldr	r4, [r4, #0]
	rvrings[0].info.vaddr = (void *)VRING_TX_ADDRESS;
    1b54:	605a      	str	r2, [r3, #4]
	rvrings[0].info.align = VRING_ALIGNMENT;
    1b56:	2204      	movs	r2, #4
    1b58:	609a      	str	r2, [r3, #8]
	rvrings[1].info.align = VRING_ALIGNMENT;
    1b5a:	621a      	str	r2, [r3, #32]
	vdev.role = RPMSG_MASTER;
    1b5c:	2200      	movs	r2, #0
	rvrings[0].vq = vq[0];
    1b5e:	601c      	str	r4, [r3, #0]
	vdev.role = RPMSG_MASTER;
    1b60:	4c33      	ldr	r4, [pc, #204]	; (1c30 <bt_rpmsg_platform_init+0x27c>)
	rvrings[0].info.num_descs = VRING_SIZE;
    1b62:	2110      	movs	r1, #16
	vdev.role = RPMSG_MASTER;
    1b64:	61a2      	str	r2, [r4, #24]
	vdev.vrings_num = VRING_COUNT;
    1b66:	2202      	movs	r2, #2
	rvrings[0].io = io;
    1b68:	6828      	ldr	r0, [r5, #0]
	rvrings[1].vq = vq[1];
    1b6a:	619e      	str	r6, [r3, #24]
	rvrings[0].io = io;
    1b6c:	6158      	str	r0, [r3, #20]
	rvrings[1].io = io;
    1b6e:	62d8      	str	r0, [r3, #44]	; 0x2c
	vdev.vrings_num = VRING_COUNT;
    1b70:	62a2      	str	r2, [r4, #40]	; 0x28
	rvrings[1].info.vaddr = (void *)VRING_RX_ADDRESS;
    1b72:	4830      	ldr	r0, [pc, #192]	; (1c34 <bt_rpmsg_platform_init+0x280>)
	vdev.func = &dispatch;
    1b74:	4a30      	ldr	r2, [pc, #192]	; (1c38 <bt_rpmsg_platform_init+0x284>)
	rpmsg_virtio_init_shm_pool(&shpool, (void *)SHM_START_ADDR, SHM_SIZE);
    1b76:	4e31      	ldr	r6, [pc, #196]	; (1c3c <bt_rpmsg_platform_init+0x288>)
	rvrings[0].info.num_descs = VRING_SIZE;
    1b78:	8199      	strh	r1, [r3, #12]
	rvrings[1].info.vaddr = (void *)VRING_RX_ADDRESS;
    1b7a:	61d8      	str	r0, [r3, #28]
	rvrings[1].info.num_descs = VRING_SIZE;
    1b7c:	8499      	strh	r1, [r3, #36]	; 0x24
	vdev.func = &dispatch;
    1b7e:	6222      	str	r2, [r4, #32]
	rpmsg_virtio_init_shm_pool(&shpool, (void *)SHM_START_ADDR, SHM_SIZE);
    1b80:	492f      	ldr	r1, [pc, #188]	; (1c40 <bt_rpmsg_platform_init+0x28c>)
    1b82:	f44f 42f8 	mov.w	r2, #31744	; 0x7c00
    1b86:	4630      	mov	r0, r6
	vdev.vrings_info = &rvrings[0];
    1b88:	62e3      	str	r3, [r4, #44]	; 0x2c
	rpmsg_virtio_init_shm_pool(&shpool, (void *)SHM_START_ADDR, SHM_SIZE);
    1b8a:	f00b ffbd 	bl	db08 <rpmsg_virtio_init_shm_pool>
	err = rpmsg_init_vdev(&rvdev, &vdev, ns_bind_cb, io, &shpool);
    1b8e:	9600      	str	r6, [sp, #0]
    1b90:	4621      	mov	r1, r4
    1b92:	682b      	ldr	r3, [r5, #0]
    1b94:	4a2b      	ldr	r2, [pc, #172]	; (1c44 <bt_rpmsg_platform_init+0x290>)
    1b96:	482c      	ldr	r0, [pc, #176]	; (1c48 <bt_rpmsg_platform_init+0x294>)
    1b98:	f007 fad2 	bl	9140 <rpmsg_init_vdev>
	if (err) {
    1b9c:	4604      	mov	r4, r0
    1b9e:	b168      	cbz	r0, 1bbc <bt_rpmsg_platform_init+0x208>
		BT_ERR("rpmsg_init_vdev failed %d", err);
    1ba0:	2301      	movs	r3, #1
    1ba2:	f04f 0200 	mov.w	r2, #0
    1ba6:	490c      	ldr	r1, [pc, #48]	; (1bd8 <bt_rpmsg_platform_init+0x224>)
    1ba8:	f363 0207 	bfi	r2, r3, #0, #8
    1bac:	4b0b      	ldr	r3, [pc, #44]	; (1bdc <bt_rpmsg_platform_init+0x228>)
    1bae:	1a5b      	subs	r3, r3, r1
    1bb0:	08db      	lsrs	r3, r3, #3
    1bb2:	4601      	mov	r1, r0
    1bb4:	f363 128f 	bfi	r2, r3, #6, #10
    1bb8:	4824      	ldr	r0, [pc, #144]	; (1c4c <bt_rpmsg_platform_init+0x298>)
    1bba:	e724      	b.n	1a06 <bt_rpmsg_platform_init+0x52>
	return z_impl_k_sem_take(sem, timeout);
    1bbc:	f04f 31ff 	mov.w	r1, #4294967295
    1bc0:	4823      	ldr	r0, [pc, #140]	; (1c50 <bt_rpmsg_platform_init+0x29c>)
    1bc2:	f008 f98b 	bl	9edc <z_impl_k_sem_take>
    1bc6:	e720      	b.n	1a0a <bt_rpmsg_platform_init+0x56>
    1bc8:	00008e69 	.word	0x00008e69
    1bcc:	00001985 	.word	0x00001985
    1bd0:	20001998 	.word	0x20001998
    1bd4:	20000294 	.word	0x20000294
    1bd8:	0000e6dc 	.word	0x0000e6dc
    1bdc:	0000e70c 	.word	0x0000e70c
    1be0:	0000f5e9 	.word	0x0000f5e9
    1be4:	20004964 	.word	0x20004964
    1be8:	0000f60c 	.word	0x0000f60c
    1bec:	20000300 	.word	0x20000300
    1bf0:	0000f637 	.word	0x0000f637
    1bf4:	0000f641 	.word	0x0000f641
    1bf8:	0000f649 	.word	0x0000f649
    1bfc:	20000344 	.word	0x20000344
    1c00:	0000f666 	.word	0x0000f666
    1c04:	00010b4a 	.word	0x00010b4a
    1c08:	20000348 	.word	0x20000348
    1c0c:	0000f692 	.word	0x0000f692
    1c10:	0000f6b5 	.word	0x0000f6b5
    1c14:	0000f6bb 	.word	0x0000f6bb
    1c18:	000019a9 	.word	0x000019a9
    1c1c:	20000414 	.word	0x20000414
    1c20:	0000f6de 	.word	0x0000f6de
    1c24:	0000f707 	.word	0x0000f707
    1c28:	200003d8 	.word	0x200003d8
    1c2c:	20077c00 	.word	0x20077c00
    1c30:	20000000 	.word	0x20000000
    1c34:	20077800 	.word	0x20077800
    1c38:	0000ea30 	.word	0x0000ea30
    1c3c:	20000408 	.word	0x20000408
    1c40:	20070400 	.word	0x20070400
    1c44:	000018fd 	.word	0x000018fd
    1c48:	2000034c 	.word	0x2000034c
    1c4c:	0000f730 	.word	0x0000f730
    1c50:	20004cb0 	.word	0x20004cb0

00001c54 <bt_rpmsg_platform_send>:

int bt_rpmsg_platform_send(struct net_buf *buf)
{
    1c54:	b513      	push	{r0, r1, r4, lr}
	return rpmsg_send(&ep, buf->data, buf->len);
    1c56:	6883      	ldr	r3, [r0, #8]
    1c58:	8981      	ldrh	r1, [r0, #12]
 * Returns number of bytes it has sent or negative error value on failure.
 */
static inline int rpmsg_send(struct rpmsg_endpoint *ept, const void *data,
			     int len)
{
	if (ept->dest_addr == RPMSG_ADDR_ANY)
    1c5a:	4807      	ldr	r0, [pc, #28]	; (1c78 <bt_rpmsg_platform_send+0x24>)
    1c5c:	6a82      	ldr	r2, [r0, #40]	; 0x28
    1c5e:	1c54      	adds	r4, r2, #1
    1c60:	d007      	beq.n	1c72 <bt_rpmsg_platform_send+0x1e>
		return RPMSG_ERR_ADDR;
	return rpmsg_send_offchannel_raw(ept, ept->addr, ept->dest_addr, data,
    1c62:	2401      	movs	r4, #1
    1c64:	e9cd 1400 	strd	r1, r4, [sp]
    1c68:	6a41      	ldr	r1, [r0, #36]	; 0x24
    1c6a:	f007 f933 	bl	8ed4 <rpmsg_send_offchannel_raw>
}
    1c6e:	b002      	add	sp, #8
    1c70:	bd10      	pop	{r4, pc}
		return RPMSG_ERR_ADDR;
    1c72:	4802      	ldr	r0, [pc, #8]	; (1c7c <bt_rpmsg_platform_send+0x28>)
	return rpmsg_send(&ep, buf->data, buf->len);
    1c74:	e7fb      	b.n	1c6e <bt_rpmsg_platform_send+0x1a>
    1c76:	bf00      	nop
    1c78:	20000304 	.word	0x20000304
    1c7c:	fffff829 	.word	0xfffff829

00001c80 <rtc1_nrf_isr>:
 * symbol.
 */
void rtc1_nrf_isr(void *arg)
{
	ARG_UNUSED(arg);
	RTC->EVENTS_COMPARE[0] = 0;
    1c80:	2200      	movs	r2, #0
    1c82:	4b0d      	ldr	r3, [pc, #52]	; (1cb8 <rtc1_nrf_isr+0x38>)
    1c84:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	__asm__ volatile(
    1c88:	f04f 0220 	mov.w	r2, #32
    1c8c:	f3ef 8111 	mrs	r1, BASEPRI
    1c90:	f382 8811 	msr	BASEPRI, r2
    1c94:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t t = counter();
	u32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
    1c98:	4a08      	ldr	r2, [pc, #32]	; (1cbc <rtc1_nrf_isr+0x3c>)
#endif
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    1c9a:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
    1c9e:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
    1ca0:	1ac0      	subs	r0, r0, r3
    1ca2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
    1ca6:	4403      	add	r3, r0
    1ca8:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    1caa:	f381 8811 	msr	BASEPRI, r1
    1cae:	f3bf 8f6f 	isb	sy
		}
		set_comparator(next);
	}

	k_spin_unlock(&lock, key);
	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
    1cb2:	f008 bb43 	b.w	a33c <z_clock_announce>
    1cb6:	bf00      	nop
    1cb8:	50015000 	.word	0x50015000
    1cbc:	2000041c 	.word	0x2000041c

00001cc0 <z_clock_driver_init>:
}

int z_clock_driver_init(struct device *device)
{
    1cc0:	b570      	push	{r4, r5, r6, lr}
    1cc2:	4815      	ldr	r0, [pc, #84]	; (1d18 <z_clock_driver_init+0x58>)
    1cc4:	f007 fb24 	bl	9310 <z_impl_device_get_binding>
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(DT_INST_0_NORDIC_NRF_CLOCK_LABEL);
	if (!clock) {
    1cc8:	b310      	cbz	r0, 1d10 <z_clock_driver_init+0x50>
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->driver_api;

	return api->on(dev, sys);
    1cca:	6843      	ldr	r3, [r0, #4]
    1ccc:	2101      	movs	r1, #1
    1cce:	681b      	ldr	r3, [r3, #0]
    1cd0:	4798      	blx	r3
}

NRF_STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
    1cd2:	2400      	movs	r4, #0
    p_reg->CC[ch] = cc_val;
    1cd4:	2601      	movs	r6, #1
    p_reg->INTENSET = mask;
    1cd6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1cda:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    p_reg->PRESCALER = val;
    1cde:	4d0f      	ldr	r5, [pc, #60]	; (1d1c <z_clock_driver_init+0x5c>)

	/* Clear the event flag and possible pending interrupt */
	nrf_rtc_event_clear(RTC, NRF_RTC_EVENT_COMPARE_0);
	NVIC_ClearPendingIRQ(RTC1_IRQn);

	IRQ_CONNECT(RTC1_IRQn, 1, rtc1_nrf_isr, 0, 0);
    1ce0:	4631      	mov	r1, r6
    1ce2:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    p_reg->CC[ch] = cc_val;
    1ce6:	f8c5 6540 	str.w	r6, [r5, #1344]	; 0x540
    p_reg->INTENSET = mask;
    1cea:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    1cee:	4b0c      	ldr	r3, [pc, #48]	; (1d20 <z_clock_driver_init+0x60>)
    1cf0:	2015      	movs	r0, #21
    1cf2:	601c      	str	r4, [r3, #0]
    1cf4:	4b0b      	ldr	r3, [pc, #44]	; (1d24 <z_clock_driver_init+0x64>)
    1cf6:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    1cfa:	4622      	mov	r2, r4
    1cfc:	f000 f912 	bl	1f24 <z_arm_irq_priority_set>
	irq_enable(RTC1_IRQn);
    1d00:	2015      	movs	r0, #21
    1d02:	f000 f8ff 	bl	1f04 <arch_irq_enable>

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
	}

	return 0;
    1d06:	4620      	mov	r0, r4
    return (uint32_t)p_reg + task;
}

NRF_STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    1d08:	4b07      	ldr	r3, [pc, #28]	; (1d28 <z_clock_driver_init+0x68>)
    1d0a:	601e      	str	r6, [r3, #0]
    1d0c:	602e      	str	r6, [r5, #0]
}
    1d0e:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
    1d10:	f04f 30ff 	mov.w	r0, #4294967295
    1d14:	e7fb      	b.n	1d0e <z_clock_driver_init+0x4e>
    1d16:	bf00      	nop
    1d18:	0000f4bd 	.word	0x0000f4bd
    1d1c:	50015000 	.word	0x50015000
    1d20:	50015140 	.word	0x50015140
    1d24:	e000e100 	.word	0xe000e100
    1d28:	50015008 	.word	0x50015008

00001d2c <z_clock_set_timeout>:

void z_clock_set_timeout(s32_t ticks, bool idle)
{
    1d2c:	b570      	push	{r4, r5, r6, lr}
	ARG_UNUSED(idle);

#ifdef CONFIG_TICKLESS_KERNEL
	ticks = (ticks == K_FOREVER) ? MAX_TICKS : ticks;
    1d2e:	4c25      	ldr	r4, [pc, #148]	; (1dc4 <z_clock_set_timeout+0x98>)
    1d30:	f1b0 3fff 	cmp.w	r0, #4294967295
    1d34:	bf08      	it	eq
    1d36:	4620      	moveq	r0, r4
	__asm__ volatile(
    1d38:	f04f 0320 	mov.w	r3, #32
    1d3c:	f3ef 8511 	mrs	r5, BASEPRI
    1d40:	f383 8811 	msr	BASEPRI, r3
    1d44:	f3bf 8f6f 	isb	sy
     return p_reg->COUNTER;
    1d48:	4b1f      	ldr	r3, [pc, #124]	; (1dc8 <z_clock_set_timeout+0x9c>)
    1d4a:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t cyc, dt, t = counter();
	u32_t unannounced = counter_sub(t, last_count);
    1d4e:	4b1f      	ldr	r3, [pc, #124]	; (1dcc <z_clock_set_timeout+0xa0>)
    1d50:	681b      	ldr	r3, [r3, #0]
	return (a - b) & COUNTER_MAX;
    1d52:	1aca      	subs	r2, r1, r3
    1d54:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	/* If we haven't announced for more than half the 24-bit wrap
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
    1d58:	0212      	lsls	r2, r2, #8
    1d5a:	d41a      	bmi.n	1d92 <z_clock_set_timeout+0x66>
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);
    1d5c:	1e42      	subs	r2, r0, #1
    1d5e:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    1d62:	42a2      	cmp	r2, r4
    1d64:	bfa8      	it	ge
    1d66:	4622      	movge	r2, r4
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    1d68:	1c70      	adds	r0, r6, #1
    1d6a:	4410      	add	r0, r2
	 */
	if (cyc > MAX_CYCLES) {
		cyc = MAX_CYCLES;
	}

	cyc += last_count;
    1d6c:	42a0      	cmp	r0, r4
    1d6e:	bf94      	ite	ls
    1d70:	1818      	addls	r0, r3, r0
    1d72:	1918      	addhi	r0, r3, r4
	return (a - b) & COUNTER_MAX;
    1d74:	1a41      	subs	r1, r0, r1
    1d76:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1d7a:	4a13      	ldr	r2, [pc, #76]	; (1dc8 <z_clock_set_timeout+0x9c>)
    1d7c:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
	 * least on nRF52.  Some experimentation on nrf52840 shows
	 * that you need to be early by about 400 processor cycles
	 * (about 1/5th of a RTC cycle) in order to reliably get the
	 * interrupt.  The docs say two cycles, they mean two cycles.
	 */
	if (counter_sub(cyc, t) > 2) {
    1d80:	2902      	cmp	r1, #2
    p_reg->CC[ch] = cc_val;
    1d82:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
    1d86:	d906      	bls.n	1d96 <z_clock_set_timeout+0x6a>
	__asm__ volatile(
    1d88:	f385 8811 	msr	BASEPRI, r5
    1d8c:	f3bf 8f6f 	isb	sy
	}
#endif

	k_spin_unlock(&lock, key);
#endif /* CONFIG_TICKLESS_KERNEL */
}
    1d90:	bd70      	pop	{r4, r5, r6, pc}
		ticks = 0;
    1d92:	2200      	movs	r2, #0
    1d94:	e7e8      	b.n	1d68 <z_clock_set_timeout+0x3c>
     return p_reg->COUNTER;
    1d96:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
		if (dt == 0 || dt > 0x7fffff) {
    1d9a:	490d      	ldr	r1, [pc, #52]	; (1dd0 <z_clock_set_timeout+0xa4>)
	return (a - b) & COUNTER_MAX;
    1d9c:	1ac3      	subs	r3, r0, r3
    1d9e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		if (dt == 0 || dt > 0x7fffff) {
    1da2:	1e5c      	subs	r4, r3, #1
    1da4:	428c      	cmp	r4, r1
    1da6:	d905      	bls.n	1db4 <z_clock_set_timeout+0x88>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1da8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    1dac:	4b09      	ldr	r3, [pc, #36]	; (1dd4 <z_clock_set_timeout+0xa8>)
    1dae:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    1db2:	e7e9      	b.n	1d88 <z_clock_set_timeout+0x5c>
		} else if (dt == 1) {
    1db4:	2b01      	cmp	r3, #1
			set_comparator(cyc + 2);
    1db6:	bf02      	ittt	eq
    1db8:	3002      	addeq	r0, #2
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    1dba:	f020 407f 	biceq.w	r0, r0, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    1dbe:	f8c2 0540 	streq.w	r0, [r2, #1344]	; 0x540
    1dc2:	e7e1      	b.n	1d88 <z_clock_set_timeout+0x5c>
    1dc4:	00fffffe 	.word	0x00fffffe
    1dc8:	50015000 	.word	0x50015000
    1dcc:	2000041c 	.word	0x2000041c
    1dd0:	007ffffe 	.word	0x007ffffe
    1dd4:	e000e100 	.word	0xe000e100

00001dd8 <z_clock_elapsed>:
	__asm__ volatile(
    1dd8:	f04f 0220 	mov.w	r2, #32
    1ddc:	f3ef 8311 	mrs	r3, BASEPRI
    1de0:	f382 8811 	msr	BASEPRI, r2
    1de4:	f3bf 8f6f 	isb	sy
     return p_reg->COUNTER;
    1de8:	4a06      	ldr	r2, [pc, #24]	; (1e04 <z_clock_elapsed+0x2c>)
    1dea:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
    1dee:	4a06      	ldr	r2, [pc, #24]	; (1e08 <z_clock_elapsed+0x30>)
	return (a - b) & COUNTER_MAX;
    1df0:	6812      	ldr	r2, [r2, #0]
    1df2:	1a80      	subs	r0, r0, r2
    1df4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	__asm__ volatile(
    1df8:	f383 8811 	msr	BASEPRI, r3
    1dfc:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
    1e00:	4770      	bx	lr
    1e02:	bf00      	nop
    1e04:	50015000 	.word	0x50015000
    1e08:	2000041c 	.word	0x2000041c

00001e0c <z_timer_cycle_get_32>:
	__asm__ volatile(
    1e0c:	f04f 0320 	mov.w	r3, #32
    1e10:	f3ef 8211 	mrs	r2, BASEPRI
    1e14:	f383 8811 	msr	BASEPRI, r3
    1e18:	f3bf 8f6f 	isb	sy

u32_t z_timer_cycle_get_32(void)
{
	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) + last_count;
    1e1c:	4906      	ldr	r1, [pc, #24]	; (1e38 <z_timer_cycle_get_32+0x2c>)
    1e1e:	4b07      	ldr	r3, [pc, #28]	; (1e3c <z_timer_cycle_get_32+0x30>)
    1e20:	6808      	ldr	r0, [r1, #0]
    1e22:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	__asm__ volatile(
    1e26:	f382 8811 	msr	BASEPRI, r2
    1e2a:	f3bf 8f6f 	isb	sy
	return (a - b) & COUNTER_MAX;
    1e2e:	1a1b      	subs	r3, r3, r0
    1e30:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000

	k_spin_unlock(&lock, key);
	return ret;
}
    1e34:	4418      	add	r0, r3
    1e36:	4770      	bx	lr
    1e38:	2000041c 	.word	0x2000041c
    1e3c:	50015000 	.word	0x50015000

00001e40 <z_arm_exc_exit>:
    /* r0 contains the caller mode */
    push {r0, lr}
#endif

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
    1e40:	4804      	ldr	r0, [pc, #16]	; (1e54 <_EXIT_EXC+0x2>)

    ldr r1, [r0, #_kernel_offset_to_current]
    1e42:	6881      	ldr	r1, [r0, #8]

    ldr r0, [r0, #_kernel_offset_to_ready_q_cache]
    1e44:	6a40      	ldr	r0, [r0, #36]	; 0x24
    cmp r0, r1
    1e46:	4288      	cmp	r0, r1
    beq _EXIT_EXC
    1e48:	d003      	beq.n	1e52 <_EXIT_EXC>

#if defined(CONFIG_CPU_CORTEX_M)
    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
    1e4a:	4903      	ldr	r1, [pc, #12]	; (1e58 <_EXIT_EXC+0x6>)
    ldr r2, =_SCS_ICSR_PENDSV
    1e4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1]
    1e50:	600a      	str	r2, [r1, #0]

00001e52 <_EXIT_EXC>:
    bl z_check_stack_sentinel
#endif /* CONFIG_CPU_CORTEX_M */
#endif /* CONFIG_STACK_SENTINEL */

#if defined(CONFIG_CPU_CORTEX_M)
    bx lr
    1e52:	4770      	bx	lr
    ldr r0, =_kernel
    1e54:	200011d0 	.word	0x200011d0
    ldr r1, =_SCS_ICSR
    1e58:	e000ed04 	.word	0xe000ed04

00001e5c <arch_swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
    1e5c:	4a09      	ldr	r2, [pc, #36]	; (1e84 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    1e5e:	490a      	ldr	r1, [pc, #40]	; (1e88 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    1e60:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    1e62:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
    1e64:	6658      	str	r0, [r3, #100]	; 0x64
	_current->arch.swap_return_value = _k_neg_eagain;
    1e66:	6699      	str	r1, [r3, #104]	; 0x68

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1e68:	4908      	ldr	r1, [pc, #32]	; (1e8c <arch_swap+0x30>)
    1e6a:	684b      	ldr	r3, [r1, #4]
    1e6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    1e70:	604b      	str	r3, [r1, #4]
    1e72:	2300      	movs	r3, #0
    1e74:	f383 8811 	msr	BASEPRI, r3
    1e78:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    1e7c:	6893      	ldr	r3, [r2, #8]
}
    1e7e:	6e98      	ldr	r0, [r3, #104]	; 0x68
    1e80:	4770      	bx	lr
    1e82:	bf00      	nop
    1e84:	200011d0 	.word	0x200011d0
    1e88:	0000eecc 	.word	0x0000eecc
    1e8c:	e000ed00 	.word	0xe000ed00

00001e90 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    1e90:	4912      	ldr	r1, [pc, #72]	; (1edc <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    1e92:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    1e94:	f04f 0028 	mov.w	r0, #40	; 0x28
    add r0, r2
    1e98:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    1e9a:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    1e9e:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1ea2:	2020      	movs	r0, #32
    msr BASEPRI, r0
    1ea4:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    1ea8:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    1eac:	4f0c      	ldr	r7, [pc, #48]	; (1ee0 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    1eae:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    1eb2:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
    1eb4:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    1eb6:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    1eb8:	6e50      	ldr	r0, [r2, #100]	; 0x64
    movs r3, #0
    1eba:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    1ebc:	6653      	str	r3, [r2, #100]	; 0x64
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    1ebe:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined (CONFIG_ARM_MPU)
    /* Re-program dynamic memory map */
    push {r2,lr}
    1ec2:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    1ec4:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    1ec6:	f009 ff59 	bl	bd7c <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    1eca:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    1ece:	f102 0028 	add.w	r0, r2, #40	; 0x28
    ldmia r0, {v1-v8, ip}
    1ed2:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
    mov r0, #0
    msr PSPLIM, r0
#endif /* CONFIG_BUILTIN_STACK_GUARD */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    1ed6:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
    1eda:	4770      	bx	lr
    ldr r1, =_kernel
    1edc:	200011d0 	.word	0x200011d0
    ldr v4, =_SCS_ICSR
    1ee0:	e000ed04 	.word	0xe000ed04

00001ee4 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
    1ee4:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    1ee8:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    1eea:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    1eee:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    1ef2:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    1ef4:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    1ef8:	2902      	cmp	r1, #2
    beq _oops
    1efa:	d0ff      	beq.n	1efc <_oops>

00001efc <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    1efc:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    1efe:	f009 ff32 	bl	bd66 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    1f02:	bd01      	pop	{r0, pc}

00001f04 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    1f04:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    1f06:	2b00      	cmp	r3, #0
    1f08:	db08      	blt.n	1f1c <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1f0a:	2201      	movs	r2, #1
    1f0c:	f000 001f 	and.w	r0, r0, #31
    1f10:	fa02 f000 	lsl.w	r0, r2, r0
    1f14:	4a02      	ldr	r2, [pc, #8]	; (1f20 <arch_irq_enable+0x1c>)
    1f16:	095b      	lsrs	r3, r3, #5
    1f18:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    1f1c:	4770      	bx	lr
    1f1e:	bf00      	nop
    1f20:	e000e100 	.word	0xe000e100

00001f24 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(DT_NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(DT_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    1f24:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    1f26:	2b00      	cmp	r3, #0
	prio += _IRQ_PRIO_OFFSET;
    1f28:	f101 0101 	add.w	r1, r1, #1
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1f2c:	bfa8      	it	ge
    1f2e:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
    1f32:	ea4f 1141 	mov.w	r1, r1, lsl #5
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1f36:	bfb8      	it	lt
    1f38:	4b05      	ldrlt	r3, [pc, #20]	; (1f50 <z_arm_irq_priority_set+0x2c>)
    1f3a:	b2c9      	uxtb	r1, r1
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1f3c:	bfab      	itete	ge
    1f3e:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1f42:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1f46:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1f4a:	5419      	strblt	r1, [r3, r0]
}
    1f4c:	4770      	bx	lr
    1f4e:	bf00      	nop
    1f50:	e000ed14 	.word	0xe000ed14

00001f54 <arch_new_thread>:
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     size_t stackSize, k_thread_entry_t pEntry,
		     void *parameter1, void *parameter2, void *parameter3,
		     int priority, unsigned int options)
{
    1f54:	b573      	push	{r0, r1, r4, r5, r6, lr}
    1f56:	461e      	mov	r6, r3
#endif
	stackEnd = pStackMem + stackSize;

	struct __esf *pInitCtx;

	z_new_thread_init(thread, pStackMem, stackSize, priority,
    1f58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
{
    1f5a:	4605      	mov	r5, r0
	z_new_thread_init(thread, pStackMem, stackSize, priority,
    1f5c:	9300      	str	r3, [sp, #0]
    1f5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
	stackEnd = pStackMem + stackSize;
    1f60:	188c      	adds	r4, r1, r2
	z_new_thread_init(thread, pStackMem, stackSize, priority,
    1f62:	f00c f818 	bl	df96 <z_new_thread_init>
	pInitCtx->basic.pc = (u32_t)z_thread_entry;
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	pInitCtx->basic.pc &= 0xfffffffe;
    1f66:	4a0b      	ldr	r2, [pc, #44]	; (1f94 <arch_new_thread+0x40>)
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
    1f68:	f1a4 0320 	sub.w	r3, r4, #32
    1f6c:	f023 0307 	bic.w	r3, r3, #7
	pInitCtx->basic.pc &= 0xfffffffe;
    1f70:	f022 0201 	bic.w	r2, r2, #1
    1f74:	619a      	str	r2, [r3, #24]
#endif

	pInitCtx->basic.a1 = (u32_t)pEntry;
	pInitCtx->basic.a2 = (u32_t)parameter1;
    1f76:	9a06      	ldr	r2, [sp, #24]
	pInitCtx->basic.a1 = (u32_t)pEntry;
    1f78:	601e      	str	r6, [r3, #0]
	pInitCtx->basic.a2 = (u32_t)parameter1;
    1f7a:	605a      	str	r2, [r3, #4]
	pInitCtx->basic.a3 = (u32_t)parameter2;
    1f7c:	9a07      	ldr	r2, [sp, #28]
    1f7e:	609a      	str	r2, [r3, #8]
	pInitCtx->basic.a4 = (u32_t)parameter3;
    1f80:	9a08      	ldr	r2, [sp, #32]
    1f82:	60da      	str	r2, [r3, #12]
	pInitCtx->basic.xpsr =
    1f84:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    1f88:	61da      	str	r2, [r3, #28]
		0x01000000UL; /* clear all, thumb bit is 1, even if RO */

	thread->callee_saved.psp = (u32_t)pInitCtx;
    1f8a:	64ab      	str	r3, [r5, #72]	; 0x48
#if defined(CONFIG_CPU_CORTEX_R)
	pInitCtx->basic.lr = (u32_t)pInitCtx->basic.pc;
	thread->callee_saved.spsr = A_BIT | T_BIT | MODE_SYS;
	thread->callee_saved.lr = (u32_t)pInitCtx->basic.pc;
#endif
	thread->arch.basepri = 0;
    1f8c:	2300      	movs	r3, #0
    1f8e:	666b      	str	r3, [r5, #100]	; 0x64

	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    1f90:	b002      	add	sp, #8
    1f92:	bd70      	pop	{r4, r5, r6, pc}
    1f94:	0000acb9 	.word	0x0000acb9

00001f98 <arch_switch_to_main_thread>:

void arch_switch_to_main_thread(struct k_thread *main_thread,
				k_thread_stack_t *main_stack,
				size_t main_stack_size,
				k_thread_entry_t _main)
{
    1f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1f9a:	4605      	mov	r5, r0
    1f9c:	460c      	mov	r4, r1
    1f9e:	4617      	mov	r7, r2
    1fa0:	461e      	mov	r6, r3
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    1fa2:	f000 fbb5 	bl	2710 <z_arm_configure_static_mpu_regions>
	start_of_main_stack =
		Z_THREAD_STACK_BUFFER(main_stack) + main_stack_size;

	start_of_main_stack = (char *)STACK_ROUND_DOWN(start_of_main_stack);

	_current = main_thread;
    1fa6:	4b0a      	ldr	r3, [pc, #40]	; (1fd0 <arch_switch_to_main_thread+0x38>)
	start_of_main_stack =
    1fa8:	443c      	add	r4, r7
#ifdef CONFIG_ARM_MPU
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    1faa:	4628      	mov	r0, r5
	_current = main_thread;
    1fac:	609d      	str	r5, [r3, #8]
	start_of_main_stack = (char *)STACK_ROUND_DOWN(start_of_main_stack);
    1fae:	f024 0407 	bic.w	r4, r4, #7
	z_arm_configure_dynamic_mpu_regions(main_thread);
    1fb2:	f009 fee3 	bl	bd7c <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    1fb6:	4630      	mov	r0, r6
    1fb8:	f384 8809 	msr	PSP, r4
    1fbc:	2100      	movs	r1, #0
    1fbe:	b663      	cpsie	if
    1fc0:	f381 8811 	msr	BASEPRI, r1
    1fc4:	f3bf 8f6f 	isb	sy
    1fc8:	2200      	movs	r2, #0
    1fca:	2300      	movs	r3, #0
    1fcc:	f008 fe74 	bl	acb8 <z_thread_entry>
	:
	: "r" (_main), "r" (start_of_main_stack)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    1fd0:	200011d0 	.word	0x200011d0

00001fd4 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr r1, =_SCB_SCR
    1fd4:	4901      	ldr	r1, [pc, #4]	; (1fdc <z_arm_cpu_idle_init+0x8>)
	movs.n r2, #_SCR_INIT_BITS
    1fd6:	2210      	movs	r2, #16
	str r2, [r1]
    1fd8:	600a      	str	r2, [r1, #0]
#endif
	bx lr
    1fda:	4770      	bx	lr
	ldr r1, =_SCB_SCR
    1fdc:	e000ed10 	.word	0xe000ed10

00001fe0 <arch_cpu_idle>:
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	cpsie i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* clear BASEPRI so wfi is awakened by incoming interrupts */
	eors.n r0, r0
    1fe0:	4040      	eors	r0, r0
	msr BASEPRI, r0
    1fe2:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	wfi
    1fe6:	bf30      	wfi

	bx lr
    1fe8:	4770      	bx	lr
    1fea:	bf00      	nop

00001fec <z_arm_bus_fault>:
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_reserved)

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) || \
	defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	mrs r0, MSP
    1fec:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    1ff0:	f3ef 8109 	mrs	r1, PSP
	mov r2, lr /* EXC_RETURN */
    1ff4:	4672      	mov	r2, lr

	push {r0, lr}
    1ff6:	b501      	push	{r0, lr}
	mov r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE || CONFIG_ARMv7_M_ARMV8_M_MAINLINE */

	bl z_arm_fault
    1ff8:	f000 fa56 	bl	24a8 <z_arm_fault>

#if defined(CONFIG_CPU_CORTEX_M)
	pop {r0, pc}
    1ffc:	bd01      	pop	{r0, pc}
    1ffe:	bf00      	nop

00002000 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    2000:	b573      	push	{r0, r1, r4, r5, r6, lr}
    2002:	4606      	mov	r6, r0

	if (esf != NULL) {
    2004:	460c      	mov	r4, r1
    2006:	2900      	cmp	r1, #0
    2008:	d038      	beq.n	207c <z_arm_fatal_error+0x7c>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    200a:	2201      	movs	r2, #1
    200c:	f04f 0300 	mov.w	r3, #0
    2010:	4d1e      	ldr	r5, [pc, #120]	; (208c <z_arm_fatal_error+0x8c>)
    2012:	f362 0307 	bfi	r3, r2, #0, #8
    2016:	4a1e      	ldr	r2, [pc, #120]	; (2090 <z_arm_fatal_error+0x90>)
    2018:	481e      	ldr	r0, [pc, #120]	; (2094 <z_arm_fatal_error+0x94>)
    201a:	1aad      	subs	r5, r5, r2
    201c:	f3c5 05c9 	ubfx	r5, r5, #3, #10
    2020:	f365 138f 	bfi	r3, r5, #6, #10
    2024:	f8ad 3000 	strh.w	r3, [sp]
    2028:	e9d1 2301 	ldrd	r2, r3, [r1, #4]
    202c:	6809      	ldr	r1, [r1, #0]
    202e:	f009 fae0 	bl	b5f2 <log_3>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    2032:	2201      	movs	r2, #1
    2034:	f04f 0300 	mov.w	r3, #0
    2038:	f362 0307 	bfi	r3, r2, #0, #8
    203c:	f365 138f 	bfi	r3, r5, #6, #10
    2040:	f8ad 3000 	strh.w	r3, [sp]
    2044:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    2048:	68e1      	ldr	r1, [r4, #12]
    204a:	4813      	ldr	r0, [pc, #76]	; (2098 <z_arm_fatal_error+0x98>)
    204c:	f009 fad1 	bl	b5f2 <log_3>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    2050:	2301      	movs	r3, #1
    2052:	f04f 0200 	mov.w	r2, #0
    2056:	f363 0207 	bfi	r2, r3, #0, #8
    205a:	f365 128f 	bfi	r2, r5, #6, #10
    205e:	69e1      	ldr	r1, [r4, #28]
    2060:	480e      	ldr	r0, [pc, #56]	; (209c <z_arm_fatal_error+0x9c>)
    2062:	f009 fa9a 	bl	b59a <log_1>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    2066:	f04f 0200 	mov.w	r2, #0
    206a:	2301      	movs	r3, #1
    206c:	f363 0207 	bfi	r2, r3, #0, #8
    2070:	f365 128f 	bfi	r2, r5, #6, #10
    2074:	69a1      	ldr	r1, [r4, #24]
    2076:	480a      	ldr	r0, [pc, #40]	; (20a0 <z_arm_fatal_error+0xa0>)
    2078:	f009 fa8f 	bl	b59a <log_1>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    207c:	4621      	mov	r1, r4
    207e:	4630      	mov	r0, r6
}
    2080:	b002      	add	sp, #8
    2082:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_fatal_error(reason, esf);
    2086:	f007 b969 	b.w	935c <z_fatal_error>
    208a:	bf00      	nop
    208c:	0000e75c 	.word	0x0000e75c
    2090:	0000e6dc 	.word	0x0000e6dc
    2094:	0000f786 	.word	0x0000f786
    2098:	0000f7b5 	.word	0x0000f7b5
    209c:	0000f7e4 	.word	0x0000f7e4
    20a0:	0000f7f3 	.word	0x0000f7f3

000020a4 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    20a4:	bf30      	wfi
    b z_SysNmiOnReset
    20a6:	f7ff bffd 	b.w	20a4 <z_SysNmiOnReset>
    20aa:	bf00      	nop

000020ac <z_arm_prep_c>:
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    20ac:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    20ae:	4b08      	ldr	r3, [pc, #32]	; (20d0 <z_arm_prep_c+0x24>)
    20b0:	4a08      	ldr	r2, [pc, #32]	; (20d4 <z_arm_prep_c+0x28>)
    20b2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    20b6:	6093      	str	r3, [r2, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    20b8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    20bc:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
	enable_floating_point();
	z_bss_zero();
    20c0:	f007 f9cc 	bl	945c <z_bss_zero>
	z_data_copy();
    20c4:	f007 f9d4 	bl	9470 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_int_lib_init();
    20c8:	f000 faf0 	bl	26ac <z_arm_int_lib_init>
	z_cstart();
    20cc:	f007 fa0e 	bl	94ec <z_cstart>
    20d0:	00000000 	.word	0x00000000
    20d4:	e000ed00 	.word	0xe000ed00

000020d8 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    20d8:	b501      	push	{r0, lr}
      * FIXME: Remove the Cortex-M conditional compilation checks for `cpsid i`
      *        and `cpsie i` after the Cortex-R port is updated to support
      *        interrupt nesting.  For more details, refer to the issue #21758.
      */
#if defined(CONFIG_CPU_CORTEX_M)
	cpsid i  /* PRIMASK = 1 */
    20da:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    20dc:	4a0b      	ldr	r2, [pc, #44]	; (210c <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    20de:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
    20e0:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    20e2:	bf1e      	ittt	ne
	movne	r1, #0
    20e4:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    20e6:	6211      	strne	r1, [r2, #32]
		blne	z_sys_power_save_idle_exit
    20e8:	f00b fd18 	blne	db1c <z_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    20ec:	b662      	cpsie	i
#endif

#endif /* CONFIG_SYS_POWER_MANAGEMENT */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    20ee:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    20f2:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    20f6:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 */
	mov r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldr r1, =_sw_isr_table
    20fa:	4905      	ldr	r1, [pc, #20]	; (2110 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    20fc:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    20fe:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldm sp!,{r0-r3} /* Restore r0 to r3 regs */
#endif /* CONFIG_EXECUTION_BENCHMARKING */
	blx r3		/* call ISR */
    2100:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    2102:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    2106:	4903      	ldr	r1, [pc, #12]	; (2114 <_isr_wrapper+0x3c>)
	bx r1
    2108:	4708      	bx	r1
    210a:	0000      	.short	0x0000
	ldr r2, =_kernel
    210c:	200011d0 	.word	0x200011d0
	ldr r1, =_sw_isr_table
    2110:	0000e3b8 	.word	0x0000e3b8
	ldr r1, =z_arm_int_exit
    2114:	00001e41 	.word	0x00001e41

00002118 <__start>:
 * search for a __start symbol instead, so create that alias here.
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    2118:	f008 fdf4 	bl	ad04 <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    211c:	2020      	movs	r0, #32
    msr BASEPRI, r0
    211e:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during initialization.
     */
    ldr r0, =_interrupt_stack
    2122:	4808      	ldr	r0, [pc, #32]	; (2144 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
    2124:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    2128:	1840      	adds	r0, r0, r1
    msr PSP, r0
    212a:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    212e:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    2132:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    2134:	4308      	orrs	r0, r1
    msr CONTROL, r0
    2136:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    213a:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    213e:	f7ff ffb5 	bl	20ac <z_arm_prep_c>
    2142:	0000      	.short	0x0000
    ldr r0, =_interrupt_stack
    2144:	20002ad8 	.word	0x20002ad8

00002148 <usage_fault.isra.2>:
 */
static u32_t usage_fault(const z_arch_esf_t *esf)
{
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
    2148:	2301      	movs	r3, #1
    214a:	f04f 0100 	mov.w	r1, #0
static u32_t usage_fault(const z_arch_esf_t *esf)
    214e:	b510      	push	{r4, lr}
	PR_FAULT_INFO("***** USAGE FAULT *****");
    2150:	f363 0107 	bfi	r1, r3, #0, #8
    2154:	4c3a      	ldr	r4, [pc, #232]	; (2240 <usage_fault.isra.2+0xf8>)
    2156:	4b3b      	ldr	r3, [pc, #236]	; (2244 <usage_fault.isra.2+0xfc>)
    2158:	483b      	ldr	r0, [pc, #236]	; (2248 <usage_fault.isra.2+0x100>)
    215a:	1ae4      	subs	r4, r4, r3
    215c:	f3c4 04c9 	ubfx	r4, r4, #3, #10
    2160:	f364 118f 	bfi	r1, r4, #6, #10
    2164:	f009 fa0c 	bl	b580 <log_0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    2168:	4b38      	ldr	r3, [pc, #224]	; (224c <usage_fault.isra.2+0x104>)
    216a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    216c:	0199      	lsls	r1, r3, #6
    216e:	d509      	bpl.n	2184 <usage_fault.isra.2+0x3c>
		PR_FAULT_INFO("  Division by zero");
    2170:	f04f 0100 	mov.w	r1, #0
    2174:	2301      	movs	r3, #1
    2176:	f363 0107 	bfi	r1, r3, #0, #8
    217a:	f364 118f 	bfi	r1, r4, #6, #10
    217e:	4834      	ldr	r0, [pc, #208]	; (2250 <usage_fault.isra.2+0x108>)
    2180:	f009 f9fe 	bl	b580 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    2184:	4b31      	ldr	r3, [pc, #196]	; (224c <usage_fault.isra.2+0x104>)
    2186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2188:	01da      	lsls	r2, r3, #7
    218a:	d509      	bpl.n	21a0 <usage_fault.isra.2+0x58>
		PR_FAULT_INFO("  Unaligned memory access");
    218c:	f04f 0100 	mov.w	r1, #0
    2190:	2301      	movs	r3, #1
    2192:	f363 0107 	bfi	r1, r3, #0, #8
    2196:	f364 118f 	bfi	r1, r4, #6, #10
    219a:	482e      	ldr	r0, [pc, #184]	; (2254 <usage_fault.isra.2+0x10c>)
    219c:	f009 f9f0 	bl	b580 <log_0>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    21a0:	4b2a      	ldr	r3, [pc, #168]	; (224c <usage_fault.isra.2+0x104>)
    21a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    21a4:	02db      	lsls	r3, r3, #11
    21a6:	d509      	bpl.n	21bc <usage_fault.isra.2+0x74>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
    21a8:	f04f 0100 	mov.w	r1, #0
    21ac:	2301      	movs	r3, #1
    21ae:	f363 0107 	bfi	r1, r3, #0, #8
    21b2:	f364 118f 	bfi	r1, r4, #6, #10
    21b6:	4828      	ldr	r0, [pc, #160]	; (2258 <usage_fault.isra.2+0x110>)
    21b8:	f009 f9e2 	bl	b580 <log_0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    21bc:	4b23      	ldr	r3, [pc, #140]	; (224c <usage_fault.isra.2+0x104>)
    21be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    21c0:	0318      	lsls	r0, r3, #12
    21c2:	d509      	bpl.n	21d8 <usage_fault.isra.2+0x90>
		PR_FAULT_INFO("  No coprocessor instructions");
    21c4:	f04f 0100 	mov.w	r1, #0
    21c8:	2301      	movs	r3, #1
    21ca:	f363 0107 	bfi	r1, r3, #0, #8
    21ce:	f364 118f 	bfi	r1, r4, #6, #10
    21d2:	4822      	ldr	r0, [pc, #136]	; (225c <usage_fault.isra.2+0x114>)
    21d4:	f009 f9d4 	bl	b580 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    21d8:	4b1c      	ldr	r3, [pc, #112]	; (224c <usage_fault.isra.2+0x104>)
    21da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    21dc:	0359      	lsls	r1, r3, #13
    21de:	d509      	bpl.n	21f4 <usage_fault.isra.2+0xac>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    21e0:	f04f 0100 	mov.w	r1, #0
    21e4:	2301      	movs	r3, #1
    21e6:	f363 0107 	bfi	r1, r3, #0, #8
    21ea:	f364 118f 	bfi	r1, r4, #6, #10
    21ee:	481c      	ldr	r0, [pc, #112]	; (2260 <usage_fault.isra.2+0x118>)
    21f0:	f009 f9c6 	bl	b580 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    21f4:	4b15      	ldr	r3, [pc, #84]	; (224c <usage_fault.isra.2+0x104>)
    21f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    21f8:	039a      	lsls	r2, r3, #14
    21fa:	d509      	bpl.n	2210 <usage_fault.isra.2+0xc8>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    21fc:	f04f 0100 	mov.w	r1, #0
    2200:	2301      	movs	r3, #1
    2202:	f363 0107 	bfi	r1, r3, #0, #8
    2206:	f364 118f 	bfi	r1, r4, #6, #10
    220a:	4816      	ldr	r0, [pc, #88]	; (2264 <usage_fault.isra.2+0x11c>)
    220c:	f009 f9b8 	bl	b580 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    2210:	4b0e      	ldr	r3, [pc, #56]	; (224c <usage_fault.isra.2+0x104>)
    2212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2214:	03db      	lsls	r3, r3, #15
    2216:	d509      	bpl.n	222c <usage_fault.isra.2+0xe4>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    2218:	f04f 0100 	mov.w	r1, #0
    221c:	2301      	movs	r3, #1
    221e:	f363 0107 	bfi	r1, r3, #0, #8
    2222:	f364 118f 	bfi	r1, r4, #6, #10
    2226:	4810      	ldr	r0, [pc, #64]	; (2268 <usage_fault.isra.2+0x120>)
    2228:	f009 f9aa 	bl	b580 <log_0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    222c:	4a07      	ldr	r2, [pc, #28]	; (224c <usage_fault.isra.2+0x104>)

	return reason;
}
    222e:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    2230:	6a93      	ldr	r3, [r2, #40]	; 0x28
    2232:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    2236:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    223a:	6293      	str	r3, [r2, #40]	; 0x28
}
    223c:	bd10      	pop	{r4, pc}
    223e:	bf00      	nop
    2240:	0000e75c 	.word	0x0000e75c
    2244:	0000e6dc 	.word	0x0000e6dc
    2248:	0000f981 	.word	0x0000f981
    224c:	e000ed00 	.word	0xe000ed00
    2250:	0000f999 	.word	0x0000f999
    2254:	0000f9ac 	.word	0x0000f9ac
    2258:	0000f9c6 	.word	0x0000f9c6
    225c:	0000f9f0 	.word	0x0000f9f0
    2260:	0000fa0e 	.word	0x0000fa0e
    2264:	0000fa33 	.word	0x0000fa33
    2268:	0000fa4d 	.word	0x0000fa4d

0000226c <mem_manage_fault.isra.4>:
static u32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    226c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	PR_FAULT_INFO("***** MPU FAULT *****");
    226e:	2301      	movs	r3, #1
static u32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    2270:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    2272:	f04f 0100 	mov.w	r1, #0
    2276:	4c37      	ldr	r4, [pc, #220]	; (2354 <mem_manage_fault.isra.4+0xe8>)
    2278:	f363 0107 	bfi	r1, r3, #0, #8
    227c:	4b36      	ldr	r3, [pc, #216]	; (2358 <mem_manage_fault.isra.4+0xec>)
static u32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    227e:	4607      	mov	r7, r0
	PR_FAULT_INFO("***** MPU FAULT *****");
    2280:	1ae4      	subs	r4, r4, r3
    2282:	f3c4 04c9 	ubfx	r4, r4, #3, #10
    2286:	f364 118f 	bfi	r1, r4, #6, #10
    228a:	4834      	ldr	r0, [pc, #208]	; (235c <mem_manage_fault.isra.4+0xf0>)
    228c:	f009 f978 	bl	b580 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    2290:	4b33      	ldr	r3, [pc, #204]	; (2360 <mem_manage_fault.isra.4+0xf4>)
    2292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2294:	06d9      	lsls	r1, r3, #27
    2296:	d509      	bpl.n	22ac <mem_manage_fault.isra.4+0x40>
		PR_FAULT_INFO("  Stacking error (context area might be"
    2298:	f04f 0100 	mov.w	r1, #0
    229c:	2301      	movs	r3, #1
    229e:	f363 0107 	bfi	r1, r3, #0, #8
    22a2:	f364 118f 	bfi	r1, r4, #6, #10
    22a6:	482f      	ldr	r0, [pc, #188]	; (2364 <mem_manage_fault.isra.4+0xf8>)
    22a8:	f009 f96a 	bl	b580 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    22ac:	4b2c      	ldr	r3, [pc, #176]	; (2360 <mem_manage_fault.isra.4+0xf4>)
    22ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    22b0:	071a      	lsls	r2, r3, #28
    22b2:	d509      	bpl.n	22c8 <mem_manage_fault.isra.4+0x5c>
		PR_FAULT_INFO("  Unstacking error");
    22b4:	f04f 0100 	mov.w	r1, #0
    22b8:	2301      	movs	r3, #1
    22ba:	f363 0107 	bfi	r1, r3, #0, #8
    22be:	f364 118f 	bfi	r1, r4, #6, #10
    22c2:	4829      	ldr	r0, [pc, #164]	; (2368 <mem_manage_fault.isra.4+0xfc>)
    22c4:	f009 f95c 	bl	b580 <log_0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    22c8:	4d25      	ldr	r5, [pc, #148]	; (2360 <mem_manage_fault.isra.4+0xf4>)
    22ca:	6aab      	ldr	r3, [r5, #40]	; 0x28
    22cc:	079b      	lsls	r3, r3, #30
    22ce:	d51c      	bpl.n	230a <mem_manage_fault.isra.4+0x9e>
		PR_FAULT_INFO("  Data Access Violation");
    22d0:	2301      	movs	r3, #1
    22d2:	f04f 0100 	mov.w	r1, #0
    22d6:	f363 0107 	bfi	r1, r3, #0, #8
    22da:	f364 118f 	bfi	r1, r4, #6, #10
    22de:	4823      	ldr	r0, [pc, #140]	; (236c <mem_manage_fault.isra.4+0x100>)
    22e0:	f009 f94e 	bl	b580 <log_0>
		mmfar = SCB->MMFAR;
    22e4:	6b69      	ldr	r1, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    22e6:	6aab      	ldr	r3, [r5, #40]	; 0x28
    22e8:	0618      	lsls	r0, r3, #24
    22ea:	d50e      	bpl.n	230a <mem_manage_fault.isra.4+0x9e>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    22ec:	f04f 0200 	mov.w	r2, #0
    22f0:	2301      	movs	r3, #1
    22f2:	f363 0207 	bfi	r2, r3, #0, #8
    22f6:	f364 128f 	bfi	r2, r4, #6, #10
    22fa:	481d      	ldr	r0, [pc, #116]	; (2370 <mem_manage_fault.isra.4+0x104>)
    22fc:	f009 f94d 	bl	b59a <log_1>
			if (from_hard_fault) {
    2300:	b11f      	cbz	r7, 230a <mem_manage_fault.isra.4+0x9e>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    2302:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2304:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    2308:	62ab      	str	r3, [r5, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    230a:	4b15      	ldr	r3, [pc, #84]	; (2360 <mem_manage_fault.isra.4+0xf4>)
    230c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    230e:	07da      	lsls	r2, r3, #31
    2310:	d509      	bpl.n	2326 <mem_manage_fault.isra.4+0xba>
		PR_FAULT_INFO("  Instruction Access Violation");
    2312:	f04f 0100 	mov.w	r1, #0
    2316:	2301      	movs	r3, #1
    2318:	f363 0107 	bfi	r1, r3, #0, #8
    231c:	f364 118f 	bfi	r1, r4, #6, #10
    2320:	4814      	ldr	r0, [pc, #80]	; (2374 <mem_manage_fault.isra.4+0x108>)
    2322:	f009 f92d 	bl	b580 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    2326:	4b0e      	ldr	r3, [pc, #56]	; (2360 <mem_manage_fault.isra.4+0xf4>)
    2328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    232a:	069b      	lsls	r3, r3, #26
    232c:	d509      	bpl.n	2342 <mem_manage_fault.isra.4+0xd6>
		PR_FAULT_INFO(
    232e:	f04f 0100 	mov.w	r1, #0
    2332:	2301      	movs	r3, #1
    2334:	f363 0107 	bfi	r1, r3, #0, #8
    2338:	f364 118f 	bfi	r1, r4, #6, #10
    233c:	480e      	ldr	r0, [pc, #56]	; (2378 <mem_manage_fault.isra.4+0x10c>)
    233e:	f009 f91f 	bl	b580 <log_0>
	*recoverable = memory_fault_recoverable(esf);
    2342:	2000      	movs	r0, #0
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    2344:	4b06      	ldr	r3, [pc, #24]	; (2360 <mem_manage_fault.isra.4+0xf4>)
    2346:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    2348:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    234a:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    234e:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    2350:	7030      	strb	r0, [r6, #0]
}
    2352:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2354:	0000e75c 	.word	0x0000e75c
    2358:	0000e6dc 	.word	0x0000e6dc
    235c:	0000f8a9 	.word	0x0000f8a9
    2360:	e000ed00 	.word	0xe000ed00
    2364:	0000f8bf 	.word	0x0000f8bf
    2368:	0000f8f2 	.word	0x0000f8f2
    236c:	0000f905 	.word	0x0000f905
    2370:	0000f91d 	.word	0x0000f91d
    2374:	0000f933 	.word	0x0000f933
    2378:	0000f952 	.word	0x0000f952

0000237c <bus_fault.isra.5>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    237c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	PR_FAULT_INFO("***** BUS FAULT *****");
    237e:	2301      	movs	r3, #1
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    2380:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    2382:	f04f 0100 	mov.w	r1, #0
    2386:	4c3d      	ldr	r4, [pc, #244]	; (247c <bus_fault.isra.5+0x100>)
    2388:	f363 0107 	bfi	r1, r3, #0, #8
    238c:	4b3c      	ldr	r3, [pc, #240]	; (2480 <bus_fault.isra.5+0x104>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    238e:	4607      	mov	r7, r0
	PR_FAULT_INFO("***** BUS FAULT *****");
    2390:	1ae4      	subs	r4, r4, r3
    2392:	f3c4 04c9 	ubfx	r4, r4, #3, #10
    2396:	f364 118f 	bfi	r1, r4, #6, #10
    239a:	483a      	ldr	r0, [pc, #232]	; (2484 <bus_fault.isra.5+0x108>)
    239c:	f009 f8f0 	bl	b580 <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    23a0:	4b39      	ldr	r3, [pc, #228]	; (2488 <bus_fault.isra.5+0x10c>)
    23a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    23a4:	04d9      	lsls	r1, r3, #19
    23a6:	d509      	bpl.n	23bc <bus_fault.isra.5+0x40>
		PR_FAULT_INFO("  Stacking error");
    23a8:	f04f 0100 	mov.w	r1, #0
    23ac:	2301      	movs	r3, #1
    23ae:	f363 0107 	bfi	r1, r3, #0, #8
    23b2:	f364 118f 	bfi	r1, r4, #6, #10
    23b6:	4835      	ldr	r0, [pc, #212]	; (248c <bus_fault.isra.5+0x110>)
    23b8:	f009 f8e2 	bl	b580 <log_0>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    23bc:	4b32      	ldr	r3, [pc, #200]	; (2488 <bus_fault.isra.5+0x10c>)
    23be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    23c0:	051a      	lsls	r2, r3, #20
    23c2:	d509      	bpl.n	23d8 <bus_fault.isra.5+0x5c>
		PR_FAULT_INFO("  Unstacking error");
    23c4:	f04f 0100 	mov.w	r1, #0
    23c8:	2301      	movs	r3, #1
    23ca:	f363 0107 	bfi	r1, r3, #0, #8
    23ce:	f364 118f 	bfi	r1, r4, #6, #10
    23d2:	482f      	ldr	r0, [pc, #188]	; (2490 <bus_fault.isra.5+0x114>)
    23d4:	f009 f8d4 	bl	b580 <log_0>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    23d8:	4d2b      	ldr	r5, [pc, #172]	; (2488 <bus_fault.isra.5+0x10c>)
    23da:	6aab      	ldr	r3, [r5, #40]	; 0x28
    23dc:	059b      	lsls	r3, r3, #22
    23de:	d51c      	bpl.n	241a <bus_fault.isra.5+0x9e>
		PR_FAULT_INFO("  Precise data bus error");
    23e0:	2301      	movs	r3, #1
    23e2:	f04f 0100 	mov.w	r1, #0
    23e6:	f363 0107 	bfi	r1, r3, #0, #8
    23ea:	f364 118f 	bfi	r1, r4, #6, #10
    23ee:	4829      	ldr	r0, [pc, #164]	; (2494 <bus_fault.isra.5+0x118>)
    23f0:	f009 f8c6 	bl	b580 <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
    23f4:	6ba9      	ldr	r1, [r5, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    23f6:	6aab      	ldr	r3, [r5, #40]	; 0x28
    23f8:	0418      	lsls	r0, r3, #16
    23fa:	d50e      	bpl.n	241a <bus_fault.isra.5+0x9e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    23fc:	f04f 0200 	mov.w	r2, #0
    2400:	2301      	movs	r3, #1
    2402:	f363 0207 	bfi	r2, r3, #0, #8
    2406:	f364 128f 	bfi	r2, r4, #6, #10
    240a:	4823      	ldr	r0, [pc, #140]	; (2498 <bus_fault.isra.5+0x11c>)
    240c:	f009 f8c5 	bl	b59a <log_1>
			if (from_hard_fault) {
    2410:	b11f      	cbz	r7, 241a <bus_fault.isra.5+0x9e>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    2412:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2414:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    2418:	62ab      	str	r3, [r5, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    241a:	4b1b      	ldr	r3, [pc, #108]	; (2488 <bus_fault.isra.5+0x10c>)
    241c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    241e:	0559      	lsls	r1, r3, #21
    2420:	d509      	bpl.n	2436 <bus_fault.isra.5+0xba>
		PR_FAULT_INFO("  Imprecise data bus error");
    2422:	f04f 0100 	mov.w	r1, #0
    2426:	2301      	movs	r3, #1
    2428:	f363 0107 	bfi	r1, r3, #0, #8
    242c:	f364 118f 	bfi	r1, r4, #6, #10
    2430:	481a      	ldr	r0, [pc, #104]	; (249c <bus_fault.isra.5+0x120>)
    2432:	f009 f8a5 	bl	b580 <log_0>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    2436:	4b14      	ldr	r3, [pc, #80]	; (2488 <bus_fault.isra.5+0x10c>)
    2438:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    243a:	05d2      	lsls	r2, r2, #23
    243c:	d511      	bpl.n	2462 <bus_fault.isra.5+0xe6>
		PR_FAULT_INFO("  Instruction bus error");
    243e:	f04f 0100 	mov.w	r1, #0
    2442:	2301      	movs	r3, #1
    2444:	4816      	ldr	r0, [pc, #88]	; (24a0 <bus_fault.isra.5+0x124>)
    2446:	f363 0107 	bfi	r1, r3, #0, #8
    244a:	f364 118f 	bfi	r1, r4, #6, #10
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    244e:	f009 f897 	bl	b580 <log_0>
	*recoverable = memory_fault_recoverable(esf);
    2452:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    2454:	4a0c      	ldr	r2, [pc, #48]	; (2488 <bus_fault.isra.5+0x10c>)
    2456:	6a93      	ldr	r3, [r2, #40]	; 0x28
    2458:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    245c:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    245e:	7030      	strb	r0, [r6, #0]
}
    2460:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    2462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2464:	049b      	lsls	r3, r3, #18
    2466:	d5f4      	bpl.n	2452 <bus_fault.isra.5+0xd6>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    2468:	f04f 0100 	mov.w	r1, #0
    246c:	2301      	movs	r3, #1
    246e:	f363 0107 	bfi	r1, r3, #0, #8
    2472:	f364 118f 	bfi	r1, r4, #6, #10
    2476:	480b      	ldr	r0, [pc, #44]	; (24a4 <bus_fault.isra.5+0x128>)
    2478:	e7e9      	b.n	244e <bus_fault.isra.5+0xd2>
    247a:	bf00      	nop
    247c:	0000e75c 	.word	0x0000e75c
    2480:	0000e6dc 	.word	0x0000e6dc
    2484:	0000f821 	.word	0x0000f821
    2488:	e000ed00 	.word	0xe000ed00
    248c:	0000f837 	.word	0x0000f837
    2490:	0000f8f2 	.word	0x0000f8f2
    2494:	0000f848 	.word	0x0000f848
    2498:	0000f861 	.word	0x0000f861
    249c:	0000f876 	.word	0x0000f876
    24a0:	0000f891 	.word	0x0000f891
    24a4:	0000f952 	.word	0x0000f952

000024a8 <z_arm_fault>:
 * @param psp PSP value immediately after the exception occurred
 * @param exc_return EXC_RETURN value present in LR after exception entry.
 *
 */
void z_arm_fault(u32_t msp, u32_t psp, u32_t exc_return)
{
    24a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	u32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    24ac:	4b64      	ldr	r3, [pc, #400]	; (2640 <z_arm_fault+0x198>)
{
    24ae:	b08a      	sub	sp, #40	; 0x28
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    24b0:	685e      	ldr	r6, [r3, #4]
    24b2:	2500      	movs	r5, #0
    24b4:	f3c6 0408 	ubfx	r4, r6, #0, #9
    24b8:	f385 8811 	msr	BASEPRI, r5
    24bc:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    24c0:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    24c4:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    24c8:	d111      	bne.n	24ee <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    24ca:	f002 030c 	and.w	r3, r2, #12
    24ce:	2b08      	cmp	r3, #8
    24d0:	d10f      	bne.n	24f2 <z_arm_fault+0x4a>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    24d2:	2301      	movs	r3, #1
    24d4:	f04f 0100 	mov.w	r1, #0
    24d8:	4a5a      	ldr	r2, [pc, #360]	; (2644 <z_arm_fault+0x19c>)
    24da:	f363 0107 	bfi	r1, r3, #0, #8
    24de:	4b5a      	ldr	r3, [pc, #360]	; (2648 <z_arm_fault+0x1a0>)
    24e0:	485a      	ldr	r0, [pc, #360]	; (264c <z_arm_fault+0x1a4>)
    24e2:	1a9b      	subs	r3, r3, r2
    24e4:	08db      	lsrs	r3, r3, #3
    24e6:	f363 118f 	bfi	r1, r3, #6, #10
    24ea:	f009 f849 	bl	b580 <log_0>
		return NULL;
    24ee:	462f      	mov	r7, r5
    24f0:	e004      	b.n	24fc <z_arm_fault+0x54>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    24f2:	0712      	lsls	r2, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
    24f4:	bf4e      	itee	mi
    24f6:	460f      	movmi	r7, r1
			ptr_esf = (z_arch_esf_t *)msp;
    24f8:	4607      	movpl	r7, r0
			*nested_exc = true;
    24fa:	2501      	movpl	r5, #1
	*recoverable = false;
    24fc:	2300      	movs	r3, #0
    24fe:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
    2502:	1ee3      	subs	r3, r4, #3
    2504:	2b09      	cmp	r3, #9
    2506:	d87f      	bhi.n	2608 <z_arm_fault+0x160>
    2508:	e8df f003 	tbb	[pc, r3]
    250c:	4c6d6905 	.word	0x4c6d6905
    2510:	7e7e7e7e 	.word	0x7e7e7e7e
    2514:	717e      	.short	0x717e
	PR_FAULT_INFO("***** HARD FAULT *****");
    2516:	2301      	movs	r3, #1
    2518:	f04f 0100 	mov.w	r1, #0
	*recoverable = false;
    251c:	f04f 0800 	mov.w	r8, #0
	PR_FAULT_INFO("***** HARD FAULT *****");
    2520:	f363 0107 	bfi	r1, r3, #0, #8
    2524:	4e48      	ldr	r6, [pc, #288]	; (2648 <z_arm_fault+0x1a0>)
    2526:	4b47      	ldr	r3, [pc, #284]	; (2644 <z_arm_fault+0x19c>)
    2528:	4849      	ldr	r0, [pc, #292]	; (2650 <z_arm_fault+0x1a8>)
    252a:	1af6      	subs	r6, r6, r3
    252c:	f3c6 06c9 	ubfx	r6, r6, #3, #10
    2530:	f366 118f 	bfi	r1, r6, #6, #10
    2534:	f009 f824 	bl	b580 <log_0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    2538:	4b41      	ldr	r3, [pc, #260]	; (2640 <z_arm_fault+0x198>)
	*recoverable = false;
    253a:	f88d 8007 	strb.w	r8, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    253e:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    2540:	f014 0402 	ands.w	r4, r4, #2
    2544:	d00b      	beq.n	255e <z_arm_fault+0xb6>
		PR_EXC("  Bus fault on vector table read");
    2546:	f04f 0100 	mov.w	r1, #0
    254a:	2301      	movs	r3, #1
    254c:	4841      	ldr	r0, [pc, #260]	; (2654 <z_arm_fault+0x1ac>)
    254e:	f363 0107 	bfi	r1, r3, #0, #8
    2552:	f366 118f 	bfi	r1, r6, #6, #10
	PR_FAULT_INFO(
    2556:	f009 f813 	bl	b580 <log_0>
	u32_t reason = K_ERR_CPU_EXCEPTION;
    255a:	2400      	movs	r4, #0
    255c:	e025      	b.n	25aa <z_arm_fault+0x102>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    255e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2560:	005b      	lsls	r3, r3, #1
    2562:	d522      	bpl.n	25aa <z_arm_fault+0x102>
		PR_EXC("  Fault escalation (see below)");
    2564:	2301      	movs	r3, #1
    2566:	f04f 0100 	mov.w	r1, #0
    256a:	f363 0107 	bfi	r1, r3, #0, #8
    256e:	f366 118f 	bfi	r1, r6, #6, #10
    2572:	4839      	ldr	r0, [pc, #228]	; (2658 <z_arm_fault+0x1b0>)
    2574:	f009 f804 	bl	b580 <log_0>
		if (SCB_MMFSR != 0) {
    2578:	4b38      	ldr	r3, [pc, #224]	; (265c <z_arm_fault+0x1b4>)
    257a:	781b      	ldrb	r3, [r3, #0]
    257c:	b12b      	cbz	r3, 258a <z_arm_fault+0xe2>
			reason = mem_manage_fault(esf, 1, recoverable);
    257e:	2001      	movs	r0, #1
    2580:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
    2584:	f7ff fe72 	bl	226c <mem_manage_fault.isra.4>
    2588:	e00e      	b.n	25a8 <z_arm_fault+0x100>
		} else if (SCB_BFSR != 0) {
    258a:	4b35      	ldr	r3, [pc, #212]	; (2660 <z_arm_fault+0x1b8>)
    258c:	781b      	ldrb	r3, [r3, #0]
    258e:	b12b      	cbz	r3, 259c <z_arm_fault+0xf4>
			reason = bus_fault(esf, 1, recoverable);
    2590:	2001      	movs	r0, #1
    2592:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
    2596:	f7ff fef1 	bl	237c <bus_fault.isra.5>
    259a:	e005      	b.n	25a8 <z_arm_fault+0x100>
		} else if (SCB_UFSR != 0) {
    259c:	4b31      	ldr	r3, [pc, #196]	; (2664 <z_arm_fault+0x1bc>)
    259e:	881b      	ldrh	r3, [r3, #0]
    25a0:	b29b      	uxth	r3, r3
    25a2:	b113      	cbz	r3, 25aa <z_arm_fault+0x102>
			reason = usage_fault(esf);
    25a4:	f7ff fdd0 	bl	2148 <usage_fault.isra.2>
    25a8:	4604      	mov	r4, r0
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
		"ESF could not be retrieved successfully. Shall never occur.");

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    25aa:	f89d 3007 	ldrb.w	r3, [sp, #7]
    25ae:	b99b      	cbnz	r3, 25d8 <z_arm_fault+0x130>
		return;
	}

	/* Copy ESF */
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    25b0:	2220      	movs	r2, #32
    25b2:	4639      	mov	r1, r7
    25b4:	a802      	add	r0, sp, #8
    25b6:	f009 fc72 	bl	be9e <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    25ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
    25bc:	2d00      	cmp	r5, #0
    25be:	d03a      	beq.n	2636 <z_arm_fault+0x18e>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    25c0:	f3c3 0208 	ubfx	r2, r3, #0, #9
    25c4:	b922      	cbnz	r2, 25d0 <z_arm_fault+0x128>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    25c6:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    25ca:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    25ce:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    25d0:	a902      	add	r1, sp, #8
    25d2:	4620      	mov	r0, r4
    25d4:	f7ff fd14 	bl	2000 <z_arm_fatal_error>
}
    25d8:	b00a      	add	sp, #40	; 0x28
    25da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
    25de:	f10d 0107 	add.w	r1, sp, #7
    25e2:	2000      	movs	r0, #0
    25e4:	e7ce      	b.n	2584 <z_arm_fault+0xdc>
		reason = bus_fault(esf, 0, recoverable);
    25e6:	f10d 0107 	add.w	r1, sp, #7
    25ea:	2000      	movs	r0, #0
    25ec:	e7d3      	b.n	2596 <z_arm_fault+0xee>
	PR_FAULT_INFO(
    25ee:	2301      	movs	r3, #1
    25f0:	f04f 0100 	mov.w	r1, #0
    25f4:	4a13      	ldr	r2, [pc, #76]	; (2644 <z_arm_fault+0x19c>)
    25f6:	f363 0107 	bfi	r1, r3, #0, #8
    25fa:	4b13      	ldr	r3, [pc, #76]	; (2648 <z_arm_fault+0x1a0>)
    25fc:	481a      	ldr	r0, [pc, #104]	; (2668 <z_arm_fault+0x1c0>)
    25fe:	1a9b      	subs	r3, r3, r2
    2600:	08db      	lsrs	r3, r3, #3
    2602:	f363 118f 	bfi	r1, r3, #6, #10
    2606:	e7a6      	b.n	2556 <z_arm_fault+0xae>
	PR_FAULT_INFO("***** %s %d) *****",
    2608:	2201      	movs	r2, #1
    260a:	f04f 0300 	mov.w	r3, #0
    260e:	490e      	ldr	r1, [pc, #56]	; (2648 <z_arm_fault+0x1a0>)
    2610:	f362 0307 	bfi	r3, r2, #0, #8
    2614:	4a0b      	ldr	r2, [pc, #44]	; (2644 <z_arm_fault+0x19c>)
    2616:	4815      	ldr	r0, [pc, #84]	; (266c <z_arm_fault+0x1c4>)
    2618:	1a89      	subs	r1, r1, r2
    261a:	08c9      	lsrs	r1, r1, #3
    261c:	f416 7ff8 	tst.w	r6, #496	; 0x1f0
    2620:	f361 138f 	bfi	r3, r1, #6, #10
    2624:	f1a4 0210 	sub.w	r2, r4, #16
    2628:	4911      	ldr	r1, [pc, #68]	; (2670 <z_arm_fault+0x1c8>)
    262a:	bf18      	it	ne
    262c:	4601      	movne	r1, r0
    262e:	4811      	ldr	r0, [pc, #68]	; (2674 <z_arm_fault+0x1cc>)
    2630:	f008 ffc7 	bl	b5c2 <log_2>
    2634:	e791      	b.n	255a <z_arm_fault+0xb2>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    2636:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    263a:	f023 0301 	bic.w	r3, r3, #1
    263e:	e7c6      	b.n	25ce <z_arm_fault+0x126>
    2640:	e000ed00 	.word	0xe000ed00
    2644:	0000e6dc 	.word	0x0000e6dc
    2648:	0000e75c 	.word	0x0000e75c
    264c:	0000fa78 	.word	0x0000fa78
    2650:	0000faa3 	.word	0x0000faa3
    2654:	0000faba 	.word	0x0000faba
    2658:	0000fadb 	.word	0x0000fadb
    265c:	e000ed28 	.word	0xe000ed28
    2660:	e000ed29 	.word	0xe000ed29
    2664:	e000ed2a 	.word	0xe000ed2a
    2668:	0000fafa 	.word	0x0000fafa
    266c:	0000fb45 	.word	0x0000fb45
    2670:	0000fb30 	.word	0x0000fb30
    2674:	0000fb5e 	.word	0x0000fb5e

00002678 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    2678:	4a02      	ldr	r2, [pc, #8]	; (2684 <z_arm_fault_init+0xc>)
    267a:	6953      	ldr	r3, [r2, #20]
    267c:	f043 0310 	orr.w	r3, r3, #16
    2680:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    2682:	4770      	bx	lr
    2684:	e000ed00 	.word	0xe000ed00

00002688 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
    2688:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    268c:	4905      	ldr	r1, [pc, #20]	; (26a4 <sys_arch_reboot+0x1c>)
    268e:	4b06      	ldr	r3, [pc, #24]	; (26a8 <sys_arch_reboot+0x20>)
    2690:	68ca      	ldr	r2, [r1, #12]
    2692:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    2696:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    2698:	60cb      	str	r3, [r1, #12]
    269a:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    269e:	bf00      	nop
    26a0:	e7fd      	b.n	269e <sys_arch_reboot+0x16>
    26a2:	bf00      	nop
    26a4:	e000ed00 	.word	0xe000ed00
    26a8:	05fa0004 	.word	0x05fa0004

000026ac <z_arm_int_lib_init>:
 * @return N/A
 */

void z_arm_int_lib_init(void)
{
	int irq = 0;
    26ac:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    26ae:	2120      	movs	r1, #32
    26b0:	4803      	ldr	r0, [pc, #12]	; (26c0 <z_arm_int_lib_init+0x14>)
    26b2:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    26b4:	3301      	adds	r3, #1
    26b6:	2b45      	cmp	r3, #69	; 0x45
    26b8:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    26bc:	d1f9      	bne.n	26b2 <z_arm_int_lib_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    26be:	4770      	bx	lr
    26c0:	e000e100 	.word	0xe000e100

000026c4 <z_impl_k_thread_abort>:
#include <sys/__assert.h>

extern void z_thread_single_abort(struct k_thread *thread);

void z_impl_k_thread_abort(k_tid_t thread)
{
    26c4:	b538      	push	{r3, r4, r5, lr}
    26c6:	4605      	mov	r5, r0
	__asm__ volatile(
    26c8:	f04f 0320 	mov.w	r3, #32
    26cc:	f3ef 8411 	mrs	r4, BASEPRI
    26d0:	f383 8811 	msr	BASEPRI, r3
    26d4:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	z_thread_single_abort(thread);
    26d8:	f007 fa3a 	bl	9b50 <z_thread_single_abort>
	z_thread_monitor_exit(thread);

	if (_current == thread) {
    26dc:	4b0a      	ldr	r3, [pc, #40]	; (2708 <z_impl_k_thread_abort+0x44>)
    26de:	689b      	ldr	r3, [r3, #8]
    26e0:	42ab      	cmp	r3, r5
    26e2:	d10b      	bne.n	26fc <z_impl_k_thread_abort+0x38>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
    26e4:	4b09      	ldr	r3, [pc, #36]	; (270c <z_impl_k_thread_abort+0x48>)
    26e6:	685a      	ldr	r2, [r3, #4]
    26e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
    26ec:	b912      	cbnz	r2, 26f4 <z_impl_k_thread_abort+0x30>
	int ret;
	z_check_stack_sentinel();
#ifndef CONFIG_ARM
	sys_trace_thread_switched_out();
#endif
	ret = arch_swap(key);
    26ee:	4620      	mov	r0, r4
    26f0:	f7ff fbb4 	bl	1e5c <arch_swap>
			(void)z_swap_irqlock(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    26f4:	685a      	ldr	r2, [r3, #4]
    26f6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    26fa:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	z_reschedule_irqlock(key);
    26fc:	4620      	mov	r0, r4
}
    26fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_irqlock(key);
    2702:	f00b bb7f 	b.w	de04 <z_reschedule_irqlock>
    2706:	bf00      	nop
    2708:	200011d0 	.word	0x200011d0
    270c:	e000ed00 	.word	0xe000ed00

00002710 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    2710:	b510      	push	{r4, lr}
		.size = (u32_t)&_nocache_ram_size,
		.attr = K_MEM_PARTITION_P_RW_U_NA_NOCACHE,
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
    2712:	4b0e      	ldr	r3, [pc, #56]	; (274c <z_arm_configure_static_mpu_regions+0x3c>)
{
    2714:	b088      	sub	sp, #32
		const struct k_mem_partition ramfunc_region =
    2716:	9302      	str	r3, [sp, #8]
    2718:	4b0d      	ldr	r3, [pc, #52]	; (2750 <z_arm_configure_static_mpu_regions+0x40>)
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    271a:	4c0e      	ldr	r4, [pc, #56]	; (2754 <z_arm_configure_static_mpu_regions+0x44>)
		const struct k_mem_partition ramfunc_region =
    271c:	9303      	str	r3, [sp, #12]
    271e:	4b0e      	ldr	r3, [pc, #56]	; (2758 <z_arm_configure_static_mpu_regions+0x48>)
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    2720:	4a0e      	ldr	r2, [pc, #56]	; (275c <z_arm_configure_static_mpu_regions+0x4c>)
		const struct k_mem_partition ramfunc_region =
    2722:	9304      	str	r3, [sp, #16]
	const struct k_mem_partition *static_regions[] = {
    2724:	ab02      	add	r3, sp, #8
    2726:	9301      	str	r3, [sp, #4]
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    2728:	a801      	add	r0, sp, #4
    272a:	4623      	mov	r3, r4
    272c:	2101      	movs	r1, #1
    272e:	f000 f951 	bl	29d4 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of k_mem_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct k_mem_partition dyn_region_areas[] = {
    2732:	2300      	movs	r3, #0
    2734:	9307      	str	r3, [sp, #28]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
    2736:	4b0a      	ldr	r3, [pc, #40]	; (2760 <z_arm_configure_static_mpu_regions+0x50>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    2738:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
    273a:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    273c:	a805      	add	r0, sp, #20
	const struct k_mem_partition dyn_region_areas[] = {
    273e:	9305      	str	r3, [sp, #20]
    2740:	9406      	str	r4, [sp, #24]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    2742:	f000 f951 	bl	29e8 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    2746:	b008      	add	sp, #32
    2748:	bd10      	pop	{r4, pc}
    274a:	bf00      	nop
    274c:	20000000 	.word	0x20000000
    2750:	00000000 	.word	0x00000000
    2754:	20070000 	.word	0x20070000
    2758:	00010006 	.word	0x00010006
    275c:	20000000 	.word	0x20000000
    2760:	20000000 	.word	0x20000000

00002764 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const u32_t index,
	const struct arm_mpu_region *region_conf)
{
    2764:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
    2766:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
    2768:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
    276a:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
    276e:	f004 031f 	and.w	r3, r4, #31
    2772:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    2774:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    2776:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    2778:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
    277c:	4904      	ldr	r1, [pc, #16]	; (2790 <region_init+0x2c>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    277e:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
    2782:	f043 0301 	orr.w	r3, r3, #1
    2786:	6088      	str	r0, [r1, #8]
  mpu->RBAR = rbar;
    2788:	60ca      	str	r2, [r1, #12]
  mpu->RLAR = rlar;
    278a:	610b      	str	r3, [r1, #16]
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
    278c:	bd10      	pop	{r4, pc}
    278e:	bf00      	nop
    2790:	e000ed90 	.word	0xe000ed90

00002794 <region_allocate_and_init.part.0>:
#include <arm_mpu_v8_internal.h>
#else
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const u8_t index,
    2794:	b508      	push	{r3, lr}
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1)) {

		/* No available MPU region index. */
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    2796:	f04f 0200 	mov.w	r2, #0
    279a:	2301      	movs	r3, #1
    279c:	4907      	ldr	r1, [pc, #28]	; (27bc <region_allocate_and_init.part.0+0x28>)
    279e:	f363 0207 	bfi	r2, r3, #0, #8
    27a2:	4b07      	ldr	r3, [pc, #28]	; (27c0 <region_allocate_and_init.part.0+0x2c>)
    27a4:	1a5b      	subs	r3, r3, r1
    27a6:	08db      	lsrs	r3, r3, #3
    27a8:	4601      	mov	r1, r0
    27aa:	f363 128f 	bfi	r2, r3, #6, #10
    27ae:	4805      	ldr	r0, [pc, #20]	; (27c4 <region_allocate_and_init.part.0+0x30>)
    27b0:	f008 fef3 	bl	b59a <log_1>

	/* Program region */
	region_init(index, region_conf);

	return index;
}
    27b4:	f06f 0015 	mvn.w	r0, #21
    27b8:	bd08      	pop	{r3, pc}
    27ba:	bf00      	nop
    27bc:	0000e6dc 	.word	0x0000e6dc
    27c0:	0000e744 	.word	0x0000e744
    27c4:	0000fbbb 	.word	0x0000fbbb

000027c8 <mpu_configure_regions_and_partition.constprop.2>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct k_mem_partition
    27c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    27cc:	4607      	mov	r7, r0
    27ce:	4688      	mov	r8, r1
    27d0:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    27d2:	2600      	movs	r6, #0
	MPU->RNR = index;
    27d4:	4d5e      	ldr	r5, [pc, #376]	; (2950 <mpu_configure_regions_and_partition.constprop.2+0x188>)
static int mpu_configure_regions_and_partition(const struct k_mem_partition
    27d6:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
    27d8:	4546      	cmp	r6, r8
    27da:	da3d      	bge.n	2858 <mpu_configure_regions_and_partition.constprop.2+0x90>
		if (regions[i]->size == 0U) {
    27dc:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
    27e0:	f8d3 9004 	ldr.w	r9, [r3, #4]
    27e4:	f1b9 0f00 	cmp.w	r9, #0
    27e8:	d059      	beq.n	289e <mpu_configure_regions_and_partition.constprop.2+0xd6>
		&&
    27ea:	f1b9 0f1f 	cmp.w	r9, #31
    27ee:	d922      	bls.n	2836 <mpu_configure_regions_and_partition.constprop.2+0x6e>
		&&
    27f0:	f019 0f1f 	tst.w	r9, #31
    27f4:	d11f      	bne.n	2836 <mpu_configure_regions_and_partition.constprop.2+0x6e>
		((part->start &
    27f6:	f8d3 a000 	ldr.w	sl, [r3]
		&&
    27fa:	f01a 0f1f 	tst.w	sl, #31
    27fe:	d11a      	bne.n	2836 <mpu_configure_regions_and_partition.constprop.2+0x6e>
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
    2800:	4650      	mov	r0, sl
    2802:	f009 fae6 	bl	bdd2 <arm_cmse_mpu_region_get>
    2806:	4683      	mov	fp, r0
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    2808:	eb09 000a 	add.w	r0, r9, sl
    280c:	3801      	subs	r0, #1
    280e:	f009 fae0 	bl	bdd2 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    2812:	4583      	cmp	fp, r0
    2814:	d024      	beq.n	2860 <mpu_configure_regions_and_partition.constprop.2+0x98>
	return -EINVAL;
    2816:	f06f 0b15 	mvn.w	fp, #21
		int u_reg_index =
			get_region_index(regions[i]->start, regions[i]->size);

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
    281a:	2301      	movs	r3, #1
    281c:	f04f 0200 	mov.w	r2, #0
    2820:	494c      	ldr	r1, [pc, #304]	; (2954 <mpu_configure_regions_and_partition.constprop.2+0x18c>)
    2822:	f363 0207 	bfi	r2, r3, #0, #8
    2826:	4b4c      	ldr	r3, [pc, #304]	; (2958 <mpu_configure_regions_and_partition.constprop.2+0x190>)
    2828:	484c      	ldr	r0, [pc, #304]	; (295c <mpu_configure_regions_and_partition.constprop.2+0x194>)
    282a:	1a5b      	subs	r3, r3, r1
    282c:	08db      	lsrs	r3, r3, #3
    282e:	f363 128f 	bfi	r2, r3, #6, #10
    2832:	4659      	mov	r1, fp
    2834:	e00c      	b.n	2850 <mpu_configure_regions_and_partition.constprop.2+0x88>
			LOG_ERR("Partition %u: sanity check failed.", i);
    2836:	2301      	movs	r3, #1
    2838:	f04f 0200 	mov.w	r2, #0
    283c:	4945      	ldr	r1, [pc, #276]	; (2954 <mpu_configure_regions_and_partition.constprop.2+0x18c>)
    283e:	f363 0207 	bfi	r2, r3, #0, #8
    2842:	4b45      	ldr	r3, [pc, #276]	; (2958 <mpu_configure_regions_and_partition.constprop.2+0x190>)
    2844:	4846      	ldr	r0, [pc, #280]	; (2960 <mpu_configure_regions_and_partition.constprop.2+0x198>)
    2846:	1a5b      	subs	r3, r3, r1
    2848:	4631      	mov	r1, r6
    284a:	08db      	lsrs	r3, r3, #3
    284c:	f363 128f 	bfi	r2, r3, #6, #10
			LOG_ERR("Invalid underlying region index %u",
    2850:	f008 fea3 	bl	b59a <log_1>

			reg_index =
				mpu_configure_region(reg_index, regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
    2854:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
    2858:	4620      	mov	r0, r4
    285a:	b005      	add	sp, #20
    285c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
    2860:	f11b 0f16 	cmn.w	fp, #22
    2864:	d0d9      	beq.n	281a <mpu_configure_regions_and_partition.constprop.2+0x52>
			(u_reg_index > (reg_index - 1))) {
    2866:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
    2868:	455b      	cmp	r3, fp
    286a:	dbd6      	blt.n	281a <mpu_configure_regions_and_partition.constprop.2+0x52>
	MPU->RNR = index;
    286c:	f8c5 b008 	str.w	fp, [r5, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    2870:	68e8      	ldr	r0, [r5, #12]
	MPU->RNR = index;
    2872:	f8c5 b008 	str.w	fp, [r5, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    2876:	692b      	ldr	r3, [r5, #16]
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
    2878:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    287c:	f020 001f 	bic.w	r0, r0, #31
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    2880:	f043 0a1f 	orr.w	sl, r3, #31
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
    2884:	e9d1 3200 	ldrd	r3, r2, [r1]
    2888:	441a      	add	r2, r3
		if ((regions[i]->start == u_reg_base) &&
    288a:	4298      	cmp	r0, r3
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
    288c:	f102 39ff 	add.w	r9, r2, #4294967295
		if ((regions[i]->start == u_reg_base) &&
    2890:	d118      	bne.n	28c4 <mpu_configure_regions_and_partition.constprop.2+0xfc>
    2892:	45ca      	cmp	sl, r9
    2894:	d105      	bne.n	28a2 <mpu_configure_regions_and_partition.constprop.2+0xda>
			mpu_configure_region(u_reg_index, regions[i]);
    2896:	fa5f f08b 	uxtb.w	r0, fp
    289a:	f009 fa77 	bl	bd8c <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
    289e:	3601      	adds	r6, #1
    28a0:	e79a      	b.n	27d8 <mpu_configure_regions_and_partition.constprop.2+0x10>
	MPU->RNR = index;
    28a2:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    28a6:	68eb      	ldr	r3, [r5, #12]
		| (base & MPU_RBAR_BASE_Msk);
    28a8:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    28ac:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
    28b0:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    28b2:	60ea      	str	r2, [r5, #12]
				mpu_configure_region(reg_index, regions[i]);
    28b4:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, regions[i]);
    28b6:	f009 fa69 	bl	bd8c <mpu_configure_region>
			if (reg_index == -EINVAL) {
    28ba:	f110 0f16 	cmn.w	r0, #22
    28be:	d0c9      	beq.n	2854 <mpu_configure_regions_and_partition.constprop.2+0x8c>
			reg_index++;
    28c0:	1c44      	adds	r4, r0, #1
    28c2:	e7ec      	b.n	289e <mpu_configure_regions_and_partition.constprop.2+0xd6>
	MPU->RNR = index;
    28c4:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    28c8:	692a      	ldr	r2, [r5, #16]
    28ca:	3b01      	subs	r3, #1
    28cc:	f023 031f 	bic.w	r3, r3, #31
    28d0:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    28d4:	4313      	orrs	r3, r2
		} else if (reg_last == u_reg_last) {
    28d6:	45ca      	cmp	sl, r9
    28d8:	b2e0      	uxtb	r0, r4
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    28da:	612b      	str	r3, [r5, #16]
		} else if (reg_last == u_reg_last) {
    28dc:	d0eb      	beq.n	28b6 <mpu_configure_regions_and_partition.constprop.2+0xee>
				mpu_configure_region(reg_index, regions[i]);
    28de:	f009 fa55 	bl	bd8c <mpu_configure_region>
			if (reg_index == -EINVAL) {
    28e2:	f110 0f16 	cmn.w	r0, #22
    28e6:	d0b5      	beq.n	2854 <mpu_configure_regions_and_partition.constprop.2+0x8c>
	MPU->RNR = index;
    28e8:	f8c5 b008 	str.w	fp, [r5, #8]
	attr->rbar = MPU->RBAR &
    28ec:	68ea      	ldr	r2, [r5, #12]
    28ee:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i]->start +
    28f2:	f10a 3aff 	add.w	sl, sl, #4294967295
	attr->rbar = MPU->RBAR &
    28f6:	f362 0304 	bfi	r3, r2, #0, #5
    28fa:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    28fe:	692b      	ldr	r3, [r5, #16]
    2900:	f89d 2008 	ldrb.w	r2, [sp, #8]
    2904:	085b      	lsrs	r3, r3, #1
    2906:	f363 1247 	bfi	r2, r3, #5, #3
			fill_region.base = regions[i]->start +
    290a:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    290e:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.base = regions[i]->start +
    2912:	e9d3 1300 	ldrd	r1, r3, [r3]
    2916:	440b      	add	r3, r1
    2918:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i]->start +
    291a:	f023 031f 	bic.w	r3, r3, #31
			reg_index++;
    291e:	1c44      	adds	r4, r0, #1
			REGION_LIMIT_ADDR((regions[i]->start +
    2920:	4453      	add	r3, sl
    2922:	eba3 0309 	sub.w	r3, r3, r9
				region_allocate_and_init(reg_index,
    2926:	b2e4      	uxtb	r4, r4
			REGION_LIMIT_ADDR((regions[i]->start +
    2928:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1)) {
    292c:	2c0f      	cmp	r4, #15
			fill_region.attr.r_limit =
    292e:	9303      	str	r3, [sp, #12]
    2930:	d908      	bls.n	2944 <mpu_configure_regions_and_partition.constprop.2+0x17c>
    2932:	4620      	mov	r0, r4
    2934:	f7ff ff2e 	bl	2794 <region_allocate_and_init.part.0>
			if (reg_index == -EINVAL) {
    2938:	f110 0f16 	cmn.w	r0, #22
    293c:	4604      	mov	r4, r0
    293e:	d089      	beq.n	2854 <mpu_configure_regions_and_partition.constprop.2+0x8c>
			reg_index++;
    2940:	3401      	adds	r4, #1
    2942:	e7ac      	b.n	289e <mpu_configure_regions_and_partition.constprop.2+0xd6>
	region_init(index, region_conf);
    2944:	4669      	mov	r1, sp
    2946:	4620      	mov	r0, r4
    2948:	f7ff ff0c 	bl	2764 <region_init>
			if (reg_index == -EINVAL) {
    294c:	e7f8      	b.n	2940 <mpu_configure_regions_and_partition.constprop.2+0x178>
    294e:	bf00      	nop
    2950:	e000ed90 	.word	0xe000ed90
    2954:	0000e6dc 	.word	0x0000e6dc
    2958:	0000e744 	.word	0x0000e744
    295c:	0000fb98 	.word	0x0000fb98
    2960:	0000fb75 	.word	0x0000fb75

00002964 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    2964:	2205      	movs	r2, #5
    2966:	4b03      	ldr	r3, [pc, #12]	; (2974 <arm_core_mpu_enable+0x10>)
    2968:	605a      	str	r2, [r3, #4]
    296a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    296e:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    2972:	4770      	bx	lr
    2974:	e000ed90 	.word	0xe000ed90

00002978 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    2978:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    297c:	2200      	movs	r2, #0
    297e:	4b01      	ldr	r3, [pc, #4]	; (2984 <arm_core_mpu_disable+0xc>)
    2980:	605a      	str	r2, [r3, #4]
}
    2982:	4770      	bx	lr
    2984:	e000ed90 	.word	0xe000ed90

00002988 <arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
static int arm_mpu_init(struct device *arg)
{
    2988:	b570      	push	{r4, r5, r6, lr}
	u32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    298a:	4d0e      	ldr	r5, [pc, #56]	; (29c4 <arm_mpu_init+0x3c>)
    298c:	682e      	ldr	r6, [r5, #0]
    298e:	2e10      	cmp	r6, #16
    2990:	d815      	bhi.n	29be <arm_mpu_init+0x36>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    2992:	2400      	movs	r4, #0
	arm_core_mpu_disable();
    2994:	f7ff fff0 	bl	2978 <arm_core_mpu_disable>
	MPU->MAIR0 =
    2998:	4b0b      	ldr	r3, [pc, #44]	; (29c8 <arm_mpu_init+0x40>)
    299a:	4a0c      	ldr	r2, [pc, #48]	; (29cc <arm_mpu_init+0x44>)
    299c:	631a      	str	r2, [r3, #48]	; 0x30
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    299e:	42a6      	cmp	r6, r4
    29a0:	d105      	bne.n	29ae <arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    29a2:	4b0b      	ldr	r3, [pc, #44]	; (29d0 <arm_mpu_init+0x48>)
    29a4:	701e      	strb	r6, [r3, #0]


	arm_core_mpu_enable();
    29a6:	f7ff ffdd 	bl	2964 <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		DT_NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
    29aa:	2000      	movs	r0, #0
}
    29ac:	bd70      	pop	{r4, r5, r6, pc}
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    29ae:	6869      	ldr	r1, [r5, #4]
    29b0:	4620      	mov	r0, r4
    29b2:	eb01 1104 	add.w	r1, r1, r4, lsl #4
    29b6:	f7ff fed5 	bl	2764 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    29ba:	3401      	adds	r4, #1
    29bc:	e7ef      	b.n	299e <arm_mpu_init+0x16>
		return -1;
    29be:	f04f 30ff 	mov.w	r0, #4294967295
    29c2:	e7f3      	b.n	29ac <arm_mpu_init+0x24>
    29c4:	0000ea54 	.word	0x0000ea54
    29c8:	e000ed90 	.word	0xe000ed90
    29cc:	0044ffaa 	.word	0x0044ffaa
    29d0:	2000147d 	.word	0x2000147d

000029d4 <arm_core_mpu_configure_static_mpu_regions>:
{
    29d4:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const u8_t regions_num,
	const u32_t background_area_base,
	const u32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    29d6:	4c03      	ldr	r4, [pc, #12]	; (29e4 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
    29d8:	7822      	ldrb	r2, [r4, #0]
    29da:	f7ff fef5 	bl	27c8 <mpu_configure_regions_and_partition.constprop.2>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    29de:	7020      	strb	r0, [r4, #0]
}
    29e0:	bd10      	pop	{r4, pc}
    29e2:	bf00      	nop
    29e4:	2000147d 	.word	0x2000147d

000029e8 <arm_core_mpu_mark_areas_for_dynamic_regions>:
{
    29e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    29ec:	4c25      	ldr	r4, [pc, #148]	; (2a84 <arm_core_mpu_mark_areas_for_dynamic_regions+0x9c>)
    29ee:	468a      	mov	sl, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
    29f0:	4680      	mov	r8, r0
    29f2:	2700      	movs	r7, #0
    29f4:	46a1      	mov	r9, r4
	attr->rbar = MPU->RBAR &
    29f6:	f04f 0b14 	mov.w	fp, #20
	MPU->RNR = index;
    29fa:	4d23      	ldr	r5, [pc, #140]	; (2a88 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa0>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
    29fc:	4557      	cmp	r7, sl
    29fe:	da1a      	bge.n	2a36 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
		if (dyn_region_areas[i].size == 0U) {
    2a00:	f8d8 3004 	ldr.w	r3, [r8, #4]
    2a04:	9301      	str	r3, [sp, #4]
    2a06:	2b00      	cmp	r3, #0
    2a08:	d036      	beq.n	2a78 <arm_core_mpu_mark_areas_for_dynamic_regions+0x90>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
    2a0a:	f8d8 1000 	ldr.w	r1, [r8]
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
    2a0e:	4608      	mov	r0, r1
    2a10:	9100      	str	r1, [sp, #0]
    2a12:	f009 f9de 	bl	bdd2 <arm_cmse_mpu_region_get>
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    2a16:	e9dd 1300 	ldrd	r1, r3, [sp]
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
    2a1a:	4606      	mov	r6, r0
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    2a1c:	1858      	adds	r0, r3, r1
    2a1e:	3801      	subs	r0, #1
    2a20:	f009 f9d7 	bl	bdd2 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    2a24:	4286      	cmp	r6, r0
    2a26:	4a19      	ldr	r2, [pc, #100]	; (2a8c <arm_core_mpu_mark_areas_for_dynamic_regions+0xa4>)
    2a28:	d008      	beq.n	2a3c <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
		dyn_reg_info[i].index =
    2a2a:	2314      	movs	r3, #20
    2a2c:	435f      	muls	r7, r3
    2a2e:	f06f 0315 	mvn.w	r3, #21
    2a32:	f849 3007 	str.w	r3, [r9, r7]
}
    2a36:	b003      	add	sp, #12
    2a38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
    2a3c:	f116 0f16 	cmn.w	r6, #22
		dyn_reg_info[i].index =
    2a40:	6026      	str	r6, [r4, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
    2a42:	d0f8      	beq.n	2a36 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
    2a44:	7813      	ldrb	r3, [r2, #0]
    2a46:	42b3      	cmp	r3, r6
    2a48:	ddf5      	ble.n	2a36 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
	attr->rbar = MPU->RBAR &
    2a4a:	fb0b 9307 	mla	r3, fp, r7, r9
	MPU->RNR = index;
    2a4e:	60ae      	str	r6, [r5, #8]
	MPU->RNR = index;
    2a50:	60ae      	str	r6, [r5, #8]
	attr->rbar = MPU->RBAR &
    2a52:	68e8      	ldr	r0, [r5, #12]
    2a54:	7b19      	ldrb	r1, [r3, #12]
    2a56:	f360 0104 	bfi	r1, r0, #0, #5
    2a5a:	7319      	strb	r1, [r3, #12]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    2a5c:	6929      	ldr	r1, [r5, #16]
    2a5e:	7b18      	ldrb	r0, [r3, #12]
    2a60:	0849      	lsrs	r1, r1, #1
    2a62:	f361 1047 	bfi	r0, r1, #5, #3
    2a66:	7318      	strb	r0, [r3, #12]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
    2a68:	68eb      	ldr	r3, [r5, #12]
    2a6a:	f023 031f 	bic.w	r3, r3, #31
    2a6e:	6063      	str	r3, [r4, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
    2a70:	692b      	ldr	r3, [r5, #16]
    2a72:	f023 031f 	bic.w	r3, r3, #31
    2a76:	6123      	str	r3, [r4, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
    2a78:	3701      	adds	r7, #1
    2a7a:	3414      	adds	r4, #20
    2a7c:	f108 080c 	add.w	r8, r8, #12
    2a80:	e7bc      	b.n	29fc <arm_core_mpu_mark_areas_for_dynamic_regions+0x14>
    2a82:	bf00      	nop
    2a84:	20000420 	.word	0x20000420
    2a88:	e000ed90 	.word	0xe000ed90
    2a8c:	2000147d 	.word	0x2000147d

00002a90 <arm_core_mpu_configure_dynamic_mpu_regions>:
{
    2a90:	b570      	push	{r4, r5, r6, lr}
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct k_mem_partition
	*dynamic_regions[], u8_t regions_num)
{
	int mpu_reg_index = static_regions_num;
    2a92:	4b0c      	ldr	r3, [pc, #48]	; (2ac4 <arm_core_mpu_configure_dynamic_mpu_regions+0x34>)
    2a94:	460e      	mov	r6, r1
    2a96:	781c      	ldrb	r4, [r3, #0]
    2a98:	4605      	mov	r5, r0
    2a9a:	4623      	mov	r3, r4
  mpu->RLAR = 0U;
    2a9c:	2100      	movs	r1, #0
  mpu->RNR = rnr;
    2a9e:	4a0a      	ldr	r2, [pc, #40]	; (2ac8 <arm_core_mpu_configure_dynamic_mpu_regions+0x38>)

	/* Disable all MPU regions except for the static ones. */
	for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    2aa0:	2b0f      	cmp	r3, #15
    2aa2:	dd0b      	ble.n	2abc <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>
#if defined(CONFIG_MPU_GAP_FILLING)
	/* Reset MPU regions inside which dynamic memory regions may
	 * be programmed.
	 */
	for (int i = 0; i < MPU_DYNAMIC_REGION_AREAS_NUM; i++) {
		region_init(dyn_reg_info[i].index,
    2aa4:	4909      	ldr	r1, [pc, #36]	; (2acc <arm_core_mpu_configure_dynamic_mpu_regions+0x3c>)
    2aa6:	f851 0b04 	ldr.w	r0, [r1], #4
    2aaa:	f7ff fe5b 	bl	2764 <region_init>

	/* In ARMv8-M architecture the dynamic regions are programmed on SRAM,
	 * forming a full partition of the background area, specified by the
	 * given boundaries.
	 */
	mpu_reg_index = mpu_configure_regions_and_partition(dynamic_regions,
    2aae:	4622      	mov	r2, r4
    2ab0:	4631      	mov	r1, r6
    2ab2:	4628      	mov	r0, r5
}
    2ab4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    2ab8:	f7ff be86 	b.w	27c8 <mpu_configure_regions_and_partition.constprop.2>
    2abc:	6093      	str	r3, [r2, #8]
  mpu->RLAR = 0U;
    2abe:	6111      	str	r1, [r2, #16]
	for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    2ac0:	3301      	adds	r3, #1
    2ac2:	e7ed      	b.n	2aa0 <arm_core_mpu_configure_dynamic_mpu_regions+0x10>
    2ac4:	2000147d 	.word	0x2000147d
    2ac8:	e000ed90 	.word	0xe000ed90
    2acc:	20000420 	.word	0x20000420

00002ad0 <z_prf>:
	*sptr = p;
	return i;
}

int z_prf(int (*func)(), void *dest, const char *format, va_list vargs)
{
    2ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2ad4:	461e      	mov	r6, r3
	struct zero_padding zero;
	VALTYPE val;

#define PUTC(c)	do { if ((*func)(c, dest) == EOF) return EOF; } while (false)

	count = 0;
    2ad6:	2300      	movs	r3, #0
{
    2ad8:	b0a3      	sub	sp, #140	; 0x8c
    2ada:	e9cd 0102 	strd	r0, r1, [sp, #8]
	count = 0;
    2ade:	9301      	str	r3, [sp, #4]

	while ((c = *format++)) {
    2ae0:	4613      	mov	r3, r2
    2ae2:	f813 0b01 	ldrb.w	r0, [r3], #1
    2ae6:	9308      	str	r3, [sp, #32]
    2ae8:	b158      	cbz	r0, 2b02 <z_prf+0x32>
		if (c != '%') {
    2aea:	2825      	cmp	r0, #37	; 0x25
    2aec:	f000 8085 	beq.w	2bfa <z_prf+0x12a>
			PUTC(c);
    2af0:	9903      	ldr	r1, [sp, #12]
    2af2:	9b02      	ldr	r3, [sp, #8]
    2af4:	4798      	blx	r3
    2af6:	3001      	adds	r0, #1
    2af8:	f040 8417 	bne.w	332a <z_prf+0x85a>
    2afc:	f04f 33ff 	mov.w	r3, #4294967295
    2b00:	9301      	str	r3, [sp, #4]
		}
	}
	return count;

#undef PUTC
}
    2b02:	9801      	ldr	r0, [sp, #4]
    2b04:	b023      	add	sp, #140	; 0x8c
    2b06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				switch (c) {
    2b0a:	2c23      	cmp	r4, #35	; 0x23
    2b0c:	d06c      	beq.n	2be8 <z_prf+0x118>
    2b0e:	d861      	bhi.n	2bd4 <z_prf+0x104>
    2b10:	2c00      	cmp	r4, #0
    2b12:	d0f6      	beq.n	2b02 <z_prf+0x32>
					fspace = true;
    2b14:	2c20      	cmp	r4, #32
    2b16:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    2b18:	bf08      	it	eq
    2b1a:	2301      	moveq	r3, #1
    2b1c:	930e      	str	r3, [sp, #56]	; 0x38
					fminus = true;
    2b1e:	f8cd 8020 	str.w	r8, [sp, #32]
			while (strchr("-+ #0", (c = *format++)) != NULL) {
    2b22:	f8dd 8020 	ldr.w	r8, [sp, #32]
    2b26:	48b7      	ldr	r0, [pc, #732]	; (2e04 <z_prf+0x334>)
    2b28:	f818 4b01 	ldrb.w	r4, [r8], #1
    2b2c:	4621      	mov	r1, r4
    2b2e:	f009 f976 	bl	be1e <strchr>
    2b32:	2800      	cmp	r0, #0
    2b34:	d1e9      	bne.n	2b0a <z_prf+0x3a>
			if (c == '*') {
    2b36:	2c2a      	cmp	r4, #42	; 0x2a
    2b38:	d166      	bne.n	2c08 <z_prf+0x138>
				width = va_arg(vargs, int);
    2b3a:	f856 3b04 	ldr.w	r3, [r6], #4
				c = *format++;
    2b3e:	f898 4000 	ldrb.w	r4, [r8]
				if (width < 0) {
    2b42:	2b00      	cmp	r3, #0
				width = va_arg(vargs, int);
    2b44:	9309      	str	r3, [sp, #36]	; 0x24
					width = -width;
    2b46:	bfbf      	itttt	lt
    2b48:	425b      	neglt	r3, r3
    2b4a:	9309      	strlt	r3, [sp, #36]	; 0x24
					fminus = true;
    2b4c:	2301      	movlt	r3, #1
    2b4e:	930f      	strlt	r3, [sp, #60]	; 0x3c
				c = *format++;
    2b50:	9b08      	ldr	r3, [sp, #32]
    2b52:	f103 0802 	add.w	r8, r3, #2
			if (c == '.') {
    2b56:	2c2e      	cmp	r4, #46	; 0x2e
    2b58:	d17b      	bne.n	2c52 <z_prf+0x182>
				if (c == '*') {
    2b5a:	f898 3000 	ldrb.w	r3, [r8]
    2b5e:	2b2a      	cmp	r3, #42	; 0x2a
    2b60:	d174      	bne.n	2c4c <z_prf+0x17c>
					precision = va_arg(vargs, int);
    2b62:	f856 5b04 	ldr.w	r5, [r6], #4
				c = *format++;
    2b66:	f108 0801 	add.w	r8, r8, #1
				c = *format++;
    2b6a:	f818 4b01 	ldrb.w	r4, [r8], #1
			if (strchr("hlz", c) != NULL) {
    2b6e:	4621      	mov	r1, r4
    2b70:	48a5      	ldr	r0, [pc, #660]	; (2e08 <z_prf+0x338>)
    2b72:	4627      	mov	r7, r4
    2b74:	f009 f953 	bl	be1e <strchr>
    2b78:	2800      	cmp	r0, #0
    2b7a:	d06d      	beq.n	2c58 <z_prf+0x188>
				c = *format++;
    2b7c:	4643      	mov	r3, r8
    2b7e:	f813 4b01 	ldrb.w	r4, [r3], #1
				} else if (i == 'h' && c == 'h') {
    2b82:	2f68      	cmp	r7, #104	; 0x68
				c = *format++;
    2b84:	9308      	str	r3, [sp, #32]
				} else if (i == 'h' && c == 'h') {
    2b86:	d107      	bne.n	2b98 <z_prf+0xc8>
    2b88:	2c68      	cmp	r4, #104	; 0x68
    2b8a:	d105      	bne.n	2b98 <z_prf+0xc8>
					i = 'H';
    2b8c:	2748      	movs	r7, #72	; 0x48
					c = *format++;
    2b8e:	f108 0302 	add.w	r3, r8, #2
    2b92:	f898 4001 	ldrb.w	r4, [r8, #1]
    2b96:	9308      	str	r3, [sp, #32]
			switch (c) {
    2b98:	2c67      	cmp	r4, #103	; 0x67
    2b9a:	d87b      	bhi.n	2c94 <z_prf+0x1c4>
    2b9c:	2c65      	cmp	r4, #101	; 0x65
    2b9e:	f080 8135 	bcs.w	2e0c <z_prf+0x33c>
    2ba2:	2c47      	cmp	r4, #71	; 0x47
    2ba4:	d85c      	bhi.n	2c60 <z_prf+0x190>
    2ba6:	2c45      	cmp	r4, #69	; 0x45
    2ba8:	f080 8130 	bcs.w	2e0c <z_prf+0x33c>
    2bac:	2c00      	cmp	r4, #0
    2bae:	d0a8      	beq.n	2b02 <z_prf+0x32>
    2bb0:	2c25      	cmp	r4, #37	; 0x25
    2bb2:	f000 83b6 	beq.w	3322 <z_prf+0x852>
				PUTC('%');
    2bb6:	9903      	ldr	r1, [sp, #12]
    2bb8:	2025      	movs	r0, #37	; 0x25
    2bba:	9b02      	ldr	r3, [sp, #8]
    2bbc:	4798      	blx	r3
    2bbe:	3001      	adds	r0, #1
    2bc0:	d09c      	beq.n	2afc <z_prf+0x2c>
				PUTC(c);
    2bc2:	9903      	ldr	r1, [sp, #12]
    2bc4:	4620      	mov	r0, r4
    2bc6:	9b02      	ldr	r3, [sp, #8]
    2bc8:	4798      	blx	r3
    2bca:	3001      	adds	r0, #1
    2bcc:	d096      	beq.n	2afc <z_prf+0x2c>
				count += 2;
    2bce:	9b01      	ldr	r3, [sp, #4]
    2bd0:	3302      	adds	r3, #2
    2bd2:	e3ac      	b.n	332e <z_prf+0x85e>
				switch (c) {
    2bd4:	2c2d      	cmp	r4, #45	; 0x2d
    2bd6:	d00a      	beq.n	2bee <z_prf+0x11e>
    2bd8:	2c30      	cmp	r4, #48	; 0x30
    2bda:	d00b      	beq.n	2bf4 <z_prf+0x124>
					fplus = true;
    2bdc:	2c2b      	cmp	r4, #43	; 0x2b
    2bde:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    2be0:	bf08      	it	eq
    2be2:	2301      	moveq	r3, #1
    2be4:	930b      	str	r3, [sp, #44]	; 0x2c
    2be6:	e79a      	b.n	2b1e <z_prf+0x4e>
					falt = true;
    2be8:	f04f 0b01 	mov.w	fp, #1
    2bec:	e797      	b.n	2b1e <z_prf+0x4e>
					fminus = true;
    2bee:	2301      	movs	r3, #1
    2bf0:	930f      	str	r3, [sp, #60]	; 0x3c
    2bf2:	e794      	b.n	2b1e <z_prf+0x4e>
					fzero = true;
    2bf4:	2301      	movs	r3, #1
    2bf6:	930a      	str	r3, [sp, #40]	; 0x28
    2bf8:	e791      	b.n	2b1e <z_prf+0x4e>
			fminus = fplus = fspace = falt = fzero = false;
    2bfa:	2300      	movs	r3, #0
    2bfc:	930a      	str	r3, [sp, #40]	; 0x28
    2bfe:	930e      	str	r3, [sp, #56]	; 0x38
    2c00:	930b      	str	r3, [sp, #44]	; 0x2c
    2c02:	930f      	str	r3, [sp, #60]	; 0x3c
    2c04:	469b      	mov	fp, r3
    2c06:	e78c      	b.n	2b22 <z_prf+0x52>
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    2c08:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
			} else if (!isdigit(c)) {
    2c0c:	2b09      	cmp	r3, #9
				width = 0;
    2c0e:	9009      	str	r0, [sp, #36]	; 0x24
			} else if (!isdigit(c)) {
    2c10:	d8a1      	bhi.n	2b56 <z_prf+0x86>
		i = 10 * i + *p++ - '0';
    2c12:	220a      	movs	r2, #10
	while (isdigit(*p)) {
    2c14:	f8dd 8020 	ldr.w	r8, [sp, #32]
    2c18:	f818 4b01 	ldrb.w	r4, [r8], #1
    2c1c:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
    2c20:	2b09      	cmp	r3, #9
    2c22:	d898      	bhi.n	2b56 <z_prf+0x86>
		i = 10 * i + *p++ - '0';
    2c24:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2c26:	fb02 4403 	mla	r4, r2, r3, r4
    2c2a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
    2c2e:	e9cd 8308 	strd	r8, r3, [sp, #32]
    2c32:	e7ef      	b.n	2c14 <z_prf+0x144>
    2c34:	4690      	mov	r8, r2
    2c36:	fb01 3505 	mla	r5, r1, r5, r3
    2c3a:	3d30      	subs	r5, #48	; 0x30
	while (isdigit(*p)) {
    2c3c:	4642      	mov	r2, r8
    2c3e:	f812 3b01 	ldrb.w	r3, [r2], #1
    2c42:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    2c46:	2809      	cmp	r0, #9
    2c48:	d9f4      	bls.n	2c34 <z_prf+0x164>
    2c4a:	e78e      	b.n	2b6a <z_prf+0x9a>
	int i = 0;
    2c4c:	2500      	movs	r5, #0
		i = 10 * i + *p++ - '0';
    2c4e:	210a      	movs	r1, #10
    2c50:	e7f4      	b.n	2c3c <z_prf+0x16c>
			precision = -1;
    2c52:	f04f 35ff 	mov.w	r5, #4294967295
    2c56:	e78a      	b.n	2b6e <z_prf+0x9e>
    2c58:	f8cd 8020 	str.w	r8, [sp, #32]
			i = 0;
    2c5c:	4607      	mov	r7, r0
    2c5e:	e79b      	b.n	2b98 <z_prf+0xc8>
			switch (c) {
    2c60:	2c63      	cmp	r4, #99	; 0x63
    2c62:	d059      	beq.n	2d18 <z_prf+0x248>
    2c64:	d820      	bhi.n	2ca8 <z_prf+0x1d8>
    2c66:	2c58      	cmp	r4, #88	; 0x58
    2c68:	d1a5      	bne.n	2bb6 <z_prf+0xe6>
				if (c == 'o') {
    2c6a:	2c6f      	cmp	r4, #111	; 0x6f
    2c6c:	f106 0904 	add.w	r9, r6, #4
    2c70:	6831      	ldr	r1, [r6, #0]
    2c72:	f040 8328 	bne.w	32c6 <z_prf+0x7f6>
	if (alt_form) {
    2c76:	f1bb 0f00 	cmp.w	fp, #0
    2c7a:	f000 8317 	beq.w	32ac <z_prf+0x7dc>
		*buf++ = '0';
    2c7e:	2330      	movs	r3, #48	; 0x30
    2c80:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
		if (!value) {
    2c84:	2900      	cmp	r1, #0
    2c86:	f040 831b 	bne.w	32c0 <z_prf+0x7f0>
			*buf++ = 0;
    2c8a:	f88d 106d 	strb.w	r1, [sp, #109]	; 0x6d
			prefix = 0;
    2c8e:	460f      	mov	r7, r1
			return 1;
    2c90:	2601      	movs	r6, #1
    2c92:	e025      	b.n	2ce0 <z_prf+0x210>
			switch (c) {
    2c94:	2c70      	cmp	r4, #112	; 0x70
    2c96:	f000 82f5 	beq.w	3284 <z_prf+0x7b4>
    2c9a:	d827      	bhi.n	2cec <z_prf+0x21c>
    2c9c:	2c6e      	cmp	r4, #110	; 0x6e
    2c9e:	f000 82de 	beq.w	325e <z_prf+0x78e>
    2ca2:	d8e2      	bhi.n	2c6a <z_prf+0x19a>
    2ca4:	2c69      	cmp	r4, #105	; 0x69
    2ca6:	d186      	bne.n	2bb6 <z_prf+0xe6>
				switch (i) {
    2ca8:	6837      	ldr	r7, [r6, #0]
    2caa:	f106 0904 	add.w	r9, r6, #4
	if (value < 0) {
    2cae:	2f00      	cmp	r7, #0
    2cb0:	f280 809a 	bge.w	2de8 <z_prf+0x318>
		*buf++ = '-';
    2cb4:	232d      	movs	r3, #45	; 0x2d
		value = -value;
    2cb6:	4279      	negs	r1, r7
		*buf++ = '-';
    2cb8:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
		*buf++ = ' ';
    2cbc:	f10d 066d 	add.w	r6, sp, #109	; 0x6d
	return _to_x(buf, value, 10);
    2cc0:	4630      	mov	r0, r6
    2cc2:	220a      	movs	r2, #10
    2cc4:	f009 f937 	bl	bf36 <_to_x>
				if (fplus || fspace || val < 0) {
    2cc8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	return (buf + _to_udec(buf, value)) - start;
    2cca:	4406      	add	r6, r0
    2ccc:	a81b      	add	r0, sp, #108	; 0x6c
    2cce:	1a36      	subs	r6, r6, r0
				if (fplus || fspace || val < 0) {
    2cd0:	2b00      	cmp	r3, #0
    2cd2:	f040 832f 	bne.w	3334 <z_prf+0x864>
    2cd6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    2cd8:	2b00      	cmp	r3, #0
    2cda:	f040 832b 	bne.w	3334 <z_prf+0x864>
    2cde:	0fff      	lsrs	r7, r7, #31
			if (precision >= 0) {
    2ce0:	2d00      	cmp	r5, #0
    2ce2:	da21      	bge.n	2d28 <z_prf+0x258>
			zero.predot = zero.postdot = zero.trail = 0;
    2ce4:	2500      	movs	r5, #0
    2ce6:	46ab      	mov	fp, r5
    2ce8:	46a8      	mov	r8, r5
    2cea:	e0e1      	b.n	2eb0 <z_prf+0x3e0>
			switch (c) {
    2cec:	2c75      	cmp	r4, #117	; 0x75
    2cee:	d0bc      	beq.n	2c6a <z_prf+0x19a>
    2cf0:	2c78      	cmp	r4, #120	; 0x78
    2cf2:	d0ba      	beq.n	2c6a <z_prf+0x19a>
    2cf4:	2c73      	cmp	r4, #115	; 0x73
    2cf6:	f47f af5e 	bne.w	2bb6 <z_prf+0xe6>
				cptr = va_arg(vargs, char *);
    2cfa:	46b1      	mov	r9, r6
					precision = INT_MAX;
    2cfc:	2d00      	cmp	r5, #0
    2cfe:	bfb8      	it	lt
    2d00:	f06f 4500 	mvnlt.w	r5, #2147483648	; 0x80000000
				for (clen = 0; clen < precision; clen++) {
    2d04:	2600      	movs	r6, #0
				cptr = va_arg(vargs, char *);
    2d06:	f859 3b04 	ldr.w	r3, [r9], #4
				for (clen = 0; clen < precision; clen++) {
    2d0a:	42b5      	cmp	r5, r6
    2d0c:	f040 82c9 	bne.w	32a2 <z_prf+0x7d2>
    2d10:	462e      	mov	r6, r5
    2d12:	2500      	movs	r5, #0
    2d14:	462f      	mov	r7, r5
    2d16:	e008      	b.n	2d2a <z_prf+0x25a>
				break;
    2d18:	2700      	movs	r7, #0
				buf[0] = va_arg(vargs, int);
    2d1a:	46b1      	mov	r9, r6
				break;
    2d1c:	463d      	mov	r5, r7
				clen = 1;
    2d1e:	2601      	movs	r6, #1
				buf[0] = va_arg(vargs, int);
    2d20:	f859 3b04 	ldr.w	r3, [r9], #4
    2d24:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
				break;
    2d28:	ab1b      	add	r3, sp, #108	; 0x6c
				zero_head = precision - clen + prefix;
    2d2a:	19ea      	adds	r2, r5, r7
			zero.predot = zero.postdot = zero.trail = 0;
    2d2c:	2500      	movs	r5, #0
    2d2e:	46ab      	mov	fp, r5
    2d30:	46a8      	mov	r8, r5
				zero_head = precision - clen + prefix;
    2d32:	1b92      	subs	r2, r2, r6
			if (zero_head < 0) {
    2d34:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
			width -= clen + zero_head;
    2d38:	1991      	adds	r1, r2, r6
    2d3a:	9106      	str	r1, [sp, #24]
    2d3c:	9909      	ldr	r1, [sp, #36]	; 0x24
    2d3e:	1990      	adds	r0, r2, r6
    2d40:	1a0c      	subs	r4, r1, r0
			if (!fminus && width > 0) {
    2d42:	990f      	ldr	r1, [sp, #60]	; 0x3c
    2d44:	b911      	cbnz	r1, 2d4c <z_prf+0x27c>
    2d46:	2c00      	cmp	r4, #0
    2d48:	f300 8311 	bgt.w	336e <z_prf+0x89e>
			while (prefix-- > 0) {
    2d4c:	eb03 0a07 	add.w	sl, r3, r7
    2d50:	4553      	cmp	r3, sl
    2d52:	f040 8311 	bne.w	3378 <z_prf+0x8a8>
			while (zero_head-- > 0) {
    2d56:	f112 32ff 	adds.w	r2, r2, #4294967295
    2d5a:	f080 831b 	bcs.w	3394 <z_prf+0x8c4>
			clen -= prefix;
    2d5e:	1bf6      	subs	r6, r6, r7
			if (zero.predot) {
    2d60:	f1b8 0f00 	cmp.w	r8, #0
    2d64:	d011      	beq.n	2d8a <z_prf+0x2ba>
				c = *cptr;
    2d66:	f89a 0000 	ldrb.w	r0, [sl]
				while (isdigit(c)) {
    2d6a:	eb0a 0706 	add.w	r7, sl, r6
    2d6e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    2d72:	2b09      	cmp	r3, #9
    2d74:	eba7 060a 	sub.w	r6, r7, sl
    2d78:	f240 8317 	bls.w	33aa <z_prf+0x8da>
    2d7c:	4647      	mov	r7, r8
				while (zero.predot-- > 0) {
    2d7e:	f117 37ff 	adds.w	r7, r7, #4294967295
    2d82:	f080 831b 	bcs.w	33bc <z_prf+0x8ec>
				clen -= zero.predot;
    2d86:	eba6 0608 	sub.w	r6, r6, r8
			if (zero.postdot) {
    2d8a:	f1bb 0f00 	cmp.w	fp, #0
    2d8e:	d015      	beq.n	2dbc <z_prf+0x2ec>
    2d90:	eb0a 0706 	add.w	r7, sl, r6
					c = *cptr++;
    2d94:	f81a 8b01 	ldrb.w	r8, [sl], #1
					PUTC(c);
    2d98:	9903      	ldr	r1, [sp, #12]
    2d9a:	4640      	mov	r0, r8
    2d9c:	9b02      	ldr	r3, [sp, #8]
    2d9e:	4798      	blx	r3
    2da0:	3001      	adds	r0, #1
    2da2:	f43f aeab 	beq.w	2afc <z_prf+0x2c>
				} while (c != '.');
    2da6:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
    2daa:	eba7 060a 	sub.w	r6, r7, sl
    2dae:	d1f1      	bne.n	2d94 <z_prf+0x2c4>
				while (zero.postdot-- > 0) {
    2db0:	465f      	mov	r7, fp
    2db2:	2f00      	cmp	r7, #0
    2db4:	f300 830b 	bgt.w	33ce <z_prf+0x8fe>
				clen -= zero.postdot;
    2db8:	eba6 060b 	sub.w	r6, r6, fp
			if (zero.trail) {
    2dbc:	b195      	cbz	r5, 2de4 <z_prf+0x314>
				c = *cptr;
    2dbe:	f89a 0000 	ldrb.w	r0, [sl]
				while (isdigit(c) || c == '.') {
    2dc2:	eb0a 0706 	add.w	r7, sl, r6
    2dc6:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    2dca:	2b09      	cmp	r3, #9
    2dcc:	eba7 060a 	sub.w	r6, r7, sl
    2dd0:	f240 8308 	bls.w	33e4 <z_prf+0x914>
    2dd4:	282e      	cmp	r0, #46	; 0x2e
    2dd6:	f000 8305 	beq.w	33e4 <z_prf+0x914>
				while (zero.trail-- > 0) {
    2dda:	462f      	mov	r7, r5
    2ddc:	2f00      	cmp	r7, #0
    2dde:	f300 830a 	bgt.w	33f6 <z_prf+0x926>
				clen -= zero.trail;
    2de2:	1b76      	subs	r6, r6, r5
    2de4:	4456      	add	r6, sl
    2de6:	e319      	b.n	341c <z_prf+0x94c>
	} else if (fplus) {
    2de8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    2dea:	b123      	cbz	r3, 2df6 <z_prf+0x326>
		*buf++ = '+';
    2dec:	232b      	movs	r3, #43	; 0x2b
		*buf++ = ' ';
    2dee:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
    2df2:	4639      	mov	r1, r7
    2df4:	e762      	b.n	2cbc <z_prf+0x1ec>
	} else if (fspace) {
    2df6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    2df8:	b10b      	cbz	r3, 2dfe <z_prf+0x32e>
		*buf++ = ' ';
    2dfa:	2320      	movs	r3, #32
    2dfc:	e7f7      	b.n	2dee <z_prf+0x31e>
	} else if (fspace) {
    2dfe:	4639      	mov	r1, r7
    2e00:	ae1b      	add	r6, sp, #108	; 0x6c
    2e02:	e75d      	b.n	2cc0 <z_prf+0x1f0>
    2e04:	0000fbe1 	.word	0x0000fbe1
    2e08:	0000fbe7 	.word	0x0000fbe7
				u.d = va_arg(vargs, double);
    2e0c:	f106 0907 	add.w	r9, r6, #7
    2e10:	f029 0907 	bic.w	r9, r9, #7
    2e14:	e8f9 2302 	ldrd	r2, r3, [r9], #8
	fract = (double_temp << 11) & ~HIGHBIT64;
    2e18:	02d8      	lsls	r0, r3, #11
    2e1a:	ea40 5052 	orr.w	r0, r0, r2, lsr #21
    2e1e:	02d6      	lsls	r6, r2, #11
    2e20:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
	if (sign) {
    2e24:	2a00      	cmp	r2, #0
	exp = double_temp >> 52 & 0x7ff;
    2e26:	f3c3 510a 	ubfx	r1, r3, #20, #11
	fract = (double_temp << 11) & ~HIGHBIT64;
    2e2a:	9604      	str	r6, [sp, #16]
    2e2c:	9005      	str	r0, [sp, #20]
	if (sign) {
    2e2e:	f173 0300 	sbcs.w	r3, r3, #0
	fract = (double_temp << 11) & ~HIGHBIT64;
    2e32:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
    2e36:	e9cd 6716 	strd	r6, r7, [sp, #88]	; 0x58
	if (sign) {
    2e3a:	da41      	bge.n	2ec0 <z_prf+0x3f0>
		*buf++ = '-';
    2e3c:	232d      	movs	r3, #45	; 0x2d
		*buf++ = ' ';
    2e3e:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
    2e42:	f10d 076d 	add.w	r7, sp, #109	; 0x6d
	if (exp == 0x7ff) {
    2e46:	f240 73ff 	movw	r3, #2047	; 0x7ff
    2e4a:	4299      	cmp	r1, r3
    2e4c:	d153      	bne.n	2ef6 <z_prf+0x426>
		if (!fract) {
    2e4e:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    2e52:	430a      	orrs	r2, r1
    2e54:	f1a4 0441 	sub.w	r4, r4, #65	; 0x41
    2e58:	f107 0303 	add.w	r3, r7, #3
    2e5c:	d140      	bne.n	2ee0 <z_prf+0x410>
			if (isupper(c)) {
    2e5e:	2c19      	cmp	r4, #25
    2e60:	d838      	bhi.n	2ed4 <z_prf+0x404>
				*buf++ = 'I';
    2e62:	2249      	movs	r2, #73	; 0x49
    2e64:	703a      	strb	r2, [r7, #0]
				*buf++ = 'N';
    2e66:	224e      	movs	r2, #78	; 0x4e
    2e68:	707a      	strb	r2, [r7, #1]
				*buf++ = 'F';
    2e6a:	2246      	movs	r2, #70	; 0x46
		*buf = 0;
    2e6c:	2500      	movs	r5, #0
			zero.predot = zero.postdot = zero.trail = 0;
    2e6e:	46ab      	mov	fp, r5
    2e70:	46a8      	mov	r8, r5
		return buf - start;
    2e72:	ae1b      	add	r6, sp, #108	; 0x6c
				*buf++ = 'n';
    2e74:	70ba      	strb	r2, [r7, #2]
		*buf = 0;
    2e76:	70fd      	strb	r5, [r7, #3]
		return buf - start;
    2e78:	1b9b      	subs	r3, r3, r6
				if (fplus || fspace || (buf[0] == '-')) {
    2e7a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    2e7c:	2a00      	cmp	r2, #0
    2e7e:	f040 81ec 	bne.w	325a <z_prf+0x78a>
    2e82:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    2e84:	2a00      	cmp	r2, #0
    2e86:	f040 81e8 	bne.w	325a <z_prf+0x78a>
    2e8a:	f89d 706c 	ldrb.w	r7, [sp, #108]	; 0x6c
    2e8e:	f1a7 022d 	sub.w	r2, r7, #45	; 0x2d
    2e92:	4257      	negs	r7, r2
    2e94:	4157      	adcs	r7, r2
				clen += zero.predot + zero.postdot + zero.trail;
    2e96:	eb05 0608 	add.w	r6, r5, r8
    2e9a:	4433      	add	r3, r6
    2e9c:	eb03 060b 	add.w	r6, r3, fp
				if (!isdigit(buf[prefix])) {
    2ea0:	ab22      	add	r3, sp, #136	; 0x88
    2ea2:	443b      	add	r3, r7
    2ea4:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
    2ea8:	3b30      	subs	r3, #48	; 0x30
    2eaa:	2b09      	cmp	r3, #9
    2eac:	f200 8246 	bhi.w	333c <z_prf+0x86c>
			} else if (fzero) {
    2eb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    2eb2:	2b00      	cmp	r3, #0
    2eb4:	f000 8245 	beq.w	3342 <z_prf+0x872>
    2eb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2eba:	1b9a      	subs	r2, r3, r6
    2ebc:	ab1b      	add	r3, sp, #108	; 0x6c
    2ebe:	e739      	b.n	2d34 <z_prf+0x264>
	} else if (fplus) {
    2ec0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    2ec2:	b10b      	cbz	r3, 2ec8 <z_prf+0x3f8>
		*buf++ = '+';
    2ec4:	232b      	movs	r3, #43	; 0x2b
    2ec6:	e7ba      	b.n	2e3e <z_prf+0x36e>
	} else if (fspace) {
    2ec8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    2eca:	b10b      	cbz	r3, 2ed0 <z_prf+0x400>
		*buf++ = ' ';
    2ecc:	2320      	movs	r3, #32
    2ece:	e7b6      	b.n	2e3e <z_prf+0x36e>
	} else if (fspace) {
    2ed0:	af1b      	add	r7, sp, #108	; 0x6c
    2ed2:	e7b8      	b.n	2e46 <z_prf+0x376>
				*buf++ = 'i';
    2ed4:	2269      	movs	r2, #105	; 0x69
    2ed6:	703a      	strb	r2, [r7, #0]
				*buf++ = 'n';
    2ed8:	226e      	movs	r2, #110	; 0x6e
    2eda:	707a      	strb	r2, [r7, #1]
				*buf++ = 'f';
    2edc:	2266      	movs	r2, #102	; 0x66
    2ede:	e7c5      	b.n	2e6c <z_prf+0x39c>
			if (isupper(c)) {
    2ee0:	2c19      	cmp	r4, #25
				*buf++ = 'N';
    2ee2:	bf99      	ittee	ls
    2ee4:	224e      	movls	r2, #78	; 0x4e
				*buf++ = 'A';
    2ee6:	2141      	movls	r1, #65	; 0x41
				*buf++ = 'n';
    2ee8:	226e      	movhi	r2, #110	; 0x6e
				*buf++ = 'a';
    2eea:	2161      	movhi	r1, #97	; 0x61
				*buf++ = 'N';
    2eec:	bf94      	ite	ls
    2eee:	703a      	strbls	r2, [r7, #0]
				*buf++ = 'n';
    2ef0:	703a      	strbhi	r2, [r7, #0]
				*buf++ = 'a';
    2ef2:	7079      	strb	r1, [r7, #1]
    2ef4:	e7ba      	b.n	2e6c <z_prf+0x39c>
	if ((exp | fract) != 0) {
    2ef6:	9b04      	ldr	r3, [sp, #16]
    2ef8:	9805      	ldr	r0, [sp, #20]
    2efa:	430b      	orrs	r3, r1
    2efc:	9310      	str	r3, [sp, #64]	; 0x40
    2efe:	17cb      	asrs	r3, r1, #31
    2f00:	4303      	orrs	r3, r0
		c = 'f';
    2f02:	2c46      	cmp	r4, #70	; 0x46
	if ((exp | fract) != 0) {
    2f04:	9311      	str	r3, [sp, #68]	; 0x44
		c = 'f';
    2f06:	bf08      	it	eq
    2f08:	2466      	moveq	r4, #102	; 0x66
	if ((exp | fract) != 0) {
    2f0a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    2f0e:	4313      	orrs	r3, r2
    2f10:	f000 8111 	beq.w	3136 <z_prf+0x666>
		if (exp == 0) {
    2f14:	2900      	cmp	r1, #0
    2f16:	f000 809b 	beq.w	3050 <z_prf+0x580>
		fract |= HIGHBIT64;
    2f1a:	2600      	movs	r6, #0
    2f1c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
		exp -= (1023 - 1);	/* +1 since .1 vs 1. */
    2f1e:	f2a1 38fe 	subw	r8, r1, #1022	; 0x3fe
		fract |= HIGHBIT64;
    2f22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    2f26:	9317      	str	r3, [sp, #92]	; 0x5c
	while (exp <= -3) {
    2f28:	f118 0f02 	cmn.w	r8, #2
    2f2c:	f2c0 80a4 	blt.w	3078 <z_prf+0x5a8>
	while (exp > 0) {
    2f30:	f1b8 0f00 	cmp.w	r8, #0
    2f34:	f300 80dd 	bgt.w	30f2 <z_prf+0x622>
		_rlrshift(&fract);
    2f38:	a816      	add	r0, sp, #88	; 0x58
		exp++;
    2f3a:	f108 0801 	add.w	r8, r8, #1
		_rlrshift(&fract);
    2f3e:	f009 f81c 	bl	bf7a <_rlrshift>
	while (exp < (0 + 4)) {
    2f42:	f1b8 0f04 	cmp.w	r8, #4
    2f46:	d1f7      	bne.n	2f38 <z_prf+0x468>
		precision = 6;		/* Default precision if none given */
    2f48:	2d00      	cmp	r5, #0
	if ((c == 'g') || (c == 'G')) {
    2f4a:	f004 03df 	and.w	r3, r4, #223	; 0xdf
		precision = 6;		/* Default precision if none given */
    2f4e:	bfb8      	it	lt
    2f50:	2506      	movlt	r5, #6
	if ((c == 'g') || (c == 'G')) {
    2f52:	2b47      	cmp	r3, #71	; 0x47
    2f54:	f040 80f8 	bne.w	3148 <z_prf+0x678>
		if (decexp < (-4 + 1) || decexp > precision) {
    2f58:	1cf1      	adds	r1, r6, #3
    2f5a:	db02      	blt.n	2f62 <z_prf+0x492>
    2f5c:	42b5      	cmp	r5, r6
    2f5e:	f280 80ed 	bge.w	313c <z_prf+0x66c>
			c += 'e' - 'g';
    2f62:	3c02      	subs	r4, #2
    2f64:	b2e4      	uxtb	r4, r4
			if (precision > 0) {
    2f66:	2d00      	cmp	r5, #0
    2f68:	f000 80f4 	beq.w	3154 <z_prf+0x684>
				precision--;
    2f6c:	3d01      	subs	r5, #1
		if (!falt && (precision > 0)) {
    2f6e:	f1bb 0f00 	cmp.w	fp, #0
    2f72:	f040 80ef 	bne.w	3154 <z_prf+0x684>
    2f76:	2d00      	cmp	r5, #0
    2f78:	bfd4      	ite	le
    2f7a:	f04f 0a00 	movle.w	sl, #0
    2f7e:	f04f 0a01 	movgt.w	sl, #1
	if (c == 'f') {
    2f82:	2c66      	cmp	r4, #102	; 0x66
    2f84:	f040 80e8 	bne.w	3158 <z_prf+0x688>
		if (exp < 0) {
    2f88:	eb15 0806 	adds.w	r8, r5, r6
    2f8c:	f140 80ec 	bpl.w	3168 <z_prf+0x698>
	digit_count = 16;
    2f90:	2310      	movs	r3, #16
    2f92:	2466      	movs	r4, #102	; 0x66
			exp = 0;
    2f94:	f04f 0800 	mov.w	r8, #0
	digit_count = 16;
    2f98:	9315      	str	r3, [sp, #84]	; 0x54
	ltemp = 0x0800000000000000;
    2f9a:	2200      	movs	r2, #0
    2f9c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    2fa0:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
	while (exp--) {
    2fa4:	f118 38ff 	adds.w	r8, r8, #4294967295
    2fa8:	f080 80e0 	bcs.w	316c <z_prf+0x69c>
	fract += ltemp;
    2fac:	9b16      	ldr	r3, [sp, #88]	; 0x58
    2fae:	9a18      	ldr	r2, [sp, #96]	; 0x60
    2fb0:	9919      	ldr	r1, [sp, #100]	; 0x64
    2fb2:	189b      	adds	r3, r3, r2
    2fb4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    2fb6:	eb41 0202 	adc.w	r2, r1, r2
    2fba:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
	if ((fract >> 32) & 0xF0000000) {
    2fbe:	f002 4370 	and.w	r3, r2, #4026531840	; 0xf0000000
    2fc2:	9312      	str	r3, [sp, #72]	; 0x48
    2fc4:	2300      	movs	r3, #0
    2fc6:	9313      	str	r3, [sp, #76]	; 0x4c
    2fc8:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    2fcc:	4313      	orrs	r3, r2
    2fce:	d006      	beq.n	2fde <z_prf+0x50e>
		_ldiv5(&fract);
    2fd0:	a816      	add	r0, sp, #88	; 0x58
    2fd2:	f008 ffe3 	bl	bf9c <_ldiv5>
		_rlrshift(&fract);
    2fd6:	a816      	add	r0, sp, #88	; 0x58
    2fd8:	f008 ffcf 	bl	bf7a <_rlrshift>
		decexp++;
    2fdc:	3601      	adds	r6, #1
	if (c == 'f') {
    2fde:	2c66      	cmp	r4, #102	; 0x66
    2fe0:	f040 80e1 	bne.w	31a6 <z_prf+0x6d6>
		if (decexp > 0) {
    2fe4:	2e00      	cmp	r6, #0
    2fe6:	f340 80c8 	ble.w	317a <z_prf+0x6aa>
			while (decexp > 0 && digit_count > 0) {
    2fea:	9b15      	ldr	r3, [sp, #84]	; 0x54
    2fec:	2b00      	cmp	r3, #0
    2fee:	dd07      	ble.n	3000 <z_prf+0x530>
				*buf++ = _get_digit(&fract, &digit_count);
    2ff0:	a915      	add	r1, sp, #84	; 0x54
    2ff2:	a816      	add	r0, sp, #88	; 0x58
    2ff4:	f008 fffd 	bl	bff2 <_get_digit>
			while (decexp > 0 && digit_count > 0) {
    2ff8:	3e01      	subs	r6, #1
				*buf++ = _get_digit(&fract, &digit_count);
    2ffa:	f807 0b01 	strb.w	r0, [r7], #1
			while (decexp > 0 && digit_count > 0) {
    2ffe:	d1f4      	bne.n	2fea <z_prf+0x51a>
			zp->predot = decexp;
    3000:	46b0      	mov	r8, r6
    3002:	463b      	mov	r3, r7
			decexp = 0;
    3004:	2600      	movs	r6, #0
		if (falt || (precision > 0)) {
    3006:	f1bb 0f00 	cmp.w	fp, #0
    300a:	d101      	bne.n	3010 <z_prf+0x540>
    300c:	2d00      	cmp	r5, #0
    300e:	dd15      	ble.n	303c <z_prf+0x56c>
			*buf++ = '.';
    3010:	222e      	movs	r2, #46	; 0x2e
    3012:	f803 2b01 	strb.w	r2, [r3], #1
		if (decexp < 0 && precision > 0) {
    3016:	2e00      	cmp	r6, #0
    3018:	f000 80c0 	beq.w	319c <z_prf+0x6cc>
    301c:	2d00      	cmp	r5, #0
    301e:	f340 80bf 	ble.w	31a0 <z_prf+0x6d0>
			zp->postdot = -decexp;
    3022:	f1c6 0b00 	rsb	fp, r6, #0
    3026:	45ab      	cmp	fp, r5
    3028:	bfa8      	it	ge
    302a:	46ab      	movge	fp, r5
			precision -= zp->postdot;
    302c:	eba5 050b 	sub.w	r5, r5, fp
		while (precision > 0 && digit_count > 0) {
    3030:	2d00      	cmp	r5, #0
    3032:	dd03      	ble.n	303c <z_prf+0x56c>
    3034:	9a15      	ldr	r2, [sp, #84]	; 0x54
    3036:	2a00      	cmp	r2, #0
    3038:	f300 80a6 	bgt.w	3188 <z_prf+0x6b8>
	if (prune_zero) {
    303c:	f1ba 0f00 	cmp.w	sl, #0
    3040:	f040 80c6 	bne.w	31d0 <z_prf+0x700>
	*buf = 0;
    3044:	2200      	movs	r2, #0
	return buf - start;
    3046:	ae1b      	add	r6, sp, #108	; 0x6c
	*buf = 0;
    3048:	701a      	strb	r2, [r3, #0]
	return buf - start;
    304a:	1b9b      	subs	r3, r3, r6
    304c:	e715      	b.n	2e7a <z_prf+0x3aa>
				exp--;
    304e:	3901      	subs	r1, #1
			while (((fract <<= 1) & HIGHBIT64) == 0) {
    3050:	9b04      	ldr	r3, [sp, #16]
    3052:	18db      	adds	r3, r3, r3
    3054:	9304      	str	r3, [sp, #16]
    3056:	9b05      	ldr	r3, [sp, #20]
    3058:	415b      	adcs	r3, r3
    305a:	9305      	str	r3, [sp, #20]
    305c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    3060:	2a00      	cmp	r2, #0
    3062:	f173 0300 	sbcs.w	r3, r3, #0
    3066:	daf2      	bge.n	304e <z_prf+0x57e>
    3068:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    306c:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
    3070:	e753      	b.n	2f1a <z_prf+0x44a>
			_rlrshift(&fract);
    3072:	a816      	add	r0, sp, #88	; 0x58
    3074:	f008 ff81 	bl	bf7a <_rlrshift>
		while ((fract >> 32) >= (MAXFP1 / 5)) {
    3078:	e9dd ec16 	ldrd	lr, ip, [sp, #88]	; 0x58
    307c:	2300      	movs	r3, #0
    307e:	2100      	movs	r1, #0
    3080:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
    3084:	930d      	str	r3, [sp, #52]	; 0x34
    3086:	48bb      	ldr	r0, [pc, #748]	; (3374 <z_prf+0x8a4>)
    3088:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
    308c:	4299      	cmp	r1, r3
    308e:	bf08      	it	eq
    3090:	4290      	cmpeq	r0, r2
    3092:	f108 0801 	add.w	r8, r8, #1
    3096:	d3ec      	bcc.n	3072 <z_prf+0x5a2>
		fract *= 5U;
    3098:	2005      	movs	r0, #5
    309a:	fbae 2300 	umull	r2, r3, lr, r0
    309e:	e9cd 2306 	strd	r2, r3, [sp, #24]
    30a2:	9b07      	ldr	r3, [sp, #28]
		decexp--;
    30a4:	3e01      	subs	r6, #1
		fract *= 5U;
    30a6:	fb00 330c 	mla	r3, r0, ip, r3
		decexp--;
    30aa:	f04f 0c00 	mov.w	ip, #0
		fract *= 5U;
    30ae:	9307      	str	r3, [sp, #28]
    30b0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    30b4:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
		while ((fract >> 32) <= (MAXFP1 / 2)) {
    30b8:	2100      	movs	r1, #0
    30ba:	2300      	movs	r3, #0
    30bc:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    30c0:	9807      	ldr	r0, [sp, #28]
    30c2:	428b      	cmp	r3, r1
    30c4:	bf08      	it	eq
    30c6:	4282      	cmpeq	r2, r0
    30c8:	d208      	bcs.n	30dc <z_prf+0x60c>
    30ca:	f1bc 0f00 	cmp.w	ip, #0
    30ce:	f43f af2b 	beq.w	2f28 <z_prf+0x458>
    30d2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    30d6:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
    30da:	e725      	b.n	2f28 <z_prf+0x458>
			fract <<= 1;
    30dc:	9b06      	ldr	r3, [sp, #24]
			exp--;
    30de:	f108 38ff 	add.w	r8, r8, #4294967295
			fract <<= 1;
    30e2:	18db      	adds	r3, r3, r3
    30e4:	9306      	str	r3, [sp, #24]
    30e6:	9b07      	ldr	r3, [sp, #28]
    30e8:	f04f 0c01 	mov.w	ip, #1
    30ec:	415b      	adcs	r3, r3
    30ee:	9307      	str	r3, [sp, #28]
			exp--;
    30f0:	e7e2      	b.n	30b8 <z_prf+0x5e8>
		_ldiv5(&fract);
    30f2:	a816      	add	r0, sp, #88	; 0x58
    30f4:	f008 ff52 	bl	bf9c <_ldiv5>
		exp--;
    30f8:	e9dd ae16 	ldrd	sl, lr, [sp, #88]	; 0x58
		decexp++;
    30fc:	f04f 0c00 	mov.w	ip, #0
		exp--;
    3100:	f108 38ff 	add.w	r8, r8, #4294967295
		decexp++;
    3104:	3601      	adds	r6, #1
		while ((fract >> 32) <= (MAXFP1 / 2)) {
    3106:	2300      	movs	r3, #0
    3108:	2100      	movs	r1, #0
    310a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    310e:	4299      	cmp	r1, r3
    3110:	bf08      	it	eq
    3112:	4570      	cmpeq	r0, lr
    3114:	d206      	bcs.n	3124 <z_prf+0x654>
    3116:	f1bc 0f00 	cmp.w	ip, #0
    311a:	f43f af09 	beq.w	2f30 <z_prf+0x460>
    311e:	e9cd ae16 	strd	sl, lr, [sp, #88]	; 0x58
    3122:	e705      	b.n	2f30 <z_prf+0x460>
			fract <<= 1;
    3124:	eb1a 0a0a 	adds.w	sl, sl, sl
    3128:	eb4e 0e0e 	adc.w	lr, lr, lr
			exp--;
    312c:	f108 38ff 	add.w	r8, r8, #4294967295
    3130:	f04f 0c01 	mov.w	ip, #1
    3134:	e7e7      	b.n	3106 <z_prf+0x636>
	if ((exp | fract) != 0) {
    3136:	2600      	movs	r6, #0
    3138:	46b0      	mov	r8, r6
    313a:	e6fd      	b.n	2f38 <z_prf+0x468>
			precision -= decexp;
    313c:	1bad      	subs	r5, r5, r6
		if (!falt && (precision > 0)) {
    313e:	f1bb 0f00 	cmp.w	fp, #0
    3142:	d104      	bne.n	314e <z_prf+0x67e>
			c = 'f';
    3144:	2466      	movs	r4, #102	; 0x66
    3146:	e716      	b.n	2f76 <z_prf+0x4a6>
	prune_zero = false;		/* Assume trailing 0's allowed     */
    3148:	f04f 0a00 	mov.w	sl, #0
    314c:	e719      	b.n	2f82 <z_prf+0x4b2>
    314e:	f04f 0a00 	mov.w	sl, #0
    3152:	e719      	b.n	2f88 <z_prf+0x4b8>
    3154:	f04f 0a00 	mov.w	sl, #0
		exp = precision + 1;
    3158:	f105 0801 	add.w	r8, r5, #1
	digit_count = 16;
    315c:	2310      	movs	r3, #16
    315e:	4598      	cmp	r8, r3
    3160:	9315      	str	r3, [sp, #84]	; 0x54
	if (exp > 16) {
    3162:	bfa8      	it	ge
    3164:	4698      	movge	r8, r3
    3166:	e718      	b.n	2f9a <z_prf+0x4ca>
		if (exp < 0) {
    3168:	2466      	movs	r4, #102	; 0x66
    316a:	e7f7      	b.n	315c <z_prf+0x68c>
		_ldiv5(&ltemp);
    316c:	a818      	add	r0, sp, #96	; 0x60
    316e:	f008 ff15 	bl	bf9c <_ldiv5>
		_rlrshift(&ltemp);
    3172:	a818      	add	r0, sp, #96	; 0x60
    3174:	f008 ff01 	bl	bf7a <_rlrshift>
    3178:	e714      	b.n	2fa4 <z_prf+0x4d4>
			*buf++ = '0';
    317a:	463b      	mov	r3, r7
    317c:	2230      	movs	r2, #48	; 0x30
			zero.predot = zero.postdot = zero.trail = 0;
    317e:	f04f 0800 	mov.w	r8, #0
			*buf++ = '0';
    3182:	f803 2b01 	strb.w	r2, [r3], #1
    3186:	e73e      	b.n	3006 <z_prf+0x536>
			*buf++ = _get_digit(&fract, &digit_count);
    3188:	a915      	add	r1, sp, #84	; 0x54
    318a:	a816      	add	r0, sp, #88	; 0x58
    318c:	9306      	str	r3, [sp, #24]
    318e:	f008 ff30 	bl	bff2 <_get_digit>
    3192:	9b06      	ldr	r3, [sp, #24]
			precision--;
    3194:	3d01      	subs	r5, #1
			*buf++ = _get_digit(&fract, &digit_count);
    3196:	f803 0b01 	strb.w	r0, [r3], #1
			precision--;
    319a:	e749      	b.n	3030 <z_prf+0x560>
			zero.predot = zero.postdot = zero.trail = 0;
    319c:	46b3      	mov	fp, r6
    319e:	e747      	b.n	3030 <z_prf+0x560>
    31a0:	f04f 0b00 	mov.w	fp, #0
    31a4:	e74a      	b.n	303c <z_prf+0x56c>
		*buf = _get_digit(&fract, &digit_count);
    31a6:	a915      	add	r1, sp, #84	; 0x54
    31a8:	a816      	add	r0, sp, #88	; 0x58
    31aa:	f008 ff22 	bl	bff2 <_get_digit>
		if (*buf++ != '0') {
    31ae:	2830      	cmp	r0, #48	; 0x30
		*buf = _get_digit(&fract, &digit_count);
    31b0:	7038      	strb	r0, [r7, #0]
			decexp--;
    31b2:	bf18      	it	ne
    31b4:	f106 36ff 	addne.w	r6, r6, #4294967295
		if (falt || (precision > 0)) {
    31b8:	f1bb 0f00 	cmp.w	fp, #0
    31bc:	d138      	bne.n	3230 <z_prf+0x760>
    31be:	2d00      	cmp	r5, #0
    31c0:	dc36      	bgt.n	3230 <z_prf+0x760>
		if (*buf++ != '0') {
    31c2:	1c7b      	adds	r3, r7, #1
	if (prune_zero) {
    31c4:	f1ba 0f00 	cmp.w	sl, #0
    31c8:	d044      	beq.n	3254 <z_prf+0x784>
			zero.predot = zero.postdot = zero.trail = 0;
    31ca:	f04f 0b00 	mov.w	fp, #0
    31ce:	46d8      	mov	r8, fp
		while (*--buf == '0')
    31d0:	461a      	mov	r2, r3
    31d2:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
    31d6:	2930      	cmp	r1, #48	; 0x30
    31d8:	d0fa      	beq.n	31d0 <z_prf+0x700>
		if (*buf != '.') {
    31da:	292e      	cmp	r1, #46	; 0x2e
    31dc:	bf18      	it	ne
    31de:	4613      	movne	r3, r2
    31e0:	2500      	movs	r5, #0
	if ((c == 'e') || (c == 'E')) {
    31e2:	f004 02df 	and.w	r2, r4, #223	; 0xdf
    31e6:	2a45      	cmp	r2, #69	; 0x45
    31e8:	f47f af2c 	bne.w	3044 <z_prf+0x574>
		if (decexp < 0) {
    31ec:	2e00      	cmp	r6, #0
			*buf++ = '-';
    31ee:	bfb4      	ite	lt
    31f0:	222d      	movlt	r2, #45	; 0x2d
			*buf++ = '+';
    31f2:	222b      	movge	r2, #43	; 0x2b
		*buf++ = c;
    31f4:	4619      	mov	r1, r3
			decexp = -decexp;
    31f6:	bfb8      	it	lt
    31f8:	4276      	neglt	r6, r6
		if (decexp >= 100) {
    31fa:	2e63      	cmp	r6, #99	; 0x63
		*buf++ = c;
    31fc:	f801 4b02 	strb.w	r4, [r1], #2
			*buf++ = '-';
    3200:	705a      	strb	r2, [r3, #1]
		if (decexp >= 100) {
    3202:	dd08      	ble.n	3216 <z_prf+0x746>
			*buf++ = (decexp / 100) + '0';
    3204:	2064      	movs	r0, #100	; 0x64
    3206:	fb96 f2f0 	sdiv	r2, r6, r0
			decexp %= 100;
    320a:	fb00 6612 	mls	r6, r0, r2, r6
			*buf++ = (decexp / 100) + '0';
    320e:	f102 0430 	add.w	r4, r2, #48	; 0x30
    3212:	1cd9      	adds	r1, r3, #3
    3214:	709c      	strb	r4, [r3, #2]
		*buf++ = (decexp / 10) + '0';
    3216:	200a      	movs	r0, #10
    3218:	fb96 f2f0 	sdiv	r2, r6, r0
    321c:	460b      	mov	r3, r1
		decexp %= 10;
    321e:	fb00 6612 	mls	r6, r0, r2, r6
		*buf++ = (decexp / 10) + '0';
    3222:	f102 0430 	add.w	r4, r2, #48	; 0x30
		*buf++ = decexp + '0';
    3226:	3630      	adds	r6, #48	; 0x30
		*buf++ = (decexp / 10) + '0';
    3228:	f803 4b02 	strb.w	r4, [r3], #2
		*buf++ = decexp + '0';
    322c:	704e      	strb	r6, [r1, #1]
    322e:	e709      	b.n	3044 <z_prf+0x574>
			*buf++ = '.';
    3230:	222e      	movs	r2, #46	; 0x2e
    3232:	1cbb      	adds	r3, r7, #2
    3234:	707a      	strb	r2, [r7, #1]
		while (precision > 0 && digit_count > 0) {
    3236:	2d00      	cmp	r5, #0
    3238:	ddc4      	ble.n	31c4 <z_prf+0x6f4>
    323a:	9a15      	ldr	r2, [sp, #84]	; 0x54
    323c:	2a00      	cmp	r2, #0
    323e:	ddc1      	ble.n	31c4 <z_prf+0x6f4>
			*buf++ = _get_digit(&fract, &digit_count);
    3240:	a915      	add	r1, sp, #84	; 0x54
    3242:	a816      	add	r0, sp, #88	; 0x58
    3244:	9306      	str	r3, [sp, #24]
    3246:	f008 fed4 	bl	bff2 <_get_digit>
    324a:	9b06      	ldr	r3, [sp, #24]
			precision--;
    324c:	3d01      	subs	r5, #1
			*buf++ = _get_digit(&fract, &digit_count);
    324e:	f803 0b01 	strb.w	r0, [r3], #1
			precision--;
    3252:	e7f0      	b.n	3236 <z_prf+0x766>
			zero.predot = zero.postdot = zero.trail = 0;
    3254:	46d3      	mov	fp, sl
    3256:	46d0      	mov	r8, sl
    3258:	e7c3      	b.n	31e2 <z_prf+0x712>
					prefix = 1;
    325a:	2701      	movs	r7, #1
    325c:	e61b      	b.n	2e96 <z_prf+0x3c6>
				switch (i) {
    325e:	46b1      	mov	r9, r6
    3260:	2f68      	cmp	r7, #104	; 0x68
    3262:	f859 3b04 	ldr.w	r3, [r9], #4
    3266:	d005      	beq.n	3274 <z_prf+0x7a4>
    3268:	dc01      	bgt.n	326e <z_prf+0x79e>
    326a:	2f48      	cmp	r7, #72	; 0x48
    326c:	d007      	beq.n	327e <z_prf+0x7ae>
					*va_arg(vargs, int *) = count;
    326e:	9a01      	ldr	r2, [sp, #4]
    3270:	601a      	str	r2, [r3, #0]
					break;
    3272:	e001      	b.n	3278 <z_prf+0x7a8>
					*va_arg(vargs, short *) = count;
    3274:	9a01      	ldr	r2, [sp, #4]
    3276:	801a      	strh	r2, [r3, #0]
				continue;
    3278:	464e      	mov	r6, r9
    327a:	9a08      	ldr	r2, [sp, #32]
    327c:	e430      	b.n	2ae0 <z_prf+0x10>
					*va_arg(vargs, char *) = count;
    327e:	9a01      	ldr	r2, [sp, #4]
    3280:	701a      	strb	r2, [r3, #0]
					break;
    3282:	e7f9      	b.n	3278 <z_prf+0x7a8>
				val = (uintptr_t) va_arg(vargs, void *);
    3284:	46b1      	mov	r9, r6
		*buf++ = '0';
    3286:	f647 0330 	movw	r3, #30768	; 0x7830
	len = _to_x(buf, value, 16);
    328a:	2210      	movs	r2, #16
    328c:	f859 1b04 	ldr.w	r1, [r9], #4
    3290:	f10d 006e 	add.w	r0, sp, #110	; 0x6e
		*buf++ = '0';
    3294:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
	len = _to_x(buf, value, 16);
    3298:	f008 fe4d 	bl	bf36 <_to_x>
				prefix = 2;
    329c:	2702      	movs	r7, #2
	return len + (buf - buf0);
    329e:	1c86      	adds	r6, r0, #2
				break;
    32a0:	e51e      	b.n	2ce0 <z_prf+0x210>
					if (cptr[clen] == '\0') {
    32a2:	5d9a      	ldrb	r2, [r3, r6]
    32a4:	2a00      	cmp	r2, #0
    32a6:	d047      	beq.n	3338 <z_prf+0x868>
				for (clen = 0; clen < precision; clen++) {
    32a8:	3601      	adds	r6, #1
    32aa:	e52e      	b.n	2d0a <z_prf+0x23a>
	if (alt_form) {
    32ac:	ac1b      	add	r4, sp, #108	; 0x6c
	return (buf - buf0) + _to_x(buf, value, 8);
    32ae:	2208      	movs	r2, #8
    32b0:	4620      	mov	r0, r4
    32b2:	f008 fe40 	bl	bf36 <_to_x>
    32b6:	ae1b      	add	r6, sp, #108	; 0x6c
    32b8:	1ba6      	subs	r6, r4, r6
    32ba:	4406      	add	r6, r0
			prefix = 0;
    32bc:	2700      	movs	r7, #0
    32be:	e50f      	b.n	2ce0 <z_prf+0x210>
		*buf++ = '0';
    32c0:	f10d 046d 	add.w	r4, sp, #109	; 0x6d
    32c4:	e7f3      	b.n	32ae <z_prf+0x7de>
				} else if (c == 'u') {
    32c6:	2c75      	cmp	r4, #117	; 0x75
    32c8:	d105      	bne.n	32d6 <z_prf+0x806>
	return _to_x(buf, value, 10);
    32ca:	220a      	movs	r2, #10
    32cc:	a81b      	add	r0, sp, #108	; 0x6c
    32ce:	f008 fe32 	bl	bf36 <_to_x>
    32d2:	4606      	mov	r6, r0
    32d4:	e7f2      	b.n	32bc <z_prf+0x7ec>
	if (alt_form) {
    32d6:	f1bb 0f00 	cmp.w	fp, #0
    32da:	d012      	beq.n	3302 <z_prf+0x832>
		*buf++ = '0';
    32dc:	f647 0330 	movw	r3, #30768	; 0x7830
		*buf++ = 'x';
    32e0:	f10d 086e 	add.w	r8, sp, #110	; 0x6e
		*buf++ = '0';
    32e4:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
	len = _to_x(buf, value, 16);
    32e8:	2210      	movs	r2, #16
    32ea:	4640      	mov	r0, r8
    32ec:	f008 fe23 	bl	bf36 <_to_x>
	if (prefix == 'X') {
    32f0:	2c58      	cmp	r4, #88	; 0x58
    32f2:	d009      	beq.n	3308 <z_prf+0x838>
	return len + (buf - buf0);
    32f4:	ae1b      	add	r6, sp, #108	; 0x6c
    32f6:	eba8 0606 	sub.w	r6, r8, r6
    32fa:	4406      	add	r6, r0
						prefix = 2;
    32fc:	ea4f 074b 	mov.w	r7, fp, lsl #1
    3300:	e4ee      	b.n	2ce0 <z_prf+0x210>
	if (alt_form) {
    3302:	f10d 086c 	add.w	r8, sp, #108	; 0x6c
    3306:	e7ef      	b.n	32e8 <z_prf+0x818>
	if (prefix == 'X') {
    3308:	aa1b      	add	r2, sp, #108	; 0x6c
		if (*buf >= 'a' && *buf <= 'z') {
    330a:	7813      	ldrb	r3, [r2, #0]
    330c:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
    3310:	2919      	cmp	r1, #25
			*buf += 'A' - 'a';
    3312:	bf9c      	itt	ls
    3314:	3b20      	subls	r3, #32
    3316:	7013      	strbls	r3, [r2, #0]
	} while (*buf++);
    3318:	f812 3b01 	ldrb.w	r3, [r2], #1
    331c:	2b00      	cmp	r3, #0
    331e:	d1f4      	bne.n	330a <z_prf+0x83a>
    3320:	e7e8      	b.n	32f4 <z_prf+0x824>
				PUTC('%');
    3322:	9903      	ldr	r1, [sp, #12]
    3324:	4620      	mov	r0, r4
    3326:	f7ff bbe4 	b.w	2af2 <z_prf+0x22>
				count++;
    332a:	9b01      	ldr	r3, [sp, #4]
    332c:	3301      	adds	r3, #1
				count += 2;
    332e:	9301      	str	r3, [sp, #4]
				continue;
    3330:	46b1      	mov	r9, r6
    3332:	e7a1      	b.n	3278 <z_prf+0x7a8>
					prefix = 1;
    3334:	2701      	movs	r7, #1
    3336:	e4d3      	b.n	2ce0 <z_prf+0x210>
    3338:	4615      	mov	r5, r2
    333a:	e4eb      	b.n	2d14 <z_prf+0x244>
			cptr = buf;
    333c:	ab1b      	add	r3, sp, #108	; 0x6c
				zero_head = 0;
    333e:	2200      	movs	r2, #0
    3340:	e4fa      	b.n	2d38 <z_prf+0x268>
    3342:	ab1b      	add	r3, sp, #108	; 0x6c
    3344:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    3346:	e4f7      	b.n	2d38 <z_prf+0x268>
    3348:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
					PUTC(' ');
    334c:	9903      	ldr	r1, [sp, #12]
    334e:	9b02      	ldr	r3, [sp, #8]
    3350:	2020      	movs	r0, #32
    3352:	4798      	blx	r3
    3354:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
    3358:	3001      	adds	r0, #1
    335a:	f43f abcf 	beq.w	2afc <z_prf+0x2c>
				while (width-- > 0) {
    335e:	f11a 3aff 	adds.w	sl, sl, #4294967295
    3362:	d2f1      	bcs.n	3348 <z_prf+0x878>
				count += width;
    3364:	9901      	ldr	r1, [sp, #4]
    3366:	4421      	add	r1, r4
    3368:	9101      	str	r1, [sp, #4]
				while (width-- > 0) {
    336a:	4654      	mov	r4, sl
    336c:	e4ee      	b.n	2d4c <z_prf+0x27c>
    336e:	46a2      	mov	sl, r4
    3370:	e7f5      	b.n	335e <z_prf+0x88e>
    3372:	bf00      	nop
    3374:	33333332 	.word	0x33333332
				PUTC(*cptr++);
    3378:	f813 0b01 	ldrb.w	r0, [r3], #1
    337c:	9903      	ldr	r1, [sp, #12]
    337e:	9309      	str	r3, [sp, #36]	; 0x24
    3380:	9b02      	ldr	r3, [sp, #8]
    3382:	920a      	str	r2, [sp, #40]	; 0x28
    3384:	4798      	blx	r3
    3386:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
    338a:	3001      	adds	r0, #1
    338c:	f47f ace0 	bne.w	2d50 <z_prf+0x280>
    3390:	f7ff bbb4 	b.w	2afc <z_prf+0x2c>
				PUTC('0');
    3394:	9903      	ldr	r1, [sp, #12]
    3396:	2030      	movs	r0, #48	; 0x30
    3398:	9b02      	ldr	r3, [sp, #8]
    339a:	9209      	str	r2, [sp, #36]	; 0x24
    339c:	4798      	blx	r3
    339e:	3001      	adds	r0, #1
    33a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
    33a2:	f47f acd8 	bne.w	2d56 <z_prf+0x286>
    33a6:	f7ff bba9 	b.w	2afc <z_prf+0x2c>
					PUTC(c);
    33aa:	e9dd 3102 	ldrd	r3, r1, [sp, #8]
    33ae:	4798      	blx	r3
    33b0:	3001      	adds	r0, #1
    33b2:	f43f aba3 	beq.w	2afc <z_prf+0x2c>
					c = *++cptr;
    33b6:	f81a 0f01 	ldrb.w	r0, [sl, #1]!
    33ba:	e4d8      	b.n	2d6e <z_prf+0x29e>
					PUTC('0');
    33bc:	9903      	ldr	r1, [sp, #12]
    33be:	2030      	movs	r0, #48	; 0x30
    33c0:	9b02      	ldr	r3, [sp, #8]
    33c2:	4798      	blx	r3
    33c4:	3001      	adds	r0, #1
    33c6:	f47f acda 	bne.w	2d7e <z_prf+0x2ae>
    33ca:	f7ff bb97 	b.w	2afc <z_prf+0x2c>
					PUTC('0');
    33ce:	9903      	ldr	r1, [sp, #12]
    33d0:	2030      	movs	r0, #48	; 0x30
    33d2:	9b02      	ldr	r3, [sp, #8]
    33d4:	4798      	blx	r3
    33d6:	3001      	adds	r0, #1
    33d8:	f107 37ff 	add.w	r7, r7, #4294967295
    33dc:	f47f ace9 	bne.w	2db2 <z_prf+0x2e2>
    33e0:	f7ff bb8c 	b.w	2afc <z_prf+0x2c>
					PUTC(c);
    33e4:	e9dd 3102 	ldrd	r3, r1, [sp, #8]
    33e8:	4798      	blx	r3
    33ea:	3001      	adds	r0, #1
    33ec:	f43f ab86 	beq.w	2afc <z_prf+0x2c>
					c = *++cptr;
    33f0:	f81a 0f01 	ldrb.w	r0, [sl, #1]!
    33f4:	e4e7      	b.n	2dc6 <z_prf+0x2f6>
					PUTC('0');
    33f6:	9903      	ldr	r1, [sp, #12]
    33f8:	2030      	movs	r0, #48	; 0x30
    33fa:	9b02      	ldr	r3, [sp, #8]
    33fc:	4798      	blx	r3
    33fe:	3001      	adds	r0, #1
    3400:	f107 37ff 	add.w	r7, r7, #4294967295
    3404:	f47f acea 	bne.w	2ddc <z_prf+0x30c>
    3408:	f7ff bb78 	b.w	2afc <z_prf+0x2c>
				PUTC(*cptr++);
    340c:	9903      	ldr	r1, [sp, #12]
    340e:	f81a 0b01 	ldrb.w	r0, [sl], #1
    3412:	9b02      	ldr	r3, [sp, #8]
    3414:	4798      	blx	r3
    3416:	3001      	adds	r0, #1
    3418:	f43f ab70 	beq.w	2afc <z_prf+0x2c>
    341c:	eba6 030a 	sub.w	r3, r6, sl
			while (clen-- > 0) {
    3420:	2b00      	cmp	r3, #0
    3422:	dcf3      	bgt.n	340c <z_prf+0x93c>
			count += clen;
    3424:	9b01      	ldr	r3, [sp, #4]
    3426:	9a06      	ldr	r2, [sp, #24]
			if (width > 0) {
    3428:	2c00      	cmp	r4, #0
			count += clen;
    342a:	4413      	add	r3, r2
    342c:	9301      	str	r3, [sp, #4]
			if (width > 0) {
    342e:	f77f af23 	ble.w	3278 <z_prf+0x7a8>
    3432:	4625      	mov	r5, r4
    3434:	e006      	b.n	3444 <z_prf+0x974>
					PUTC(' ');
    3436:	9903      	ldr	r1, [sp, #12]
    3438:	2020      	movs	r0, #32
    343a:	9b02      	ldr	r3, [sp, #8]
    343c:	4798      	blx	r3
    343e:	3001      	adds	r0, #1
    3440:	f43f ab5c 	beq.w	2afc <z_prf+0x2c>
				while (width-- > 0) {
    3444:	f115 35ff 	adds.w	r5, r5, #4294967295
    3448:	d2f5      	bcs.n	3436 <z_prf+0x966>
				count += width;
    344a:	9b01      	ldr	r3, [sp, #4]
    344c:	4423      	add	r3, r4
    344e:	9301      	str	r3, [sp, #4]
    3450:	e712      	b.n	3278 <z_prf+0x7a8>
    3452:	bf00      	nop

00003454 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    3454:	4b01      	ldr	r3, [pc, #4]	; (345c <__stdout_hook_install+0x8>)
    3456:	6018      	str	r0, [r3, #0]
}
    3458:	4770      	bx	lr
    345a:	bf00      	nop
    345c:	200049bc 	.word	0x200049bc

00003460 <snprintf>:
	return 0; /* indicate keep going so we get the total count */
}

int snprintf(char *_MLIBC_RESTRICT s, size_t len,
	     const char *_MLIBC_RESTRICT format, ...)
{
    3460:	b40c      	push	{r2, r3}
    3462:	b51f      	push	{r0, r1, r2, r3, r4, lr}

	struct emitter p;
	int     r;
	char    dummy;

	if (len == 0) {
    3464:	b909      	cbnz	r1, 346a <snprintf+0xa>
		s = &dummy; /* write final NUL to dummy, can't change *s */
    3466:	f10d 0003 	add.w	r0, sp, #3
	}

	p.ptr = s;
	p.len = (int) len;
    346a:	e9cd 0102 	strd	r0, r1, [sp, #8]

	va_start(vargs, format);
    346e:	ab07      	add	r3, sp, #28
	r = z_prf(sprintf_out, (void *) (&p), format, vargs);
    3470:	9a06      	ldr	r2, [sp, #24]
    3472:	a902      	add	r1, sp, #8
    3474:	4805      	ldr	r0, [pc, #20]	; (348c <snprintf+0x2c>)
	va_start(vargs, format);
    3476:	9301      	str	r3, [sp, #4]
	r = z_prf(sprintf_out, (void *) (&p), format, vargs);
    3478:	f7ff fb2a 	bl	2ad0 <z_prf>
	va_end(vargs);

	*(p.ptr) = 0;
    347c:	2200      	movs	r2, #0
    347e:	9b02      	ldr	r3, [sp, #8]
    3480:	701a      	strb	r2, [r3, #0]
	return r;
}
    3482:	b005      	add	sp, #20
    3484:	f85d eb04 	ldr.w	lr, [sp], #4
    3488:	b002      	add	sp, #8
    348a:	4770      	bx	lr
    348c:	0000c027 	.word	0x0000c027

00003490 <remoteproc_mgr_boot>:
{
	/* UARTE */
	/* Assign specific GPIOs that will be used to get UARTE from
	 * nRF5340 Network MCU.
	 */
	NRF_P0->PIN_CNF[CPUNET_UARTE_PIN_TX] =
    3490:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    3494:	4b09      	ldr	r3, [pc, #36]	; (34bc <remoteproc_mgr_boot+0x2c>)
	/* Secure domain may configure permissions for the Network MCU. */
	remoteproc_mgr_config();
#endif /* !CONFIG_TRUSTED_EXECUTION_NONSECURE */

	/* Release the Network MCU, 'Release force off signal' */
	NRF_RESET->NETWORK.FORCEOFF = RESET_NETWORK_FORCEOFF_FORCEOFF_Release;
    3496:	2000      	movs	r0, #0
	NRF_P0->PIN_CNF[CPUNET_UARTE_PIN_TX] =
    3498:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
	NRF_P0->PIN_CNF[CPUNET_UARTE_PIN_RX] =
    349c:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
	NRF_P0->PIN_CNF[CPUNET_UARTE_PIN_RTS] =
    34a0:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
	NRF_P0->PIN_CNF[CPUNET_UARTE_PIN_CTS] =
    34a4:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
	NRF_SPU->EXTDOMAIN[0].PERM = 1 << 4;
    34a8:	2210      	movs	r2, #16
    34aa:	4b05      	ldr	r3, [pc, #20]	; (34c0 <remoteproc_mgr_boot+0x30>)
    34ac:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
	NRF_RESET->NETWORK.FORCEOFF = RESET_NETWORK_FORCEOFF_FORCEOFF_Release;
    34b0:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    34b4:	f8c3 0614 	str.w	r0, [r3, #1556]	; 0x614

	LOG_DBG("Network MCU released.");

	return 0;
}
    34b8:	4770      	bx	lr
    34ba:	bf00      	nop
    34bc:	50842500 	.word	0x50842500
    34c0:	50003000 	.word	0x50003000

000034c4 <bt_hex_real>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const u8_t *b = buf;
	int i;

	len = MIN(len, (sizeof(str) - 1) / 2);
    34c4:	2940      	cmp	r1, #64	; 0x40
    34c6:	4b0e      	ldr	r3, [pc, #56]	; (3500 <bt_hex_real+0x3c>)
    34c8:	bf28      	it	cs
    34ca:	2140      	movcs	r1, #64	; 0x40
{
    34cc:	b570      	push	{r4, r5, r6, lr}
    34ce:	461d      	mov	r5, r3

	for (i = 0; i < len; i++) {
		str[i * 2]     = hex[b[i] >> 4];
    34d0:	4c0c      	ldr	r4, [pc, #48]	; (3504 <bt_hex_real+0x40>)
    34d2:	1846      	adds	r6, r0, r1
	for (i = 0; i < len; i++) {
    34d4:	42b0      	cmp	r0, r6
    34d6:	f103 0302 	add.w	r3, r3, #2
    34da:	d104      	bne.n	34e6 <bt_hex_real+0x22>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
    34dc:	2300      	movs	r3, #0
    34de:	f805 3011 	strb.w	r3, [r5, r1, lsl #1]

	return str;
}
    34e2:	4807      	ldr	r0, [pc, #28]	; (3500 <bt_hex_real+0x3c>)
    34e4:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2]     = hex[b[i] >> 4];
    34e6:	7802      	ldrb	r2, [r0, #0]
    34e8:	0912      	lsrs	r2, r2, #4
    34ea:	5ca2      	ldrb	r2, [r4, r2]
    34ec:	f803 2c02 	strb.w	r2, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
    34f0:	f810 2b01 	ldrb.w	r2, [r0], #1
    34f4:	f002 020f 	and.w	r2, r2, #15
    34f8:	5ca2      	ldrb	r2, [r4, r2]
    34fa:	f803 2c01 	strb.w	r2, [r3, #-1]
    34fe:	e7e9      	b.n	34d4 <bt_hex_real+0x10>
    3500:	2000147e 	.word	0x2000147e
    3504:	0000fc14 	.word	0x0000fc14

00003508 <bt_addr_le_str_real>:

	return str;
}

const char *bt_addr_le_str_real(const bt_addr_le_t *addr)
{
    3508:	b530      	push	{r4, r5, lr}
	switch (addr->type) {
    350a:	7803      	ldrb	r3, [r0, #0]
    350c:	b08b      	sub	sp, #44	; 0x2c
    350e:	4604      	mov	r4, r0
    3510:	ad07      	add	r5, sp, #28
    3512:	2b03      	cmp	r3, #3
    3514:	d821      	bhi.n	355a <bt_addr_le_str_real+0x52>
    3516:	e8df f003 	tbb	[pc, r3]
    351a:	1a02      	.short	0x1a02
    351c:	1e1c      	.short	0x1e1c
		strcpy(type, "public");
    351e:	4912      	ldr	r1, [pc, #72]	; (3568 <bt_addr_le_str_real+0x60>)
		strcpy(type, "random");
    3520:	4628      	mov	r0, r5
    3522:	f008 fc5f 	bl	bde4 <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    3526:	7863      	ldrb	r3, [r4, #1]
    3528:	9505      	str	r5, [sp, #20]
    352a:	9304      	str	r3, [sp, #16]
    352c:	78a3      	ldrb	r3, [r4, #2]
    352e:	4a0f      	ldr	r2, [pc, #60]	; (356c <bt_addr_le_str_real+0x64>)
    3530:	9303      	str	r3, [sp, #12]
    3532:	78e3      	ldrb	r3, [r4, #3]
    3534:	211e      	movs	r1, #30
    3536:	9302      	str	r3, [sp, #8]
    3538:	7923      	ldrb	r3, [r4, #4]
    353a:	480d      	ldr	r0, [pc, #52]	; (3570 <bt_addr_le_str_real+0x68>)
    353c:	9301      	str	r3, [sp, #4]
    353e:	7963      	ldrb	r3, [r4, #5]
    3540:	9300      	str	r3, [sp, #0]
    3542:	79a3      	ldrb	r3, [r4, #6]
    3544:	f007 fbab 	bl	ac9e <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
    3548:	4809      	ldr	r0, [pc, #36]	; (3570 <bt_addr_le_str_real+0x68>)
    354a:	b00b      	add	sp, #44	; 0x2c
    354c:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
    354e:	4909      	ldr	r1, [pc, #36]	; (3574 <bt_addr_le_str_real+0x6c>)
    3550:	e7e6      	b.n	3520 <bt_addr_le_str_real+0x18>
		strcpy(type, "public-id");
    3552:	4909      	ldr	r1, [pc, #36]	; (3578 <bt_addr_le_str_real+0x70>)
    3554:	e7e4      	b.n	3520 <bt_addr_le_str_real+0x18>
		strcpy(type, "random-id");
    3556:	4909      	ldr	r1, [pc, #36]	; (357c <bt_addr_le_str_real+0x74>)
    3558:	e7e2      	b.n	3520 <bt_addr_le_str_real+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    355a:	4a09      	ldr	r2, [pc, #36]	; (3580 <bt_addr_le_str_real+0x78>)
    355c:	210a      	movs	r1, #10
    355e:	4628      	mov	r0, r5
    3560:	f007 fb9d 	bl	ac9e <snprintk>
		break;
    3564:	e7df      	b.n	3526 <bt_addr_le_str_real+0x1e>
    3566:	bf00      	nop
    3568:	0000eee4 	.word	0x0000eee4
    356c:	0000ef06 	.word	0x0000ef06
    3570:	200014ff 	.word	0x200014ff
    3574:	0000eeeb 	.word	0x0000eeeb
    3578:	0000eef2 	.word	0x0000eef2
    357c:	0000eefc 	.word	0x0000eefc
    3580:	0001033d 	.word	0x0001033d

00003584 <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
    3584:	b4f0      	push	{r4, r5, r6, r7}
	switch (src->type) {
    3586:	7802      	ldrb	r2, [r0, #0]
{
    3588:	4604      	mov	r4, r0
	switch (src->type) {
    358a:	2a01      	cmp	r2, #1
{
    358c:	460b      	mov	r3, r1
	switch (src->type) {
    358e:	d017      	beq.n	35c0 <uuid_to_uuid128+0x3c>
    3590:	b11a      	cbz	r2, 359a <uuid_to_uuid128+0x16>
    3592:	2a02      	cmp	r2, #2
    3594:	d02c      	beq.n	35f0 <uuid_to_uuid128+0x6c>
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
    3596:	bcf0      	pop	{r4, r5, r6, r7}
    3598:	4770      	bx	lr
		*dst = uuid128_base;
    359a:	460d      	mov	r5, r1
    359c:	4a17      	ldr	r2, [pc, #92]	; (35fc <uuid_to_uuid128+0x78>)
    359e:	f102 0710 	add.w	r7, r2, #16
    35a2:	462e      	mov	r6, r5
    35a4:	6810      	ldr	r0, [r2, #0]
    35a6:	6851      	ldr	r1, [r2, #4]
    35a8:	3208      	adds	r2, #8
    35aa:	c603      	stmia	r6!, {r0, r1}
    35ac:	42ba      	cmp	r2, r7
    35ae:	4635      	mov	r5, r6
    35b0:	d1f7      	bne.n	35a2 <uuid_to_uuid128+0x1e>
    35b2:	7812      	ldrb	r2, [r2, #0]
    35b4:	7032      	strb	r2, [r6, #0]
		sys_put_le16(BT_UUID_16(src)->val,
    35b6:	8862      	ldrh	r2, [r4, #2]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    35b8:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
    35ba:	0a12      	lsrs	r2, r2, #8
    35bc:	739a      	strb	r2, [r3, #14]
    35be:	e7ea      	b.n	3596 <uuid_to_uuid128+0x12>
		*dst = uuid128_base;
    35c0:	460d      	mov	r5, r1
    35c2:	4a0e      	ldr	r2, [pc, #56]	; (35fc <uuid_to_uuid128+0x78>)
    35c4:	f102 0710 	add.w	r7, r2, #16
    35c8:	462e      	mov	r6, r5
    35ca:	6810      	ldr	r0, [r2, #0]
    35cc:	6851      	ldr	r1, [r2, #4]
    35ce:	3208      	adds	r2, #8
    35d0:	c603      	stmia	r6!, {r0, r1}
    35d2:	42ba      	cmp	r2, r7
    35d4:	4635      	mov	r5, r6
    35d6:	d1f7      	bne.n	35c8 <uuid_to_uuid128+0x44>
    35d8:	7812      	ldrb	r2, [r2, #0]
    35da:	7032      	strb	r2, [r6, #0]
		sys_put_le32(BT_UUID_32(src)->val,
    35dc:	6862      	ldr	r2, [r4, #4]
    35de:	f3c2 2107 	ubfx	r1, r2, #8, #8
	dst[0] = val;
    35e2:	735a      	strb	r2, [r3, #13]
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(u32_t val, u8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
    35e4:	0c12      	lsrs	r2, r2, #16
	dst[0] = val;
    35e6:	73da      	strb	r2, [r3, #15]
	dst[1] = val >> 8;
    35e8:	0a12      	lsrs	r2, r2, #8
    35ea:	7399      	strb	r1, [r3, #14]
    35ec:	741a      	strb	r2, [r3, #16]
    35ee:	e7d2      	b.n	3596 <uuid_to_uuid128+0x12>
		memcpy(dst, src, sizeof(*dst));
    35f0:	4601      	mov	r1, r0
}
    35f2:	bcf0      	pop	{r4, r5, r6, r7}
		memcpy(dst, src, sizeof(*dst));
    35f4:	2211      	movs	r2, #17
    35f6:	4618      	mov	r0, r3
    35f8:	f008 bc51 	b.w	be9e <memcpy>
    35fc:	0000fc25 	.word	0x0000fc25

00003600 <ver_str>:
	return 1U;
}

#if defined(CONFIG_BT_DEBUG)
static const char *ver_str(u8_t ver)
{
    3600:	b570      	push	{r4, r5, r6, lr}
    3602:	4606      	mov	r6, r0
    3604:	b08c      	sub	sp, #48	; 0x30
	const char * const str[] = {
    3606:	4d0a      	ldr	r5, [pc, #40]	; (3630 <ver_str+0x30>)
    3608:	ac01      	add	r4, sp, #4
    360a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    360c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    360e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    3610:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    3612:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
    3616:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		"1.0b", "1.1", "1.2", "2.0", "2.1", "3.0", "4.0", "4.1", "4.2",
		"5.0", "5.1",
	};

	if (ver < ARRAY_SIZE(str)) {
    361a:	2e0a      	cmp	r6, #10
		return str[ver];
    361c:	bf9d      	ittte	ls
    361e:	ab0c      	addls	r3, sp, #48	; 0x30
    3620:	eb03 0686 	addls.w	r6, r3, r6, lsl #2
    3624:	f856 0c2c 	ldrls.w	r0, [r6, #-44]
	}

	return "unknown";
    3628:	4802      	ldrhi	r0, [pc, #8]	; (3634 <ver_str+0x34>)
}
    362a:	b00c      	add	sp, #48	; 0x30
    362c:	bd70      	pop	{r4, r5, r6, pc}
    362e:	bf00      	nop
    3630:	0000e7b8 	.word	0x0000e7b8
    3634:	00010493 	.word	0x00010493

00003638 <hci_data_buf_overflow>:
	BT_WARN("Data buffer overflow (link type 0x%02x)", evt->link_type);
    3638:	2302      	movs	r3, #2
    363a:	f04f 0200 	mov.w	r2, #0
	struct bt_hci_evt_data_buf_overflow *evt = (void *)buf->data;
    363e:	6881      	ldr	r1, [r0, #8]
	BT_WARN("Data buffer overflow (link type 0x%02x)", evt->link_type);
    3640:	f363 0207 	bfi	r2, r3, #0, #8
    3644:	4804      	ldr	r0, [pc, #16]	; (3658 <hci_data_buf_overflow+0x20>)
    3646:	4b05      	ldr	r3, [pc, #20]	; (365c <hci_data_buf_overflow+0x24>)
    3648:	7809      	ldrb	r1, [r1, #0]
    364a:	1a1b      	subs	r3, r3, r0
    364c:	08db      	lsrs	r3, r3, #3
    364e:	f363 128f 	bfi	r2, r3, #6, #10
    3652:	4803      	ldr	r0, [pc, #12]	; (3660 <hci_data_buf_overflow+0x28>)
    3654:	f007 bfa1 	b.w	b59a <log_1>
    3658:	0000e6dc 	.word	0x0000e6dc
    365c:	0000e6fc 	.word	0x0000e6fc
    3660:	0000ffcf 	.word	0x0000ffcf

00003664 <le_data_len_change>:
	u16_t handle = sys_le16_to_cpu(evt->handle);
    3664:	6883      	ldr	r3, [r0, #8]
{
    3666:	b510      	push	{r4, lr}
	u16_t handle = sys_le16_to_cpu(evt->handle);
    3668:	881c      	ldrh	r4, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
    366a:	4620      	mov	r0, r4
    366c:	f002 fd3e 	bl	60ec <bt_conn_lookup_handle>
	if (!conn) {
    3670:	b980      	cbnz	r0, 3694 <le_data_len_change+0x30>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    3672:	2301      	movs	r3, #1
    3674:	f04f 0200 	mov.w	r2, #0
    3678:	4908      	ldr	r1, [pc, #32]	; (369c <le_data_len_change+0x38>)
    367a:	f363 0207 	bfi	r2, r3, #0, #8
    367e:	4b08      	ldr	r3, [pc, #32]	; (36a0 <le_data_len_change+0x3c>)
    3680:	4808      	ldr	r0, [pc, #32]	; (36a4 <le_data_len_change+0x40>)
    3682:	1a5b      	subs	r3, r3, r1
    3684:	08db      	lsrs	r3, r3, #3
    3686:	4621      	mov	r1, r4
}
    3688:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    368c:	f363 128f 	bfi	r2, r3, #6, #10
    3690:	f007 bf83 	b.w	b59a <log_1>
}
    3694:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_unref(conn);
    3698:	f008 be5c 	b.w	c354 <bt_conn_unref>
    369c:	0000e6dc 	.word	0x0000e6dc
    36a0:	0000e6fc 	.word	0x0000e6fc
    36a4:	000102fa 	.word	0x000102fa

000036a8 <hci_vendor_event>:
{
    36a8:	b510      	push	{r4, lr}
		BT_WARN("Unhandled vendor-specific event: %s",
    36aa:	2302      	movs	r3, #2
    36ac:	f04f 0400 	mov.w	r4, #0
    36b0:	4a0a      	ldr	r2, [pc, #40]	; (36dc <hci_vendor_event+0x34>)
    36b2:	f363 0407 	bfi	r4, r3, #0, #8
    36b6:	4b0a      	ldr	r3, [pc, #40]	; (36e0 <hci_vendor_event+0x38>)
    36b8:	8981      	ldrh	r1, [r0, #12]
    36ba:	1a9b      	subs	r3, r3, r2
    36bc:	08db      	lsrs	r3, r3, #3
    36be:	6880      	ldr	r0, [r0, #8]
    36c0:	f363 148f 	bfi	r4, r3, #6, #10
    36c4:	f7ff fefe 	bl	34c4 <bt_hex_real>
    36c8:	f7fd fb72 	bl	db0 <log_strdup>
    36cc:	4622      	mov	r2, r4
}
    36ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_WARN("Unhandled vendor-specific event: %s",
    36d2:	4601      	mov	r1, r0
    36d4:	4803      	ldr	r0, [pc, #12]	; (36e4 <hci_vendor_event+0x3c>)
    36d6:	f007 bf60 	b.w	b59a <log_1>
    36da:	bf00      	nop
    36dc:	0000e6dc 	.word	0x0000e6dc
    36e0:	0000e6fc 	.word	0x0000e6fc
    36e4:	000102bc 	.word	0x000102bc

000036e8 <hci_cmd_done>:
{
    36e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    36ec:	4606      	mov	r6, r0
    36ee:	b085      	sub	sp, #20
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    36f0:	7990      	ldrb	r0, [r2, #6]
{
    36f2:	460f      	mov	r7, r1
    36f4:	4615      	mov	r5, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    36f6:	f004 fdb3 	bl	8260 <net_buf_pool_get>
    36fa:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 37e4 <hci_cmd_done+0xfc>
    36fe:	4580      	cmp	r8, r0
    3700:	d01a      	beq.n	3738 <hci_cmd_done+0x50>
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
    3702:	2302      	movs	r3, #2
    3704:	f04f 0400 	mov.w	r4, #0
    3708:	4a31      	ldr	r2, [pc, #196]	; (37d0 <hci_cmd_done+0xe8>)
    370a:	f363 0407 	bfi	r4, r3, #0, #8
    370e:	4b31      	ldr	r3, [pc, #196]	; (37d4 <hci_cmd_done+0xec>)
    3710:	79a8      	ldrb	r0, [r5, #6]
    3712:	1ad2      	subs	r2, r2, r3
    3714:	08d2      	lsrs	r2, r2, #3
    3716:	f362 148f 	bfi	r4, r2, #6, #10
    371a:	9600      	str	r6, [sp, #0]
    371c:	9001      	str	r0, [sp, #4]
    371e:	f004 fd9f 	bl	8260 <net_buf_pool_get>
    3722:	4623      	mov	r3, r4
    3724:	e9cd 0802 	strd	r0, r8, [sp, #8]
    3728:	2204      	movs	r2, #4
    372a:	4669      	mov	r1, sp
    372c:	482a      	ldr	r0, [pc, #168]	; (37d8 <hci_cmd_done+0xf0>)
    372e:	f007 ff7b 	bl	b628 <log_n>
}
    3732:	b005      	add	sp, #20
    3734:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (cmd(buf)->opcode != opcode) {
    3738:	4628      	mov	r0, r5
    373a:	f004 fd97 	bl	826c <net_buf_id>
    373e:	f04f 080c 	mov.w	r8, #12
    3742:	4c26      	ldr	r4, [pc, #152]	; (37dc <hci_cmd_done+0xf4>)
    3744:	fb08 4000 	mla	r0, r8, r0, r4
    3748:	8843      	ldrh	r3, [r0, #2]
    374a:	42b3      	cmp	r3, r6
    374c:	d015      	beq.n	377a <hci_cmd_done+0x92>
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
    374e:	2302      	movs	r3, #2
    3750:	f04f 0900 	mov.w	r9, #0
    3754:	4a1e      	ldr	r2, [pc, #120]	; (37d0 <hci_cmd_done+0xe8>)
    3756:	f363 0907 	bfi	r9, r3, #0, #8
    375a:	4b1e      	ldr	r3, [pc, #120]	; (37d4 <hci_cmd_done+0xec>)
    375c:	4628      	mov	r0, r5
    375e:	1ad2      	subs	r2, r2, r3
    3760:	08d2      	lsrs	r2, r2, #3
    3762:	f362 198f 	bfi	r9, r2, #6, #10
    3766:	f004 fd81 	bl	826c <net_buf_id>
    376a:	fb08 4000 	mla	r0, r8, r0, r4
    376e:	464b      	mov	r3, r9
    3770:	8842      	ldrh	r2, [r0, #2]
    3772:	4631      	mov	r1, r6
    3774:	481a      	ldr	r0, [pc, #104]	; (37e0 <hci_cmd_done+0xf8>)
    3776:	f007 ff24 	bl	b5c2 <log_2>
	if (cmd(buf)->state && !status) {
    377a:	4628      	mov	r0, r5
    377c:	f004 fd76 	bl	826c <net_buf_id>
    3780:	260c      	movs	r6, #12
    3782:	fb06 4000 	mla	r0, r6, r0, r4
    3786:	6843      	ldr	r3, [r0, #4]
    3788:	b15b      	cbz	r3, 37a2 <hci_cmd_done+0xba>
    378a:	b957      	cbnz	r7, 37a2 <hci_cmd_done+0xba>
		struct cmd_state_set *update = cmd(buf)->state;
    378c:	4628      	mov	r0, r5
    378e:	f004 fd6d 	bl	826c <net_buf_id>
    3792:	fb06 4000 	mla	r0, r6, r0, r4
    3796:	6843      	ldr	r3, [r0, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
    3798:	7a1a      	ldrb	r2, [r3, #8]
    379a:	e9d3 0100 	ldrd	r0, r1, [r3]
    379e:	f008 fcaf 	bl	c100 <atomic_set_bit_to>
	if (cmd(buf)->sync) {
    37a2:	4628      	mov	r0, r5
    37a4:	f004 fd62 	bl	826c <net_buf_id>
    37a8:	260c      	movs	r6, #12
    37aa:	fb06 4000 	mla	r0, r6, r0, r4
    37ae:	6883      	ldr	r3, [r0, #8]
    37b0:	2b00      	cmp	r3, #0
    37b2:	d0be      	beq.n	3732 <hci_cmd_done+0x4a>
		cmd(buf)->status = status;
    37b4:	4628      	mov	r0, r5
    37b6:	f004 fd59 	bl	826c <net_buf_id>
    37ba:	4370      	muls	r0, r6
    37bc:	5427      	strb	r7, [r4, r0]
		k_sem_give(cmd(buf)->sync);
    37be:	4628      	mov	r0, r5
    37c0:	f004 fd54 	bl	826c <net_buf_id>
    37c4:	fb06 4000 	mla	r0, r6, r0, r4
    37c8:	6880      	ldr	r0, [r0, #8]
	z_impl_k_sem_give(sem);
    37ca:	f006 fb5b 	bl	9e84 <z_impl_k_sem_give>
    37ce:	e7b0      	b.n	3732 <hci_cmd_done+0x4a>
    37d0:	0000e6fc 	.word	0x0000e6fc
    37d4:	0000e6dc 	.word	0x0000e6dc
    37d8:	0000ff67 	.word	0x0000ff67
    37dc:	20000434 	.word	0x20000434
    37e0:	0000ff9c 	.word	0x0000ff9c
    37e4:	20004da4 	.word	0x20004da4

000037e8 <handle_event>:
{
    37e8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    37ea:	4604      	mov	r4, r0
    37ec:	4608      	mov	r0, r1
	for (i = 0; i < num_handlers; i++) {
    37ee:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
		if (handler->event != event) {
    37f2:	7811      	ldrb	r1, [r2, #0]
    37f4:	42a1      	cmp	r1, r4
    37f6:	d01e      	beq.n	3836 <handle_event+0x4e>
			continue;
    37f8:	3208      	adds	r2, #8
	for (i = 0; i < num_handlers; i++) {
    37fa:	429a      	cmp	r2, r3
    37fc:	d1f9      	bne.n	37f2 <handle_event+0xa>
	BT_WARN("Unhandled event 0x%02x len %u: %s", event,
    37fe:	2302      	movs	r3, #2
    3800:	f04f 0500 	mov.w	r5, #0
    3804:	4a19      	ldr	r2, [pc, #100]	; (386c <handle_event+0x84>)
    3806:	f363 0507 	bfi	r5, r3, #0, #8
    380a:	4b19      	ldr	r3, [pc, #100]	; (3870 <handle_event+0x88>)
    380c:	8986      	ldrh	r6, [r0, #12]
    380e:	1a9b      	subs	r3, r3, r2
    3810:	08db      	lsrs	r3, r3, #3
    3812:	4631      	mov	r1, r6
    3814:	6880      	ldr	r0, [r0, #8]
    3816:	f363 158f 	bfi	r5, r3, #6, #10
    381a:	f7ff fe53 	bl	34c4 <bt_hex_real>
    381e:	f7fd fac7 	bl	db0 <log_strdup>
    3822:	f8ad 5000 	strh.w	r5, [sp]
    3826:	4603      	mov	r3, r0
    3828:	4632      	mov	r2, r6
    382a:	4621      	mov	r1, r4
    382c:	4811      	ldr	r0, [pc, #68]	; (3874 <handle_event+0x8c>)
    382e:	f007 fee0 	bl	b5f2 <log_3>
}
    3832:	b002      	add	sp, #8
    3834:	bd70      	pop	{r4, r5, r6, pc}
		if (buf->len < handler->min_len) {
    3836:	8981      	ldrh	r1, [r0, #12]
    3838:	7853      	ldrb	r3, [r2, #1]
    383a:	428b      	cmp	r3, r1
    383c:	d911      	bls.n	3862 <handle_event+0x7a>
			BT_ERR("Too small (%u bytes) event 0x%02x",
    383e:	2201      	movs	r2, #1
    3840:	f04f 0300 	mov.w	r3, #0
    3844:	4809      	ldr	r0, [pc, #36]	; (386c <handle_event+0x84>)
    3846:	f362 0307 	bfi	r3, r2, #0, #8
    384a:	4a09      	ldr	r2, [pc, #36]	; (3870 <handle_event+0x88>)
    384c:	1a12      	subs	r2, r2, r0
    384e:	08d2      	lsrs	r2, r2, #3
    3850:	f362 138f 	bfi	r3, r2, #6, #10
    3854:	4622      	mov	r2, r4
    3856:	4808      	ldr	r0, [pc, #32]	; (3878 <handle_event+0x90>)
}
    3858:	b002      	add	sp, #8
    385a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			BT_ERR("Too small (%u bytes) event 0x%02x",
    385e:	f007 beb0 	b.w	b5c2 <log_2>
		handler->handler(buf);
    3862:	6853      	ldr	r3, [r2, #4]
}
    3864:	b002      	add	sp, #8
    3866:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		handler->handler(buf);
    386a:	4718      	bx	r3
    386c:	0000e6dc 	.word	0x0000e6dc
    3870:	0000e6fc 	.word	0x0000e6fc
    3874:	0000ff45 	.word	0x0000ff45
    3878:	0000ff23 	.word	0x0000ff23

0000387c <hci_le_meta_event>:
{
    387c:	b510      	push	{r4, lr}
	evt = net_buf_pull_mem(buf, sizeof(*evt));
    387e:	2101      	movs	r1, #1
{
    3880:	4604      	mov	r4, r0
	evt = net_buf_pull_mem(buf, sizeof(*evt));
    3882:	3008      	adds	r0, #8
    3884:	f009 fbca 	bl	d01c <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    3888:	4621      	mov	r1, r4
}
    388a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    388e:	2307      	movs	r3, #7
    3890:	4a01      	ldr	r2, [pc, #4]	; (3898 <hci_le_meta_event+0x1c>)
    3892:	7800      	ldrb	r0, [r0, #0]
    3894:	f7ff bfa8 	b.w	37e8 <handle_event>
    3898:	0000ea7c 	.word	0x0000ea7c

0000389c <find_pending_connect.part.19>:
static struct bt_conn *find_pending_connect(u8_t role, bt_addr_le_t *peer_addr)
    389c:	b507      	push	{r0, r1, r2, lr}
		conn = bt_conn_lookup_state_le(peer_addr,
    389e:	2104      	movs	r1, #4
    38a0:	f002 fc5c 	bl	615c <bt_conn_lookup_state_le>
		if (!conn) {
    38a4:	b960      	cbnz	r0, 38c0 <find_pending_connect.part.19+0x24>
			conn = bt_conn_lookup_state_le(BT_ADDR_LE_NONE,
    38a6:	4b08      	ldr	r3, [pc, #32]	; (38c8 <find_pending_connect.part.19+0x2c>)
    38a8:	2103      	movs	r1, #3
    38aa:	6818      	ldr	r0, [r3, #0]
    38ac:	889a      	ldrh	r2, [r3, #4]
    38ae:	799b      	ldrb	r3, [r3, #6]
    38b0:	9000      	str	r0, [sp, #0]
    38b2:	4668      	mov	r0, sp
    38b4:	f8ad 2004 	strh.w	r2, [sp, #4]
    38b8:	f88d 3006 	strb.w	r3, [sp, #6]
    38bc:	f002 fc4e 	bl	615c <bt_conn_lookup_state_le>
}
    38c0:	b003      	add	sp, #12
    38c2:	f85d fb04 	ldr.w	pc, [sp], #4
    38c6:	bf00      	nop
    38c8:	0000e7e4 	.word	0x0000e7e4

000038cc <id_find>:
	memcpy(addrs, bt_dev.id_addr, to_copy * sizeof(bt_addr_le_t));
	*count = to_copy;
}

static int id_find(const bt_addr_le_t *addr)
{
    38cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    38ce:	4607      	mov	r7, r0
	u8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
    38d0:	2500      	movs	r5, #0
    38d2:	4e0a      	ldr	r6, [pc, #40]	; (38fc <id_find+0x30>)
    38d4:	79f3      	ldrb	r3, [r6, #7]
    38d6:	b2ec      	uxtb	r4, r5
    38d8:	42a3      	cmp	r3, r4
    38da:	d802      	bhi.n	38e2 <id_find+0x16>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
    38dc:	f06f 0401 	mvn.w	r4, #1
    38e0:	e009      	b.n	38f6 <id_find+0x2a>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
    38e2:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
	return memcmp(a, b, sizeof(*a));
}

static inline int bt_addr_le_cmp(const bt_addr_le_t *a, const bt_addr_le_t *b)
{
	return memcmp(a, b, sizeof(*a));
    38e6:	2207      	movs	r2, #7
    38e8:	4431      	add	r1, r6
    38ea:	4638      	mov	r0, r7
    38ec:	f008 fac7 	bl	be7e <memcmp>
    38f0:	3501      	adds	r5, #1
    38f2:	2800      	cmp	r0, #0
    38f4:	d1ee      	bne.n	38d4 <id_find+0x8>
}
    38f6:	4620      	mov	r0, r4
    38f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    38fa:	bf00      	nop
    38fc:	20004838 	.word	0x20004838

00003900 <hci_rx_thread>:
{
    3900:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3904:	4d50      	ldr	r5, [pc, #320]	; (3a48 <hci_rx_thread+0x148>)
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
    3906:	4b51      	ldr	r3, [pc, #324]	; (3a4c <hci_rx_thread+0x14c>)
    3908:	f8df b168 	ldr.w	fp, [pc, #360]	; 3a74 <hci_rx_thread+0x174>
    390c:	1aed      	subs	r5, r5, r3
    390e:	f3c5 05c9 	ubfx	r5, r5, #3, #10
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
    3912:	f04f 31ff 	mov.w	r1, #4294967295
    3916:	484e      	ldr	r0, [pc, #312]	; (3a50 <hci_rx_thread+0x150>)
    3918:	f009 fb22 	bl	cf60 <net_buf_get>
    391c:	7d01      	ldrb	r1, [r0, #20]
    391e:	4604      	mov	r4, r0
		switch (bt_buf_get_type(buf)) {
    3920:	2901      	cmp	r1, #1
    3922:	d053      	beq.n	39cc <hci_rx_thread+0xcc>
    3924:	2903      	cmp	r1, #3
    3926:	f040 8084 	bne.w	3a32 <hci_rx_thread+0x132>
	BT_ASSERT(buf->len >= sizeof(*hdr));
    392a:	8983      	ldrh	r3, [r0, #12]
    392c:	2b03      	cmp	r3, #3
    392e:	d80c      	bhi.n	394a <hci_rx_thread+0x4a>
    3930:	f44f 733d 	mov.w	r3, #756	; 0x2f4
    3934:	4a47      	ldr	r2, [pc, #284]	; (3a54 <hci_rx_thread+0x154>)
    3936:	4948      	ldr	r1, [pc, #288]	; (3a58 <hci_rx_thread+0x158>)
    3938:	4848      	ldr	r0, [pc, #288]	; (3a5c <hci_rx_thread+0x15c>)
    393a:	f007 f9a3 	bl	ac84 <printk>
    393e:	4040      	eors	r0, r0
    3940:	f380 8811 	msr	BASEPRI, r0
    3944:	f04f 0003 	mov.w	r0, #3
    3948:	df02      	svc	2
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    394a:	2104      	movs	r1, #4
    394c:	f104 0008 	add.w	r0, r4, #8
    3950:	f009 fb64 	bl	d01c <net_buf_simple_pull_mem>
	acl(buf)->id = BT_CONN_ID_INVALID;
    3954:	23ff      	movs	r3, #255	; 0xff
	len = sys_le16_to_cpu(hdr->len);
    3956:	8842      	ldrh	r2, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
    3958:	f8b0 a000 	ldrh.w	sl, [r0]
	if (buf->len != len) {
    395c:	89a1      	ldrh	r1, [r4, #12]
	acl(buf)->handle = bt_acl_handle(handle);
    395e:	f3ca 000b 	ubfx	r0, sl, #0, #12
	if (buf->len != len) {
    3962:	428a      	cmp	r2, r1
	acl(buf)->handle = bt_acl_handle(handle);
    3964:	82e0      	strh	r0, [r4, #22]
	acl(buf)->id = BT_CONN_ID_INVALID;
    3966:	7563      	strb	r3, [r4, #21]
	if (buf->len != len) {
    3968:	d00f      	beq.n	398a <hci_rx_thread+0x8a>
		BT_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
    396a:	f026 033f 	bic.w	r3, r6, #63	; 0x3f
    396e:	f043 0301 	orr.w	r3, r3, #1
    3972:	f363 0607 	bfi	r6, r3, #0, #8
    3976:	f365 168f 	bfi	r6, r5, #6, #10
    397a:	4633      	mov	r3, r6
    397c:	4838      	ldr	r0, [pc, #224]	; (3a60 <hci_rx_thread+0x160>)
    397e:	f007 fe20 	bl	b5c2 <log_2>
			net_buf_unref(buf);
    3982:	4620      	mov	r0, r4
    3984:	f004 fd08 	bl	8398 <net_buf_unref>
			break;
    3988:	e01d      	b.n	39c6 <hci_rx_thread+0xc6>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
    398a:	f002 fbaf 	bl	60ec <bt_conn_lookup_handle>
	if (!conn) {
    398e:	4681      	mov	r9, r0
    3990:	b968      	cbnz	r0, 39ae <hci_rx_thread+0xae>
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
    3992:	f027 033f 	bic.w	r3, r7, #63	; 0x3f
    3996:	f043 0301 	orr.w	r3, r3, #1
    399a:	f363 0707 	bfi	r7, r3, #0, #8
    399e:	f365 178f 	bfi	r7, r5, #6, #10
    39a2:	463a      	mov	r2, r7
    39a4:	8ae1      	ldrh	r1, [r4, #22]
    39a6:	482f      	ldr	r0, [pc, #188]	; (3a64 <hci_rx_thread+0x164>)
			BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
    39a8:	f007 fdf7 	bl	b59a <log_1>
    39ac:	e7e9      	b.n	3982 <hci_rx_thread+0x82>
	acl(buf)->id = bt_conn_index(conn);
    39ae:	f002 fd71 	bl	6494 <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
    39b2:	ea4f 321a 	mov.w	r2, sl, lsr #12
	acl(buf)->id = bt_conn_index(conn);
    39b6:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
    39b8:	4621      	mov	r1, r4
    39ba:	4648      	mov	r0, r9
    39bc:	f002 f938 	bl	5c30 <bt_conn_recv>
	bt_conn_unref(conn);
    39c0:	4648      	mov	r0, r9
    39c2:	f008 fcc7 	bl	c354 <bt_conn_unref>
	z_impl_k_yield();
    39c6:	f006 f9e3 	bl	9d90 <z_impl_k_yield>
    39ca:	e7a2      	b.n	3912 <hci_rx_thread+0x12>
	BT_ASSERT(buf->len >= sizeof(*hdr));
    39cc:	8983      	ldrh	r3, [r0, #12]
    39ce:	2b01      	cmp	r3, #1
    39d0:	d80c      	bhi.n	39ec <hci_rx_thread+0xec>
    39d2:	f640 739d 	movw	r3, #3997	; 0xf9d
    39d6:	4a1f      	ldr	r2, [pc, #124]	; (3a54 <hci_rx_thread+0x154>)
    39d8:	491f      	ldr	r1, [pc, #124]	; (3a58 <hci_rx_thread+0x158>)
    39da:	4820      	ldr	r0, [pc, #128]	; (3a5c <hci_rx_thread+0x15c>)
    39dc:	f007 f952 	bl	ac84 <printk>
    39e0:	4040      	eors	r0, r0
    39e2:	f380 8811 	msr	BASEPRI, r0
    39e6:	f04f 0003 	mov.w	r0, #3
    39ea:	df02      	svc	2
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    39ec:	2102      	movs	r1, #2
    39ee:	f104 0008 	add.w	r0, r4, #8
    39f2:	f009 fb13 	bl	d01c <net_buf_simple_pull_mem>
	BT_ASSERT(!bt_hci_evt_is_prio(hdr->evt));
    39f6:	7802      	ldrb	r2, [r0, #0]
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    39f8:	4681      	mov	r9, r0
	switch (evt) {
    39fa:	2a1a      	cmp	r2, #26
    39fc:	d811      	bhi.n	3a22 <hci_rx_thread+0x122>
    39fe:	2301      	movs	r3, #1
    3a00:	4093      	lsls	r3, r2
    3a02:	ea13 0f0b 	tst.w	r3, fp
    3a06:	d00c      	beq.n	3a22 <hci_rx_thread+0x122>
	BT_ASSERT(!bt_hci_evt_is_prio(hdr->evt));
    3a08:	f640 73a1 	movw	r3, #4001	; 0xfa1
    3a0c:	4a11      	ldr	r2, [pc, #68]	; (3a54 <hci_rx_thread+0x154>)
    3a0e:	4916      	ldr	r1, [pc, #88]	; (3a68 <hci_rx_thread+0x168>)
    3a10:	4812      	ldr	r0, [pc, #72]	; (3a5c <hci_rx_thread+0x15c>)
    3a12:	f007 f937 	bl	ac84 <printk>
    3a16:	4040      	eors	r0, r0
    3a18:	f380 8811 	msr	BASEPRI, r0
    3a1c:	f04f 0003 	mov.w	r0, #3
    3a20:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
    3a22:	2303      	movs	r3, #3
    3a24:	4a11      	ldr	r2, [pc, #68]	; (3a6c <hci_rx_thread+0x16c>)
    3a26:	4621      	mov	r1, r4
    3a28:	f899 0000 	ldrb.w	r0, [r9]
    3a2c:	f7ff fedc 	bl	37e8 <handle_event>
	net_buf_unref(buf);
    3a30:	e7a7      	b.n	3982 <hci_rx_thread+0x82>
			BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
    3a32:	f028 033f 	bic.w	r3, r8, #63	; 0x3f
    3a36:	f043 0301 	orr.w	r3, r3, #1
    3a3a:	f363 0807 	bfi	r8, r3, #0, #8
    3a3e:	f365 188f 	bfi	r8, r5, #6, #10
    3a42:	4642      	mov	r2, r8
    3a44:	480a      	ldr	r0, [pc, #40]	; (3a70 <hci_rx_thread+0x170>)
    3a46:	e7af      	b.n	39a8 <hci_rx_thread+0xa8>
    3a48:	0000e6fc 	.word	0x0000e6fc
    3a4c:	0000e6dc 	.word	0x0000e6dc
    3a50:	200048fc 	.word	0x200048fc
    3a54:	00010195 	.word	0x00010195
    3a58:	000101c9 	.word	0x000101c9
    3a5c:	000101e2 	.word	0x000101e2
    3a60:	000101ff 	.word	0x000101ff
    3a64:	00010223 	.word	0x00010223
    3a68:	00010245 	.word	0x00010245
    3a6c:	0000eb14 	.word	0x0000eb14
    3a70:	00010263 	.word	0x00010263
    3a74:	0408c000 	.word	0x0408c000

00003a78 <le_conn_update_complete>:
{
    3a78:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
    3a7a:	6885      	ldr	r5, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
    3a7c:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    3a80:	4630      	mov	r0, r6
    3a82:	f002 fb33 	bl	60ec <bt_conn_lookup_handle>
	if (!conn) {
    3a86:	4604      	mov	r4, r0
    3a88:	b980      	cbnz	r0, 3aac <le_conn_update_complete+0x34>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    3a8a:	2301      	movs	r3, #1
    3a8c:	f04f 0200 	mov.w	r2, #0
    3a90:	4920      	ldr	r1, [pc, #128]	; (3b14 <le_conn_update_complete+0x9c>)
    3a92:	f363 0207 	bfi	r2, r3, #0, #8
    3a96:	4b20      	ldr	r3, [pc, #128]	; (3b18 <le_conn_update_complete+0xa0>)
    3a98:	4820      	ldr	r0, [pc, #128]	; (3b1c <le_conn_update_complete+0xa4>)
    3a9a:	1a5b      	subs	r3, r3, r1
    3a9c:	08db      	lsrs	r3, r3, #3
    3a9e:	f363 128f 	bfi	r2, r3, #6, #10
    3aa2:	4631      	mov	r1, r6
    3aa4:	f007 fd79 	bl	b59a <log_1>
}
    3aa8:	b002      	add	sp, #8
    3aaa:	bd70      	pop	{r4, r5, r6, pc}
	if (!evt->status) {
    3aac:	782b      	ldrb	r3, [r5, #0]
    3aae:	b9bb      	cbnz	r3, 3ae0 <le_conn_update_complete+0x68>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
    3ab0:	792a      	ldrb	r2, [r5, #4]
    3ab2:	78eb      	ldrb	r3, [r5, #3]
    3ab4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    3ab8:	f8a0 3086 	strh.w	r3, [r0, #134]	; 0x86
		conn->le.latency = sys_le16_to_cpu(evt->latency);
    3abc:	79aa      	ldrb	r2, [r5, #6]
    3abe:	796b      	ldrb	r3, [r5, #5]
    3ac0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    3ac4:	f8a0 308c 	strh.w	r3, [r0, #140]	; 0x8c
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    3ac8:	79eb      	ldrb	r3, [r5, #7]
    3aca:	7a2a      	ldrb	r2, [r5, #8]
    3acc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    3ad0:	f8a0 308e 	strh.w	r3, [r0, #142]	; 0x8e
		notify_le_param_updated(conn);
    3ad4:	f002 f854 	bl	5b80 <notify_le_param_updated>
	bt_conn_unref(conn);
    3ad8:	4620      	mov	r0, r4
    3ada:	f008 fc3b 	bl	c354 <bt_conn_unref>
    3ade:	e7e3      	b.n	3aa8 <le_conn_update_complete+0x30>
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
    3ae0:	2b1a      	cmp	r3, #26
    3ae2:	d1f9      	bne.n	3ad8 <le_conn_update_complete+0x60>
    3ae4:	78c3      	ldrb	r3, [r0, #3]
    3ae6:	2b01      	cmp	r3, #1
    3ae8:	d1f6      	bne.n	3ad8 <le_conn_update_complete+0x60>
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    3aea:	1d03      	adds	r3, r0, #4
    3aec:	e8d3 2fef 	ldaex	r2, [r3]
    3af0:	f442 6180 	orr.w	r1, r2, #1024	; 0x400
    3af4:	e8c3 1fe5 	stlex	r5, r1, [r3]
    3af8:	2d00      	cmp	r5, #0
    3afa:	d1f7      	bne.n	3aec <le_conn_update_complete+0x74>
		   conn->role == BT_HCI_ROLE_SLAVE &&
    3afc:	0553      	lsls	r3, r2, #21
    3afe:	d4eb      	bmi.n	3ad8 <le_conn_update_complete+0x60>
		param.interval_min = conn->le.interval_min;
    3b00:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
		bt_l2cap_update_conn_param(conn, &param);
    3b04:	4669      	mov	r1, sp
		param.interval_min = conn->le.interval_min;
    3b06:	9300      	str	r3, [sp, #0]
		param.latency = conn->le.pending_latency;
    3b08:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
    3b0c:	9301      	str	r3, [sp, #4]
		bt_l2cap_update_conn_param(conn, &param);
    3b0e:	f002 fe9b 	bl	6848 <bt_l2cap_update_conn_param>
    3b12:	e7e1      	b.n	3ad8 <le_conn_update_complete+0x60>
    3b14:	0000e6dc 	.word	0x0000e6dc
    3b18:	0000e6fc 	.word	0x0000e6fc
    3b1c:	000102fa 	.word	0x000102fa

00003b20 <hci_num_completed_packets>:
{
    3b20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (i = 0; i < evt->num_handles; i++) {
    3b24:	2500      	movs	r5, #0
    3b26:	4c51      	ldr	r4, [pc, #324]	; (3c6c <hci_num_completed_packets+0x14c>)
				BT_ERR("packets count mismatch");
    3b28:	4b51      	ldr	r3, [pc, #324]	; (3c70 <hci_num_completed_packets+0x150>)
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
    3b2a:	f8d0 a008 	ldr.w	sl, [r0, #8]
				BT_ERR("packets count mismatch");
    3b2e:	1ae4      	subs	r4, r4, r3
    3b30:	f3c4 04c9 	ubfx	r4, r4, #3, #10
	for (i = 0; i < evt->num_handles; i++) {
    3b34:	f89a 3000 	ldrb.w	r3, [sl]
    3b38:	429d      	cmp	r5, r3
    3b3a:	db02      	blt.n	3b42 <hci_num_completed_packets+0x22>
}
    3b3c:	b003      	add	sp, #12
    3b3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
    3b42:	eb0a 0385 	add.w	r3, sl, r5, lsl #2
    3b46:	f8b3 9001 	ldrh.w	r9, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
    3b4a:	f8b3 6003 	ldrh.w	r6, [r3, #3]
    3b4e:	f04f 0320 	mov.w	r3, #32
    3b52:	f3ef 8211 	mrs	r2, BASEPRI
    3b56:	f383 8811 	msr	BASEPRI, r3
    3b5a:	f3bf 8f6f 	isb	sy
		conn = bt_conn_lookup_handle(handle);
    3b5e:	4648      	mov	r0, r9
    3b60:	9201      	str	r2, [sp, #4]
    3b62:	f002 fac3 	bl	60ec <bt_conn_lookup_handle>
		if (!conn) {
    3b66:	9a01      	ldr	r2, [sp, #4]
    3b68:	4683      	mov	fp, r0
    3b6a:	b990      	cbnz	r0, 3b92 <hci_num_completed_packets+0x72>
	__asm__ volatile(
    3b6c:	f382 8811 	msr	BASEPRI, r2
    3b70:	f3bf 8f6f 	isb	sy
			BT_ERR("No connection for handle %u", handle);
    3b74:	f027 033f 	bic.w	r3, r7, #63	; 0x3f
    3b78:	f043 0301 	orr.w	r3, r3, #1
    3b7c:	f363 0707 	bfi	r7, r3, #0, #8
    3b80:	f364 178f 	bfi	r7, r4, #6, #10
    3b84:	463a      	mov	r2, r7
    3b86:	4649      	mov	r1, r9
    3b88:	483a      	ldr	r0, [pc, #232]	; (3c74 <hci_num_completed_packets+0x154>)
    3b8a:	f007 fd06 	bl	b59a <log_1>
	for (i = 0; i < evt->num_handles; i++) {
    3b8e:	3501      	adds	r5, #1
    3b90:	e7d0      	b.n	3b34 <hci_num_completed_packets+0x14>
    3b92:	f382 8811 	msr	BASEPRI, r2
    3b96:	f3bf 8f6f 	isb	sy
    3b9a:	f100 0930 	add.w	r9, r0, #48	; 0x30
		while (count--) {
    3b9e:	b3b6      	cbz	r6, 3c0e <hci_num_completed_packets+0xee>
	__asm__ volatile(
    3ba0:	f04f 0220 	mov.w	r2, #32
    3ba4:	f3ef 8111 	mrs	r1, BASEPRI
    3ba8:	f382 8811 	msr	BASEPRI, r2
    3bac:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
    3bb0:	f8db 201c 	ldr.w	r2, [fp, #28]
    3bb4:	b172      	cbz	r2, 3bd4 <hci_num_completed_packets+0xb4>
				conn->pending_no_cb--;
    3bb6:	3a01      	subs	r2, #1
    3bb8:	f8cb 201c 	str.w	r2, [fp, #28]
	__asm__ volatile(
    3bbc:	f381 8811 	msr	BASEPRI, r1
    3bc0:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
    3bc4:	4658      	mov	r0, fp
    3bc6:	f001 ffd7 	bl	5b78 <bt_conn_get_pkts>
	z_impl_k_sem_give(sem);
    3bca:	3e01      	subs	r6, #1
    3bcc:	f006 f95a 	bl	9e84 <z_impl_k_sem_give>
    3bd0:	b2b6      	uxth	r6, r6
    3bd2:	e7e4      	b.n	3b9e <hci_num_completed_packets+0x7e>
 *
 * @return a boolean, true if it's empty, false otherwise
 */
static inline bool sys_slist_is_empty(sys_slist_t *list);

Z_GENLIST_IS_EMPTY(slist)
    3bd4:	f8db 2014 	ldr.w	r2, [fp, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    3bd8:	b142      	cbz	r2, 3bec <hci_num_completed_packets+0xcc>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    3bda:	f8db 0018 	ldr.w	r0, [fp, #24]
    3bde:	6813      	ldr	r3, [r2, #0]
    3be0:	4282      	cmp	r2, r0
	list->head = node;
    3be2:	f8cb 3014 	str.w	r3, [fp, #20]
	list->tail = node;
    3be6:	bf08      	it	eq
    3be8:	f8cb 3018 	streq.w	r3, [fp, #24]
    3bec:	f381 8811 	msr	BASEPRI, r1
    3bf0:	f3bf 8f6f 	isb	sy
			if (!node) {
    3bf4:	b97a      	cbnz	r2, 3c16 <hci_num_completed_packets+0xf6>
				BT_ERR("packets count mismatch");
    3bf6:	f028 023f 	bic.w	r2, r8, #63	; 0x3f
    3bfa:	f042 0201 	orr.w	r2, r2, #1
    3bfe:	f362 0807 	bfi	r8, r2, #0, #8
    3c02:	f364 188f 	bfi	r8, r4, #6, #10
    3c06:	4641      	mov	r1, r8
    3c08:	481b      	ldr	r0, [pc, #108]	; (3c78 <hci_num_completed_packets+0x158>)
    3c0a:	f007 fcb9 	bl	b580 <log_0>
		bt_conn_unref(conn);
    3c0e:	4658      	mov	r0, fp
    3c10:	f008 fba0 	bl	c354 <bt_conn_unref>
    3c14:	e7bb      	b.n	3b8e <hci_num_completed_packets+0x6e>
	__asm__ volatile(
    3c16:	f04f 0120 	mov.w	r1, #32
    3c1a:	f3ef 8011 	mrs	r0, BASEPRI
    3c1e:	f381 8811 	msr	BASEPRI, r1
    3c22:	f3bf 8f6f 	isb	sy
			tx->pending_no_cb = 0U;
    3c26:	2300      	movs	r3, #0
			conn->pending_no_cb = tx->pending_no_cb;
    3c28:	68d1      	ldr	r1, [r2, #12]
    3c2a:	f8cb 101c 	str.w	r1, [fp, #28]
	parent->next = child;
    3c2e:	6013      	str	r3, [r2, #0]
Z_GENLIST_APPEND(slist, snode)
    3c30:	f8db 1024 	ldr.w	r1, [fp, #36]	; 0x24
			tx->pending_no_cb = 0U;
    3c34:	60d3      	str	r3, [r2, #12]
    3c36:	b9a9      	cbnz	r1, 3c64 <hci_num_completed_packets+0x144>
	list->head = node;
    3c38:	e9cb 2208 	strd	r2, r2, [fp, #32]
	__asm__ volatile(
    3c3c:	f380 8811 	msr	BASEPRI, r0
    3c40:	f3bf 8f6f 	isb	sy
    3c44:	e8d9 2fef 	ldaex	r2, [r9]
    3c48:	f042 0301 	orr.w	r3, r2, #1
    3c4c:	e8c9 3fe1 	stlex	r1, r3, [r9]
    3c50:	2900      	cmp	r1, #0
    3c52:	d1f7      	bne.n	3c44 <hci_num_completed_packets+0x124>
 * @req K-WORK-001
 */
static inline void k_work_submit_to_queue(struct k_work_q *work_q,
					  struct k_work *work)
{
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    3c54:	07d3      	lsls	r3, r2, #31
    3c56:	d4b5      	bmi.n	3bc4 <hci_num_completed_packets+0xa4>
		k_queue_append(&work_q->queue, work);
    3c58:	f10b 0128 	add.w	r1, fp, #40	; 0x28
    3c5c:	4807      	ldr	r0, [pc, #28]	; (3c7c <hci_num_completed_packets+0x15c>)
    3c5e:	f009 fff8 	bl	dc52 <k_queue_append>
    3c62:	e7af      	b.n	3bc4 <hci_num_completed_packets+0xa4>
	parent->next = child;
    3c64:	600a      	str	r2, [r1, #0]
	list->tail = node;
    3c66:	f8cb 2024 	str.w	r2, [fp, #36]	; 0x24
    3c6a:	e7e7      	b.n	3c3c <hci_num_completed_packets+0x11c>
    3c6c:	0000e6fc 	.word	0x0000e6fc
    3c70:	0000e6dc 	.word	0x0000e6dc
    3c74:	00010162 	.word	0x00010162
    3c78:	0001017e 	.word	0x0001017e
    3c7c:	2000120c 	.word	0x2000120c

00003c80 <hci_cmd_status>:
{
    3c80:	b538      	push	{r3, r4, r5, lr}
	evt = net_buf_pull_mem(buf, sizeof(*evt));
    3c82:	2104      	movs	r1, #4
{
    3c84:	4604      	mov	r4, r0
	evt = net_buf_pull_mem(buf, sizeof(*evt));
    3c86:	3008      	adds	r0, #8
    3c88:	f009 f9c8 	bl	d01c <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
    3c8c:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
    3c8e:	7801      	ldrb	r1, [r0, #0]
    3c90:	4622      	mov	r2, r4
    3c92:	8840      	ldrh	r0, [r0, #2]
    3c94:	f7ff fd28 	bl	36e8 <hci_cmd_done>
	if (ncmd) {
    3c98:	b125      	cbz	r5, 3ca4 <hci_cmd_status+0x24>
}
    3c9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    3c9e:	4802      	ldr	r0, [pc, #8]	; (3ca8 <hci_cmd_status+0x28>)
    3ca0:	f006 b8f0 	b.w	9e84 <z_impl_k_sem_give>
    3ca4:	bd38      	pop	{r3, r4, r5, pc}
    3ca6:	bf00      	nop
    3ca8:	200048e0 	.word	0x200048e0

00003cac <hci_cmd_complete>:
{
    3cac:	b538      	push	{r3, r4, r5, lr}
	evt = net_buf_pull_mem(buf, sizeof(*evt));
    3cae:	2103      	movs	r1, #3
{
    3cb0:	4604      	mov	r4, r0
	evt = net_buf_pull_mem(buf, sizeof(*evt));
    3cb2:	3008      	adds	r0, #8
    3cb4:	f009 f9b2 	bl	d01c <net_buf_simple_pull_mem>
	status = buf->data[0];
    3cb8:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
    3cba:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
    3cbc:	4622      	mov	r2, r4
    3cbe:	7819      	ldrb	r1, [r3, #0]
    3cc0:	f8b0 0001 	ldrh.w	r0, [r0, #1]
    3cc4:	f7ff fd10 	bl	36e8 <hci_cmd_done>
	if (ncmd) {
    3cc8:	b125      	cbz	r5, 3cd4 <hci_cmd_complete+0x28>
}
    3cca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    3cce:	4802      	ldr	r0, [pc, #8]	; (3cd8 <hci_cmd_complete+0x2c>)
    3cd0:	f006 b8d8 	b.w	9e84 <z_impl_k_sem_give>
    3cd4:	bd38      	pop	{r3, r4, r5, pc}
    3cd6:	bf00      	nop
    3cd8:	200048e0 	.word	0x200048e0

00003cdc <bt_hci_cmd_create>:
{
    3cdc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3ce0:	4681      	mov	r9, r0
    3ce2:	468a      	mov	sl, r1
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    3ce4:	4816      	ldr	r0, [pc, #88]	; (3d40 <bt_hci_cmd_create+0x64>)
    3ce6:	f04f 31ff 	mov.w	r1, #4294967295
    3cea:	f009 f933 	bl	cf54 <net_buf_alloc_fixed>
	*(u8_t *)net_buf_user_data(buf) = type;
    3cee:	2600      	movs	r6, #0
    3cf0:	4604      	mov	r4, r0
	net_buf_reserve(buf, BT_BUF_RESERVE);
    3cf2:	f100 0808 	add.w	r8, r0, #8
    3cf6:	2101      	movs	r1, #1
    3cf8:	4640      	mov	r0, r8
    3cfa:	f009 f94a 	bl	cf92 <net_buf_simple_reserve>
    3cfe:	7526      	strb	r6, [r4, #20]
	cmd(buf)->opcode = opcode;
    3d00:	4620      	mov	r0, r4
    3d02:	f004 fab3 	bl	826c <net_buf_id>
    3d06:	250c      	movs	r5, #12
    3d08:	4f0e      	ldr	r7, [pc, #56]	; (3d44 <bt_hci_cmd_create+0x68>)
    3d0a:	fb05 7000 	mla	r0, r5, r0, r7
    3d0e:	f8a0 9002 	strh.w	r9, [r0, #2]
	cmd(buf)->sync = NULL;
    3d12:	4620      	mov	r0, r4
    3d14:	f004 faaa 	bl	826c <net_buf_id>
    3d18:	fb05 7000 	mla	r0, r5, r0, r7
    3d1c:	6086      	str	r6, [r0, #8]
	cmd(buf)->state = NULL;
    3d1e:	4620      	mov	r0, r4
    3d20:	f004 faa4 	bl	826c <net_buf_id>
    3d24:	fb05 7000 	mla	r0, r5, r0, r7
	hdr = net_buf_add(buf, sizeof(*hdr));
    3d28:	2103      	movs	r1, #3
	cmd(buf)->state = NULL;
    3d2a:	6046      	str	r6, [r0, #4]
	hdr = net_buf_add(buf, sizeof(*hdr));
    3d2c:	4640      	mov	r0, r8
    3d2e:	f009 f945 	bl	cfbc <net_buf_simple_add>
	hdr->param_len = param_len;
    3d32:	f880 a002 	strb.w	sl, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
    3d36:	f8a0 9000 	strh.w	r9, [r0]
}
    3d3a:	4620      	mov	r0, r4
    3d3c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3d40:	20004da4 	.word	0x20004da4
    3d44:	20000434 	.word	0x20000434

00003d48 <bt_hci_cmd_send_sync>:
{
    3d48:	b5f0      	push	{r4, r5, r6, r7, lr}
    3d4a:	4615      	mov	r5, r2
    3d4c:	b087      	sub	sp, #28
	if (!buf) {
    3d4e:	460c      	mov	r4, r1
    3d50:	b919      	cbnz	r1, 3d5a <bt_hci_cmd_send_sync+0x12>
		buf = bt_hci_cmd_create(opcode, 0);
    3d52:	f7ff ffc3 	bl	3cdc <bt_hci_cmd_create>
		if (!buf) {
    3d56:	4604      	mov	r4, r0
    3d58:	b3a8      	cbz	r0, 3dc6 <bt_hci_cmd_send_sync+0x7e>
	return z_impl_k_sem_init(sem, initial_count, limit);
    3d5a:	2201      	movs	r2, #1
    3d5c:	2100      	movs	r1, #0
    3d5e:	4668      	mov	r0, sp
    3d60:	f00a f8fe 	bl	df60 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    3d64:	4620      	mov	r0, r4
    3d66:	f004 fa81 	bl	826c <net_buf_id>
    3d6a:	260c      	movs	r6, #12
    3d6c:	4f17      	ldr	r7, [pc, #92]	; (3dcc <bt_hci_cmd_send_sync+0x84>)
    3d6e:	fb06 7000 	mla	r0, r6, r0, r7
    3d72:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_ref(buf);
    3d76:	4620      	mov	r0, r4
    3d78:	f009 f91c 	bl	cfb4 <net_buf_ref>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    3d7c:	4621      	mov	r1, r4
    3d7e:	4814      	ldr	r0, [pc, #80]	; (3dd0 <bt_hci_cmd_send_sync+0x88>)
    3d80:	f009 f90b 	bl	cf9a <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
    3d84:	f242 7110 	movw	r1, #10000	; 0x2710
    3d88:	4668      	mov	r0, sp
    3d8a:	f006 f8a7 	bl	9edc <z_impl_k_sem_take>
	if (cmd(buf)->status) {
    3d8e:	4620      	mov	r0, r4
    3d90:	f004 fa6c 	bl	826c <net_buf_id>
    3d94:	4370      	muls	r0, r6
    3d96:	5c3b      	ldrb	r3, [r7, r0]
    3d98:	b173      	cbz	r3, 3db8 <bt_hci_cmd_send_sync+0x70>
		switch (cmd(buf)->status) {
    3d9a:	4620      	mov	r0, r4
    3d9c:	f004 fa66 	bl	826c <net_buf_id>
    3da0:	4370      	muls	r0, r6
    3da2:	5c3b      	ldrb	r3, [r7, r0]
    3da4:	2b09      	cmp	r3, #9
			err = -EIO;
    3da6:	bf0c      	ite	eq
    3da8:	f06f 053c 	mvneq.w	r5, #60	; 0x3c
    3dac:	f06f 0504 	mvnne.w	r5, #4
			net_buf_unref(buf);
    3db0:	4620      	mov	r0, r4
    3db2:	f004 faf1 	bl	8398 <net_buf_unref>
    3db6:	e003      	b.n	3dc0 <bt_hci_cmd_send_sync+0x78>
		if (rsp) {
    3db8:	2d00      	cmp	r5, #0
    3dba:	d0f9      	beq.n	3db0 <bt_hci_cmd_send_sync+0x68>
			*rsp = buf;
    3dbc:	602c      	str	r4, [r5, #0]
		err = 0;
    3dbe:	461d      	mov	r5, r3
}
    3dc0:	4628      	mov	r0, r5
    3dc2:	b007      	add	sp, #28
    3dc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -ENOBUFS;
    3dc6:	f06f 0536 	mvn.w	r5, #54	; 0x36
    3dca:	e7f9      	b.n	3dc0 <bt_hci_cmd_send_sync+0x78>
    3dcc:	20000434 	.word	0x20000434
    3dd0:	2000490c 	.word	0x2000490c

00003dd4 <set_random_address>:
{
    3dd4:	b570      	push	{r4, r5, r6, lr}
	return memcmp(a, b, sizeof(*a));
    3dd6:	4d15      	ldr	r5, [pc, #84]	; (3e2c <set_random_address+0x58>)
    3dd8:	2206      	movs	r2, #6
    3dda:	f105 010a 	add.w	r1, r5, #10
    3dde:	4606      	mov	r6, r0
    3de0:	f008 f84d 	bl	be7e <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    3de4:	4604      	mov	r4, r0
    3de6:	b1d8      	cbz	r0, 3e20 <set_random_address+0x4c>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    3de8:	2106      	movs	r1, #6
    3dea:	f242 0005 	movw	r0, #8197	; 0x2005
    3dee:	f7ff ff75 	bl	3cdc <bt_hci_cmd_create>
	if (!buf) {
    3df2:	4604      	mov	r4, r0
    3df4:	b1b0      	cbz	r0, 3e24 <set_random_address+0x50>
	net_buf_add_mem(buf, addr, sizeof(*addr));
    3df6:	2206      	movs	r2, #6
    3df8:	4631      	mov	r1, r6
    3dfa:	3008      	adds	r0, #8
    3dfc:	f009 f8e4 	bl	cfc8 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    3e00:	4621      	mov	r1, r4
    3e02:	2200      	movs	r2, #0
    3e04:	f242 0005 	movw	r0, #8197	; 0x2005
    3e08:	f7ff ff9e 	bl	3d48 <bt_hci_cmd_send_sync>
	if (err) {
    3e0c:	4604      	mov	r4, r0
    3e0e:	b938      	cbnz	r0, 3e20 <set_random_address+0x4c>
}

static inline void bt_addr_copy(bt_addr_t *dst, const bt_addr_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    3e10:	2206      	movs	r2, #6
    3e12:	4631      	mov	r1, r6
    3e14:	f105 000a 	add.w	r0, r5, #10
    3e18:	f008 f841 	bl	be9e <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    3e1c:	2301      	movs	r3, #1
    3e1e:	726b      	strb	r3, [r5, #9]
}
    3e20:	4620      	mov	r0, r4
    3e22:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    3e24:	f06f 0436 	mvn.w	r4, #54	; 0x36
    3e28:	e7fa      	b.n	3e20 <set_random_address+0x4c>
    3e2a:	bf00      	nop
    3e2c:	20004838 	.word	0x20004838

00003e30 <set_ad>:
{
    3e30:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3e34:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    3e36:	2120      	movs	r1, #32
{
    3e38:	4682      	mov	sl, r0
    3e3a:	4691      	mov	r9, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    3e3c:	f7ff ff4e 	bl	3cdc <bt_hci_cmd_create>
	if (!buf) {
    3e40:	4607      	mov	r7, r0
    3e42:	2800      	cmp	r0, #0
    3e44:	d05a      	beq.n	3efc <set_ad+0xcc>
	set_data = net_buf_add(buf, sizeof(*set_data));
    3e46:	2120      	movs	r1, #32
    3e48:	3008      	adds	r0, #8
    3e4a:	f009 f8b7 	bl	cfbc <net_buf_simple_add>
	(void)memset(set_data, 0, sizeof(*set_data));
    3e4e:	2220      	movs	r2, #32
    3e50:	2100      	movs	r1, #0
	set_data = net_buf_add(buf, sizeof(*set_data));
    3e52:	4605      	mov	r5, r0
	(void)memset(set_data, 0, sizeof(*set_data));
    3e54:	f008 f84d 	bl	bef2 <memset>
	for (c = 0; c < ad_len; c++) {
    3e58:	eb04 09c9 	add.w	r9, r4, r9, lsl #3
    3e5c:	454c      	cmp	r4, r9
    3e5e:	d106      	bne.n	3e6e <set_ad+0x3e>
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    3e60:	4639      	mov	r1, r7
    3e62:	4650      	mov	r0, sl
}
    3e64:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    3e68:	2200      	movs	r2, #0
    3e6a:	f7ff bf6d 	b.w	3d48 <bt_hci_cmd_send_sync>
		for (i = 0; i < ad[c].len; i++) {
    3e6e:	f04f 0b00 	mov.w	fp, #0
    3e72:	6826      	ldr	r6, [r4, #0]
    3e74:	6863      	ldr	r3, [r4, #4]
    3e76:	459b      	cmp	fp, r3
    3e78:	d301      	bcc.n	3e7e <set_ad+0x4e>
    3e7a:	3408      	adds	r4, #8
    3e7c:	e7ee      	b.n	3e5c <set_ad+0x2c>
			if (set_data->len + len + 2 > 31) {
    3e7e:	782b      	ldrb	r3, [r5, #0]
			int len = data[i].data_len;
    3e80:	7872      	ldrb	r2, [r6, #1]
			if (set_data->len + len + 2 > 31) {
    3e82:	1c98      	adds	r0, r3, #2
    3e84:	eb00 0c02 	add.w	ip, r0, r2
    3e88:	f1bc 0f1f 	cmp.w	ip, #31
			u8_t type = data[i].type;
    3e8c:	7831      	ldrb	r1, [r6, #0]
			if (set_data->len + len + 2 > 31) {
    3e8e:	dd1a      	ble.n	3ec6 <set_ad+0x96>
				if (type != BT_DATA_NAME_COMPLETE || !len) {
    3e90:	2909      	cmp	r1, #9
				len = 31 - (set_data->len + 2);
    3e92:	f1c3 021d 	rsb	r2, r3, #29
				if (type != BT_DATA_NAME_COMPLETE || !len) {
    3e96:	d100      	bne.n	3e9a <set_ad+0x6a>
    3e98:	b9a2      	cbnz	r2, 3ec4 <set_ad+0x94>
					net_buf_unref(buf);
    3e9a:	4638      	mov	r0, r7
    3e9c:	f004 fa7c 	bl	8398 <net_buf_unref>
					BT_ERR("Too big advertising data");
    3ea0:	2301      	movs	r3, #1
    3ea2:	f04f 0100 	mov.w	r1, #0
    3ea6:	4a17      	ldr	r2, [pc, #92]	; (3f04 <set_ad+0xd4>)
    3ea8:	f363 0107 	bfi	r1, r3, #0, #8
    3eac:	4b16      	ldr	r3, [pc, #88]	; (3f08 <set_ad+0xd8>)
    3eae:	4817      	ldr	r0, [pc, #92]	; (3f0c <set_ad+0xdc>)
    3eb0:	1a9b      	subs	r3, r3, r2
    3eb2:	08db      	lsrs	r3, r3, #3
    3eb4:	f363 118f 	bfi	r1, r3, #6, #10
    3eb8:	f007 fb62 	bl	b580 <log_0>
					return -EINVAL;
    3ebc:	f06f 0015 	mvn.w	r0, #21
}
    3ec0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				type = BT_DATA_NAME_SHORTENED;
    3ec4:	2108      	movs	r1, #8
			set_data->data[set_data->len++] = len + 1;
    3ec6:	fa4f f882 	sxtb.w	r8, r2
    3eca:	eb05 0c03 	add.w	ip, r5, r3
    3ece:	3301      	adds	r3, #1
    3ed0:	f108 0e01 	add.w	lr, r8, #1
			set_data->data[set_data->len++] = type;
    3ed4:	fa55 f383 	uxtab	r3, r5, r3
    3ed8:	b2c0      	uxtb	r0, r0
			set_data->data[set_data->len++] = len + 1;
    3eda:	f88c e001 	strb.w	lr, [ip, #1]
			set_data->data[set_data->len++] = type;
    3ede:	7028      	strb	r0, [r5, #0]
    3ee0:	7059      	strb	r1, [r3, #1]
			memcpy(&set_data->data[set_data->len], data[i].data,
    3ee2:	3001      	adds	r0, #1
    3ee4:	6871      	ldr	r1, [r6, #4]
    3ee6:	4428      	add	r0, r5
    3ee8:	f007 ffd9 	bl	be9e <memcpy>
			set_data->len += len;
    3eec:	782b      	ldrb	r3, [r5, #0]
		for (i = 0; i < ad[c].len; i++) {
    3eee:	f10b 0b01 	add.w	fp, fp, #1
			set_data->len += len;
    3ef2:	4498      	add	r8, r3
    3ef4:	f885 8000 	strb.w	r8, [r5]
    3ef8:	3608      	adds	r6, #8
    3efa:	e7bb      	b.n	3e74 <set_ad+0x44>
		return -ENOBUFS;
    3efc:	f06f 0036 	mvn.w	r0, #54	; 0x36
    3f00:	e7de      	b.n	3ec0 <set_ad+0x90>
    3f02:	bf00      	nop
    3f04:	0000e6dc 	.word	0x0000e6dc
    3f08:	0000e6fc 	.word	0x0000e6fc
    3f0c:	00010393 	.word	0x00010393

00003f10 <le_adv_update>:
}

static int le_adv_update(const struct bt_data *ad, size_t ad_len,
			 const struct bt_data *sd, size_t sd_len,
			 bool connectable, bool use_name)
{
    3f10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3f14:	461e      	mov	r6, r3
	struct bt_ad d[2] = {};
    3f16:	2300      	movs	r3, #0
{
    3f18:	b086      	sub	sp, #24
	struct bt_data data;
	int err;

	d[0].data = ad;
	d[0].len = ad_len;
    3f1a:	e9cd 0102 	strd	r0, r1, [sp, #8]
{
    3f1e:	4615      	mov	r5, r2

	err = set_ad(BT_HCI_OP_LE_SET_ADV_DATA, d, 1);
    3f20:	a902      	add	r1, sp, #8
    3f22:	2201      	movs	r2, #1
    3f24:	f242 0008 	movw	r0, #8200	; 0x2008
{
    3f28:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
    3f2c:	f89d 8034 	ldrb.w	r8, [sp, #52]	; 0x34
	struct bt_ad d[2] = {};
    3f30:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = set_ad(BT_HCI_OP_LE_SET_ADV_DATA, d, 1);
    3f34:	f7ff ff7c 	bl	3e30 <set_ad>
	if (err) {
    3f38:	4604      	mov	r4, r0
    3f3a:	bb10      	cbnz	r0, 3f82 <le_adv_update+0x72>
		return err;
	}

	d[0].data = sd;
	d[0].len = sd_len;
    3f3c:	e9cd 5602 	strd	r5, r6, [sp, #8]

	if (use_name) {
    3f40:	f1b8 0f00 	cmp.w	r8, #0
    3f44:	d011      	beq.n	3f6a <le_adv_update+0x5a>
		const char *name;

		if (sd) {
    3f46:	b115      	cbz	r5, 3f4e <le_adv_update+0x3e>
	for (i = 0; i < ad_len; i++) {
    3f48:	4602      	mov	r2, r0
    3f4a:	42b2      	cmp	r2, r6
    3f4c:	d11d      	bne.n	3f8a <le_adv_update+0x7a>
				return -EINVAL;
			}
		}

		name = bt_get_name();
		data = (struct bt_data)BT_DATA(
    3f4e:	4d14      	ldr	r5, [pc, #80]	; (3fa0 <le_adv_update+0x90>)
    3f50:	4628      	mov	r0, r5
    3f52:	f007 ff72 	bl	be3a <strlen>
    3f56:	2309      	movs	r3, #9
    3f58:	f88d 3000 	strb.w	r3, [sp]
			BT_DATA_NAME_COMPLETE,
			name, strlen(name));

		d[1].data = &data;
		d[1].len = 1;
    3f5c:	2301      	movs	r3, #1
		data = (struct bt_data)BT_DATA(
    3f5e:	f88d 0001 	strb.w	r0, [sp, #1]
    3f62:	9501      	str	r5, [sp, #4]
		d[1].data = &data;
    3f64:	f8cd d010 	str.w	sp, [sp, #16]
		d[1].len = 1;
    3f68:	9305      	str	r3, [sp, #20]
	 * by previous calls.
	 * Clearing sd is done by calling set_ad() with NULL data and
	 * zero len.
	 * So following condition check is unusual but correct.
	 */
	if (d[0].data || d[1].data || connectable) {
    3f6a:	9b02      	ldr	r3, [sp, #8]
    3f6c:	b913      	cbnz	r3, 3f74 <le_adv_update+0x64>
    3f6e:	9b04      	ldr	r3, [sp, #16]
    3f70:	b903      	cbnz	r3, 3f74 <le_adv_update+0x64>
    3f72:	b137      	cbz	r7, 3f82 <le_adv_update+0x72>
		err = set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, d, 2);
    3f74:	2202      	movs	r2, #2
    3f76:	a902      	add	r1, sp, #8
    3f78:	f242 0009 	movw	r0, #8201	; 0x2009
    3f7c:	f7ff ff58 	bl	3e30 <set_ad>
    3f80:	4604      	mov	r4, r0
			return err;
		}
	}

	return 0;
}
    3f82:	4620      	mov	r0, r4
    3f84:	b006      	add	sp, #24
    3f86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
    3f8a:	f815 1032 	ldrb.w	r1, [r5, r2, lsl #3]
    3f8e:	3908      	subs	r1, #8
    3f90:	2901      	cmp	r1, #1
    3f92:	d901      	bls.n	3f98 <le_adv_update+0x88>
	for (i = 0; i < ad_len; i++) {
    3f94:	3201      	adds	r2, #1
    3f96:	e7d8      	b.n	3f4a <le_adv_update+0x3a>
				return -EINVAL;
    3f98:	f06f 0415 	mvn.w	r4, #21
    3f9c:	e7f1      	b.n	3f82 <le_adv_update+0x72>
    3f9e:	bf00      	nop
    3fa0:	0000f1de 	.word	0x0000f1de

00003fa4 <set_advertise_enable>:
{
    3fa4:	b530      	push	{r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
    3fa6:	2101      	movs	r1, #1
{
    3fa8:	b085      	sub	sp, #20
    3faa:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
    3fac:	f242 000a 	movw	r0, #8202	; 0x200a
    3fb0:	f7ff fe94 	bl	3cdc <bt_hci_cmd_create>
	if (!buf) {
    3fb4:	4604      	mov	r4, r0
    3fb6:	b1e8      	cbz	r0, 3ff4 <set_advertise_enable+0x50>
	if (enable) {
    3fb8:	3008      	adds	r0, #8
    3fba:	b1cd      	cbz	r5, 3ff0 <set_advertise_enable+0x4c>
		net_buf_add_u8(buf, BT_HCI_LE_ADV_ENABLE);
    3fbc:	2101      	movs	r1, #1
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
    3fbe:	f009 f80c 	bl	cfda <net_buf_simple_add_u8>
	state->target = target;
    3fc2:	4b0e      	ldr	r3, [pc, #56]	; (3ffc <set_advertise_enable+0x58>)
	cmd(buf)->state = &state;
    3fc4:	4620      	mov	r0, r4
	state->target = target;
    3fc6:	9301      	str	r3, [sp, #4]
	state->bit = bit;
    3fc8:	2305      	movs	r3, #5
	state->val = val;
    3fca:	f88d 500c 	strb.w	r5, [sp, #12]
	state->bit = bit;
    3fce:	9302      	str	r3, [sp, #8]
	cmd(buf)->state = &state;
    3fd0:	f004 f94c 	bl	826c <net_buf_id>
    3fd4:	230c      	movs	r3, #12
    3fd6:	4a0a      	ldr	r2, [pc, #40]	; (4000 <set_advertise_enable+0x5c>)
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
    3fd8:	4621      	mov	r1, r4
	cmd(buf)->state = &state;
    3fda:	fb03 2000 	mla	r0, r3, r0, r2
    3fde:	ab01      	add	r3, sp, #4
    3fe0:	6043      	str	r3, [r0, #4]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
    3fe2:	2200      	movs	r2, #0
    3fe4:	f242 000a 	movw	r0, #8202	; 0x200a
    3fe8:	f7ff feae 	bl	3d48 <bt_hci_cmd_send_sync>
}
    3fec:	b005      	add	sp, #20
    3fee:	bd30      	pop	{r4, r5, pc}
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
    3ff0:	4629      	mov	r1, r5
    3ff2:	e7e4      	b.n	3fbe <set_advertise_enable+0x1a>
		return -ENOBUFS;
    3ff4:	f06f 0036 	mvn.w	r0, #54	; 0x36
    3ff8:	e7f8      	b.n	3fec <set_advertise_enable+0x48>
    3ffa:	bf00      	nop
    3ffc:	200048a8 	.word	0x200048a8
    4000:	20000434 	.word	0x20000434

00004004 <id_create.isra.23>:
static void id_create(u8_t id, bt_addr_le_t *addr, u8_t *irk)
    4004:	b530      	push	{r4, r5, lr}
    4006:	4d14      	ldr	r5, [pc, #80]	; (4058 <id_create.isra.23+0x54>)
    4008:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    400c:	b085      	sub	sp, #20
    400e:	4405      	add	r5, r0
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    4010:	460c      	mov	r4, r1
    4012:	b179      	cbz	r1, 4034 <id_create.isra.23+0x30>
    4014:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
    4016:	2207      	movs	r2, #7
    4018:	4669      	mov	r1, sp
    401a:	4620      	mov	r0, r4
    401c:	9300      	str	r3, [sp, #0]
    401e:	f8cd 3003 	str.w	r3, [sp, #3]
    4022:	f007 ff2c 	bl	be7e <memcmp>
    4026:	b128      	cbz	r0, 4034 <id_create.isra.23+0x30>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
    4028:	4621      	mov	r1, r4
    402a:	4628      	mov	r0, r5
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
    402c:	f008 f85a 	bl	c0e4 <bt_addr_le_copy>
}
    4030:	b005      	add	sp, #20
    4032:	bd30      	pop	{r4, r5, pc}
			bt_addr_le_create_static(&new_addr);
    4034:	a802      	add	r0, sp, #8
    4036:	f008 f8b1 	bl	c19c <bt_addr_le_create_static>
		} while (id_find(&new_addr) >= 0);
    403a:	a802      	add	r0, sp, #8
    403c:	f7ff fc46 	bl	38cc <id_find>
    4040:	2800      	cmp	r0, #0
    4042:	daf7      	bge.n	4034 <id_create.isra.23+0x30>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
    4044:	a902      	add	r1, sp, #8
    4046:	4628      	mov	r0, r5
    4048:	f008 f84c 	bl	c0e4 <bt_addr_le_copy>
		if (addr) {
    404c:	2c00      	cmp	r4, #0
    404e:	d0ef      	beq.n	4030 <id_create.isra.23+0x2c>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
    4050:	4629      	mov	r1, r5
    4052:	4620      	mov	r0, r4
    4054:	e7ea      	b.n	402c <id_create.isra.23+0x28>
    4056:	bf00      	nop
    4058:	20004838 	.word	0x20004838

0000405c <bt_send>:
	return bt_dev.drv->send(buf);
    405c:	4b02      	ldr	r3, [pc, #8]	; (4068 <bt_send+0xc>)
    405e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    4062:	691b      	ldr	r3, [r3, #16]
    4064:	4718      	bx	r3
    4066:	bf00      	nop
    4068:	20004838 	.word	0x20004838

0000406c <bt_hci_cmd_send>:
{
    406c:	b538      	push	{r3, r4, r5, lr}
    406e:	4604      	mov	r4, r0
	if (!buf) {
    4070:	460d      	mov	r5, r1
    4072:	b919      	cbnz	r1, 407c <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
    4074:	f7ff fe32 	bl	3cdc <bt_hci_cmd_create>
		if (!buf) {
    4078:	4605      	mov	r5, r0
    407a:	b310      	cbz	r0, 40c2 <bt_hci_cmd_send+0x56>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
    407c:	f640 4335 	movw	r3, #3125	; 0xc35
    4080:	429c      	cmp	r4, r3
    4082:	d118      	bne.n	40b6 <bt_hci_cmd_send+0x4a>
		err = bt_send(buf);
    4084:	4628      	mov	r0, r5
    4086:	f7ff ffe9 	bl	405c <bt_send>
		if (err) {
    408a:	4604      	mov	r4, r0
    408c:	b188      	cbz	r0, 40b2 <bt_hci_cmd_send+0x46>
			BT_ERR("Unable to send to driver (err %d)", err);
    408e:	2301      	movs	r3, #1
    4090:	f04f 0200 	mov.w	r2, #0
    4094:	490c      	ldr	r1, [pc, #48]	; (40c8 <bt_hci_cmd_send+0x5c>)
    4096:	f363 0207 	bfi	r2, r3, #0, #8
    409a:	4b0c      	ldr	r3, [pc, #48]	; (40cc <bt_hci_cmd_send+0x60>)
    409c:	1a5b      	subs	r3, r3, r1
    409e:	08db      	lsrs	r3, r3, #3
    40a0:	4601      	mov	r1, r0
    40a2:	f363 128f 	bfi	r2, r3, #6, #10
    40a6:	480a      	ldr	r0, [pc, #40]	; (40d0 <bt_hci_cmd_send+0x64>)
    40a8:	f007 fa77 	bl	b59a <log_1>
			net_buf_unref(buf);
    40ac:	4628      	mov	r0, r5
    40ae:	f004 f973 	bl	8398 <net_buf_unref>
}
    40b2:	4620      	mov	r0, r4
    40b4:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    40b6:	4629      	mov	r1, r5
    40b8:	4806      	ldr	r0, [pc, #24]	; (40d4 <bt_hci_cmd_send+0x68>)
    40ba:	f008 ff6e 	bl	cf9a <net_buf_put>
	return 0;
    40be:	2400      	movs	r4, #0
    40c0:	e7f7      	b.n	40b2 <bt_hci_cmd_send+0x46>
			return -ENOBUFS;
    40c2:	f06f 0436 	mvn.w	r4, #54	; 0x36
    40c6:	e7f4      	b.n	40b2 <bt_hci_cmd_send+0x46>
    40c8:	0000e6dc 	.word	0x0000e6dc
    40cc:	0000e6fc 	.word	0x0000e6fc
    40d0:	0000fcfc 	.word	0x0000fcfc
    40d4:	2000490c 	.word	0x2000490c

000040d8 <report_completed_packet>:
{
    40d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    40da:	4604      	mov	r4, r0
	u16_t handle = acl(buf)->handle;
    40dc:	8ac7      	ldrh	r7, [r0, #22]
 *
 * @param buf Buffer to destroy.
 */
static inline void net_buf_destroy(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    40de:	7980      	ldrb	r0, [r0, #6]
    40e0:	f004 f8be 	bl	8260 <net_buf_pool_get>

	k_lifo_put(&pool->free, buf);
    40e4:	4621      	mov	r1, r4
    40e6:	f009 fdb9 	bl	dc5c <k_queue_prepend>
	if (!BT_CMD_TEST(bt_dev.supported_commands, 10, 5)) {
    40ea:	4b31      	ldr	r3, [pc, #196]	; (41b0 <report_completed_packet+0xd8>)
    40ec:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
    40f0:	069b      	lsls	r3, r3, #26
    40f2:	d55c      	bpl.n	41ae <report_completed_packet+0xd6>
	conn = bt_conn_lookup_id(acl(buf)->id);
    40f4:	7d60      	ldrb	r0, [r4, #21]
    40f6:	f002 f9d9 	bl	64ac <bt_conn_lookup_id>
	if (!conn) {
    40fa:	4605      	mov	r5, r0
    40fc:	b980      	cbnz	r0, 4120 <report_completed_packet+0x48>
		BT_WARN("Unable to look up conn with id 0x%02x", acl(buf)->id);
    40fe:	2302      	movs	r3, #2
    4100:	f04f 0200 	mov.w	r2, #0
    4104:	492b      	ldr	r1, [pc, #172]	; (41b4 <report_completed_packet+0xdc>)
    4106:	f363 0207 	bfi	r2, r3, #0, #8
    410a:	4b2b      	ldr	r3, [pc, #172]	; (41b8 <report_completed_packet+0xe0>)
    410c:	482b      	ldr	r0, [pc, #172]	; (41bc <report_completed_packet+0xe4>)
    410e:	1a5b      	subs	r3, r3, r1
    4110:	08db      	lsrs	r3, r3, #3
    4112:	f363 128f 	bfi	r2, r3, #6, #10
    4116:	7d61      	ldrb	r1, [r4, #21]
}
    4118:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_WARN("Unable to look up conn with id 0x%02x", acl(buf)->id);
    411c:	f007 ba3d 	b.w	b59a <log_1>
	if (conn->state != BT_CONN_CONNECTED &&
    4120:	7a83      	ldrb	r3, [r0, #10]
    4122:	3b06      	subs	r3, #6
    4124:	2b01      	cmp	r3, #1
    4126:	d912      	bls.n	414e <report_completed_packet+0x76>
		BT_WARN("Not reporting packet for non-connected conn");
    4128:	2302      	movs	r3, #2
    412a:	f04f 0100 	mov.w	r1, #0
    412e:	4a21      	ldr	r2, [pc, #132]	; (41b4 <report_completed_packet+0xdc>)
    4130:	f363 0107 	bfi	r1, r3, #0, #8
    4134:	4b20      	ldr	r3, [pc, #128]	; (41b8 <report_completed_packet+0xe0>)
    4136:	4822      	ldr	r0, [pc, #136]	; (41c0 <report_completed_packet+0xe8>)
    4138:	1a9b      	subs	r3, r3, r2
    413a:	08db      	lsrs	r3, r3, #3
    413c:	f363 118f 	bfi	r1, r3, #6, #10
    4140:	f007 fa1e 	bl	b580 <log_0>
		bt_conn_unref(conn);
    4144:	4628      	mov	r0, r5
}
    4146:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		bt_conn_unref(conn);
    414a:	f008 b903 	b.w	c354 <bt_conn_unref>
	bt_conn_unref(conn);
    414e:	f008 f901 	bl	c354 <bt_conn_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS,
    4152:	2105      	movs	r1, #5
    4154:	f640 4035 	movw	r0, #3125	; 0xc35
    4158:	f7ff fdc0 	bl	3cdc <bt_hci_cmd_create>
	if (!buf) {
    415c:	4604      	mov	r4, r0
    415e:	b978      	cbnz	r0, 4180 <report_completed_packet+0xa8>
		BT_ERR("Unable to allocate new HCI command");
    4160:	2301      	movs	r3, #1
    4162:	f04f 0100 	mov.w	r1, #0
    4166:	4a13      	ldr	r2, [pc, #76]	; (41b4 <report_completed_packet+0xdc>)
    4168:	f363 0107 	bfi	r1, r3, #0, #8
    416c:	4b12      	ldr	r3, [pc, #72]	; (41b8 <report_completed_packet+0xe0>)
    416e:	4815      	ldr	r0, [pc, #84]	; (41c4 <report_completed_packet+0xec>)
    4170:	1a9b      	subs	r3, r3, r2
    4172:	08db      	lsrs	r3, r3, #3
    4174:	f363 118f 	bfi	r1, r3, #6, #10
}
    4178:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_ERR("Unable to allocate new HCI command");
    417c:	f007 ba00 	b.w	b580 <log_0>
	cp = net_buf_add(buf, sizeof(*cp));
    4180:	f100 0608 	add.w	r6, r0, #8
    4184:	2101      	movs	r1, #1
    4186:	4630      	mov	r0, r6
    4188:	f008 ff18 	bl	cfbc <net_buf_simple_add>
	cp->num_handles = sys_cpu_to_le16(1);
    418c:	2501      	movs	r5, #1
	hc = net_buf_add(buf, sizeof(*hc));
    418e:	2104      	movs	r1, #4
	cp->num_handles = sys_cpu_to_le16(1);
    4190:	7005      	strb	r5, [r0, #0]
	hc = net_buf_add(buf, sizeof(*hc));
    4192:	4630      	mov	r0, r6
    4194:	f008 ff12 	bl	cfbc <net_buf_simple_add>
	hc->count  = sys_cpu_to_le16(1);
    4198:	2300      	movs	r3, #0
	hc->handle = sys_cpu_to_le16(handle);
    419a:	8007      	strh	r7, [r0, #0]
	hc->count  = sys_cpu_to_le16(1);
    419c:	7085      	strb	r5, [r0, #2]
    419e:	70c3      	strb	r3, [r0, #3]
	bt_hci_cmd_send(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS, buf);
    41a0:	4621      	mov	r1, r4
}
    41a2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_hci_cmd_send(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS, buf);
    41a6:	f640 4035 	movw	r0, #3125	; 0xc35
    41aa:	f7ff bf5f 	b.w	406c <bt_hci_cmd_send>
}
    41ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    41b0:	20004838 	.word	0x20004838
    41b4:	0000e6dc 	.word	0x0000e6dc
    41b8:	0000e6fc 	.word	0x0000e6fc
    41bc:	0001031e 	.word	0x0001031e
    41c0:	00010344 	.word	0x00010344
    41c4:	00010370 	.word	0x00010370

000041c8 <conn_auto_initiate>:
	if (conn->state != BT_CONN_CONNECTED) {
    41c8:	7a83      	ldrb	r3, [r0, #10]
{
    41ca:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    41ce:	2b06      	cmp	r3, #6
{
    41d0:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
    41d2:	d11e      	bne.n	4212 <conn_auto_initiate+0x4a>
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
    41d4:	1d05      	adds	r5, r0, #4
    41d6:	210d      	movs	r1, #13
    41d8:	4628      	mov	r0, r5
    41da:	f007 ffa7 	bl	c12c <atomic_test_bit>
    41de:	b9d8      	cbnz	r0, 4218 <conn_auto_initiate+0x50>
    41e0:	78e3      	ldrb	r3, [r4, #3]
    41e2:	b123      	cbz	r3, 41ee <conn_auto_initiate+0x26>
	     BT_FEAT_LE_SLAVE_FEATURE_XCHG(bt_dev.le.features))) {
    41e4:	4b54      	ldr	r3, [pc, #336]	; (4338 <conn_auto_initiate+0x170>)
	    ((conn->role == BT_HCI_ROLE_MASTER) ||
    41e6:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    41ea:	0719      	lsls	r1, r3, #28
    41ec:	d514      	bpl.n	4218 <conn_auto_initiate+0x50>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
    41ee:	2102      	movs	r1, #2
    41f0:	f242 0016 	movw	r0, #8214	; 0x2016
    41f4:	f7ff fd72 	bl	3cdc <bt_hci_cmd_create>
	if (!buf) {
    41f8:	4606      	mov	r6, r0
    41fa:	b168      	cbz	r0, 4218 <conn_auto_initiate+0x50>
	cp = net_buf_add(buf, sizeof(*cp));
    41fc:	2102      	movs	r1, #2
    41fe:	3008      	adds	r0, #8
    4200:	f008 fedc 	bl	cfbc <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    4204:	8823      	ldrh	r3, [r4, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    4206:	4631      	mov	r1, r6
	cp->handle = sys_cpu_to_le16(conn->handle);
    4208:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    420a:	f242 0016 	movw	r0, #8214	; 0x2016
    420e:	f7ff ff2d 	bl	406c <bt_hci_cmd_send>
}
    4212:	b002      	add	sp, #8
    4214:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    !atomic_test_bit(conn->flags, BT_CONN_AUTO_PHY_COMPLETE) &&
    4218:	210c      	movs	r1, #12
    421a:	4628      	mov	r0, r5
    421c:	f007 ff86 	bl	c12c <atomic_test_bit>
    4220:	f8df 8114 	ldr.w	r8, [pc, #276]	; 4338 <conn_auto_initiate+0x170>
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
    4224:	4606      	mov	r6, r0
    4226:	bb20      	cbnz	r0, 4272 <conn_auto_initiate+0xaa>
	    !atomic_test_bit(conn->flags, BT_CONN_AUTO_PHY_COMPLETE) &&
    4228:	f898 3079 	ldrb.w	r3, [r8, #121]	; 0x79
    422c:	07da      	lsls	r2, r3, #31
    422e:	d520      	bpl.n	4272 <conn_auto_initiate+0xaa>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
    4230:	2107      	movs	r1, #7
    4232:	f242 0032 	movw	r0, #8242	; 0x2032
    4236:	f7ff fd51 	bl	3cdc <bt_hci_cmd_create>
	if (!buf) {
    423a:	4607      	mov	r7, r0
    423c:	b1c8      	cbz	r0, 4272 <conn_auto_initiate+0xaa>
	cp = net_buf_add(buf, sizeof(*cp));
    423e:	2107      	movs	r1, #7
    4240:	3008      	adds	r0, #8
    4242:	f008 febb 	bl	cfbc <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    4246:	8823      	ldrh	r3, [r4, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
    4248:	4639      	mov	r1, r7
	cp->handle = sys_cpu_to_le16(conn->handle);
    424a:	8003      	strh	r3, [r0, #0]
	cp->tx_phys = BT_HCI_LE_PHY_PREFER_2M;
    424c:	2302      	movs	r3, #2
	cp->all_phys = 0U;
    424e:	7086      	strb	r6, [r0, #2]
	cp->tx_phys = BT_HCI_LE_PHY_PREFER_2M;
    4250:	70c3      	strb	r3, [r0, #3]
	cp->rx_phys = BT_HCI_LE_PHY_PREFER_2M;
    4252:	7103      	strb	r3, [r0, #4]
	cp->phy_opts = BT_HCI_LE_PHY_CODED_ANY;
    4254:	7146      	strb	r6, [r0, #5]
    4256:	7186      	strb	r6, [r0, #6]
	bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
    4258:	f242 0032 	movw	r0, #8242	; 0x2032
    425c:	f7ff ff06 	bl	406c <bt_hci_cmd_send>
    4260:	e8d5 3fef 	ldaex	r3, [r5]
    4264:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    4268:	e8c5 3fe2 	stlex	r2, r3, [r5]
    426c:	2a00      	cmp	r2, #0
    426e:	d0d0      	beq.n	4212 <conn_auto_initiate+0x4a>
    4270:	e7f6      	b.n	4260 <conn_auto_initiate+0x98>
	if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
    4272:	f898 3078 	ldrb.w	r3, [r8, #120]	; 0x78
    4276:	069b      	lsls	r3, r3, #26
    4278:	d514      	bpl.n	42a4 <conn_auto_initiate+0xdc>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
    427a:	aa01      	add	r2, sp, #4
    427c:	2100      	movs	r1, #0
    427e:	f242 002f 	movw	r0, #8239	; 0x202f
    4282:	f7ff fd61 	bl	3d48 <bt_hci_cmd_send_sync>
	if (err) {
    4286:	b1f0      	cbz	r0, 42c6 <conn_auto_initiate+0xfe>
		BT_ERR("Failed to read DLE max data len");
    4288:	2301      	movs	r3, #1
    428a:	f04f 0100 	mov.w	r1, #0
    428e:	4a2b      	ldr	r2, [pc, #172]	; (433c <conn_auto_initiate+0x174>)
    4290:	f363 0107 	bfi	r1, r3, #0, #8
    4294:	4b2a      	ldr	r3, [pc, #168]	; (4340 <conn_auto_initiate+0x178>)
    4296:	482b      	ldr	r0, [pc, #172]	; (4344 <conn_auto_initiate+0x17c>)
    4298:	1a9b      	subs	r3, r3, r2
    429a:	08db      	lsrs	r3, r3, #3
    429c:	f363 118f 	bfi	r1, r3, #6, #10
		BT_ERR("Failed to send LE Set Data Length Command");
    42a0:	f007 f96e 	bl	b580 <log_0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    42a4:	78e3      	ldrb	r3, [r4, #3]
    42a6:	2b01      	cmp	r3, #1
    42a8:	d1b3      	bne.n	4212 <conn_auto_initiate+0x4a>
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_UPDATE)) {
    42aa:	2108      	movs	r1, #8
    42ac:	4628      	mov	r0, r5
    42ae:	f007 ff3d 	bl	c12c <atomic_test_bit>
    42b2:	2800      	cmp	r0, #0
    42b4:	d1ad      	bne.n	4212 <conn_auto_initiate+0x4a>
 * @req K-DWORK-001
 */
static inline int k_delayed_work_submit(struct k_delayed_work *work,
					s32_t delay)
{
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    42b6:	f241 3288 	movw	r2, #5000	; 0x1388
    42ba:	f104 0150 	add.w	r1, r4, #80	; 0x50
    42be:	4822      	ldr	r0, [pc, #136]	; (4348 <conn_auto_initiate+0x180>)
    42c0:	f005 ff52 	bl	a168 <k_delayed_work_submit_to_queue>
    42c4:	e7a5      	b.n	4212 <conn_auto_initiate+0x4a>
	rp = (void *)rsp->data;
    42c6:	9801      	ldr	r0, [sp, #4]
    42c8:	6883      	ldr	r3, [r0, #8]
	tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    42ca:	f8b3 8001 	ldrh.w	r8, [r3, #1]
	tx_time = sys_le16_to_cpu(rp->max_tx_time);
    42ce:	f8b3 7003 	ldrh.w	r7, [r3, #3]
	net_buf_unref(rsp);
    42d2:	f004 f861 	bl	8398 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
    42d6:	2106      	movs	r1, #6
    42d8:	f242 0022 	movw	r0, #8226	; 0x2022
    42dc:	f7ff fcfe 	bl	3cdc <bt_hci_cmd_create>
	if (!buf) {
    42e0:	4606      	mov	r6, r0
    42e2:	b960      	cbnz	r0, 42fe <conn_auto_initiate+0x136>
		BT_ERR("Failed to create LE Set Data Length Command");
    42e4:	2301      	movs	r3, #1
    42e6:	f04f 0100 	mov.w	r1, #0
    42ea:	4a14      	ldr	r2, [pc, #80]	; (433c <conn_auto_initiate+0x174>)
    42ec:	f363 0107 	bfi	r1, r3, #0, #8
    42f0:	4b13      	ldr	r3, [pc, #76]	; (4340 <conn_auto_initiate+0x178>)
    42f2:	4816      	ldr	r0, [pc, #88]	; (434c <conn_auto_initiate+0x184>)
    42f4:	1a9b      	subs	r3, r3, r2
    42f6:	08db      	lsrs	r3, r3, #3
    42f8:	f363 118f 	bfi	r1, r3, #6, #10
    42fc:	e7d0      	b.n	42a0 <conn_auto_initiate+0xd8>
	cp = net_buf_add(buf, sizeof(*cp));
    42fe:	2106      	movs	r1, #6
    4300:	3008      	adds	r0, #8
    4302:	f008 fe5b 	bl	cfbc <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    4306:	8823      	ldrh	r3, [r4, #0]
	err = bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
    4308:	4631      	mov	r1, r6
	cp->handle = sys_cpu_to_le16(conn->handle);
    430a:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
    430c:	f8a0 8002 	strh.w	r8, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
    4310:	8087      	strh	r7, [r0, #4]
	err = bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
    4312:	f242 0022 	movw	r0, #8226	; 0x2022
    4316:	f7ff fea9 	bl	406c <bt_hci_cmd_send>
	if (err) {
    431a:	2800      	cmp	r0, #0
    431c:	d0c2      	beq.n	42a4 <conn_auto_initiate+0xdc>
		BT_ERR("Failed to send LE Set Data Length Command");
    431e:	2301      	movs	r3, #1
    4320:	f04f 0100 	mov.w	r1, #0
    4324:	4a05      	ldr	r2, [pc, #20]	; (433c <conn_auto_initiate+0x174>)
    4326:	f363 0107 	bfi	r1, r3, #0, #8
    432a:	4b05      	ldr	r3, [pc, #20]	; (4340 <conn_auto_initiate+0x178>)
    432c:	4808      	ldr	r0, [pc, #32]	; (4350 <conn_auto_initiate+0x188>)
    432e:	1a9b      	subs	r3, r3, r2
    4330:	08db      	lsrs	r3, r3, #3
    4332:	f363 118f 	bfi	r1, r3, #6, #10
    4336:	e7b3      	b.n	42a0 <conn_auto_initiate+0xd8>
    4338:	20004838 	.word	0x20004838
    433c:	0000e6dc 	.word	0x0000e6dc
    4340:	0000e6fc 	.word	0x0000e6fc
    4344:	0000fe6f 	.word	0x0000fe6f
    4348:	2000120c 	.word	0x2000120c
    434c:	0000fe8f 	.word	0x0000fe8f
    4350:	0000febb 	.word	0x0000febb

00004354 <le_phy_update_complete>:
{
    4354:	b538      	push	{r3, r4, r5, lr}
	u16_t handle = sys_le16_to_cpu(evt->handle);
    4356:	6883      	ldr	r3, [r0, #8]
    4358:	f8b3 5001 	ldrh.w	r5, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
    435c:	4628      	mov	r0, r5
    435e:	f001 fec5 	bl	60ec <bt_conn_lookup_handle>
	if (!conn) {
    4362:	4604      	mov	r4, r0
    4364:	b980      	cbnz	r0, 4388 <le_phy_update_complete+0x34>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    4366:	2301      	movs	r3, #1
    4368:	f04f 0200 	mov.w	r2, #0
    436c:	4912      	ldr	r1, [pc, #72]	; (43b8 <le_phy_update_complete+0x64>)
    436e:	f363 0207 	bfi	r2, r3, #0, #8
    4372:	4b12      	ldr	r3, [pc, #72]	; (43bc <le_phy_update_complete+0x68>)
    4374:	4812      	ldr	r0, [pc, #72]	; (43c0 <le_phy_update_complete+0x6c>)
    4376:	1a5b      	subs	r3, r3, r1
    4378:	08db      	lsrs	r3, r3, #3
    437a:	f363 128f 	bfi	r2, r3, #6, #10
    437e:	4629      	mov	r1, r5
}
    4380:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    4384:	f007 b909 	b.w	b59a <log_1>
	    !atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
    4388:	1d05      	adds	r5, r0, #4
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    438a:	f06f 0180 	mvn.w	r1, #128	; 0x80
    438e:	4628      	mov	r0, r5
    4390:	f007 feab 	bl	c0ea <atomic_and>
	if (!IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) ||
    4394:	0603      	lsls	r3, r0, #24
    4396:	d50a      	bpl.n	43ae <le_phy_update_complete+0x5a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    4398:	e8d5 3fef 	ldaex	r3, [r5]
    439c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    43a0:	e8c5 3fe2 	stlex	r2, r3, [r5]
    43a4:	2a00      	cmp	r2, #0
    43a6:	d1f7      	bne.n	4398 <le_phy_update_complete+0x44>
	conn_auto_initiate(conn);
    43a8:	4620      	mov	r0, r4
    43aa:	f7ff ff0d 	bl	41c8 <conn_auto_initiate>
	bt_conn_unref(conn);
    43ae:	4620      	mov	r0, r4
}
    43b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
    43b4:	f007 bfce 	b.w	c354 <bt_conn_unref>
    43b8:	0000e6dc 	.word	0x0000e6dc
    43bc:	0000e6fc 	.word	0x0000e6fc
    43c0:	000102fa 	.word	0x000102fa

000043c4 <le_remote_feat_complete>:
{
    43c4:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
    43c6:	6885      	ldr	r5, [r0, #8]
	u16_t handle = sys_le16_to_cpu(evt->handle);
    43c8:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    43cc:	4630      	mov	r0, r6
    43ce:	f001 fe8d 	bl	60ec <bt_conn_lookup_handle>
	if (!conn) {
    43d2:	4604      	mov	r4, r0
    43d4:	b980      	cbnz	r0, 43f8 <le_remote_feat_complete+0x34>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    43d6:	2301      	movs	r3, #1
    43d8:	f04f 0200 	mov.w	r2, #0
    43dc:	4912      	ldr	r1, [pc, #72]	; (4428 <le_remote_feat_complete+0x64>)
    43de:	f363 0207 	bfi	r2, r3, #0, #8
    43e2:	4b12      	ldr	r3, [pc, #72]	; (442c <le_remote_feat_complete+0x68>)
    43e4:	4812      	ldr	r0, [pc, #72]	; (4430 <le_remote_feat_complete+0x6c>)
    43e6:	1a5b      	subs	r3, r3, r1
    43e8:	08db      	lsrs	r3, r3, #3
    43ea:	4631      	mov	r1, r6
}
    43ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    43f0:	f363 128f 	bfi	r2, r3, #6, #10
    43f4:	f007 b8d1 	b.w	b59a <log_1>
	if (!evt->status) {
    43f8:	782b      	ldrb	r3, [r5, #0]
    43fa:	b923      	cbnz	r3, 4406 <le_remote_feat_complete+0x42>
		memcpy(conn->le.features, evt->features,
    43fc:	2208      	movs	r2, #8
    43fe:	1ce9      	adds	r1, r5, #3
    4400:	3094      	adds	r0, #148	; 0x94
    4402:	f007 fd4c 	bl	be9e <memcpy>
    4406:	1d23      	adds	r3, r4, #4
    4408:	e8d3 2fef 	ldaex	r2, [r3]
    440c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    4410:	e8c3 2fe1 	stlex	r1, r2, [r3]
    4414:	2900      	cmp	r1, #0
    4416:	d1f7      	bne.n	4408 <le_remote_feat_complete+0x44>
	conn_auto_initiate(conn);
    4418:	4620      	mov	r0, r4
    441a:	f7ff fed5 	bl	41c8 <conn_auto_initiate>
	bt_conn_unref(conn);
    441e:	4620      	mov	r0, r4
}
    4420:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
    4424:	f007 bf96 	b.w	c354 <bt_conn_unref>
    4428:	0000e6dc 	.word	0x0000e6dc
    442c:	0000e6fc 	.word	0x0000e6fc
    4430:	000102fa 	.word	0x000102fa

00004434 <le_conn_param_neg_reply>:
{
    4434:	b570      	push	{r4, r5, r6, lr}
    4436:	4606      	mov	r6, r0
    4438:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
    443a:	f242 0021 	movw	r0, #8225	; 0x2021
    443e:	2103      	movs	r1, #3
    4440:	f7ff fc4c 	bl	3cdc <bt_hci_cmd_create>
	if (!buf) {
    4444:	4604      	mov	r4, r0
    4446:	b978      	cbnz	r0, 4468 <le_conn_param_neg_reply+0x34>
}
    4448:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to allocate buffer");
    444c:	2301      	movs	r3, #1
    444e:	f04f 0100 	mov.w	r1, #0
    4452:	4a0c      	ldr	r2, [pc, #48]	; (4484 <le_conn_param_neg_reply+0x50>)
    4454:	f363 0107 	bfi	r1, r3, #0, #8
    4458:	4b0b      	ldr	r3, [pc, #44]	; (4488 <le_conn_param_neg_reply+0x54>)
    445a:	480c      	ldr	r0, [pc, #48]	; (448c <le_conn_param_neg_reply+0x58>)
    445c:	1a9b      	subs	r3, r3, r2
    445e:	08db      	lsrs	r3, r3, #3
    4460:	f363 118f 	bfi	r1, r3, #6, #10
    4464:	f007 b88c 	b.w	b580 <log_0>
	cp = net_buf_add(buf, sizeof(*cp));
    4468:	2103      	movs	r1, #3
    446a:	3008      	adds	r0, #8
    446c:	f008 fda6 	bl	cfbc <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
    4470:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
    4472:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    4474:	4621      	mov	r1, r4
}
    4476:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    447a:	f242 0021 	movw	r0, #8225	; 0x2021
    447e:	f7ff bdf5 	b.w	406c <bt_hci_cmd_send>
    4482:	bf00      	nop
    4484:	0000e6dc 	.word	0x0000e6dc
    4488:	0000e6fc 	.word	0x0000e6fc
    448c:	000102e0 	.word	0x000102e0

00004490 <le_conn_param_req>:
{
    4490:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
    4492:	6883      	ldr	r3, [r0, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    4494:	78d9      	ldrb	r1, [r3, #3]
    4496:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
    4498:	881e      	ldrh	r6, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    449a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    449e:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
    44a2:	7959      	ldrb	r1, [r3, #5]
    44a4:	791a      	ldrb	r2, [r3, #4]
	handle = sys_le16_to_cpu(evt->handle);
    44a6:	b2b4      	uxth	r4, r6
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
    44a8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    44ac:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
    44b0:	799a      	ldrb	r2, [r3, #6]
    44b2:	79d9      	ldrb	r1, [r3, #7]
	conn = bt_conn_lookup_handle(handle);
    44b4:	4620      	mov	r0, r4
	param.latency = sys_le16_to_cpu(evt->latency);
    44b6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    44ba:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
    44be:	7a1a      	ldrb	r2, [r3, #8]
    44c0:	7a5b      	ldrb	r3, [r3, #9]
    44c2:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    44c6:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
    44ca:	f001 fe0f 	bl	60ec <bt_conn_lookup_handle>
	if (!conn) {
    44ce:	4607      	mov	r7, r0
    44d0:	b9a0      	cbnz	r0, 44fc <le_conn_param_req+0x6c>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    44d2:	2301      	movs	r3, #1
    44d4:	f04f 0200 	mov.w	r2, #0
    44d8:	4920      	ldr	r1, [pc, #128]	; (455c <le_conn_param_req+0xcc>)
    44da:	f363 0207 	bfi	r2, r3, #0, #8
    44de:	4b20      	ldr	r3, [pc, #128]	; (4560 <le_conn_param_req+0xd0>)
    44e0:	4820      	ldr	r0, [pc, #128]	; (4564 <le_conn_param_req+0xd4>)
    44e2:	1a5b      	subs	r3, r3, r1
    44e4:	08db      	lsrs	r3, r3, #3
    44e6:	4621      	mov	r1, r4
    44e8:	f363 128f 	bfi	r2, r3, #6, #10
    44ec:	f007 f855 	bl	b59a <log_1>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
    44f0:	2102      	movs	r1, #2
    44f2:	4620      	mov	r0, r4
    44f4:	f7ff ff9e 	bl	4434 <le_conn_param_neg_reply>
}
    44f8:	b003      	add	sp, #12
    44fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!le_param_req(conn, &param)) {
    44fc:	4669      	mov	r1, sp
    44fe:	f001 fb6f 	bl	5be0 <le_param_req>
    4502:	b938      	cbnz	r0, 4514 <le_conn_param_req+0x84>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
    4504:	211e      	movs	r1, #30
    4506:	4620      	mov	r0, r4
    4508:	f7ff ff94 	bl	4434 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
    450c:	4638      	mov	r0, r7
    450e:	f007 ff21 	bl	c354 <bt_conn_unref>
    4512:	e7f1      	b.n	44f8 <le_conn_param_req+0x68>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
    4514:	210e      	movs	r1, #14
    4516:	f242 0020 	movw	r0, #8224	; 0x2020
    451a:	f7ff fbdf 	bl	3cdc <bt_hci_cmd_create>
	if (!buf) {
    451e:	4605      	mov	r5, r0
    4520:	2800      	cmp	r0, #0
    4522:	d0f3      	beq.n	450c <le_conn_param_req+0x7c>
	cp = net_buf_add(buf, sizeof(*cp));
    4524:	210e      	movs	r1, #14
    4526:	3008      	adds	r0, #8
    4528:	f008 fd48 	bl	cfbc <net_buf_simple_add>
    452c:	4604      	mov	r4, r0
	(void)memset(cp, 0, sizeof(*cp));
    452e:	220e      	movs	r2, #14
    4530:	2100      	movs	r1, #0
    4532:	f007 fcde 	bl	bef2 <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    4536:	f8bd 3000 	ldrh.w	r3, [sp]
	cp->handle = sys_cpu_to_le16(handle);
    453a:	8026      	strh	r6, [r4, #0]
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    453c:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    453e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    4542:	4629      	mov	r1, r5
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    4544:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
    4546:	f8bd 3004 	ldrh.w	r3, [sp, #4]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    454a:	f242 0020 	movw	r0, #8224	; 0x2020
	cp->latency = sys_cpu_to_le16(param->latency);
    454e:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    4550:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    4554:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    4556:	f7ff fd89 	bl	406c <bt_hci_cmd_send>
    455a:	e7d7      	b.n	450c <le_conn_param_req+0x7c>
    455c:	0000e6dc 	.word	0x0000e6dc
    4560:	0000e6fc 	.word	0x0000e6fc
    4564:	000102fa 	.word	0x000102fa

00004568 <hci_tx_thread>:
{
    4568:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		BT_ERR("Uncleared pending sent_cmd");
    456c:	4a52      	ldr	r2, [pc, #328]	; (46b8 <hci_tx_thread+0x150>)
    456e:	4b53      	ldr	r3, [pc, #332]	; (46bc <hci_tx_thread+0x154>)
    4570:	1a9b      	subs	r3, r3, r2
    4572:	f3c3 0bc9 	ubfx	fp, r3, #3, #10
		events[0].state = K_POLL_STATE_NOT_READY;
    4576:	4a52      	ldr	r2, [pc, #328]	; (46c0 <hci_tx_thread+0x158>)
    4578:	68d3      	ldr	r3, [r2, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    457a:	f102 0014 	add.w	r0, r2, #20
		events[0].state = K_POLL_STATE_NOT_READY;
    457e:	f36f 3310 	bfc	r3, #12, #5
    4582:	60d3      	str	r3, [r2, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    4584:	f001 fc7c 	bl	5e80 <bt_conn_prepare_events>
    4588:	1c47      	adds	r7, r0, #1
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&events, *(uintptr_t *)&num_events, *(uintptr_t *)&timeout, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
    458a:	f04f 32ff 	mov.w	r2, #4294967295
    458e:	4639      	mov	r1, r7
    4590:	484b      	ldr	r0, [pc, #300]	; (46c0 <hci_tx_thread+0x158>)
    4592:	f005 ffad 	bl	a4f0 <z_impl_k_poll>
		BT_ASSERT(err == 0);
    4596:	b160      	cbz	r0, 45b2 <hci_tx_thread+0x4a>
    4598:	f241 030f 	movw	r3, #4111	; 0x100f
    459c:	4a49      	ldr	r2, [pc, #292]	; (46c4 <hci_tx_thread+0x15c>)
    459e:	494a      	ldr	r1, [pc, #296]	; (46c8 <hci_tx_thread+0x160>)
    45a0:	484a      	ldr	r0, [pc, #296]	; (46cc <hci_tx_thread+0x164>)
    45a2:	f006 fb6f 	bl	ac84 <printk>
    45a6:	4040      	eors	r0, r0
    45a8:	f380 8811 	msr	BASEPRI, r0
    45ac:	f04f 0003 	mov.w	r0, #3
    45b0:	df02      	svc	2
{
    45b2:	4d43      	ldr	r5, [pc, #268]	; (46c0 <hci_tx_thread+0x158>)
	return z_impl_k_sem_take(sem, timeout);
    45b4:	4c46      	ldr	r4, [pc, #280]	; (46d0 <hci_tx_thread+0x168>)
	for (; count; ev++, count--) {
    45b6:	b917      	cbnz	r7, 45be <hci_tx_thread+0x56>
	z_impl_k_yield();
    45b8:	f005 fbea 	bl	9d90 <z_impl_k_yield>
    45bc:	e7db      	b.n	4576 <hci_tx_thread+0xe>
		switch (ev->state) {
    45be:	68e9      	ldr	r1, [r5, #12]
    45c0:	f3c1 3104 	ubfx	r1, r1, #12, #5
    45c4:	2901      	cmp	r1, #1
    45c6:	d960      	bls.n	468a <hci_tx_thread+0x122>
    45c8:	2904      	cmp	r1, #4
    45ca:	d168      	bne.n	469e <hci_tx_thread+0x136>
			if (ev->tag == BT_EVENT_CMD_TX) {
    45cc:	7b29      	ldrb	r1, [r5, #12]
    45ce:	2900      	cmp	r1, #0
    45d0:	d15e      	bne.n	4690 <hci_tx_thread+0x128>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    45d2:	4840      	ldr	r0, [pc, #256]	; (46d4 <hci_tx_thread+0x16c>)
    45d4:	f008 fcc4 	bl	cf60 <net_buf_get>
	BT_ASSERT(buf);
    45d8:	4606      	mov	r6, r0
    45da:	b960      	cbnz	r0, 45f6 <hci_tx_thread+0x8e>
    45dc:	f44f 637b 	mov.w	r3, #4016	; 0xfb0
    45e0:	4a38      	ldr	r2, [pc, #224]	; (46c4 <hci_tx_thread+0x15c>)
    45e2:	493d      	ldr	r1, [pc, #244]	; (46d8 <hci_tx_thread+0x170>)
    45e4:	4839      	ldr	r0, [pc, #228]	; (46cc <hci_tx_thread+0x164>)
    45e6:	f006 fb4d 	bl	ac84 <printk>
    45ea:	4040      	eors	r0, r0
    45ec:	f380 8811 	msr	BASEPRI, r0
    45f0:	f04f 0003 	mov.w	r0, #3
    45f4:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
    45f6:	f04f 31ff 	mov.w	r1, #4294967295
    45fa:	4838      	ldr	r0, [pc, #224]	; (46dc <hci_tx_thread+0x174>)
    45fc:	f005 fc6e 	bl	9edc <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
    4600:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
    4604:	b193      	cbz	r3, 462c <hci_tx_thread+0xc4>
		BT_ERR("Uncleared pending sent_cmd");
    4606:	f028 033f 	bic.w	r3, r8, #63	; 0x3f
    460a:	f043 0301 	orr.w	r3, r3, #1
    460e:	f363 0807 	bfi	r8, r3, #0, #8
    4612:	f36b 188f 	bfi	r8, fp, #6, #10
    4616:	4641      	mov	r1, r8
    4618:	4831      	ldr	r0, [pc, #196]	; (46e0 <hci_tx_thread+0x178>)
    461a:	f006 ffb1 	bl	b580 <log_0>
		net_buf_unref(bt_dev.sent_cmd);
    461e:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
    4622:	f003 feb9 	bl	8398 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    4626:	2300      	movs	r3, #0
    4628:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
	bt_dev.sent_cmd = net_buf_ref(buf);
    462c:	4630      	mov	r0, r6
    462e:	f008 fcc1 	bl	cfb4 <net_buf_ref>
    4632:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
	err = bt_send(buf);
    4636:	4630      	mov	r0, r6
    4638:	f7ff fd10 	bl	405c <bt_send>
	if (err) {
    463c:	4601      	mov	r1, r0
    463e:	b320      	cbz	r0, 468a <hci_tx_thread+0x122>
		BT_ERR("Unable to send to driver (err %d)", err);
    4640:	f029 033f 	bic.w	r3, r9, #63	; 0x3f
    4644:	f043 0301 	orr.w	r3, r3, #1
    4648:	f363 0907 	bfi	r9, r3, #0, #8
    464c:	f36b 198f 	bfi	r9, fp, #6, #10
    4650:	464a      	mov	r2, r9
    4652:	4824      	ldr	r0, [pc, #144]	; (46e4 <hci_tx_thread+0x17c>)
    4654:	f006 ffa1 	bl	b59a <log_1>
	z_impl_k_sem_give(sem);
    4658:	4820      	ldr	r0, [pc, #128]	; (46dc <hci_tx_thread+0x174>)
    465a:	f005 fc13 	bl	9e84 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED,
    465e:	4630      	mov	r0, r6
    4660:	f003 fe04 	bl	826c <net_buf_id>
    4664:	230c      	movs	r3, #12
    4666:	4a20      	ldr	r2, [pc, #128]	; (46e8 <hci_tx_thread+0x180>)
    4668:	211f      	movs	r1, #31
    466a:	fb03 2000 	mla	r0, r3, r0, r2
    466e:	2200      	movs	r2, #0
    4670:	8840      	ldrh	r0, [r0, #2]
    4672:	f7ff f839 	bl	36e8 <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
    4676:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
    467a:	f003 fe8d 	bl	8398 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    467e:	2300      	movs	r3, #0
		net_buf_unref(buf);
    4680:	4630      	mov	r0, r6
		bt_dev.sent_cmd = NULL;
    4682:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
		net_buf_unref(buf);
    4686:	f003 fe87 	bl	8398 <net_buf_unref>
	for (; count; ev++, count--) {
    468a:	3514      	adds	r5, #20
    468c:	3f01      	subs	r7, #1
    468e:	e792      	b.n	45b6 <hci_tx_thread+0x4e>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
    4690:	2901      	cmp	r1, #1
    4692:	d1fa      	bne.n	468a <hci_tx_thread+0x122>
					conn = CONTAINER_OF(ev->fifo,
    4694:	6928      	ldr	r0, [r5, #16]
					bt_conn_process_tx(conn);
    4696:	3834      	subs	r0, #52	; 0x34
    4698:	f001 fe98 	bl	63cc <bt_conn_process_tx>
    469c:	e7f5      	b.n	468a <hci_tx_thread+0x122>
			BT_WARN("Unexpected k_poll event state %u", ev->state);
    469e:	f02a 033f 	bic.w	r3, sl, #63	; 0x3f
    46a2:	f043 0302 	orr.w	r3, r3, #2
    46a6:	f363 0a07 	bfi	sl, r3, #0, #8
    46aa:	f36b 1a8f 	bfi	sl, fp, #6, #10
    46ae:	4652      	mov	r2, sl
    46b0:	480e      	ldr	r0, [pc, #56]	; (46ec <hci_tx_thread+0x184>)
    46b2:	f006 ff72 	bl	b59a <log_1>
    46b6:	e7e8      	b.n	468a <hci_tx_thread+0x122>
    46b8:	0000e6dc 	.word	0x0000e6dc
    46bc:	0000e6fc 	.word	0x0000e6fc
    46c0:	200049c0 	.word	0x200049c0
    46c4:	00010195 	.word	0x00010195
    46c8:	00010277 	.word	0x00010277
    46cc:	000101e2 	.word	0x000101e2
    46d0:	20004838 	.word	0x20004838
    46d4:	2000490c 	.word	0x2000490c
    46d8:	00010aff 	.word	0x00010aff
    46dc:	200048e0 	.word	0x200048e0
    46e0:	00010280 	.word	0x00010280
    46e4:	0000fcfc 	.word	0x0000fcfc
    46e8:	20000434 	.word	0x20000434
    46ec:	0001029b 	.word	0x0001029b

000046f0 <bt_recv>:
{
    46f0:	b510      	push	{r4, lr}
	return (enum bt_buf_type)(*(u8_t *)net_buf_user_data(buf));
    46f2:	7d01      	ldrb	r1, [r0, #20]
    46f4:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
    46f6:	2901      	cmp	r1, #1
    46f8:	d001      	beq.n	46fe <bt_recv+0xe>
    46fa:	2903      	cmp	r1, #3
    46fc:	d105      	bne.n	470a <bt_recv+0x1a>
		net_buf_put(&bt_dev.rx_queue, buf);
    46fe:	480d      	ldr	r0, [pc, #52]	; (4734 <bt_recv+0x44>)
    4700:	4621      	mov	r1, r4
    4702:	f008 fc4a 	bl	cf9a <net_buf_put>
		return 0;
    4706:	2000      	movs	r0, #0
}
    4708:	bd10      	pop	{r4, pc}
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
    470a:	2301      	movs	r3, #1
    470c:	f04f 0200 	mov.w	r2, #0
    4710:	4809      	ldr	r0, [pc, #36]	; (4738 <bt_recv+0x48>)
    4712:	f363 0207 	bfi	r2, r3, #0, #8
    4716:	4b09      	ldr	r3, [pc, #36]	; (473c <bt_recv+0x4c>)
    4718:	1a1b      	subs	r3, r3, r0
    471a:	08db      	lsrs	r3, r3, #3
    471c:	f363 128f 	bfi	r2, r3, #6, #10
    4720:	4807      	ldr	r0, [pc, #28]	; (4740 <bt_recv+0x50>)
    4722:	f006 ff3a 	bl	b59a <log_1>
		net_buf_unref(buf);
    4726:	4620      	mov	r0, r4
    4728:	f003 fe36 	bl	8398 <net_buf_unref>
		return -EINVAL;
    472c:	f06f 0015 	mvn.w	r0, #21
    4730:	e7ea      	b.n	4708 <bt_recv+0x18>
    4732:	bf00      	nop
    4734:	200048fc 	.word	0x200048fc
    4738:	0000e6dc 	.word	0x0000e6dc
    473c:	0000e6fc 	.word	0x0000e6fc
    4740:	0000fda5 	.word	0x0000fda5

00004744 <bt_recv_prio>:
{
    4744:	b538      	push	{r3, r4, r5, lr}
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    4746:	7d03      	ldrb	r3, [r0, #20]
{
    4748:	4604      	mov	r4, r0
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    474a:	2b01      	cmp	r3, #1
    474c:	d00c      	beq.n	4768 <bt_recv_prio+0x24>
    474e:	f241 430a 	movw	r3, #5130	; 0x140a
    4752:	4a20      	ldr	r2, [pc, #128]	; (47d4 <bt_recv_prio+0x90>)
    4754:	4920      	ldr	r1, [pc, #128]	; (47d8 <bt_recv_prio+0x94>)
    4756:	4821      	ldr	r0, [pc, #132]	; (47dc <bt_recv_prio+0x98>)
    4758:	f006 fa94 	bl	ac84 <printk>
    475c:	4040      	eors	r0, r0
    475e:	f380 8811 	msr	BASEPRI, r0
    4762:	f04f 0003 	mov.w	r0, #3
    4766:	df02      	svc	2
	BT_ASSERT(buf->len >= sizeof(*hdr));
    4768:	89a3      	ldrh	r3, [r4, #12]
    476a:	2b01      	cmp	r3, #1
    476c:	d80c      	bhi.n	4788 <bt_recv_prio+0x44>
    476e:	f241 430b 	movw	r3, #5131	; 0x140b
    4772:	4a18      	ldr	r2, [pc, #96]	; (47d4 <bt_recv_prio+0x90>)
    4774:	491a      	ldr	r1, [pc, #104]	; (47e0 <bt_recv_prio+0x9c>)
    4776:	4819      	ldr	r0, [pc, #100]	; (47dc <bt_recv_prio+0x98>)
    4778:	f006 fa84 	bl	ac84 <printk>
    477c:	4040      	eors	r0, r0
    477e:	f380 8811 	msr	BASEPRI, r0
    4782:	f04f 0003 	mov.w	r0, #3
    4786:	df02      	svc	2
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    4788:	2102      	movs	r1, #2
    478a:	f104 0008 	add.w	r0, r4, #8
    478e:	f008 fc45 	bl	d01c <net_buf_simple_pull_mem>
	BT_ASSERT(bt_hci_evt_is_prio(hdr->evt));
    4792:	7802      	ldrb	r2, [r0, #0]
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    4794:	4605      	mov	r5, r0
    4796:	2a1a      	cmp	r2, #26
    4798:	d804      	bhi.n	47a4 <bt_recv_prio+0x60>
    479a:	2301      	movs	r3, #1
    479c:	4093      	lsls	r3, r2
    479e:	4a11      	ldr	r2, [pc, #68]	; (47e4 <bt_recv_prio+0xa0>)
    47a0:	4213      	tst	r3, r2
    47a2:	d10c      	bne.n	47be <bt_recv_prio+0x7a>
	BT_ASSERT(bt_hci_evt_is_prio(hdr->evt));
    47a4:	f241 430e 	movw	r3, #5134	; 0x140e
    47a8:	4a0a      	ldr	r2, [pc, #40]	; (47d4 <bt_recv_prio+0x90>)
    47aa:	490f      	ldr	r1, [pc, #60]	; (47e8 <bt_recv_prio+0xa4>)
    47ac:	480b      	ldr	r0, [pc, #44]	; (47dc <bt_recv_prio+0x98>)
    47ae:	f006 fa69 	bl	ac84 <printk>
    47b2:	4040      	eors	r0, r0
    47b4:	f380 8811 	msr	BASEPRI, r0
    47b8:	f04f 0003 	mov.w	r0, #3
    47bc:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
    47be:	2304      	movs	r3, #4
    47c0:	4a0a      	ldr	r2, [pc, #40]	; (47ec <bt_recv_prio+0xa8>)
    47c2:	4621      	mov	r1, r4
    47c4:	7828      	ldrb	r0, [r5, #0]
    47c6:	f7ff f80f 	bl	37e8 <handle_event>
	net_buf_unref(buf);
    47ca:	4620      	mov	r0, r4
    47cc:	f003 fde4 	bl	8398 <net_buf_unref>
}
    47d0:	2000      	movs	r0, #0
    47d2:	bd38      	pop	{r3, r4, r5, pc}
    47d4:	00010195 	.word	0x00010195
    47d8:	0000fdb9 	.word	0x0000fdb9
    47dc:	000101e2 	.word	0x000101e2
    47e0:	000101c9 	.word	0x000101c9
    47e4:	0408c000 	.word	0x0408c000
    47e8:	00010246 	.word	0x00010246
    47ec:	0000eb3c 	.word	0x0000eb3c

000047f0 <bt_hci_driver_register>:
	if (bt_dev.drv) {
    47f0:	4a08      	ldr	r2, [pc, #32]	; (4814 <bt_hci_driver_register+0x24>)
    47f2:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    47f6:	b93b      	cbnz	r3, 4808 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
    47f8:	68c1      	ldr	r1, [r0, #12]
    47fa:	b141      	cbz	r1, 480e <bt_hci_driver_register+0x1e>
    47fc:	6901      	ldr	r1, [r0, #16]
    47fe:	b131      	cbz	r1, 480e <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
    4800:	f8c2 00e4 	str.w	r0, [r2, #228]	; 0xe4
	return 0;
    4804:	4618      	mov	r0, r3
    4806:	4770      	bx	lr
		return -EALREADY;
    4808:	f06f 0044 	mvn.w	r0, #68	; 0x44
    480c:	4770      	bx	lr
		return -EINVAL;
    480e:	f06f 0015 	mvn.w	r0, #21
}
    4812:	4770      	bx	lr
    4814:	20004838 	.word	0x20004838

00004818 <bt_finalize_init>:
{
    4818:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    481c:	4c39      	ldr	r4, [pc, #228]	; (4904 <bt_finalize_init+0xec>)
    481e:	b087      	sub	sp, #28
    4820:	f104 0370 	add.w	r3, r4, #112	; 0x70
    4824:	e8d3 2fef 	ldaex	r2, [r3]
    4828:	f042 0202 	orr.w	r2, r2, #2
    482c:	e8c3 2fe1 	stlex	r1, r2, [r3]
    4830:	2900      	cmp	r1, #0
    4832:	d1f7      	bne.n	4824 <bt_finalize_init+0xc>
	BT_INFO("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
    4834:	2303      	movs	r3, #3
    4836:	f04f 0700 	mov.w	r7, #0
    483a:	4d33      	ldr	r5, [pc, #204]	; (4908 <bt_finalize_init+0xf0>)
    483c:	f363 0707 	bfi	r7, r3, #0, #8
    4840:	4b32      	ldr	r3, [pc, #200]	; (490c <bt_finalize_init+0xf4>)
    4842:	4933      	ldr	r1, [pc, #204]	; (4910 <bt_finalize_init+0xf8>)
    4844:	1aed      	subs	r5, r5, r3
    4846:	4e33      	ldr	r6, [pc, #204]	; (4914 <bt_finalize_init+0xfc>)
    4848:	79e3      	ldrb	r3, [r4, #7]
    484a:	4620      	mov	r0, r4
    484c:	2b01      	cmp	r3, #1
    484e:	bf88      	it	hi
    4850:	460e      	movhi	r6, r1
    4852:	f7fe fe59 	bl	3508 <bt_addr_le_str_real>
    4856:	f7fc faab 	bl	db0 <log_strdup>
    485a:	f3c5 05c9 	ubfx	r5, r5, #3, #10
    485e:	f365 178f 	bfi	r7, r5, #6, #10
    4862:	463b      	mov	r3, r7
    4864:	4602      	mov	r2, r0
    4866:	4631      	mov	r1, r6
    4868:	482b      	ldr	r0, [pc, #172]	; (4918 <bt_finalize_init+0x100>)
    486a:	f006 feaa 	bl	b5c2 <log_2>
	for (i = 1; i < bt_dev.id_count; i++) {
    486e:	4627      	mov	r7, r4
    4870:	2601      	movs	r6, #1
		BT_INFO("Identity[%d]: %s",
    4872:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 4924 <bt_finalize_init+0x10c>
	for (i = 1; i < bt_dev.id_count; i++) {
    4876:	79e3      	ldrb	r3, [r4, #7]
    4878:	3707      	adds	r7, #7
    487a:	429e      	cmp	r6, r3
    487c:	db2c      	blt.n	48d8 <bt_finalize_init+0xc0>
	BT_INFO("HCI: version %s (0x%02x) revision 0x%04x, manufacturer 0x%04x",
    487e:	2303      	movs	r3, #3
    4880:	f04f 0600 	mov.w	r6, #0
    4884:	7c27      	ldrb	r7, [r4, #16]
    4886:	f363 0607 	bfi	r6, r3, #0, #8
    488a:	4638      	mov	r0, r7
    488c:	f7fe feb8 	bl	3600 <ver_str>
    4890:	8a63      	ldrh	r3, [r4, #18]
    4892:	f365 168f 	bfi	r6, r5, #6, #10
    4896:	9304      	str	r3, [sp, #16]
    4898:	8ae3      	ldrh	r3, [r4, #22]
    489a:	a902      	add	r1, sp, #8
    489c:	e9cd 0702 	strd	r0, r7, [sp, #8]
    48a0:	9305      	str	r3, [sp, #20]
    48a2:	2204      	movs	r2, #4
    48a4:	4633      	mov	r3, r6
    48a6:	481d      	ldr	r0, [pc, #116]	; (491c <bt_finalize_init+0x104>)
    48a8:	f006 febe 	bl	b628 <log_n>
	BT_INFO("LMP: version %s (0x%02x) subver 0x%04x",
    48ac:	f04f 0600 	mov.w	r6, #0
    48b0:	2303      	movs	r3, #3
    48b2:	f363 0607 	bfi	r6, r3, #0, #8
    48b6:	f365 168f 	bfi	r6, r5, #6, #10
    48ba:	7c65      	ldrb	r5, [r4, #17]
    48bc:	4628      	mov	r0, r5
    48be:	f7fe fe9f 	bl	3600 <ver_str>
    48c2:	f8ad 6000 	strh.w	r6, [sp]
    48c6:	4601      	mov	r1, r0
    48c8:	8aa3      	ldrh	r3, [r4, #20]
    48ca:	462a      	mov	r2, r5
    48cc:	4814      	ldr	r0, [pc, #80]	; (4920 <bt_finalize_init+0x108>)
    48ce:	f006 fe90 	bl	b5f2 <log_3>
}
    48d2:	b007      	add	sp, #28
    48d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		BT_INFO("Identity[%d]: %s",
    48d8:	f028 033f 	bic.w	r3, r8, #63	; 0x3f
    48dc:	f043 0303 	orr.w	r3, r3, #3
    48e0:	4638      	mov	r0, r7
    48e2:	f363 0807 	bfi	r8, r3, #0, #8
    48e6:	f7fe fe0f 	bl	3508 <bt_addr_le_str_real>
    48ea:	f7fc fa61 	bl	db0 <log_strdup>
    48ee:	f365 188f 	bfi	r8, r5, #6, #10
    48f2:	4602      	mov	r2, r0
    48f4:	4631      	mov	r1, r6
    48f6:	4643      	mov	r3, r8
    48f8:	4648      	mov	r0, r9
    48fa:	f006 fe62 	bl	b5c2 <log_2>
	for (i = 1; i < bt_dev.id_count; i++) {
    48fe:	3601      	adds	r6, #1
    4900:	e7b9      	b.n	4876 <bt_finalize_init+0x5e>
    4902:	bf00      	nop
    4904:	20004838 	.word	0x20004838
    4908:	0000e6fc 	.word	0x0000e6fc
    490c:	0000e6dc 	.word	0x0000e6dc
    4910:	0000f703 	.word	0x0000f703
    4914:	0000f155 	.word	0x0000f155
    4918:	0000fc77 	.word	0x0000fc77
    491c:	0000fc97 	.word	0x0000fc97
    4920:	0000fcd5 	.word	0x0000fcd5
    4924:	0000fc86 	.word	0x0000fc86

00004928 <bt_get_name>:
}
    4928:	4800      	ldr	r0, [pc, #0]	; (492c <bt_get_name+0x4>)
    492a:	4770      	bx	lr
    492c:	0000f1de 	.word	0x0000f1de

00004930 <bt_id_create>:
{
    4930:	b537      	push	{r0, r1, r2, r4, r5, lr}
    4932:	460c      	mov	r4, r1
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    4934:	4605      	mov	r5, r0
    4936:	b918      	cbnz	r0, 4940 <bt_id_create+0x10>
	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
    4938:	b35c      	cbz	r4, 4992 <bt_id_create+0x62>
		return -EINVAL;
    493a:	f06f 0415 	mvn.w	r4, #21
    493e:	e032      	b.n	49a6 <bt_id_create+0x76>
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    4940:	2300      	movs	r3, #0
    4942:	2207      	movs	r2, #7
    4944:	4669      	mov	r1, sp
    4946:	9300      	str	r3, [sp, #0]
    4948:	f8cd 3003 	str.w	r3, [sp, #3]
    494c:	f007 fa97 	bl	be7e <memcmp>
    4950:	2800      	cmp	r0, #0
    4952:	d0f1      	beq.n	4938 <bt_id_create+0x8>
		if (addr->type != BT_ADDR_LE_RANDOM ||
    4954:	782b      	ldrb	r3, [r5, #0]
    4956:	2b01      	cmp	r3, #1
    4958:	d104      	bne.n	4964 <bt_id_create+0x34>
    495a:	79ab      	ldrb	r3, [r5, #6]
    495c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    4960:	2bc0      	cmp	r3, #192	; 0xc0
    4962:	d00e      	beq.n	4982 <bt_id_create+0x52>
			BT_ERR("Only static random identity address supported");
    4964:	2301      	movs	r3, #1
    4966:	f04f 0100 	mov.w	r1, #0
    496a:	4a12      	ldr	r2, [pc, #72]	; (49b4 <bt_id_create+0x84>)
    496c:	f363 0107 	bfi	r1, r3, #0, #8
    4970:	4b11      	ldr	r3, [pc, #68]	; (49b8 <bt_id_create+0x88>)
    4972:	4812      	ldr	r0, [pc, #72]	; (49bc <bt_id_create+0x8c>)
    4974:	1a9b      	subs	r3, r3, r2
    4976:	08db      	lsrs	r3, r3, #3
    4978:	f363 118f 	bfi	r1, r3, #6, #10
    497c:	f006 fe00 	bl	b580 <log_0>
			return -EINVAL;
    4980:	e7db      	b.n	493a <bt_id_create+0xa>
		if (id_find(addr) >= 0) {
    4982:	4628      	mov	r0, r5
    4984:	f7fe ffa2 	bl	38cc <id_find>
    4988:	2800      	cmp	r0, #0
    498a:	dbd5      	blt.n	4938 <bt_id_create+0x8>
			return -EALREADY;
    498c:	f06f 0444 	mvn.w	r4, #68	; 0x44
    4990:	e009      	b.n	49a6 <bt_id_create+0x76>
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
    4992:	4b0b      	ldr	r3, [pc, #44]	; (49c0 <bt_id_create+0x90>)
    4994:	79dc      	ldrb	r4, [r3, #7]
    4996:	2c01      	cmp	r4, #1
    4998:	d008      	beq.n	49ac <bt_id_create+0x7c>
	new_id = bt_dev.id_count++;
    499a:	1c62      	adds	r2, r4, #1
	id_create(new_id, addr, irk);
    499c:	4629      	mov	r1, r5
    499e:	4620      	mov	r0, r4
	new_id = bt_dev.id_count++;
    49a0:	71da      	strb	r2, [r3, #7]
	id_create(new_id, addr, irk);
    49a2:	f7ff fb2f 	bl	4004 <id_create.isra.23>
}
    49a6:	4620      	mov	r0, r4
    49a8:	b003      	add	sp, #12
    49aa:	bd30      	pop	{r4, r5, pc}
		return -ENOMEM;
    49ac:	f06f 040b 	mvn.w	r4, #11
    49b0:	e7f9      	b.n	49a6 <bt_id_create+0x76>
    49b2:	bf00      	nop
    49b4:	0000e6dc 	.word	0x0000e6dc
    49b8:	0000e6fc 	.word	0x0000e6fc
    49bc:	0000fd1e 	.word	0x0000fd1e
    49c0:	20004838 	.word	0x20004838

000049c4 <bt_setup_public_id_addr>:
{
    49c4:	b570      	push	{r4, r5, r6, lr}
    49c6:	b088      	sub	sp, #32
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    49c8:	aa01      	add	r2, sp, #4
    49ca:	2100      	movs	r1, #0
    49cc:	f241 0009 	movw	r0, #4105	; 0x1009
    49d0:	f7ff f9ba 	bl	3d48 <bt_hci_cmd_send_sync>
	if (err) {
    49d4:	4e21      	ldr	r6, [pc, #132]	; (4a5c <bt_setup_public_id_addr+0x98>)
    49d6:	4604      	mov	r4, r0
    49d8:	b188      	cbz	r0, 49fe <bt_setup_public_id_addr+0x3a>
		BT_WARN("Failed to read public address");
    49da:	2302      	movs	r3, #2
    49dc:	f04f 0100 	mov.w	r1, #0
    49e0:	4a1f      	ldr	r2, [pc, #124]	; (4a60 <bt_setup_public_id_addr+0x9c>)
    49e2:	f363 0107 	bfi	r1, r3, #0, #8
    49e6:	4b1f      	ldr	r3, [pc, #124]	; (4a64 <bt_setup_public_id_addr+0xa0>)
    49e8:	481f      	ldr	r0, [pc, #124]	; (4a68 <bt_setup_public_id_addr+0xa4>)
    49ea:	1a9b      	subs	r3, r3, r2
    49ec:	08db      	lsrs	r3, r3, #3
    49ee:	f363 118f 	bfi	r1, r3, #6, #10
    49f2:	f006 fdc5 	bl	b580 <log_0>
	bt_dev.id_count = bt_read_public_addr(&addr);
    49f6:	2300      	movs	r3, #0
    49f8:	71f3      	strb	r3, [r6, #7]
}
    49fa:	b008      	add	sp, #32
    49fc:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
    49fe:	9b01      	ldr	r3, [sp, #4]
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    4a00:	9004      	str	r0, [sp, #16]
    4a02:	689d      	ldr	r5, [r3, #8]
	return memcmp(a, b, sizeof(*a));
    4a04:	2206      	movs	r2, #6
    4a06:	3501      	adds	r5, #1
    4a08:	f8ad 0014 	strh.w	r0, [sp, #20]
    4a0c:	a904      	add	r1, sp, #16
    4a0e:	4628      	mov	r0, r5
    4a10:	f007 fa35 	bl	be7e <memcmp>
    4a14:	b918      	cbnz	r0, 4a1e <bt_setup_public_id_addr+0x5a>
		net_buf_unref(rsp);
    4a16:	9801      	ldr	r0, [sp, #4]
    4a18:	f003 fcbe 	bl	8398 <net_buf_unref>
    4a1c:	e7eb      	b.n	49f6 <bt_setup_public_id_addr+0x32>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
    4a1e:	f04f 33ff 	mov.w	r3, #4294967295
    4a22:	2206      	movs	r2, #6
    4a24:	a902      	add	r1, sp, #8
    4a26:	4628      	mov	r0, r5
    4a28:	9302      	str	r3, [sp, #8]
    4a2a:	f8ad 300c 	strh.w	r3, [sp, #12]
    4a2e:	f007 fa26 	bl	be7e <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    4a32:	2800      	cmp	r0, #0
    4a34:	d0ef      	beq.n	4a16 <bt_setup_public_id_addr+0x52>
	memcpy(dst, src, sizeof(*dst));
    4a36:	4629      	mov	r1, r5
    4a38:	2206      	movs	r2, #6
    4a3a:	f10d 0019 	add.w	r0, sp, #25
    4a3e:	f007 fa2e 	bl	be9e <memcpy>
	net_buf_unref(rsp);
    4a42:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
    4a44:	f88d 4018 	strb.w	r4, [sp, #24]
	net_buf_unref(rsp);
    4a48:	f003 fca6 	bl	8398 <net_buf_unref>
	bt_dev.id_count = bt_read_public_addr(&addr);
    4a4c:	2301      	movs	r3, #1
	id_create(BT_ID_DEFAULT, &addr, irk);
    4a4e:	a906      	add	r1, sp, #24
    4a50:	4620      	mov	r0, r4
	bt_dev.id_count = bt_read_public_addr(&addr);
    4a52:	71f3      	strb	r3, [r6, #7]
	id_create(BT_ID_DEFAULT, &addr, irk);
    4a54:	f7ff fad6 	bl	4004 <id_create.isra.23>
    4a58:	e7cf      	b.n	49fa <bt_setup_public_id_addr+0x36>
    4a5a:	bf00      	nop
    4a5c:	20004838 	.word	0x20004838
    4a60:	0000e6dc 	.word	0x0000e6dc
    4a64:	0000e6fc 	.word	0x0000e6fc
    4a68:	0000fddc 	.word	0x0000fddc

00004a6c <bt_setup_random_id_addr>:
{
    4a6c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!bt_dev.id_count) {
    4a6e:	4c3b      	ldr	r4, [pc, #236]	; (4b5c <bt_setup_random_id_addr+0xf0>)
{
    4a70:	b089      	sub	sp, #36	; 0x24
	if (!bt_dev.id_count) {
    4a72:	79e7      	ldrb	r7, [r4, #7]
    4a74:	4625      	mov	r5, r4
    4a76:	b99f      	cbnz	r7, 4aa0 <bt_setup_random_id_addr+0x34>
	if (!(bt_dev.vs_commands[1] & BIT(0))) {
    4a78:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
    4a7c:	f013 0601 	ands.w	r6, r3, #1
    4a80:	d113      	bne.n	4aaa <bt_setup_random_id_addr+0x3e>
		BT_WARN("Read Static Addresses command not available");
    4a82:	2302      	movs	r3, #2
    4a84:	f04f 0100 	mov.w	r1, #0
    4a88:	4a35      	ldr	r2, [pc, #212]	; (4b60 <bt_setup_random_id_addr+0xf4>)
    4a8a:	f363 0107 	bfi	r1, r3, #0, #8
    4a8e:	4b35      	ldr	r3, [pc, #212]	; (4b64 <bt_setup_random_id_addr+0xf8>)
    4a90:	4835      	ldr	r0, [pc, #212]	; (4b68 <bt_setup_random_id_addr+0xfc>)
    4a92:	1a9b      	subs	r3, r3, r2
    4a94:	08db      	lsrs	r3, r3, #3
    4a96:	f363 118f 	bfi	r1, r3, #6, #10
    4a9a:	f006 fd71 	bl	b580 <log_0>
		bt_dev.id_count = bt_read_static_addr(addrs);
    4a9e:	71e6      	strb	r6, [r4, #7]
	return bt_id_create(NULL, NULL);
    4aa0:	2100      	movs	r1, #0
    4aa2:	4608      	mov	r0, r1
    4aa4:	f7ff ff44 	bl	4930 <bt_id_create>
    4aa8:	e04e      	b.n	4b48 <bt_setup_random_id_addr+0xdc>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
    4aaa:	466a      	mov	r2, sp
    4aac:	4639      	mov	r1, r7
    4aae:	f64f 4009 	movw	r0, #64521	; 0xfc09
    4ab2:	f7ff f949 	bl	3d48 <bt_hci_cmd_send_sync>
	if (err) {
    4ab6:	b178      	cbz	r0, 4ad8 <bt_setup_random_id_addr+0x6c>
		BT_WARN("Failed to read static addresses");
    4ab8:	2302      	movs	r3, #2
    4aba:	f04f 0100 	mov.w	r1, #0
    4abe:	4a28      	ldr	r2, [pc, #160]	; (4b60 <bt_setup_random_id_addr+0xf4>)
    4ac0:	f363 0107 	bfi	r1, r3, #0, #8
    4ac4:	4b27      	ldr	r3, [pc, #156]	; (4b64 <bt_setup_random_id_addr+0xf8>)
    4ac6:	4829      	ldr	r0, [pc, #164]	; (4b6c <bt_setup_random_id_addr+0x100>)
    4ac8:	1a9b      	subs	r3, r3, r2
    4aca:	08db      	lsrs	r3, r3, #3
    4acc:	f363 118f 	bfi	r1, r3, #6, #10
    4ad0:	f006 fd56 	bl	b580 <log_0>
		bt_dev.id_count = bt_read_static_addr(addrs);
    4ad4:	71e7      	strb	r7, [r4, #7]
		if (bt_dev.id_count) {
    4ad6:	e7e3      	b.n	4aa0 <bt_setup_random_id_addr+0x34>
	rp = (void *)rsp->data;
    4ad8:	9b00      	ldr	r3, [sp, #0]
    4ada:	689c      	ldr	r4, [r3, #8]
	cnt = MIN(rp->num_addrs, CONFIG_BT_ID_MAX);
    4adc:	7866      	ldrb	r6, [r4, #1]
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
    4ade:	3402      	adds	r4, #2
	cnt = MIN(rp->num_addrs, CONFIG_BT_ID_MAX);
    4ae0:	1c37      	adds	r7, r6, #0
    4ae2:	bf18      	it	ne
    4ae4:	2701      	movne	r7, #1
	for (i = 0; i < cnt; i++) {
    4ae6:	4287      	cmp	r7, r0
    4ae8:	dc30      	bgt.n	4b4c <bt_setup_random_id_addr+0xe0>
	net_buf_unref(rsp);
    4aea:	9800      	ldr	r0, [sp, #0]
    4aec:	f003 fc54 	bl	8398 <net_buf_unref>
	if (!cnt) {
    4af0:	b96e      	cbnz	r6, 4b0e <bt_setup_random_id_addr+0xa2>
		BT_WARN("No static addresses stored in controller");
    4af2:	2302      	movs	r3, #2
    4af4:	f04f 0100 	mov.w	r1, #0
    4af8:	4a19      	ldr	r2, [pc, #100]	; (4b60 <bt_setup_random_id_addr+0xf4>)
    4afa:	f363 0107 	bfi	r1, r3, #0, #8
    4afe:	4b19      	ldr	r3, [pc, #100]	; (4b64 <bt_setup_random_id_addr+0xf8>)
    4b00:	481b      	ldr	r0, [pc, #108]	; (4b70 <bt_setup_random_id_addr+0x104>)
    4b02:	1a9b      	subs	r3, r3, r2
    4b04:	08db      	lsrs	r3, r3, #3
    4b06:	f363 118f 	bfi	r1, r3, #6, #10
    4b0a:	f006 fd39 	bl	b580 <log_0>
		bt_dev.id_count = bt_read_static_addr(addrs);
    4b0e:	71ef      	strb	r7, [r5, #7]
		if (bt_dev.id_count) {
    4b10:	2e00      	cmp	r6, #0
    4b12:	d0c5      	beq.n	4aa0 <bt_setup_random_id_addr+0x34>
    4b14:	2400      	movs	r4, #0
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
    4b16:	2716      	movs	r7, #22
    4b18:	b2e6      	uxtb	r6, r4
    4b1a:	ab02      	add	r3, sp, #8
    4b1c:	2206      	movs	r2, #6
    4b1e:	fb07 3106 	mla	r1, r7, r6, r3
    4b22:	f10d 0001 	add.w	r0, sp, #1
    4b26:	f007 f9ba 	bl	be9e <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
    4b2a:	2301      	movs	r3, #1
				id_create(i, &addr, irk);
    4b2c:	4669      	mov	r1, sp
    4b2e:	4630      	mov	r0, r6
				addr.type = BT_ADDR_LE_RANDOM;
    4b30:	f88d 3000 	strb.w	r3, [sp]
				id_create(i, &addr, irk);
    4b34:	3401      	adds	r4, #1
    4b36:	f7ff fa65 	bl	4004 <id_create.isra.23>
			for (u8_t i = 0; i < bt_dev.id_count; i++) {
    4b3a:	79ea      	ldrb	r2, [r5, #7]
    4b3c:	b2e3      	uxtb	r3, r4
    4b3e:	429a      	cmp	r2, r3
    4b40:	d8ea      	bhi.n	4b18 <bt_setup_random_id_addr+0xac>
			return set_random_address(&bt_dev.id_addr[0].a);
    4b42:	480c      	ldr	r0, [pc, #48]	; (4b74 <bt_setup_random_id_addr+0x108>)
    4b44:	f7ff f946 	bl	3dd4 <set_random_address>
}
    4b48:	b009      	add	sp, #36	; 0x24
    4b4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
    4b4c:	2216      	movs	r2, #22
    4b4e:	4621      	mov	r1, r4
    4b50:	a802      	add	r0, sp, #8
    4b52:	f007 f9a4 	bl	be9e <memcpy>
	for (i = 0; i < cnt; i++) {
    4b56:	2001      	movs	r0, #1
    4b58:	e7c5      	b.n	4ae6 <bt_setup_random_id_addr+0x7a>
    4b5a:	bf00      	nop
    4b5c:	20004838 	.word	0x20004838
    4b60:	0000e6dc 	.word	0x0000e6dc
    4b64:	0000e6fc 	.word	0x0000e6fc
    4b68:	0000fdfa 	.word	0x0000fdfa
    4b6c:	0000fe26 	.word	0x0000fe26
    4b70:	0000fe46 	.word	0x0000fe46
    4b74:	20004839 	.word	0x20004839

00004b78 <hci_init>:
{
    4b78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    4b7c:	4d68      	ldr	r5, [pc, #416]	; (4d20 <hci_init+0x1a8>)
{
    4b7e:	b086      	sub	sp, #24
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    4b80:	f8d5 30e4 	ldr.w	r3, [r5, #228]	; 0xe4
    4b84:	6899      	ldr	r1, [r3, #8]
    4b86:	f011 0101 	ands.w	r1, r1, #1
    4b8a:	d11b      	bne.n	4bc4 <hci_init+0x4c>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    4b8c:	aa01      	add	r2, sp, #4
    4b8e:	f640 4003 	movw	r0, #3075	; 0xc03
    4b92:	f7ff f8d9 	bl	3d48 <bt_hci_cmd_send_sync>
		if (err) {
    4b96:	4604      	mov	r4, r0
    4b98:	2800      	cmp	r0, #0
    4b9a:	f040 80bc 	bne.w	4d16 <hci_init+0x19e>
		hci_reset_complete(rsp);
    4b9e:	9b01      	ldr	r3, [sp, #4]
	u8_t status = buf->data[0];
    4ba0:	689b      	ldr	r3, [r3, #8]
	if (status) {
    4ba2:	781b      	ldrb	r3, [r3, #0]
    4ba4:	b95b      	cbnz	r3, 4bbe <hci_init+0x46>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    4ba6:	f105 0370 	add.w	r3, r5, #112	; 0x70
    4baa:	e8d3 2faf 	lda	r2, [r3]
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
    4bae:	f002 0205 	and.w	r2, r2, #5
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    4bb2:	e8d3 1fef 	ldaex	r1, [r3]
    4bb6:	e8c3 2fe0 	stlex	r0, r2, [r3]
    4bba:	2800      	cmp	r0, #0
    4bbc:	d1f9      	bne.n	4bb2 <hci_init+0x3a>
		net_buf_unref(rsp);
    4bbe:	9801      	ldr	r0, [sp, #4]
    4bc0:	f003 fbea 	bl	8398 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    4bc4:	aa01      	add	r2, sp, #4
    4bc6:	2100      	movs	r1, #0
    4bc8:	f241 0003 	movw	r0, #4099	; 0x1003
    4bcc:	f7ff f8bc 	bl	3d48 <bt_hci_cmd_send_sync>
	if (err) {
    4bd0:	4604      	mov	r4, r0
    4bd2:	2800      	cmp	r0, #0
    4bd4:	f040 809f 	bne.w	4d16 <hci_init+0x19e>
	read_local_features_complete(rsp);
    4bd8:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    4bda:	2208      	movs	r2, #8
    4bdc:	6899      	ldr	r1, [r3, #8]
    4bde:	4851      	ldr	r0, [pc, #324]	; (4d24 <hci_init+0x1ac>)
    4be0:	3101      	adds	r1, #1
    4be2:	f007 f95c 	bl	be9e <memcpy>
	net_buf_unref(rsp);
    4be6:	9801      	ldr	r0, [sp, #4]
    4be8:	f003 fbd6 	bl	8398 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    4bec:	4621      	mov	r1, r4
    4bee:	aa01      	add	r2, sp, #4
    4bf0:	f241 0001 	movw	r0, #4097	; 0x1001
    4bf4:	f7ff f8a8 	bl	3d48 <bt_hci_cmd_send_sync>
	if (err) {
    4bf8:	4604      	mov	r4, r0
    4bfa:	2800      	cmp	r0, #0
    4bfc:	f040 808b 	bne.w	4d16 <hci_init+0x19e>
	read_local_ver_complete(rsp);
    4c00:	9801      	ldr	r0, [sp, #4]
    4c02:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
    4c04:	785a      	ldrb	r2, [r3, #1]
    4c06:	742a      	strb	r2, [r5, #16]
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    4c08:	78d9      	ldrb	r1, [r3, #3]
    4c0a:	789a      	ldrb	r2, [r3, #2]
    4c0c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    4c10:	826a      	strh	r2, [r5, #18]
	bt_dev.lmp_version = rp->lmp_version;
    4c12:	791a      	ldrb	r2, [r3, #4]
    4c14:	746a      	strb	r2, [r5, #17]
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    4c16:	7a19      	ldrb	r1, [r3, #8]
    4c18:	79da      	ldrb	r2, [r3, #7]
    4c1a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    4c1e:	82aa      	strh	r2, [r5, #20]
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    4c20:	795a      	ldrb	r2, [r3, #5]
    4c22:	799b      	ldrb	r3, [r3, #6]
    4c24:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    4c28:	82eb      	strh	r3, [r5, #22]
	net_buf_unref(rsp);
    4c2a:	f003 fbb5 	bl	8398 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    4c2e:	4621      	mov	r1, r4
    4c30:	aa01      	add	r2, sp, #4
    4c32:	f241 0002 	movw	r0, #4098	; 0x1002
    4c36:	f7ff f887 	bl	3d48 <bt_hci_cmd_send_sync>
	if (err) {
    4c3a:	4604      	mov	r4, r0
    4c3c:	2800      	cmp	r0, #0
    4c3e:	d16a      	bne.n	4d16 <hci_init+0x19e>
	read_supported_commands_complete(rsp);
    4c40:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.supported_commands, rp->commands,
    4c42:	2240      	movs	r2, #64	; 0x40
    4c44:	6899      	ldr	r1, [r3, #8]
    4c46:	4838      	ldr	r0, [pc, #224]	; (4d28 <hci_init+0x1b0>)
    4c48:	3101      	adds	r1, #1
    4c4a:	f007 f928 	bl	be9e <memcpy>
	net_buf_unref(rsp);
    4c4e:	9801      	ldr	r0, [sp, #4]
    4c50:	f003 fba2 	bl	8398 <net_buf_unref>
		err = prng_init();
    4c54:	f000 fe62 	bl	591c <prng_init>
		if (err) {
    4c58:	4604      	mov	r4, r0
    4c5a:	2800      	cmp	r0, #0
    4c5c:	d15b      	bne.n	4d16 <hci_init+0x19e>
	if (!BT_CMD_TEST(bt_dev.supported_commands, 10, 5)) {
    4c5e:	f895 302a 	ldrb.w	r3, [r5, #42]	; 0x2a
    4c62:	069e      	lsls	r6, r3, #26
    4c64:	d421      	bmi.n	4caa <hci_init+0x132>
		BT_WARN("Controller to host flow control not supported");
    4c66:	2302      	movs	r3, #2
    4c68:	f04f 0100 	mov.w	r1, #0
    4c6c:	4a2f      	ldr	r2, [pc, #188]	; (4d2c <hci_init+0x1b4>)
    4c6e:	f363 0107 	bfi	r1, r3, #0, #8
    4c72:	4b2f      	ldr	r3, [pc, #188]	; (4d30 <hci_init+0x1b8>)
    4c74:	482f      	ldr	r0, [pc, #188]	; (4d34 <hci_init+0x1bc>)
    4c76:	1a9b      	subs	r3, r3, r2
    4c78:	08db      	lsrs	r3, r3, #3
    4c7a:	f363 118f 	bfi	r1, r3, #6, #10
    4c7e:	f006 fc7f 	bl	b580 <log_0>
	if (!BT_FEAT_LE(bt_dev.features)) {
    4c82:	7f2b      	ldrb	r3, [r5, #28]
    4c84:	065c      	lsls	r4, r3, #25
    4c86:	d459      	bmi.n	4d3c <hci_init+0x1c4>
		BT_ERR("Non-LE capable controller detected!");
    4c88:	2301      	movs	r3, #1
    4c8a:	f04f 0100 	mov.w	r1, #0
    4c8e:	4a27      	ldr	r2, [pc, #156]	; (4d2c <hci_init+0x1b4>)
    4c90:	f363 0107 	bfi	r1, r3, #0, #8
    4c94:	4b26      	ldr	r3, [pc, #152]	; (4d30 <hci_init+0x1b8>)
    4c96:	4828      	ldr	r0, [pc, #160]	; (4d38 <hci_init+0x1c0>)
    4c98:	1a9b      	subs	r3, r3, r2
    4c9a:	08db      	lsrs	r3, r3, #3
    4c9c:	f363 118f 	bfi	r1, r3, #6, #10
    4ca0:	f006 fc6e 	bl	b580 <log_0>
		return -ENODEV;
    4ca4:	f06f 0412 	mvn.w	r4, #18
    4ca8:	e035      	b.n	4d16 <hci_init+0x19e>
	buf = bt_hci_cmd_create(BT_HCI_OP_HOST_BUFFER_SIZE,
    4caa:	2107      	movs	r1, #7
    4cac:	f640 4033 	movw	r0, #3123	; 0xc33
    4cb0:	f7ff f814 	bl	3cdc <bt_hci_cmd_create>
	if (!buf) {
    4cb4:	4607      	mov	r7, r0
    4cb6:	b910      	cbnz	r0, 4cbe <hci_init+0x146>
		return -ENOBUFS;
    4cb8:	f06f 0436 	mvn.w	r4, #54	; 0x36
    4cbc:	e02b      	b.n	4d16 <hci_init+0x19e>
	hbs = net_buf_add(buf, sizeof(*hbs));
    4cbe:	2107      	movs	r1, #7
    4cc0:	3008      	adds	r0, #8
    4cc2:	f008 f97b 	bl	cfbc <net_buf_simple_add>
	(void)memset(hbs, 0, sizeof(*hbs));
    4cc6:	4621      	mov	r1, r4
    4cc8:	2207      	movs	r2, #7
	hbs = net_buf_add(buf, sizeof(*hbs));
    4cca:	4606      	mov	r6, r0
	(void)memset(hbs, 0, sizeof(*hbs));
    4ccc:	f007 f911 	bl	bef2 <memset>
	hbs->acl_mtu = sys_cpu_to_le16(CONFIG_BT_L2CAP_RX_MTU +
    4cd0:	231b      	movs	r3, #27
    4cd2:	7033      	strb	r3, [r6, #0]
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_ACL_RX_COUNT);
    4cd4:	2306      	movs	r3, #6
	hbs->acl_mtu = sys_cpu_to_le16(CONFIG_BT_L2CAP_RX_MTU +
    4cd6:	7074      	strb	r4, [r6, #1]
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_ACL_RX_COUNT);
    4cd8:	7134      	strb	r4, [r6, #4]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_HOST_BUFFER_SIZE, buf, NULL);
    4cda:	4622      	mov	r2, r4
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_ACL_RX_COUNT);
    4cdc:	70f3      	strb	r3, [r6, #3]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_HOST_BUFFER_SIZE, buf, NULL);
    4cde:	4639      	mov	r1, r7
    4ce0:	f640 4033 	movw	r0, #3123	; 0xc33
    4ce4:	f7ff f830 	bl	3d48 <bt_hci_cmd_send_sync>
	if (err) {
    4ce8:	4604      	mov	r4, r0
    4cea:	b9a0      	cbnz	r0, 4d16 <hci_init+0x19e>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_CTL_TO_HOST_FLOW, 1);
    4cec:	2101      	movs	r1, #1
    4cee:	f640 4031 	movw	r0, #3121	; 0xc31
    4cf2:	f7fe fff3 	bl	3cdc <bt_hci_cmd_create>
	if (!buf) {
    4cf6:	4606      	mov	r6, r0
    4cf8:	2800      	cmp	r0, #0
    4cfa:	d0dd      	beq.n	4cb8 <hci_init+0x140>
	net_buf_add_u8(buf, BT_HCI_CTL_TO_HOST_FLOW_ENABLE);
    4cfc:	2101      	movs	r1, #1
    4cfe:	3008      	adds	r0, #8
    4d00:	f008 f96b 	bl	cfda <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_CTL_TO_HOST_FLOW, buf, NULL);
    4d04:	4622      	mov	r2, r4
    4d06:	4631      	mov	r1, r6
    4d08:	f640 4031 	movw	r0, #3121	; 0xc31
    4d0c:	f7ff f81c 	bl	3d48 <bt_hci_cmd_send_sync>
	if (err) {
    4d10:	4604      	mov	r4, r0
    4d12:	2800      	cmp	r0, #0
    4d14:	d0b5      	beq.n	4c82 <hci_init+0x10a>
}
    4d16:	4620      	mov	r0, r4
    4d18:	b006      	add	sp, #24
    4d1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4d1e:	bf00      	nop
    4d20:	20004838 	.word	0x20004838
    4d24:	20004850 	.word	0x20004850
    4d28:	20004858 	.word	0x20004858
    4d2c:	0000e6dc 	.word	0x0000e6dc
    4d30:	0000e6fc 	.word	0x0000e6fc
    4d34:	0001001d 	.word	0x0001001d
    4d38:	0001004b 	.word	0x0001004b
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    4d3c:	aa01      	add	r2, sp, #4
    4d3e:	2100      	movs	r1, #0
    4d40:	f242 0003 	movw	r0, #8195	; 0x2003
    4d44:	f7ff f800 	bl	3d48 <bt_hci_cmd_send_sync>
	if (err) {
    4d48:	4604      	mov	r4, r0
    4d4a:	2800      	cmp	r0, #0
    4d4c:	d1e3      	bne.n	4d16 <hci_init+0x19e>
	read_le_features_complete(rsp);
    4d4e:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    4d50:	2208      	movs	r2, #8
    4d52:	6899      	ldr	r1, [r3, #8]
    4d54:	48c7      	ldr	r0, [pc, #796]	; (5074 <hci_init+0x4fc>)
    4d56:	3101      	adds	r1, #1
    4d58:	f007 f8a1 	bl	be9e <memcpy>
	net_buf_unref(rsp);
    4d5c:	9801      	ldr	r0, [sp, #4]
    4d5e:	f003 fb1b 	bl	8398 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
    4d62:	4621      	mov	r1, r4
    4d64:	aa01      	add	r2, sp, #4
    4d66:	f242 0002 	movw	r0, #8194	; 0x2002
    4d6a:	f7fe ffed 	bl	3d48 <bt_hci_cmd_send_sync>
	if (err) {
    4d6e:	4604      	mov	r4, r0
    4d70:	2800      	cmp	r0, #0
    4d72:	d1d0      	bne.n	4d16 <hci_init+0x19e>
	le_read_buffer_size_complete(rsp);
    4d74:	9b01      	ldr	r3, [sp, #4]
    4d76:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.mtu = sys_le16_to_cpu(rp->le_max_len);
    4d78:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    4d7c:	b291      	uxth	r1, r2
    4d7e:	f8a5 2088 	strh.w	r2, [r5, #136]	; 0x88
	if (!bt_dev.le.mtu) {
    4d82:	b121      	cbz	r1, 4d8e <hci_init+0x216>
	k_sem_init(&bt_dev.le.pkts, rp->le_max_num, rp->le_max_num);
    4d84:	78da      	ldrb	r2, [r3, #3]
	return z_impl_k_sem_init(sem, initial_count, limit);
    4d86:	48bc      	ldr	r0, [pc, #752]	; (5078 <hci_init+0x500>)
    4d88:	4611      	mov	r1, r2
    4d8a:	f009 f8e9 	bl	df60 <z_impl_k_sem_init>
	net_buf_unref(rsp);
    4d8e:	9801      	ldr	r0, [sp, #4]
    4d90:	f003 fb02 	bl	8398 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    4d94:	7f2c      	ldrb	r4, [r5, #28]
    4d96:	f014 0420 	ands.w	r4, r4, #32
    4d9a:	f000 80c6 	beq.w	4f2a <hci_init+0x3b2>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    4d9e:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
    4da2:	0718      	lsls	r0, r3, #28
    4da4:	d511      	bpl.n	4dca <hci_init+0x252>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    4da6:	aa01      	add	r2, sp, #4
    4da8:	2100      	movs	r1, #0
    4daa:	f242 001c 	movw	r0, #8220	; 0x201c
    4dae:	f7fe ffcb 	bl	3d48 <bt_hci_cmd_send_sync>
		if (err) {
    4db2:	4604      	mov	r4, r0
    4db4:	2800      	cmp	r0, #0
    4db6:	d1ae      	bne.n	4d16 <hci_init+0x19e>
		le_read_supp_states_complete(rsp);
    4db8:	9801      	ldr	r0, [sp, #4]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline u64_t sys_get_le64(const u8_t src[8])
{
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    4dba:	6883      	ldr	r3, [r0, #8]
    4dbc:	f853 2f01 	ldr.w	r2, [r3, #1]!
    4dc0:	685b      	ldr	r3, [r3, #4]
	bt_dev.le.states = sys_get_le64(rp->le_states);
    4dc2:	e9c5 2320 	strd	r2, r3, [r5, #128]	; 0x80
		net_buf_unref(rsp);
    4dc6:	f003 fae7 	bl	8398 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
    4dca:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
    4dce:	0699      	lsls	r1, r3, #26
    4dd0:	f100 80c6 	bmi.w	4f60 <hci_init+0x3e8>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    4dd4:	2108      	movs	r1, #8
    4dd6:	f242 0001 	movw	r0, #8193	; 0x2001
    4dda:	f7fe ff7f 	bl	3cdc <bt_hci_cmd_create>
	if (!buf) {
    4dde:	4604      	mov	r4, r0
    4de0:	2800      	cmp	r0, #0
    4de2:	f43f af69 	beq.w	4cb8 <hci_init+0x140>
	cp_mask = net_buf_add(buf, sizeof(*cp_mask));
    4de6:	2108      	movs	r1, #8
    4de8:	4408      	add	r0, r1
    4dea:	f008 f8e7 	bl	cfbc <net_buf_simple_add>
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
    4dee:	f895 2078 	ldrb.w	r2, [r5, #120]	; 0x78
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    4df2:	4621      	mov	r1, r4
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
    4df4:	f012 0f02 	tst.w	r2, #2
    4df8:	bf14      	ite	ne
    4dfa:	232f      	movne	r3, #47	; 0x2f
    4dfc:	230f      	moveq	r3, #15
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
    4dfe:	0692      	lsls	r2, r2, #26
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
    4e00:	f895 2079 	ldrb.w	r2, [r5, #121]	; 0x79
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
    4e04:	bf48      	it	mi
    4e06:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
    4e0a:	f012 0f09 	tst.w	r2, #9
	dst[0] = val;
    4e0e:	f04f 0200 	mov.w	r2, #0
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
    4e12:	bf18      	it	ne
    4e14:	f443 6300 	orrne.w	r3, r3, #2048	; 0x800
    4e18:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
    4e1a:	f3c3 2307 	ubfx	r3, r3, #8, #8
    4e1e:	7043      	strb	r3, [r0, #1]
	dst[0] = val;
    4e20:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
    4e22:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
    4e24:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    4e26:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    4e28:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    4e2a:	71c2      	strb	r2, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    4e2c:	f242 0001 	movw	r0, #8193	; 0x2001
    4e30:	f7fe ff8a 	bl	3d48 <bt_hci_cmd_send_sync>
	if (err) {
    4e34:	4604      	mov	r4, r0
    4e36:	2800      	cmp	r0, #0
    4e38:	f47f af6d 	bne.w	4d16 <hci_init+0x19e>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    4e3c:	7f2b      	ldrb	r3, [r5, #28]
    4e3e:	069b      	lsls	r3, r3, #26
    4e40:	d41e      	bmi.n	4e80 <hci_init+0x308>
	if (bt_dev.le.mtu) {
    4e42:	f8b5 1088 	ldrh.w	r1, [r5, #136]	; 0x88
    4e46:	b9d9      	cbnz	r1, 4e80 <hci_init+0x308>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
    4e48:	aa01      	add	r2, sp, #4
    4e4a:	f241 0005 	movw	r0, #4101	; 0x1005
    4e4e:	f7fe ff7b 	bl	3d48 <bt_hci_cmd_send_sync>
	if (err) {
    4e52:	4604      	mov	r4, r0
    4e54:	2800      	cmp	r0, #0
    4e56:	f47f af5e 	bne.w	4d16 <hci_init+0x19e>
	if (bt_dev.le.mtu) {
    4e5a:	f8b5 3088 	ldrh.w	r3, [r5, #136]	; 0x88
    4e5e:	b963      	cbnz	r3, 4e7a <hci_init+0x302>
	read_buffer_size_complete(rsp);
    4e60:	9b01      	ldr	r3, [sp, #4]
    4e62:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.mtu = sys_le16_to_cpu(rp->acl_max_len);
    4e64:	785a      	ldrb	r2, [r3, #1]
    4e66:	7899      	ldrb	r1, [r3, #2]
    4e68:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    4e6c:	f8a5 2088 	strh.w	r2, [r5, #136]	; 0x88
	k_sem_init(&bt_dev.le.pkts, pkts, pkts);
    4e70:	889a      	ldrh	r2, [r3, #4]
    4e72:	4881      	ldr	r0, [pc, #516]	; (5078 <hci_init+0x500>)
    4e74:	4611      	mov	r1, r2
    4e76:	f009 f873 	bl	df60 <z_impl_k_sem_init>
	net_buf_unref(rsp);
    4e7a:	9801      	ldr	r0, [sp, #4]
    4e7c:	f003 fa8c 	bl	8398 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    4e80:	2108      	movs	r1, #8
    4e82:	f640 4001 	movw	r0, #3073	; 0xc01
    4e86:	f7fe ff29 	bl	3cdc <bt_hci_cmd_create>
	if (!buf) {
    4e8a:	4604      	mov	r4, r0
    4e8c:	2800      	cmp	r0, #0
    4e8e:	f43f af13 	beq.w	4cb8 <hci_init+0x140>
	ev = net_buf_add(buf, sizeof(*ev));
    4e92:	2108      	movs	r1, #8
    4e94:	4408      	add	r0, r1
    4e96:	f008 f891 	bl	cfbc <net_buf_simple_add>
	dst[0] = val;
    4e9a:	2310      	movs	r3, #16
    4e9c:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
    4e9e:	2388      	movs	r3, #136	; 0x88
    4ea0:	7043      	strb	r3, [r0, #1]
    4ea2:	2302      	movs	r3, #2
	dst[0] = val;
    4ea4:	2200      	movs	r2, #0
	dst[1] = val >> 8;
    4ea6:	70c3      	strb	r3, [r0, #3]
    4ea8:	2320      	movs	r3, #32
	dst[0] = val;
    4eaa:	7082      	strb	r2, [r0, #2]
    4eac:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    4eae:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    4eb0:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    4eb2:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    4eb4:	4621      	mov	r1, r4
    4eb6:	f640 4001 	movw	r0, #3073	; 0xc01
    4eba:	f7fe ff45 	bl	3d48 <bt_hci_cmd_send_sync>
	if (err) {
    4ebe:	4604      	mov	r4, r0
    4ec0:	2800      	cmp	r0, #0
    4ec2:	f47f af28 	bne.w	4d16 <hci_init+0x19e>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    4ec6:	4601      	mov	r1, r0
    4ec8:	466a      	mov	r2, sp
    4eca:	f64f 4001 	movw	r0, #64513	; 0xfc01
    4ece:	f7fe ff3b 	bl	3d48 <bt_hci_cmd_send_sync>
	if (err) {
    4ed2:	4e6a      	ldr	r6, [pc, #424]	; (507c <hci_init+0x504>)
    4ed4:	4b6a      	ldr	r3, [pc, #424]	; (5080 <hci_init+0x508>)
    4ed6:	1af6      	subs	r6, r6, r3
    4ed8:	f3c6 06c9 	ubfx	r6, r6, #3, #10
    4edc:	2800      	cmp	r0, #0
    4ede:	d06c      	beq.n	4fba <hci_init+0x442>
		BT_WARN("Vendor HCI extensions not available");
    4ee0:	f04f 0100 	mov.w	r1, #0
    4ee4:	2302      	movs	r3, #2
    4ee6:	4867      	ldr	r0, [pc, #412]	; (5084 <hci_init+0x50c>)
    4ee8:	f363 0107 	bfi	r1, r3, #0, #8
    4eec:	f366 118f 	bfi	r1, r6, #6, #10
		BT_WARN("Failed to read supported vendor commands");
    4ef0:	f006 fb46 	bl	b580 <log_0>
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
    4ef4:	79eb      	ldrb	r3, [r5, #7]
    4ef6:	2b00      	cmp	r3, #0
    4ef8:	f47f af0d 	bne.w	4d16 <hci_init+0x19e>
		bt_setup_public_id_addr();
    4efc:	f7ff fd62 	bl	49c4 <bt_setup_public_id_addr>
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
    4f00:	79eb      	ldrb	r3, [r5, #7]
    4f02:	2b00      	cmp	r3, #0
    4f04:	f47f af07 	bne.w	4d16 <hci_init+0x19e>
		err = bt_setup_random_id_addr();
    4f08:	f7ff fdb0 	bl	4a6c <bt_setup_random_id_addr>
		if (err) {
    4f0c:	4604      	mov	r4, r0
    4f0e:	2800      	cmp	r0, #0
    4f10:	f43f af01 	beq.w	4d16 <hci_init+0x19e>
			BT_ERR("Unable to set identity address");
    4f14:	2301      	movs	r3, #1
    4f16:	f04f 0100 	mov.w	r1, #0
    4f1a:	f363 0107 	bfi	r1, r3, #0, #8
    4f1e:	f366 118f 	bfi	r1, r6, #6, #10
    4f22:	4859      	ldr	r0, [pc, #356]	; (5088 <hci_init+0x510>)
    4f24:	f006 fb2c 	bl	b580 <log_0>
			return err;
    4f28:	e6f5      	b.n	4d16 <hci_init+0x19e>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    4f2a:	2102      	movs	r1, #2
    4f2c:	f640 406d 	movw	r0, #3181	; 0xc6d
    4f30:	f7fe fed4 	bl	3cdc <bt_hci_cmd_create>
		if (!buf) {
    4f34:	4606      	mov	r6, r0
    4f36:	2800      	cmp	r0, #0
    4f38:	f43f aebe 	beq.w	4cb8 <hci_init+0x140>
		cp_le = net_buf_add(buf, sizeof(*cp_le));
    4f3c:	2102      	movs	r1, #2
    4f3e:	3008      	adds	r0, #8
    4f40:	f008 f83c 	bl	cfbc <net_buf_simple_add>
		cp_le->le = 0x01;
    4f44:	2301      	movs	r3, #1
		cp_le->simul = 0x00;
    4f46:	7044      	strb	r4, [r0, #1]
		cp_le->le = 0x01;
    4f48:	7003      	strb	r3, [r0, #0]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    4f4a:	4622      	mov	r2, r4
    4f4c:	4631      	mov	r1, r6
    4f4e:	f640 406d 	movw	r0, #3181	; 0xc6d
    4f52:	f7fe fef9 	bl	3d48 <bt_hci_cmd_send_sync>
		if (err) {
    4f56:	4604      	mov	r4, r0
    4f58:	2800      	cmp	r0, #0
    4f5a:	f43f af20 	beq.w	4d9e <hci_init+0x226>
    4f5e:	e6da      	b.n	4d16 <hci_init+0x19e>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL,
    4f60:	aa01      	add	r2, sp, #4
    4f62:	2100      	movs	r1, #0
    4f64:	f242 002f 	movw	r0, #8239	; 0x202f
    4f68:	f7fe feee 	bl	3d48 <bt_hci_cmd_send_sync>
		if (err) {
    4f6c:	4604      	mov	r4, r0
    4f6e:	2800      	cmp	r0, #0
    4f70:	f47f aed1 	bne.w	4d16 <hci_init+0x19e>
		rp = (void *)rsp->data;
    4f74:	9801      	ldr	r0, [sp, #4]
    4f76:	6883      	ldr	r3, [r0, #8]
		tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    4f78:	f8b3 8001 	ldrh.w	r8, [r3, #1]
		tx_time = sys_le16_to_cpu(rp->max_tx_time);
    4f7c:	f8b3 7003 	ldrh.w	r7, [r3, #3]
		net_buf_unref(rsp);
    4f80:	f003 fa0a 	bl	8398 <net_buf_unref>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    4f84:	2104      	movs	r1, #4
    4f86:	f242 0024 	movw	r0, #8228	; 0x2024
    4f8a:	f7fe fea7 	bl	3cdc <bt_hci_cmd_create>
		if (!buf) {
    4f8e:	4606      	mov	r6, r0
    4f90:	2800      	cmp	r0, #0
    4f92:	f43f ae91 	beq.w	4cb8 <hci_init+0x140>
		cp = net_buf_add(buf, sizeof(*cp));
    4f96:	2104      	movs	r1, #4
    4f98:	3008      	adds	r0, #8
    4f9a:	f008 f80f 	bl	cfbc <net_buf_simple_add>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    4f9e:	4622      	mov	r2, r4
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    4fa0:	f8a0 8000 	strh.w	r8, [r0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    4fa4:	8047      	strh	r7, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    4fa6:	4631      	mov	r1, r6
    4fa8:	f242 0024 	movw	r0, #8228	; 0x2024
    4fac:	f7fe fecc 	bl	3d48 <bt_hci_cmd_send_sync>
		if (err) {
    4fb0:	4604      	mov	r4, r0
    4fb2:	2800      	cmp	r0, #0
    4fb4:	f43f af0e 	beq.w	4dd4 <hci_init+0x25c>
    4fb8:	e6ad      	b.n	4d16 <hci_init+0x19e>
	rp.info = (void *)rsp->data;
    4fba:	9b00      	ldr	r3, [sp, #0]
	BT_INFO("HW Platform: %s (0x%04x)",
    4fbc:	2203      	movs	r2, #3
	rp.info = (void *)rsp->data;
    4fbe:	689f      	ldr	r7, [r3, #8]
	BT_INFO("HW Platform: %s (0x%04x)",
    4fc0:	f04f 0300 	mov.w	r3, #0
    4fc4:	f362 0307 	bfi	r3, r2, #0, #8
    4fc8:	f8b7 2001 	ldrh.w	r2, [r7, #1]
    4fcc:	f366 138f 	bfi	r3, r6, #6, #10
	if (platform < ARRAY_SIZE(plat_str)) {
    4fd0:	2a03      	cmp	r2, #3
		return plat_str[platform];
    4fd2:	bf96      	itet	ls
    4fd4:	492d      	ldrls	r1, [pc, #180]	; (508c <hci_init+0x514>)
	return "unknown";
    4fd6:	492e      	ldrhi	r1, [pc, #184]	; (5090 <hci_init+0x518>)
		return plat_str[platform];
    4fd8:	f851 1022 	ldrls.w	r1, [r1, r2, lsl #2]
	BT_INFO("HW Platform: %s (0x%04x)",
    4fdc:	482d      	ldr	r0, [pc, #180]	; (5094 <hci_init+0x51c>)
    4fde:	f006 faf0 	bl	b5c2 <log_2>
	BT_INFO("HW Variant: %s (0x%04x)",
    4fe2:	2203      	movs	r2, #3
    4fe4:	f04f 0300 	mov.w	r3, #0
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    4fe8:	f8b7 1001 	ldrh.w	r1, [r7, #1]
	BT_INFO("HW Variant: %s (0x%04x)",
    4fec:	f362 0307 	bfi	r3, r2, #0, #8
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    4ff0:	2902      	cmp	r1, #2
	BT_INFO("HW Variant: %s (0x%04x)",
    4ff2:	f366 138f 	bfi	r3, r6, #6, #10
    4ff6:	f8b7 2003 	ldrh.w	r2, [r7, #3]
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    4ffa:	d138      	bne.n	506e <hci_init+0x4f6>
	if (variant < ARRAY_SIZE(nordic_str)) {
    4ffc:	2a03      	cmp	r2, #3
    4ffe:	d836      	bhi.n	506e <hci_init+0x4f6>
		return nordic_str[variant];
    5000:	4925      	ldr	r1, [pc, #148]	; (5098 <hci_init+0x520>)
    5002:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
	BT_INFO("HW Variant: %s (0x%04x)",
    5006:	4825      	ldr	r0, [pc, #148]	; (509c <hci_init+0x524>)
    5008:	f006 fadb 	bl	b5c2 <log_2>
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    500c:	2203      	movs	r2, #3
    500e:	f04f 0300 	mov.w	r3, #0
    5012:	f362 0307 	bfi	r3, r2, #0, #8
    5016:	797a      	ldrb	r2, [r7, #5]
    5018:	f366 138f 	bfi	r3, r6, #6, #10
	if (variant < ARRAY_SIZE(var_str)) {
    501c:	2a03      	cmp	r2, #3
		return var_str[variant];
    501e:	bf96      	itet	ls
    5020:	491f      	ldrls	r1, [pc, #124]	; (50a0 <hci_init+0x528>)
	return "unknown";
    5022:	491b      	ldrhi	r1, [pc, #108]	; (5090 <hci_init+0x518>)
		return var_str[variant];
    5024:	f851 1022 	ldrls.w	r1, [r1, r2, lsl #2]
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    5028:	481e      	ldr	r0, [pc, #120]	; (50a4 <hci_init+0x52c>)
    502a:	e9cd 1201 	strd	r1, r2, [sp, #4]
    502e:	79ba      	ldrb	r2, [r7, #6]
    5030:	a901      	add	r1, sp, #4
    5032:	9203      	str	r2, [sp, #12]
    5034:	f8b7 2007 	ldrh.w	r2, [r7, #7]
    5038:	9204      	str	r2, [sp, #16]
    503a:	f8d7 2009 	ldr.w	r2, [r7, #9]
    503e:	9205      	str	r2, [sp, #20]
    5040:	2205      	movs	r2, #5
    5042:	f006 faf1 	bl	b628 <log_n>
	net_buf_unref(rsp);
    5046:	9800      	ldr	r0, [sp, #0]
    5048:	f003 f9a6 	bl	8398 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    504c:	466a      	mov	r2, sp
    504e:	2100      	movs	r1, #0
    5050:	f64f 4002 	movw	r0, #64514	; 0xfc02
    5054:	f7fe fe78 	bl	3d48 <bt_hci_cmd_send_sync>
	if (err) {
    5058:	4607      	mov	r7, r0
    505a:	b338      	cbz	r0, 50ac <hci_init+0x534>
		BT_WARN("Failed to read supported vendor features");
    505c:	f04f 0100 	mov.w	r1, #0
    5060:	2302      	movs	r3, #2
    5062:	f363 0107 	bfi	r1, r3, #0, #8
    5066:	f366 118f 	bfi	r1, r6, #6, #10
    506a:	480f      	ldr	r0, [pc, #60]	; (50a8 <hci_init+0x530>)
    506c:	e740      	b.n	4ef0 <hci_init+0x378>
		return "unknown";
    506e:	4908      	ldr	r1, [pc, #32]	; (5090 <hci_init+0x518>)
    5070:	e7c9      	b.n	5006 <hci_init+0x48e>
    5072:	bf00      	nop
    5074:	200048b0 	.word	0x200048b0
    5078:	200048c4 	.word	0x200048c4
    507c:	0000e6fc 	.word	0x0000e6fc
    5080:	0000e6dc 	.word	0x0000e6dc
    5084:	0001006f 	.word	0x0001006f
    5088:	00010143 	.word	0x00010143
    508c:	0000eb2c 	.word	0x0000eb2c
    5090:	00010493 	.word	0x00010493
    5094:	00010093 	.word	0x00010093
    5098:	0000eb04 	.word	0x0000eb04
    509c:	000100ac 	.word	0x000100ac
    50a0:	0000eb5c 	.word	0x0000eb5c
    50a4:	000100c4 	.word	0x000100c4
    50a8:	000100f1 	.word	0x000100f1
	rp.cmds = (void *)rsp->data;
    50ac:	9b00      	ldr	r3, [sp, #0]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    50ae:	2202      	movs	r2, #2
    50b0:	6899      	ldr	r1, [r3, #8]
    50b2:	4811      	ldr	r0, [pc, #68]	; (50f8 <hci_init+0x580>)
    50b4:	3101      	adds	r1, #1
    50b6:	f006 fef2 	bl	be9e <memcpy>
	net_buf_unref(rsp);
    50ba:	9800      	ldr	r0, [sp, #0]
    50bc:	f003 f96c 	bl	8398 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    50c0:	466a      	mov	r2, sp
    50c2:	4639      	mov	r1, r7
    50c4:	f64f 4003 	movw	r0, #64515	; 0xfc03
    50c8:	f7fe fe3e 	bl	3d48 <bt_hci_cmd_send_sync>
	if (err) {
    50cc:	b140      	cbz	r0, 50e0 <hci_init+0x568>
		BT_WARN("Failed to read supported vendor commands");
    50ce:	f04f 0100 	mov.w	r1, #0
    50d2:	2302      	movs	r3, #2
    50d4:	f363 0107 	bfi	r1, r3, #0, #8
    50d8:	f366 118f 	bfi	r1, r6, #6, #10
    50dc:	4807      	ldr	r0, [pc, #28]	; (50fc <hci_init+0x584>)
    50de:	e707      	b.n	4ef0 <hci_init+0x378>
	memcpy(bt_dev.vs_features, rp.feat->features, BT_DEV_VS_FEAT_MAX);
    50e0:	2201      	movs	r2, #1
	rp.feat = (void *)rsp->data;
    50e2:	9b00      	ldr	r3, [sp, #0]
	memcpy(bt_dev.vs_features, rp.feat->features, BT_DEV_VS_FEAT_MAX);
    50e4:	4806      	ldr	r0, [pc, #24]	; (5100 <hci_init+0x588>)
    50e6:	6899      	ldr	r1, [r3, #8]
    50e8:	4411      	add	r1, r2
    50ea:	f006 fed8 	bl	be9e <memcpy>
	net_buf_unref(rsp);
    50ee:	9800      	ldr	r0, [sp, #0]
    50f0:	f003 f952 	bl	8398 <net_buf_unref>
    50f4:	e6fe      	b.n	4ef4 <hci_init+0x37c>
    50f6:	bf00      	nop
    50f8:	20004899 	.word	0x20004899
    50fc:	0001011a 	.word	0x0001011a
    5100:	20004898 	.word	0x20004898

00005104 <bt_enable>:
{
    5104:	b570      	push	{r4, r5, r6, lr}
	if (!bt_dev.drv) {
    5106:	4d43      	ldr	r5, [pc, #268]	; (5214 <bt_enable+0x110>)
{
    5108:	b086      	sub	sp, #24
	if (!bt_dev.drv) {
    510a:	f8d5 30e4 	ldr.w	r3, [r5, #228]	; 0xe4
{
    510e:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
    5110:	b993      	cbnz	r3, 5138 <bt_enable+0x34>
		BT_ERR("No HCI driver registered");
    5112:	2301      	movs	r3, #1
    5114:	f04f 0100 	mov.w	r1, #0
    5118:	4a3f      	ldr	r2, [pc, #252]	; (5218 <bt_enable+0x114>)
    511a:	f363 0107 	bfi	r1, r3, #0, #8
    511e:	4b3f      	ldr	r3, [pc, #252]	; (521c <bt_enable+0x118>)
    5120:	483f      	ldr	r0, [pc, #252]	; (5220 <bt_enable+0x11c>)
    5122:	1a9b      	subs	r3, r3, r2
    5124:	08db      	lsrs	r3, r3, #3
    5126:	f363 118f 	bfi	r1, r3, #6, #10
    512a:	f006 fa29 	bl	b580 <log_0>
		return -ENODEV;
    512e:	f06f 0412 	mvn.w	r4, #18
}
    5132:	4620      	mov	r0, r4
    5134:	b006      	add	sp, #24
    5136:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    5138:	f105 0370 	add.w	r3, r5, #112	; 0x70
    513c:	e8d3 4fef 	ldaex	r4, [r3]
    5140:	f044 0201 	orr.w	r2, r4, #1
    5144:	e8c3 2fe1 	stlex	r1, r2, [r3]
    5148:	2900      	cmp	r1, #0
    514a:	d1f7      	bne.n	513c <bt_enable+0x38>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    514c:	f014 0401 	ands.w	r4, r4, #1
    5150:	d15d      	bne.n	520e <bt_enable+0x10a>
	ready_cb = cb;
    5152:	4b34      	ldr	r3, [pc, #208]	; (5224 <bt_enable+0x120>)
    5154:	601e      	str	r6, [r3, #0]
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    5156:	f06f 0308 	mvn.w	r3, #8
    515a:	e9cd 4404 	strd	r4, r4, [sp, #16]
    515e:	e9cd 4302 	strd	r4, r3, [sp, #8]
    5162:	e9cd 4400 	strd	r4, r4, [sp]
    5166:	4b30      	ldr	r3, [pc, #192]	; (5228 <bt_enable+0x124>)
    5168:	f44f 6280 	mov.w	r2, #1024	; 0x400
    516c:	492f      	ldr	r1, [pc, #188]	; (522c <bt_enable+0x128>)
    516e:	4830      	ldr	r0, [pc, #192]	; (5230 <bt_enable+0x12c>)
    5170:	f004 ff2c 	bl	9fcc <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
    5174:	492f      	ldr	r1, [pc, #188]	; (5234 <bt_enable+0x130>)
    5176:	482e      	ldr	r0, [pc, #184]	; (5230 <bt_enable+0x12c>)
    5178:	f008 ff08 	bl	df8c <z_impl_k_thread_name_set>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    517c:	f06f 0307 	mvn.w	r3, #7
    5180:	e9cd 4404 	strd	r4, r4, [sp, #16]
    5184:	e9cd 4302 	strd	r4, r3, [sp, #8]
    5188:	e9cd 4400 	strd	r4, r4, [sp]
    518c:	4b2a      	ldr	r3, [pc, #168]	; (5238 <bt_enable+0x134>)
    518e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    5192:	492a      	ldr	r1, [pc, #168]	; (523c <bt_enable+0x138>)
    5194:	482a      	ldr	r0, [pc, #168]	; (5240 <bt_enable+0x13c>)
    5196:	f004 ff19 	bl	9fcc <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
    519a:	492a      	ldr	r1, [pc, #168]	; (5244 <bt_enable+0x140>)
    519c:	4828      	ldr	r0, [pc, #160]	; (5240 <bt_enable+0x13c>)
    519e:	f008 fef5 	bl	df8c <z_impl_k_thread_name_set>
	err = bt_dev.drv->open();
    51a2:	f8d5 30e4 	ldr.w	r3, [r5, #228]	; 0xe4
    51a6:	68db      	ldr	r3, [r3, #12]
    51a8:	4798      	blx	r3
	if (err) {
    51aa:	4604      	mov	r4, r0
    51ac:	b178      	cbz	r0, 51ce <bt_enable+0xca>
		BT_ERR("HCI driver open failed (%d)", err);
    51ae:	2301      	movs	r3, #1
    51b0:	f04f 0200 	mov.w	r2, #0
    51b4:	4918      	ldr	r1, [pc, #96]	; (5218 <bt_enable+0x114>)
    51b6:	f363 0207 	bfi	r2, r3, #0, #8
    51ba:	4b18      	ldr	r3, [pc, #96]	; (521c <bt_enable+0x118>)
    51bc:	1a5b      	subs	r3, r3, r1
    51be:	08db      	lsrs	r3, r3, #3
    51c0:	4601      	mov	r1, r0
    51c2:	f363 128f 	bfi	r2, r3, #6, #10
    51c6:	4820      	ldr	r0, [pc, #128]	; (5248 <bt_enable+0x144>)
    51c8:	f006 f9e7 	bl	b59a <log_1>
		return err;
    51cc:	e7b1      	b.n	5132 <bt_enable+0x2e>
	if (!cb) {
    51ce:	b966      	cbnz	r6, 51ea <bt_enable+0xe6>
	err = hci_init();
    51d0:	f7ff fcd2 	bl	4b78 <hci_init>
	if (err) {
    51d4:	4604      	mov	r4, r0
    51d6:	2800      	cmp	r0, #0
    51d8:	d1ab      	bne.n	5132 <bt_enable+0x2e>
		err = bt_conn_init();
    51da:	f001 f979 	bl	64d0 <bt_conn_init>
		if (err) {
    51de:	4604      	mov	r4, r0
    51e0:	2800      	cmp	r0, #0
    51e2:	d1a6      	bne.n	5132 <bt_enable+0x2e>
	bt_finalize_init();
    51e4:	f7ff fb18 	bl	4818 <bt_finalize_init>
	return 0;
    51e8:	e7a3      	b.n	5132 <bt_enable+0x2e>
    51ea:	f105 036c 	add.w	r3, r5, #108	; 0x6c
    51ee:	e8d3 2fef 	ldaex	r2, [r3]
    51f2:	f042 0101 	orr.w	r1, r2, #1
    51f6:	e8c3 1fe0 	stlex	r0, r1, [r3]
    51fa:	2800      	cmp	r0, #0
    51fc:	d1f7      	bne.n	51ee <bt_enable+0xea>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    51fe:	07d3      	lsls	r3, r2, #31
    5200:	d497      	bmi.n	5132 <bt_enable+0x2e>
		k_queue_append(&work_q->queue, work);
    5202:	f105 0164 	add.w	r1, r5, #100	; 0x64
    5206:	4811      	ldr	r0, [pc, #68]	; (524c <bt_enable+0x148>)
    5208:	f008 fd23 	bl	dc52 <k_queue_append>
    520c:	e791      	b.n	5132 <bt_enable+0x2e>
		return -EALREADY;
    520e:	f06f 0444 	mvn.w	r4, #68	; 0x44
    5212:	e78e      	b.n	5132 <bt_enable+0x2e>
    5214:	20004838 	.word	0x20004838
    5218:	0000e6dc 	.word	0x0000e6dc
    521c:	0000e6fc 	.word	0x0000e6fc
    5220:	0000fc36 	.word	0x0000fc36
    5224:	2000044c 	.word	0x2000044c
    5228:	00004569 	.word	0x00004569
    522c:	20002198 	.word	0x20002198
    5230:	200004bc 	.word	0x200004bc
    5234:	0000fc4f 	.word	0x0000fc4f
    5238:	00003901 	.word	0x00003901
    523c:	20001d98 	.word	0x20001d98
    5240:	20000450 	.word	0x20000450
    5244:	0000fc55 	.word	0x0000fc55
    5248:	0000fc5b 	.word	0x0000fc5b
    524c:	2000120c 	.word	0x2000120c

00005250 <init_work>:
{
    5250:	b510      	push	{r4, lr}
	err = hci_init();
    5252:	f7ff fc91 	bl	4b78 <hci_init>
	if (err) {
    5256:	4604      	mov	r4, r0
    5258:	b928      	cbnz	r0, 5266 <init_work+0x16>
		err = bt_conn_init();
    525a:	f001 f939 	bl	64d0 <bt_conn_init>
		if (err) {
    525e:	4604      	mov	r4, r0
    5260:	b908      	cbnz	r0, 5266 <init_work+0x16>
	bt_finalize_init();
    5262:	f7ff fad9 	bl	4818 <bt_finalize_init>
	if (ready_cb) {
    5266:	4b04      	ldr	r3, [pc, #16]	; (5278 <init_work+0x28>)
    5268:	681b      	ldr	r3, [r3, #0]
    526a:	b11b      	cbz	r3, 5274 <init_work+0x24>
		ready_cb(err);
    526c:	4620      	mov	r0, r4
}
    526e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
    5272:	4718      	bx	r3
}
    5274:	bd10      	pop	{r4, pc}
    5276:	bf00      	nop
    5278:	2000044c 	.word	0x2000044c

0000527c <bt_le_adv_start_internal>:

int bt_le_adv_start_internal(const struct bt_le_adv_param *param,
			     const struct bt_data *ad, size_t ad_len,
			     const struct bt_data *sd, size_t sd_len,
			     const bt_addr_le_t *peer)
{
    527c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_conn *conn = NULL;
	struct net_buf *buf;
	bool dir_adv = (peer != NULL);
	int err = 0;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    5280:	4eac      	ldr	r6, [pc, #688]	; (5534 <bt_le_adv_start_internal+0x2b8>)
{
    5282:	b08d      	sub	sp, #52	; 0x34
    5284:	4604      	mov	r4, r0
    5286:	468a      	mov	sl, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    5288:	f106 0070 	add.w	r0, r6, #112	; 0x70
    528c:	2101      	movs	r1, #1
{
    528e:	4693      	mov	fp, r2
    5290:	4699      	mov	r9, r3
    5292:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    5296:	f006 ff49 	bl	c12c <atomic_test_bit>
    529a:	2800      	cmp	r0, #0
    529c:	f000 813d 	beq.w	551a <bt_le_adv_start_internal+0x29e>
	if (param->id >= bt_dev.id_count ||
    52a0:	7820      	ldrb	r0, [r4, #0]
    52a2:	79f3      	ldrb	r3, [r6, #7]
    52a4:	4283      	cmp	r3, r0
    52a6:	d805      	bhi.n	52b4 <bt_le_adv_start_internal+0x38>
		return -EAGAIN;
	}

	if (!valid_adv_param(param, dir_adv)) {
		return -EINVAL;
    52a8:	f06f 0515 	mvn.w	r5, #21

	atomic_set_bit_to(bt_dev.flags, BT_DEV_ADVERTISING_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	return 0;
}
    52ac:	4628      	mov	r0, r5
    52ae:	b00d      	add	sp, #52	; 0x34
    52b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	    !bt_addr_le_cmp(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
    52b4:	2300      	movs	r3, #0
    52b6:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
	return memcmp(a, b, sizeof(*a));
    52ba:	2207      	movs	r2, #7
    52bc:	a906      	add	r1, sp, #24
    52be:	4430      	add	r0, r6
    52c0:	9306      	str	r3, [sp, #24]
    52c2:	f8cd 301b 	str.w	r3, [sp, #27]
    52c6:	f006 fdda 	bl	be7e <memcmp>
	if (param->id >= bt_dev.id_count ||
    52ca:	2800      	cmp	r0, #0
    52cc:	d0ec      	beq.n	52a8 <bt_le_adv_start_internal+0x2c>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    52ce:	7863      	ldrb	r3, [r4, #1]
    52d0:	07dd      	lsls	r5, r3, #31
    52d2:	d405      	bmi.n	52e0 <bt_le_adv_start_internal+0x64>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
    52d4:	7c32      	ldrb	r2, [r6, #16]
    52d6:	2a08      	cmp	r2, #8
    52d8:	d802      	bhi.n	52e0 <bt_le_adv_start_internal+0x64>
    52da:	8862      	ldrh	r2, [r4, #2]
    52dc:	2a9f      	cmp	r2, #159	; 0x9f
    52de:	d9e3      	bls.n	52a8 <bt_le_adv_start_internal+0x2c>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) || !dir_adv) {
    52e0:	06d8      	lsls	r0, r3, #27
    52e2:	d402      	bmi.n	52ea <bt_le_adv_start_internal+0x6e>
    52e4:	f1b8 0f00 	cmp.w	r8, #0
    52e8:	d108      	bne.n	52fc <bt_le_adv_start_internal+0x80>
		if (param->interval_min > param->interval_max ||
    52ea:	8862      	ldrh	r2, [r4, #2]
    52ec:	88a3      	ldrh	r3, [r4, #4]
    52ee:	429a      	cmp	r2, r3
    52f0:	d8da      	bhi.n	52a8 <bt_le_adv_start_internal+0x2c>
    52f2:	2a1f      	cmp	r2, #31
    52f4:	d9d8      	bls.n	52a8 <bt_le_adv_start_internal+0x2c>
		    param->interval_min < 0x0020 ||
    52f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    52fa:	d8d5      	bhi.n	52a8 <bt_le_adv_start_internal+0x2c>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    52fc:	2105      	movs	r1, #5
    52fe:	488e      	ldr	r0, [pc, #568]	; (5538 <bt_le_adv_start_internal+0x2bc>)
    5300:	f006 ff14 	bl	c12c <atomic_test_bit>
    5304:	2800      	cmp	r0, #0
    5306:	f040 810b 	bne.w	5520 <bt_le_adv_start_internal+0x2a4>
	    !(atomic_test_bit(bt_dev.flags, BT_DEV_INITIATING) ||
    530a:	210f      	movs	r1, #15
    530c:	488a      	ldr	r0, [pc, #552]	; (5538 <bt_le_adv_start_internal+0x2bc>)
    530e:	f006 ff0d 	bl	c12c <atomic_test_bit>
	if (IS_ENABLED(CONFIG_BT_OBSERVER) ||
    5312:	b968      	cbnz	r0, 5330 <bt_le_adv_start_internal+0xb4>
	      (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    5314:	210a      	movs	r1, #10
    5316:	4888      	ldr	r0, [pc, #544]	; (5538 <bt_le_adv_start_internal+0x2bc>)
    5318:	f006 ff08 	bl	c12c <atomic_test_bit>
	if (IS_ENABLED(CONFIG_BT_OBSERVER) ||
    531c:	b140      	cbz	r0, 5330 <bt_le_adv_start_internal+0xb4>
	       (!atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN) ||
    531e:	210b      	movs	r1, #11
    5320:	4885      	ldr	r0, [pc, #532]	; (5538 <bt_le_adv_start_internal+0x2bc>)
    5322:	f006 ff03 	bl	c12c <atomic_test_bit>
	      (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    5326:	b118      	cbz	r0, 5330 <bt_le_adv_start_internal+0xb4>
		atomic_test_bit(bt_dev.flags, BT_DEV_ACTIVE_SCAN))))) {
    5328:	210c      	movs	r1, #12
    532a:	4883      	ldr	r0, [pc, #524]	; (5538 <bt_le_adv_start_internal+0x2bc>)
    532c:	f006 fefe 	bl	c12c <atomic_test_bit>
	(void)memset(&set_param, 0, sizeof(set_param));
    5330:	220f      	movs	r2, #15
    5332:	2100      	movs	r1, #0
    5334:	a808      	add	r0, sp, #32
    5336:	f006 fddc 	bl	bef2 <memset>
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
    533a:	8863      	ldrh	r3, [r4, #2]
	if (bt_dev.adv_id != param->id) {
    533c:	7a32      	ldrb	r2, [r6, #8]
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
    533e:	f8ad 3020 	strh.w	r3, [sp, #32]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
    5342:	88a3      	ldrh	r3, [r4, #4]
    5344:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
	set_param.channel_map  = 0x07;
    5348:	2307      	movs	r3, #7
    534a:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
	if (bt_dev.adv_id != param->id) {
    534e:	7823      	ldrb	r3, [r4, #0]
    5350:	429a      	cmp	r2, r3
    5352:	d004      	beq.n	535e <bt_le_adv_start_internal+0xe2>
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    5354:	f46f 3180 	mvn.w	r1, #65536	; 0x10000
    5358:	4877      	ldr	r0, [pc, #476]	; (5538 <bt_le_adv_start_internal+0x2bc>)
    535a:	f006 fec6 	bl	c0ea <atomic_and>
		set_param.filter_policy = BT_LE_ADV_FP_NO_WHITELIST;
    535e:	2300      	movs	r3, #0
	bt_dev.adv_id = param->id;
    5360:	7827      	ldrb	r7, [r4, #0]
		set_param.filter_policy = BT_LE_ADV_FP_NO_WHITELIST;
    5362:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
	bt_dev.adv_id = param->id;
    5366:	7237      	strb	r7, [r6, #8]
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    5368:	7863      	ldrb	r3, [r4, #1]
    536a:	f013 0201 	ands.w	r2, r3, #1
    536e:	d063      	beq.n	5438 <bt_le_adv_start_internal+0x1bc>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    5370:	00fb      	lsls	r3, r7, #3
    5372:	1bd9      	subs	r1, r3, r7
    5374:	5c71      	ldrb	r1, [r6, r1]
    5376:	2901      	cmp	r1, #1
    5378:	d009      	beq.n	538e <bt_le_adv_start_internal+0x112>
			set_param.own_addr_type = id_addr->type;
    537a:	1bdf      	subs	r7, r3, r7
    537c:	5df3      	ldrb	r3, [r6, r7]
    537e:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
		if (dir_adv) {
    5382:	f1b8 0f00 	cmp.w	r8, #0
    5386:	d110      	bne.n	53aa <bt_le_adv_start_internal+0x12e>
			set_param.type = BT_LE_ADV_IND;
    5388:	f88d 8024 	strb.w	r8, [sp, #36]	; 0x24
    538c:	e019      	b.n	53c2 <bt_le_adv_start_internal+0x146>
				err = set_random_address(&id_addr->a);
    538e:	2007      	movs	r0, #7
    5390:	fb10 1007 	smlabb	r0, r0, r7, r1
    5394:	4430      	add	r0, r6
    5396:	e9cd 2302 	strd	r2, r3, [sp, #8]
    539a:	f7fe fd1b 	bl	3dd4 <set_random_address>
				if (err) {
    539e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    53a2:	4605      	mov	r5, r0
    53a4:	2800      	cmp	r0, #0
    53a6:	d0e8      	beq.n	537a <bt_le_adv_start_internal+0xfe>
    53a8:	e780      	b.n	52ac <bt_le_adv_start_internal+0x30>
			if (param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) {
    53aa:	7863      	ldrb	r3, [r4, #1]
			bt_addr_le_copy(&set_param.direct_addr, peer);
    53ac:	4641      	mov	r1, r8
				set_param.type = BT_LE_ADV_DIRECT_IND_LOW_DUTY;
    53ae:	f013 0f10 	tst.w	r3, #16
    53b2:	bf18      	it	ne
    53b4:	2204      	movne	r2, #4
			bt_addr_le_copy(&set_param.direct_addr, peer);
    53b6:	f10d 0026 	add.w	r0, sp, #38	; 0x26
    53ba:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
    53be:	f006 fe91 	bl	c0e4 <bt_addr_le_copy>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
    53c2:	210f      	movs	r1, #15
    53c4:	f242 0006 	movw	r0, #8198	; 0x2006
    53c8:	f7fe fc88 	bl	3cdc <bt_hci_cmd_create>
	if (!buf) {
    53cc:	4605      	mov	r5, r0
    53ce:	2800      	cmp	r0, #0
    53d0:	f000 80a9 	beq.w	5526 <bt_le_adv_start_internal+0x2aa>
	net_buf_add_mem(buf, &set_param, sizeof(set_param));
    53d4:	220f      	movs	r2, #15
    53d6:	a908      	add	r1, sp, #32
    53d8:	3008      	adds	r0, #8
    53da:	f007 fdf5 	bl	cfc8 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
    53de:	4629      	mov	r1, r5
    53e0:	2200      	movs	r2, #0
    53e2:	f242 0006 	movw	r0, #8198	; 0x2006
    53e6:	f7fe fcaf 	bl	3d48 <bt_hci_cmd_send_sync>
	if (err) {
    53ea:	4605      	mov	r5, r0
    53ec:	2800      	cmp	r0, #0
    53ee:	f47f af5d 	bne.w	52ac <bt_le_adv_start_internal+0x30>
	if (!dir_adv) {
    53f2:	f1b8 0f00 	cmp.w	r8, #0
    53f6:	d046      	beq.n	5486 <bt_le_adv_start_internal+0x20a>
	struct bt_conn *conn = NULL;
    53f8:	2600      	movs	r6, #0
	err = set_advertise_enable(true);
    53fa:	2001      	movs	r0, #1
    53fc:	f7fe fdd2 	bl	3fa4 <set_advertise_enable>
	if (err) {
    5400:	4605      	mov	r5, r0
    5402:	2800      	cmp	r0, #0
    5404:	d066      	beq.n	54d4 <bt_le_adv_start_internal+0x258>
		BT_ERR("Failed to start advertiser");
    5406:	2301      	movs	r3, #1
    5408:	f04f 0100 	mov.w	r1, #0
    540c:	4a4b      	ldr	r2, [pc, #300]	; (553c <bt_le_adv_start_internal+0x2c0>)
    540e:	f363 0107 	bfi	r1, r3, #0, #8
    5412:	4b4b      	ldr	r3, [pc, #300]	; (5540 <bt_le_adv_start_internal+0x2c4>)
    5414:	484b      	ldr	r0, [pc, #300]	; (5544 <bt_le_adv_start_internal+0x2c8>)
    5416:	1a9b      	subs	r3, r3, r2
    5418:	08db      	lsrs	r3, r3, #3
    541a:	f363 118f 	bfi	r1, r3, #6, #10
    541e:	f006 f8af 	bl	b580 <log_0>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
    5422:	2e00      	cmp	r6, #0
    5424:	f43f af42 	beq.w	52ac <bt_le_adv_start_internal+0x30>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    5428:	4630      	mov	r0, r6
    542a:	2100      	movs	r1, #0
    542c:	f000 fd9a 	bl	5f64 <bt_conn_set_state>
			bt_conn_unref(conn);
    5430:	4630      	mov	r0, r6
    5432:	f006 ff8f 	bl	c354 <bt_conn_unref>
    5436:	e739      	b.n	52ac <bt_le_adv_start_internal+0x30>
		if (param->options & BT_LE_ADV_OPT_USE_IDENTITY) {
    5438:	0759      	lsls	r1, r3, #29
    543a:	d51d      	bpl.n	5478 <bt_le_adv_start_internal+0x1fc>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    543c:	00fb      	lsls	r3, r7, #3
    543e:	1bd9      	subs	r1, r3, r7
    5440:	5c71      	ldrb	r1, [r6, r1]
    5442:	2901      	cmp	r1, #1
    5444:	d116      	bne.n	5474 <bt_le_adv_start_internal+0x1f8>
				err = set_random_address(&id_addr->a);
    5446:	2007      	movs	r0, #7
    5448:	fb10 1007 	smlabb	r0, r0, r7, r1
    544c:	4430      	add	r0, r6
    544e:	9302      	str	r3, [sp, #8]
    5450:	f7fe fcc0 	bl	3dd4 <set_random_address>
    5454:	4605      	mov	r5, r0
    5456:	9b02      	ldr	r3, [sp, #8]
			set_param.own_addr_type = id_addr->type;
    5458:	1bdf      	subs	r7, r3, r7
    545a:	5df3      	ldrb	r3, [r6, r7]
			set_param.own_addr_type = BT_ADDR_LE_RANDOM;
    545c:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
		if (err) {
    5460:	2d00      	cmp	r5, #0
    5462:	f47f af23 	bne.w	52ac <bt_le_adv_start_internal+0x30>
		if (sd) {
    5466:	f1b9 0f00 	cmp.w	r9, #0
    546a:	d00a      	beq.n	5482 <bt_le_adv_start_internal+0x206>
			set_param.type = BT_LE_ADV_SCAN_IND;
    546c:	2302      	movs	r3, #2
			set_param.type = BT_LE_ADV_NONCONN_IND;
    546e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    5472:	e7a6      	b.n	53c2 <bt_le_adv_start_internal+0x146>
	int err = 0;
    5474:	4615      	mov	r5, r2
    5476:	e7ef      	b.n	5458 <bt_le_adv_start_internal+0x1dc>
			err = le_set_private_addr(param->id);
    5478:	f006 fe5e 	bl	c138 <le_set_private_addr.isra.21>
			set_param.own_addr_type = BT_ADDR_LE_RANDOM;
    547c:	2301      	movs	r3, #1
			err = le_set_private_addr(param->id);
    547e:	4605      	mov	r5, r0
			set_param.own_addr_type = BT_ADDR_LE_RANDOM;
    5480:	e7ec      	b.n	545c <bt_le_adv_start_internal+0x1e0>
			set_param.type = BT_LE_ADV_NONCONN_IND;
    5482:	2303      	movs	r3, #3
    5484:	e7f3      	b.n	546e <bt_le_adv_start_internal+0x1f2>
				    param->options & BT_LE_ADV_OPT_CONNECTABLE,
    5486:	7863      	ldrb	r3, [r4, #1]
		err = le_adv_update(ad, ad_len, sd, sd_len,
    5488:	4659      	mov	r1, fp
    548a:	f3c3 02c0 	ubfx	r2, r3, #3, #1
    548e:	f003 0301 	and.w	r3, r3, #1
    5492:	9201      	str	r2, [sp, #4]
    5494:	9300      	str	r3, [sp, #0]
    5496:	464a      	mov	r2, r9
    5498:	9b16      	ldr	r3, [sp, #88]	; 0x58
    549a:	4650      	mov	r0, sl
    549c:	f7fe fd38 	bl	3f10 <le_adv_update>
		if (err) {
    54a0:	4605      	mov	r5, r0
    54a2:	2800      	cmp	r0, #0
    54a4:	f47f af02 	bne.w	52ac <bt_le_adv_start_internal+0x30>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    54a8:	7863      	ldrb	r3, [r4, #1]
    54aa:	07db      	lsls	r3, r3, #31
    54ac:	d5a4      	bpl.n	53f8 <bt_le_adv_start_internal+0x17c>
			conn = bt_conn_add_le(param->id, BT_ADDR_LE_NONE);
    54ae:	f06f 03ff 	mvn.w	r3, #255	; 0xff
    54b2:	9304      	str	r3, [sp, #16]
    54b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
    54b8:	a904      	add	r1, sp, #16
    54ba:	7820      	ldrb	r0, [r4, #0]
    54bc:	f8ad 3014 	strh.w	r3, [sp, #20]
    54c0:	f88d 3016 	strb.w	r3, [sp, #22]
    54c4:	f000 fd14 	bl	5ef0 <bt_conn_add_le>
			if (!conn) {
    54c8:	4606      	mov	r6, r0
    54ca:	b378      	cbz	r0, 552c <bt_le_adv_start_internal+0x2b0>
			bt_conn_set_state(conn, BT_CONN_CONNECT_ADV);
    54cc:	2103      	movs	r1, #3
    54ce:	f000 fd49 	bl	5f64 <bt_conn_set_state>
    54d2:	e792      	b.n	53fa <bt_le_adv_start_internal+0x17e>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
    54d4:	b116      	cbz	r6, 54dc <bt_le_adv_start_internal+0x260>
		bt_conn_unref(conn);
    54d6:	4630      	mov	r0, r6
    54d8:	f006 ff3c 	bl	c354 <bt_conn_unref>
	atomic_set_bit_to(bt_dev.flags, BT_DEV_KEEP_ADVERTISING,
    54dc:	7862      	ldrb	r2, [r4, #1]
    54de:	2109      	movs	r1, #9
    54e0:	f082 0202 	eor.w	r2, r2, #2
    54e4:	f3c2 0240 	ubfx	r2, r2, #1, #1
    54e8:	4813      	ldr	r0, [pc, #76]	; (5538 <bt_le_adv_start_internal+0x2bc>)
    54ea:	f006 fe09 	bl	c100 <atomic_set_bit_to>
	atomic_set_bit_to(bt_dev.flags, BT_DEV_ADVERTISING_NAME,
    54ee:	7862      	ldrb	r2, [r4, #1]
    54f0:	2106      	movs	r1, #6
    54f2:	f3c2 02c0 	ubfx	r2, r2, #3, #1
    54f6:	4810      	ldr	r0, [pc, #64]	; (5538 <bt_le_adv_start_internal+0x2bc>)
    54f8:	f006 fe02 	bl	c100 <atomic_set_bit_to>
	atomic_set_bit_to(bt_dev.flags, BT_DEV_ADVERTISING_CONNECTABLE,
    54fc:	7862      	ldrb	r2, [r4, #1]
    54fe:	2107      	movs	r1, #7
    5500:	f002 0201 	and.w	r2, r2, #1
    5504:	480c      	ldr	r0, [pc, #48]	; (5538 <bt_le_adv_start_internal+0x2bc>)
    5506:	f006 fdfb 	bl	c100 <atomic_set_bit_to>
	atomic_set_bit_to(bt_dev.flags, BT_DEV_ADVERTISING_IDENTITY,
    550a:	7862      	ldrb	r2, [r4, #1]
    550c:	2108      	movs	r1, #8
    550e:	f3c2 0280 	ubfx	r2, r2, #2, #1
    5512:	4809      	ldr	r0, [pc, #36]	; (5538 <bt_le_adv_start_internal+0x2bc>)
    5514:	f006 fdf4 	bl	c100 <atomic_set_bit_to>
	return 0;
    5518:	e6c8      	b.n	52ac <bt_le_adv_start_internal+0x30>
		return -EAGAIN;
    551a:	f06f 050a 	mvn.w	r5, #10
    551e:	e6c5      	b.n	52ac <bt_le_adv_start_internal+0x30>
		return -EALREADY;
    5520:	f06f 0544 	mvn.w	r5, #68	; 0x44
    5524:	e6c2      	b.n	52ac <bt_le_adv_start_internal+0x30>
		return -ENOBUFS;
    5526:	f06f 0536 	mvn.w	r5, #54	; 0x36
    552a:	e6bf      	b.n	52ac <bt_le_adv_start_internal+0x30>
				return -ENOMEM;
    552c:	f06f 050b 	mvn.w	r5, #11
    5530:	e6bc      	b.n	52ac <bt_le_adv_start_internal+0x30>
    5532:	bf00      	nop
    5534:	20004838 	.word	0x20004838
    5538:	200048a8 	.word	0x200048a8
    553c:	0000e6dc 	.word	0x0000e6dc
    5540:	0000e6fc 	.word	0x0000e6fc
    5544:	0000fd8a 	.word	0x0000fd8a

00005548 <bt_le_adv_resume>:
	return 0;
}

#if defined(CONFIG_BT_PERIPHERAL)
void bt_le_adv_resume(void)
{
    5548:	b513      	push	{r0, r1, r4, lr}
	struct bt_conn *adv_conn;
	int err;

	BT_ASSERT(atomic_test_bit(bt_dev.flags,
    554a:	2107      	movs	r1, #7
    554c:	4818      	ldr	r0, [pc, #96]	; (55b0 <bt_le_adv_resume+0x68>)
    554e:	f006 fded 	bl	c12c <atomic_test_bit>
    5552:	b960      	cbnz	r0, 556e <bt_le_adv_resume+0x26>
    5554:	f641 030f 	movw	r3, #6159	; 0x180f
    5558:	4a16      	ldr	r2, [pc, #88]	; (55b4 <bt_le_adv_resume+0x6c>)
    555a:	4917      	ldr	r1, [pc, #92]	; (55b8 <bt_le_adv_resume+0x70>)
    555c:	4817      	ldr	r0, [pc, #92]	; (55bc <bt_le_adv_resume+0x74>)
    555e:	f005 fb91 	bl	ac84 <printk>
    5562:	4040      	eors	r0, r0
    5564:	f380 8811 	msr	BASEPRI, r0
    5568:	f04f 0003 	mov.w	r0, #3
    556c:	df02      	svc	2
				  BT_DEV_ADVERTISING_CONNECTABLE));

	adv_conn = bt_conn_add_le(bt_dev.adv_id, BT_ADDR_LE_NONE);
    556e:	4b14      	ldr	r3, [pc, #80]	; (55c0 <bt_le_adv_resume+0x78>)
    5570:	4669      	mov	r1, sp
    5572:	6818      	ldr	r0, [r3, #0]
    5574:	889a      	ldrh	r2, [r3, #4]
    5576:	799b      	ldrb	r3, [r3, #6]
    5578:	9000      	str	r0, [sp, #0]
    557a:	f88d 3006 	strb.w	r3, [sp, #6]
    557e:	4b11      	ldr	r3, [pc, #68]	; (55c4 <bt_le_adv_resume+0x7c>)
    5580:	f8ad 2004 	strh.w	r2, [sp, #4]
    5584:	7a18      	ldrb	r0, [r3, #8]
    5586:	f000 fcb3 	bl	5ef0 <bt_conn_add_le>
	if (!adv_conn) {
    558a:	4604      	mov	r4, r0
    558c:	b168      	cbz	r0, 55aa <bt_le_adv_resume+0x62>
		return;
	}

	bt_conn_set_state(adv_conn, BT_CONN_CONNECT_ADV);
    558e:	2103      	movs	r1, #3
    5590:	f000 fce8 	bl	5f64 <bt_conn_set_state>
	if (IS_ENABLED(CONFIG_BT_PRIVACY) &&
	    !atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING_IDENTITY)) {
		le_set_private_addr(bt_dev.adv_id);
	}

	err = set_advertise_enable(true);
    5594:	2001      	movs	r0, #1
    5596:	f7fe fd05 	bl	3fa4 <set_advertise_enable>
	if (err) {
    559a:	b118      	cbz	r0, 55a4 <bt_le_adv_resume+0x5c>
		bt_conn_set_state(adv_conn, BT_CONN_DISCONNECTED);
    559c:	2100      	movs	r1, #0
    559e:	4620      	mov	r0, r4
    55a0:	f000 fce0 	bl	5f64 <bt_conn_set_state>
	}

	/* Since we don't give the application a reference to manage in
	 * this case, we need to release this reference here.
	 */
	bt_conn_unref(adv_conn);
    55a4:	4620      	mov	r0, r4
    55a6:	f006 fed5 	bl	c354 <bt_conn_unref>
}
    55aa:	b002      	add	sp, #8
    55ac:	bd10      	pop	{r4, pc}
    55ae:	bf00      	nop
    55b0:	200048a8 	.word	0x200048a8
    55b4:	00010195 	.word	0x00010195
    55b8:	0000fd4c 	.word	0x0000fd4c
    55bc:	000101e2 	.word	0x000101e2
    55c0:	0000e7e4 	.word	0x0000e7e4
    55c4:	20004838 	.word	0x20004838

000055c8 <hci_disconn_complete>:
{
    55c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    55ca:	6886      	ldr	r6, [r0, #8]
	if (evt->status) {
    55cc:	7835      	ldrb	r5, [r6, #0]
    55ce:	bba5      	cbnz	r5, 563a <hci_disconn_complete+0x72>
	u16_t handle = sys_le16_to_cpu(evt->handle);
    55d0:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	conn = bt_conn_lookup_handle(handle);
    55d4:	4638      	mov	r0, r7
    55d6:	f000 fd89 	bl	60ec <bt_conn_lookup_handle>
	if (!conn) {
    55da:	4604      	mov	r4, r0
    55dc:	b9e0      	cbnz	r0, 5618 <hci_disconn_complete+0x50>
		BT_ERR("Unable to look up conn with handle %u", handle);
    55de:	2301      	movs	r3, #1
    55e0:	f04f 0200 	mov.w	r2, #0
    55e4:	4915      	ldr	r1, [pc, #84]	; (563c <hci_disconn_complete+0x74>)
    55e6:	f363 0207 	bfi	r2, r3, #0, #8
    55ea:	4b15      	ldr	r3, [pc, #84]	; (5640 <hci_disconn_complete+0x78>)
    55ec:	4815      	ldr	r0, [pc, #84]	; (5644 <hci_disconn_complete+0x7c>)
    55ee:	1a5b      	subs	r3, r3, r1
    55f0:	08db      	lsrs	r3, r3, #3
    55f2:	f363 128f 	bfi	r2, r3, #6, #10
    55f6:	4639      	mov	r1, r7
    55f8:	f005 ffcf 	bl	b59a <log_1>
	    atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    55fc:	2109      	movs	r1, #9
    55fe:	4812      	ldr	r0, [pc, #72]	; (5648 <hci_disconn_complete+0x80>)
    5600:	f006 fd94 	bl	c12c <atomic_test_bit>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    5604:	b1c8      	cbz	r0, 563a <hci_disconn_complete+0x72>
	    !atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    5606:	2105      	movs	r1, #5
    5608:	480f      	ldr	r0, [pc, #60]	; (5648 <hci_disconn_complete+0x80>)
    560a:	f006 fd8f 	bl	c12c <atomic_test_bit>
	    atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    560e:	b9a0      	cbnz	r0, 563a <hci_disconn_complete+0x72>
}
    5610:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		bt_le_adv_resume();
    5614:	f7ff bf98 	b.w	5548 <bt_le_adv_resume>
	conn->err = evt->reason;
    5618:	78f3      	ldrb	r3, [r6, #3]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    561a:	4629      	mov	r1, r5
	conn->err = evt->reason;
    561c:	7243      	strb	r3, [r0, #9]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    561e:	f000 fca1 	bl	5f64 <bt_conn_set_state>
	if (conn->type != BT_CONN_TYPE_LE) {
    5622:	78a3      	ldrb	r3, [r4, #2]
	conn->handle = 0U;
    5624:	8025      	strh	r5, [r4, #0]
	if (conn->type != BT_CONN_TYPE_LE) {
    5626:	2b01      	cmp	r3, #1
		bt_conn_unref(conn);
    5628:	4620      	mov	r0, r4
	if (conn->type != BT_CONN_TYPE_LE) {
    562a:	d003      	beq.n	5634 <hci_disconn_complete+0x6c>
}
    562c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		bt_conn_unref(conn);
    5630:	f006 be90 	b.w	c354 <bt_conn_unref>
	bt_conn_unref(conn);
    5634:	f006 fe8e 	bl	c354 <bt_conn_unref>
    5638:	e7e0      	b.n	55fc <hci_disconn_complete+0x34>
}
    563a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    563c:	0000e6dc 	.word	0x0000e6dc
    5640:	0000e6fc 	.word	0x0000e6fc
    5644:	0000fff7 	.word	0x0000fff7
    5648:	200048a8 	.word	0x200048a8

0000564c <enh_conn_complete>:
{
    564c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (evt->status) {
    564e:	7803      	ldrb	r3, [r0, #0]
{
    5650:	b085      	sub	sp, #20
    5652:	4605      	mov	r5, r0
	if (evt->status) {
    5654:	b343      	cbz	r3, 56a8 <enh_conn_complete+0x5c>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_SLAVE) {
    5656:	78c3      	ldrb	r3, [r0, #3]
    5658:	2b01      	cmp	r3, #1
    565a:	d162      	bne.n	5722 <enh_conn_complete+0xd6>
    565c:	2000      	movs	r0, #0
    565e:	f7fe f91d 	bl	389c <find_pending_connect.part.19>
		if (!conn) {
    5662:	4604      	mov	r4, r0
    5664:	2800      	cmp	r0, #0
    5666:	d05c      	beq.n	5722 <enh_conn_complete+0xd6>
		conn->err = evt->status;
    5668:	7829      	ldrb	r1, [r5, #0]
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    566a:	293c      	cmp	r1, #60	; 0x3c
		conn->err = evt->status;
    566c:	7241      	strb	r1, [r0, #9]
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    566e:	d10c      	bne.n	568a <enh_conn_complete+0x3e>
    5670:	f06f 0120 	mvn.w	r1, #32
    5674:	4850      	ldr	r0, [pc, #320]	; (57b8 <enh_conn_complete+0x16c>)
    5676:	f006 fd38 	bl	c0ea <atomic_and>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    567a:	2100      	movs	r1, #0
    567c:	4620      	mov	r0, r4
    567e:	f000 fc71 	bl	5f64 <bt_conn_set_state>
	bt_conn_unref(conn);
    5682:	4620      	mov	r0, r4
    5684:	f006 fe66 	bl	c354 <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL)) {
    5688:	e04b      	b.n	5722 <enh_conn_complete+0xd6>
		BT_WARN("Unexpected status 0x%02x", evt->status);
    568a:	2302      	movs	r3, #2
    568c:	f04f 0200 	mov.w	r2, #0
    5690:	484a      	ldr	r0, [pc, #296]	; (57bc <enh_conn_complete+0x170>)
    5692:	f363 0207 	bfi	r2, r3, #0, #8
    5696:	4b4a      	ldr	r3, [pc, #296]	; (57c0 <enh_conn_complete+0x174>)
    5698:	1a1b      	subs	r3, r3, r0
    569a:	08db      	lsrs	r3, r3, #3
    569c:	f363 128f 	bfi	r2, r3, #6, #10
    56a0:	4848      	ldr	r0, [pc, #288]	; (57c4 <enh_conn_complete+0x178>)
    56a2:	f005 ff7a 	bl	b59a <log_1>
		bt_conn_unref(conn);
    56a6:	e7ec      	b.n	5682 <enh_conn_complete+0x36>
	bt_addr_le_copy(&id_addr, &evt->peer_addr);
    56a8:	1d04      	adds	r4, r0, #4
	u16_t handle = sys_le16_to_cpu(evt->handle);
    56aa:	f8b0 7001 	ldrh.w	r7, [r0, #1]
	bt_addr_le_copy(&id_addr, &evt->peer_addr);
    56ae:	4621      	mov	r1, r4
    56b0:	a802      	add	r0, sp, #8
    56b2:	f006 fd17 	bl	c0e4 <bt_addr_le_copy>
	if (id_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    56b6:	f89d 3008 	ldrb.w	r3, [sp, #8]
	u16_t handle = sys_le16_to_cpu(evt->handle);
    56ba:	b2be      	uxth	r6, r7
	if (id_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    56bc:	3b02      	subs	r3, #2
    56be:	b2db      	uxtb	r3, r3
    56c0:	2b01      	cmp	r3, #1
    56c2:	d830      	bhi.n	5726 <enh_conn_complete+0xda>
	memcpy(dst, src, sizeof(*dst));
    56c4:	2206      	movs	r2, #6
    56c6:	f105 0111 	add.w	r1, r5, #17
    56ca:	f10d 0001 	add.w	r0, sp, #1
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    56ce:	f88d 3008 	strb.w	r3, [sp, #8]
    56d2:	f006 fbe4 	bl	be9e <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
    56d6:	2301      	movs	r3, #1
    56d8:	f88d 3000 	strb.w	r3, [sp]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_SLAVE) {
    56dc:	78eb      	ldrb	r3, [r5, #3]
    56de:	2b01      	cmp	r3, #1
    56e0:	d10c      	bne.n	56fc <enh_conn_complete+0xb0>
    56e2:	a802      	add	r0, sp, #8
    56e4:	f7fe f8da 	bl	389c <find_pending_connect.part.19>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    56e8:	78eb      	ldrb	r3, [r5, #3]
    56ea:	4604      	mov	r4, r0
    56ec:	2b01      	cmp	r3, #1
    56ee:	d104      	bne.n	56fa <enh_conn_complete+0xae>
    56f0:	f06f 0120 	mvn.w	r1, #32
    56f4:	4830      	ldr	r0, [pc, #192]	; (57b8 <enh_conn_complete+0x16c>)
    56f6:	f006 fcf8 	bl	c0ea <atomic_and>
	if (!conn) {
    56fa:	b9cc      	cbnz	r4, 5730 <enh_conn_complete+0xe4>
		BT_ERR("Unable to add new conn for handle %u", handle);
    56fc:	2301      	movs	r3, #1
    56fe:	f04f 0200 	mov.w	r2, #0
    5702:	492e      	ldr	r1, [pc, #184]	; (57bc <enh_conn_complete+0x170>)
    5704:	f363 0207 	bfi	r2, r3, #0, #8
    5708:	4b2d      	ldr	r3, [pc, #180]	; (57c0 <enh_conn_complete+0x174>)
    570a:	482f      	ldr	r0, [pc, #188]	; (57c8 <enh_conn_complete+0x17c>)
    570c:	1a5b      	subs	r3, r3, r1
    570e:	08db      	lsrs	r3, r3, #3
    5710:	4631      	mov	r1, r6
    5712:	f363 128f 	bfi	r2, r3, #6, #10
    5716:	f005 ff40 	bl	b59a <log_1>
		bt_hci_disconnect(handle, BT_HCI_ERR_MEM_CAPACITY_EXCEEDED);
    571a:	2107      	movs	r1, #7
    571c:	4630      	mov	r0, r6
    571e:	f006 fd4b 	bl	c1b8 <bt_hci_disconnect>
}
    5722:	b005      	add	sp, #20
    5724:	bdf0      	pop	{r4, r5, r6, r7, pc}
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
    5726:	4621      	mov	r1, r4
    5728:	4668      	mov	r0, sp
    572a:	f006 fcdb 	bl	c0e4 <bt_addr_le_copy>
    572e:	e7d5      	b.n	56dc <enh_conn_complete+0x90>
	conn->handle = handle;
    5730:	4620      	mov	r0, r4
	conn->err = 0U;
    5732:	2600      	movs	r6, #0
	conn->handle = handle;
    5734:	f820 7b70 	strh.w	r7, [r0], #112
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    5738:	a902      	add	r1, sp, #8
    573a:	f006 fcd3 	bl	c0e4 <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
    573e:	7e2a      	ldrb	r2, [r5, #24]
    5740:	7deb      	ldrb	r3, [r5, #23]
    5742:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    5746:	f8a4 3086 	strh.w	r3, [r4, #134]	; 0x86
	conn->le.latency = sys_le16_to_cpu(evt->latency);
    574a:	7eaa      	ldrb	r2, [r5, #26]
    574c:	7e6b      	ldrb	r3, [r5, #25]
    574e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    5752:	f8a4 308c 	strh.w	r3, [r4, #140]	; 0x8c
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    5756:	7eeb      	ldrb	r3, [r5, #27]
    5758:	7f2a      	ldrb	r2, [r5, #28]
    575a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    575e:	f8a4 308e 	strh.w	r3, [r4, #142]	; 0x8e
	conn->role = evt->role;
    5762:	78eb      	ldrb	r3, [r5, #3]
	conn->err = 0U;
    5764:	7266      	strb	r6, [r4, #9]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    5766:	2b01      	cmp	r3, #1
	conn->role = evt->role;
    5768:	70e3      	strb	r3, [r4, #3]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    576a:	d11c      	bne.n	57a6 <enh_conn_complete+0x15a>
		bt_addr_le_copy(&conn->le.init_addr, &peer_addr);
    576c:	4669      	mov	r1, sp
    576e:	f104 0077 	add.w	r0, r4, #119	; 0x77
    5772:	f006 fcb7 	bl	c0e4 <bt_addr_le_copy>
					&bt_dev.id_addr[conn->id]);
    5776:	7a21      	ldrb	r1, [r4, #8]
    5778:	4d14      	ldr	r5, [pc, #80]	; (57cc <enh_conn_complete+0x180>)
    577a:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
			bt_addr_le_copy(&conn->le.resp_addr,
    577e:	4429      	add	r1, r5
    5780:	f104 007e 	add.w	r0, r4, #126	; 0x7e
    5784:	f006 fcae 	bl	c0e4 <bt_addr_le_copy>
		if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    5788:	2109      	movs	r1, #9
    578a:	f105 0070 	add.w	r0, r5, #112	; 0x70
    578e:	f006 fccd 	bl	c12c <atomic_test_bit>
    5792:	b140      	cbz	r0, 57a6 <enh_conn_complete+0x15a>
		    BT_LE_STATES_SLAVE_CONN_ADV(bt_dev.le.states)) {
    5794:	4632      	mov	r2, r6
    5796:	f8d5 1084 	ldr.w	r1, [r5, #132]	; 0x84
    579a:	f001 0340 	and.w	r3, r1, #64	; 0x40
		if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    579e:	4313      	orrs	r3, r2
    57a0:	d001      	beq.n	57a6 <enh_conn_complete+0x15a>
			bt_le_adv_resume();
    57a2:	f7ff fed1 	bl	5548 <bt_le_adv_resume>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
    57a6:	4620      	mov	r0, r4
    57a8:	2106      	movs	r1, #6
    57aa:	f000 fbdb 	bl	5f64 <bt_conn_set_state>
	conn_auto_initiate(conn);
    57ae:	4620      	mov	r0, r4
    57b0:	f7fe fd0a 	bl	41c8 <conn_auto_initiate>
    57b4:	e765      	b.n	5682 <enh_conn_complete+0x36>
    57b6:	bf00      	nop
    57b8:	200048a8 	.word	0x200048a8
    57bc:	0000e6dc 	.word	0x0000e6dc
    57c0:	0000e6fc 	.word	0x0000e6fc
    57c4:	0000fee5 	.word	0x0000fee5
    57c8:	0000fefe 	.word	0x0000fefe
    57cc:	20004838 	.word	0x20004838

000057d0 <bt_buf_get_rx>:

	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN,
		 "Invalid buffer type requested");

#if defined(CONFIG_BT_HCI_ACL_FLOW_CONTROL)
	if (type == BT_BUF_EVT) {
    57d0:	2801      	cmp	r0, #1
{
    57d2:	b538      	push	{r3, r4, r5, lr}
    57d4:	4605      	mov	r5, r0
		buf = net_buf_alloc(&hci_rx_pool, timeout);
    57d6:	bf0c      	ite	eq
    57d8:	4806      	ldreq	r0, [pc, #24]	; (57f4 <bt_buf_get_rx+0x24>)
	} else {
		buf = net_buf_alloc(&acl_in_pool, timeout);
    57da:	4807      	ldrne	r0, [pc, #28]	; (57f8 <bt_buf_get_rx+0x28>)
    57dc:	f007 fbba 	bl	cf54 <net_buf_alloc_fixed>
    57e0:	4604      	mov	r4, r0
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
    57e2:	b120      	cbz	r0, 57ee <bt_buf_get_rx+0x1e>
		net_buf_reserve(buf, BT_BUF_RESERVE);
    57e4:	2101      	movs	r1, #1
    57e6:	3008      	adds	r0, #8
    57e8:	f007 fbd3 	bl	cf92 <net_buf_simple_reserve>
	*(u8_t *)net_buf_user_data(buf) = type;
    57ec:	7525      	strb	r5, [r4, #20]
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    57ee:	4620      	mov	r0, r4
    57f0:	bd38      	pop	{r3, r4, r5, pc}
    57f2:	bf00      	nop
    57f4:	20004dc4 	.word	0x20004dc4
    57f8:	20004d04 	.word	0x20004d04

000057fc <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(s32_t timeout)
{
    57fc:	b510      	push	{r4, lr}
    57fe:	4601      	mov	r1, r0
	__asm__ volatile(
    5800:	f04f 0320 	mov.w	r3, #32
    5804:	f3ef 8011 	mrs	r0, BASEPRI
    5808:	f383 8811 	msr	BASEPRI, r3
    580c:	f3bf 8f6f 	isb	sy
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
	bt_dev.sent_cmd = NULL;
    5810:	2300      	movs	r3, #0
	buf = bt_dev.sent_cmd;
    5812:	4a0c      	ldr	r2, [pc, #48]	; (5844 <bt_buf_get_cmd_complete+0x48>)
    5814:	f8d2 40c0 	ldr.w	r4, [r2, #192]	; 0xc0
	bt_dev.sent_cmd = NULL;
    5818:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
	__asm__ volatile(
    581c:	f380 8811 	msr	BASEPRI, r0
    5820:	f3bf 8f6f 	isb	sy
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);

	if (buf) {
    5824:	b924      	cbnz	r4, 5830 <bt_buf_get_cmd_complete+0x34>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
    5826:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    582a:	2001      	movs	r0, #1
    582c:	f7ff bfd0 	b.w	57d0 <bt_buf_get_rx>
    5830:	2101      	movs	r1, #1
		net_buf_reserve(buf, BT_BUF_RESERVE);
    5832:	f104 0008 	add.w	r0, r4, #8
    5836:	7521      	strb	r1, [r4, #20]
		buf->len = 0U;
    5838:	81a3      	strh	r3, [r4, #12]
		net_buf_reserve(buf, BT_BUF_RESERVE);
    583a:	f007 fbaa 	bl	cf92 <net_buf_simple_reserve>
}
    583e:	4620      	mov	r0, r4
    5840:	bd10      	pop	{r4, pc}
    5842:	bf00      	nop
    5844:	20004838 	.word	0x20004838

00005848 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(u8_t evt, bool discardable, s32_t timeout)
{
	switch (evt) {
    5848:	280e      	cmp	r0, #14
{
    584a:	460b      	mov	r3, r1
    584c:	b510      	push	{r4, lr}
    584e:	4611      	mov	r1, r2
	switch (evt) {
    5850:	d315      	bcc.n	587e <bt_buf_get_evt+0x36>
    5852:	280f      	cmp	r0, #15
    5854:	d90e      	bls.n	5874 <bt_buf_get_evt+0x2c>
    5856:	2813      	cmp	r0, #19
    5858:	d111      	bne.n	587e <bt_buf_get_evt+0x36>
#if defined(CONFIG_BT_CONN)
	case BT_HCI_EVT_NUM_COMPLETED_PACKETS:
		{
			struct net_buf *buf;

			buf = net_buf_alloc(&num_complete_pool, timeout);
    585a:	480d      	ldr	r0, [pc, #52]	; (5890 <bt_buf_get_evt+0x48>)
	default:
#if defined(CONFIG_BT_DISCARDABLE_BUF_COUNT)
		if (discardable) {
			struct net_buf *buf;

			buf = net_buf_alloc(&discardable_pool, timeout);
    585c:	f007 fb7a 	bl	cf54 <net_buf_alloc_fixed>
			if (buf) {
    5860:	4604      	mov	r4, r0
    5862:	b128      	cbz	r0, 5870 <bt_buf_get_evt+0x28>
				net_buf_reserve(buf, BT_BUF_RESERVE);
    5864:	2101      	movs	r1, #1
    5866:	3008      	adds	r0, #8
    5868:	f007 fb93 	bl	cf92 <net_buf_simple_reserve>
    586c:	2301      	movs	r3, #1
    586e:	7523      	strb	r3, [r4, #20]
		}
#endif /* CONFIG_BT_DISCARDABLE_BUF_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
    5870:	4620      	mov	r0, r4
    5872:	bd10      	pop	{r4, pc}
		return bt_buf_get_cmd_complete(timeout);
    5874:	4610      	mov	r0, r2
}
    5876:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return bt_buf_get_cmd_complete(timeout);
    587a:	f7ff bfbf 	b.w	57fc <bt_buf_get_cmd_complete>
		if (discardable) {
    587e:	b10b      	cbz	r3, 5884 <bt_buf_get_evt+0x3c>
			buf = net_buf_alloc(&discardable_pool, timeout);
    5880:	4804      	ldr	r0, [pc, #16]	; (5894 <bt_buf_get_evt+0x4c>)
    5882:	e7eb      	b.n	585c <bt_buf_get_evt+0x14>
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
    5884:	2001      	movs	r0, #1
}
    5886:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
    588a:	f7ff bfa1 	b.w	57d0 <bt_buf_get_rx>
    588e:	bf00      	nop
    5890:	20004de4 	.word	0x20004de4
    5894:	20004d64 	.word	0x20004d64

00005898 <prng_reseed.constprop.1>:

#include "hci_core.h"

static struct tc_hmac_prng_struct prng;

static int prng_reseed(struct tc_hmac_prng_struct *h)
    5898:	b530      	push	{r4, r5, lr}
{
	u8_t seed[32];
	s64_t extra;
	int ret, i;

	for (i = 0; i < (sizeof(seed) / 8); i++) {
    589a:	2400      	movs	r4, #0
static int prng_reseed(struct tc_hmac_prng_struct *h)
    589c:	b08d      	sub	sp, #52	; 0x34
		struct bt_hci_rp_le_rand *rp;
		struct net_buf *rsp;

		ret = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
    589e:	aa02      	add	r2, sp, #8
    58a0:	2100      	movs	r1, #0
    58a2:	f242 0018 	movw	r0, #8216	; 0x2018
    58a6:	f7fe fa4f 	bl	3d48 <bt_hci_cmd_send_sync>
		if (ret) {
    58aa:	4605      	mov	r5, r0
    58ac:	bb58      	cbnz	r0, 5906 <prng_reseed.constprop.1+0x6e>
			return ret;
		}

		rp = (void *)rsp->data;
    58ae:	9b02      	ldr	r3, [sp, #8]
		memcpy(&seed[i * 8], rp->rand, 8);
    58b0:	2208      	movs	r2, #8
    58b2:	6899      	ldr	r1, [r3, #8]
    58b4:	ab04      	add	r3, sp, #16
    58b6:	eb03 00c4 	add.w	r0, r3, r4, lsl #3
    58ba:	3101      	adds	r1, #1
    58bc:	f006 faef 	bl	be9e <memcpy>
	for (i = 0; i < (sizeof(seed) / 8); i++) {
    58c0:	3401      	adds	r4, #1

		net_buf_unref(rsp);
    58c2:	9802      	ldr	r0, [sp, #8]
    58c4:	f002 fd68 	bl	8398 <net_buf_unref>
	for (i = 0; i < (sizeof(seed) / 8); i++) {
    58c8:	2c04      	cmp	r4, #4
    58ca:	d1e8      	bne.n	589e <prng_reseed.constprop.1+0x6>
	return z_impl_k_uptime_get();
    58cc:	f008 fc2e 	bl	e12c <z_impl_k_uptime_get>
	}

	extra = k_uptime_get();

	ret = tc_hmac_prng_reseed(h, seed, sizeof(seed), (u8_t *)&extra,
    58d0:	2308      	movs	r3, #8
	extra = k_uptime_get();
    58d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
	ret = tc_hmac_prng_reseed(h, seed, sizeof(seed), (u8_t *)&extra,
    58d6:	9300      	str	r3, [sp, #0]
    58d8:	2220      	movs	r2, #32
    58da:	446b      	add	r3, sp
    58dc:	a904      	add	r1, sp, #16
    58de:	480b      	ldr	r0, [pc, #44]	; (590c <prng_reseed.constprop.1+0x74>)
    58e0:	f005 fdab 	bl	b43a <tc_hmac_prng_reseed>
				  sizeof(extra));
	if (ret == TC_CRYPTO_FAIL) {
    58e4:	b978      	cbnz	r0, 5906 <prng_reseed.constprop.1+0x6e>
		BT_ERR("Failed to re-seed PRNG");
    58e6:	2301      	movs	r3, #1
    58e8:	f04f 0100 	mov.w	r1, #0
    58ec:	4a08      	ldr	r2, [pc, #32]	; (5910 <prng_reseed.constprop.1+0x78>)
    58ee:	f363 0107 	bfi	r1, r3, #0, #8
    58f2:	4b08      	ldr	r3, [pc, #32]	; (5914 <prng_reseed.constprop.1+0x7c>)
    58f4:	4808      	ldr	r0, [pc, #32]	; (5918 <prng_reseed.constprop.1+0x80>)
    58f6:	1a9b      	subs	r3, r3, r2
    58f8:	08db      	lsrs	r3, r3, #3
    58fa:	f363 118f 	bfi	r1, r3, #6, #10
    58fe:	f005 fe3f 	bl	b580 <log_0>
		return -EIO;
    5902:	f06f 0504 	mvn.w	r5, #4
	}

	return 0;
}
    5906:	4628      	mov	r0, r5
    5908:	b00d      	add	sp, #52	; 0x34
    590a:	bd30      	pop	{r4, r5, pc}
    590c:	20000030 	.word	0x20000030
    5910:	0000e6dc 	.word	0x0000e6dc
    5914:	0000e6ec 	.word	0x0000e6ec
    5918:	000104b5 	.word	0x000104b5

0000591c <prng_init>:

int prng_init(void)
{
    591c:	b513      	push	{r0, r1, r4, lr}
	struct bt_hci_rp_le_rand *rp;
	struct net_buf *rsp;
	int ret;

	/* Check first that HCI_LE_Rand is supported */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
    591e:	4b18      	ldr	r3, [pc, #96]	; (5980 <prng_init+0x64>)
    5920:	f993 303b 	ldrsb.w	r3, [r3, #59]	; 0x3b
    5924:	2b00      	cmp	r3, #0
    5926:	da27      	bge.n	5978 <prng_init+0x5c>
		return -ENOTSUP;
	}

	ret = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
    5928:	aa01      	add	r2, sp, #4
    592a:	2100      	movs	r1, #0
    592c:	f242 0018 	movw	r0, #8216	; 0x2018
    5930:	f7fe fa0a 	bl	3d48 <bt_hci_cmd_send_sync>
	if (ret) {
    5934:	b9d8      	cbnz	r0, 596e <prng_init+0x52>
		return ret;
	}

	rp = (void *)rsp->data;
    5936:	9b01      	ldr	r3, [sp, #4]

	ret = tc_hmac_prng_init(&prng, rp->rand, sizeof(rp->rand));
    5938:	2208      	movs	r2, #8
    593a:	6899      	ldr	r1, [r3, #8]
    593c:	4811      	ldr	r0, [pc, #68]	; (5984 <prng_init+0x68>)
    593e:	3101      	adds	r1, #1
    5940:	f005 fd5b 	bl	b3fa <tc_hmac_prng_init>
    5944:	4604      	mov	r4, r0

	net_buf_unref(rsp);
    5946:	9801      	ldr	r0, [sp, #4]
    5948:	f002 fd26 	bl	8398 <net_buf_unref>

	if (ret == TC_CRYPTO_FAIL) {
    594c:	b98c      	cbnz	r4, 5972 <prng_init+0x56>
		BT_ERR("Failed to initialize PRNG");
    594e:	2301      	movs	r3, #1
    5950:	f04f 0100 	mov.w	r1, #0
    5954:	4a0c      	ldr	r2, [pc, #48]	; (5988 <prng_init+0x6c>)
    5956:	f363 0107 	bfi	r1, r3, #0, #8
    595a:	4b0c      	ldr	r3, [pc, #48]	; (598c <prng_init+0x70>)
    595c:	480c      	ldr	r0, [pc, #48]	; (5990 <prng_init+0x74>)
    595e:	1a9b      	subs	r3, r3, r2
    5960:	08db      	lsrs	r3, r3, #3
    5962:	f363 118f 	bfi	r1, r3, #6, #10
    5966:	f005 fe0b 	bl	b580 <log_0>
		return -EIO;
    596a:	f06f 0004 	mvn.w	r0, #4
	}

	/* re-seed is needed after init */
	return prng_reseed(&prng);
}
    596e:	b002      	add	sp, #8
    5970:	bd10      	pop	{r4, pc}
	return prng_reseed(&prng);
    5972:	f7ff ff91 	bl	5898 <prng_reseed.constprop.1>
    5976:	e7fa      	b.n	596e <prng_init+0x52>
		return -ENOTSUP;
    5978:	f06f 0022 	mvn.w	r0, #34	; 0x22
    597c:	e7f7      	b.n	596e <prng_init+0x52>
    597e:	bf00      	nop
    5980:	20004838 	.word	0x20004838
    5984:	20000030 	.word	0x20000030
    5988:	0000e6dc 	.word	0x0000e6dc
    598c:	0000e6ec 	.word	0x0000e6ec
    5990:	0001049b 	.word	0x0001049b

00005994 <bt_rand>:

int bt_rand(void *buf, size_t len)
{
    5994:	b538      	push	{r3, r4, r5, lr}
	int ret;

	ret = tc_hmac_prng_generate(buf, len, &prng);
    5996:	4a0a      	ldr	r2, [pc, #40]	; (59c0 <bt_rand+0x2c>)
{
    5998:	4604      	mov	r4, r0
    599a:	460d      	mov	r5, r1
	ret = tc_hmac_prng_generate(buf, len, &prng);
    599c:	f005 fd66 	bl	b46c <tc_hmac_prng_generate>
	if (ret == TC_HMAC_PRNG_RESEED_REQ) {
    59a0:	1c43      	adds	r3, r0, #1
    59a2:	d107      	bne.n	59b4 <bt_rand+0x20>
		ret = prng_reseed(&prng);
    59a4:	f7ff ff78 	bl	5898 <prng_reseed.constprop.1>
		if (ret) {
    59a8:	b948      	cbnz	r0, 59be <bt_rand+0x2a>
			return ret;
		}

		ret = tc_hmac_prng_generate(buf, len, &prng);
    59aa:	4a05      	ldr	r2, [pc, #20]	; (59c0 <bt_rand+0x2c>)
    59ac:	4629      	mov	r1, r5
    59ae:	4620      	mov	r0, r4
    59b0:	f005 fd5c 	bl	b46c <tc_hmac_prng_generate>
	}

	if (ret == TC_CRYPTO_SUCCESS) {
		return 0;
    59b4:	2801      	cmp	r0, #1
    59b6:	bf14      	ite	ne
    59b8:	f06f 0004 	mvnne.w	r0, #4
    59bc:	2000      	moveq	r0, #0
	}

	return -EIO;
}
    59be:	bd38      	pop	{r3, r4, r5, pc}
    59c0:	20000030 	.word	0x20000030

000059c4 <tx_free>:
	return bt_l2cap_update_conn_param(conn, param);
}

static void tx_free(struct bt_conn_tx *tx)
{
	tx->cb = NULL;
    59c4:	2300      	movs	r3, #0
{
    59c6:	4601      	mov	r1, r0
	tx->user_data = NULL;
    59c8:	e9c0 3301 	strd	r3, r3, [r0, #4]
	tx->pending_no_cb = 0U;
    59cc:	60c3      	str	r3, [r0, #12]
	k_fifo_put(&free_tx, tx);
    59ce:	4801      	ldr	r0, [pc, #4]	; (59d4 <tx_free+0x10>)
    59d0:	f008 b93f 	b.w	dc52 <k_queue_append>
    59d4:	20004cf4 	.word	0x20004cf4

000059d8 <notify_connected>:
{
    59d8:	b538      	push	{r3, r4, r5, lr}
    59da:	4605      	mov	r5, r0
	for (cb = callback_list; cb; cb = cb->_next) {
    59dc:	4b08      	ldr	r3, [pc, #32]	; (5a00 <notify_connected+0x28>)
    59de:	681c      	ldr	r4, [r3, #0]
    59e0:	7a69      	ldrb	r1, [r5, #9]
    59e2:	b92c      	cbnz	r4, 59f0 <notify_connected+0x18>
	if (!conn->err) {
    59e4:	b951      	cbnz	r1, 59fc <notify_connected+0x24>
		bt_gatt_connected(conn);
    59e6:	4628      	mov	r0, r5
}
    59e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_gatt_connected(conn);
    59ec:	f002 bb9a 	b.w	8124 <bt_gatt_connected>
		if (cb->connected) {
    59f0:	6823      	ldr	r3, [r4, #0]
    59f2:	b10b      	cbz	r3, 59f8 <notify_connected+0x20>
			cb->connected(conn, conn->err);
    59f4:	4628      	mov	r0, r5
    59f6:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    59f8:	6924      	ldr	r4, [r4, #16]
    59fa:	e7f1      	b.n	59e0 <notify_connected+0x8>
}
    59fc:	bd38      	pop	{r3, r4, r5, pc}
    59fe:	bf00      	nop
    5a00:	20000528 	.word	0x20000528

00005a04 <send_frag>:
	return 0;
}

static bool send_frag(struct bt_conn *conn, struct net_buf *buf, u8_t flags,
		      bool always_consume)
{
    5a04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5a08:	4604      	mov	r4, r0
    5a0a:	460e      	mov	r6, r1
    5a0c:	4691      	mov	r9, r2
    5a0e:	461f      	mov	r7, r3
	struct bt_conn_tx *tx = tx_data(buf)->tx;
    5a10:	694d      	ldr	r5, [r1, #20]
	return z_impl_k_sem_take(sem, timeout);
    5a12:	f04f 31ff 	mov.w	r1, #4294967295
    5a16:	4844      	ldr	r0, [pc, #272]	; (5b28 <send_frag+0x124>)
    5a18:	f004 fa60 	bl	9edc <z_impl_k_sem_take>

	/* Wait until the controller can accept ACL packets */
	k_sem_take(bt_conn_get_pkts(conn), K_FOREVER);

	/* Check for disconnection while waiting for pkts_sem */
	if (conn->state != BT_CONN_CONNECTED) {
    5a1c:	7aa3      	ldrb	r3, [r4, #10]
    5a1e:	2b06      	cmp	r3, #6
    5a20:	d152      	bne.n	5ac8 <send_frag+0xc4>
		goto fail;
	}

	hdr = net_buf_push(buf, sizeof(*hdr));
    5a22:	2104      	movs	r1, #4
    5a24:	f106 0008 	add.w	r0, r6, #8
    5a28:	f007 fadf 	bl	cfea <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    5a2c:	8822      	ldrh	r2, [r4, #0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    5a2e:	89b3      	ldrh	r3, [r6, #12]
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    5a30:	ea42 3209 	orr.w	r2, r2, r9, lsl #12
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    5a34:	3b04      	subs	r3, #4
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    5a36:	8002      	strh	r2, [r0, #0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    5a38:	8043      	strh	r3, [r0, #2]
	__asm__ volatile(
    5a3a:	f04f 0320 	mov.w	r3, #32
    5a3e:	f3ef 8211 	mrs	r2, BASEPRI
    5a42:	f383 8811 	msr	BASEPRI, r3
    5a46:	f3bf 8f6f 	isb	sy

	/* Add to pending, it must be done before bt_buf_set_type */
	key = irq_lock();
	if (tx) {
    5a4a:	2d00      	cmp	r5, #0
    5a4c:	d04e      	beq.n	5aec <send_frag+0xe8>
	parent->next = child;
    5a4e:	2300      	movs	r3, #0
    5a50:	602b      	str	r3, [r5, #0]
Z_GENLIST_APPEND(slist, snode)
    5a52:	69a3      	ldr	r3, [r4, #24]
    5a54:	2b00      	cmp	r3, #0
    5a56:	d146      	bne.n	5ae6 <send_frag+0xe2>
	list->head = node;
    5a58:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
    5a5c:	f382 8811 	msr	BASEPRI, r2
    5a60:	f3bf 8f6f 	isb	sy
    5a64:	2302      	movs	r3, #2
	}
	irq_unlock(key);

	bt_buf_set_type(buf, BT_BUF_ACL_OUT);

	err = bt_send(buf);
    5a66:	4630      	mov	r0, r6
    5a68:	7533      	strb	r3, [r6, #20]
    5a6a:	f7fe faf7 	bl	405c <bt_send>
	if (err) {
    5a6e:	4601      	mov	r1, r0
    5a70:	2800      	cmp	r0, #0
    5a72:	d057      	beq.n	5b24 <send_frag+0x120>
		BT_ERR("Unable to send to driver (err %d)", err);
    5a74:	2301      	movs	r3, #1
    5a76:	f04f 0200 	mov.w	r2, #0
    5a7a:	482c      	ldr	r0, [pc, #176]	; (5b2c <send_frag+0x128>)
    5a7c:	f363 0207 	bfi	r2, r3, #0, #8
    5a80:	4b2b      	ldr	r3, [pc, #172]	; (5b30 <send_frag+0x12c>)
    5a82:	1a1b      	subs	r3, r3, r0
    5a84:	08db      	lsrs	r3, r3, #3
    5a86:	f363 128f 	bfi	r2, r3, #6, #10
    5a8a:	482a      	ldr	r0, [pc, #168]	; (5b34 <send_frag+0x130>)
    5a8c:	f005 fd85 	bl	b59a <log_1>
	__asm__ volatile(
    5a90:	f04f 0320 	mov.w	r3, #32
    5a94:	f3ef 8111 	mrs	r1, BASEPRI
    5a98:	f383 8811 	msr	BASEPRI, r3
    5a9c:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		/* Roll back the pending TX info */
		if (tx) {
    5aa0:	2d00      	cmp	r5, #0
    5aa2:	d039      	beq.n	5b18 <send_frag+0x114>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    5aa4:	2200      	movs	r2, #0
    5aa6:	6963      	ldr	r3, [r4, #20]
    5aa8:	b153      	cbz	r3, 5ac0 <send_frag+0xbc>
    5aaa:	429d      	cmp	r5, r3
    5aac:	d131      	bne.n	5b12 <send_frag+0x10e>
Z_GENLIST_REMOVE(slist, snode)
    5aae:	682b      	ldr	r3, [r5, #0]
    5ab0:	bb4a      	cbnz	r2, 5b06 <send_frag+0x102>
    5ab2:	69a2      	ldr	r2, [r4, #24]
	list->head = node;
    5ab4:	6163      	str	r3, [r4, #20]
Z_GENLIST_REMOVE(slist, snode)
    5ab6:	4295      	cmp	r5, r2
    5ab8:	d100      	bne.n	5abc <send_frag+0xb8>
	list->tail = node;
    5aba:	61a3      	str	r3, [r4, #24]
	parent->next = child;
    5abc:	2300      	movs	r3, #0
    5abe:	602b      	str	r3, [r5, #0]
	__asm__ volatile(
    5ac0:	f381 8811 	msr	BASEPRI, r1
    5ac4:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
    5ac8:	4817      	ldr	r0, [pc, #92]	; (5b28 <send_frag+0x124>)
    5aca:	f004 f9db 	bl	9e84 <z_impl_k_sem_give>

	return true;

fail:
	k_sem_give(bt_conn_get_pkts(conn));
	if (tx) {
    5ace:	b115      	cbz	r5, 5ad6 <send_frag+0xd2>
		tx_free(tx);
    5ad0:	4628      	mov	r0, r5
    5ad2:	f7ff ff77 	bl	59c4 <tx_free>
	}

	if (always_consume) {
    5ad6:	b11f      	cbz	r7, 5ae0 <send_frag+0xdc>
		net_buf_unref(buf);
    5ad8:	4630      	mov	r0, r6
    5ada:	f002 fc5d 	bl	8398 <net_buf_unref>
	}
	return false;
    5ade:	2700      	movs	r7, #0
}
    5ae0:	4638      	mov	r0, r7
    5ae2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5ae6:	601d      	str	r5, [r3, #0]
	list->tail = node;
    5ae8:	61a5      	str	r5, [r4, #24]
    5aea:	e7b7      	b.n	5a5c <send_frag+0x58>
		tail_tx = (void *)sys_slist_peek_tail(&conn->tx_pending);
    5aec:	69a3      	ldr	r3, [r4, #24]
		if (tail_tx) {
    5aee:	b133      	cbz	r3, 5afe <send_frag+0xfa>
			pending_no_cb = &tail_tx->pending_no_cb;
    5af0:	f103 080c 	add.w	r8, r3, #12
    5af4:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
    5af6:	3301      	adds	r3, #1
    5af8:	f8c8 3000 	str.w	r3, [r8]
    5afc:	e7ae      	b.n	5a5c <send_frag+0x58>
			pending_no_cb = &conn->pending_no_cb;
    5afe:	f104 081c 	add.w	r8, r4, #28
    5b02:	69e3      	ldr	r3, [r4, #28]
    5b04:	e7f7      	b.n	5af6 <send_frag+0xf2>
	parent->next = child;
    5b06:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    5b08:	69a3      	ldr	r3, [r4, #24]
    5b0a:	429d      	cmp	r5, r3
	list->tail = node;
    5b0c:	bf08      	it	eq
    5b0e:	61a2      	streq	r2, [r4, #24]
    5b10:	e7d4      	b.n	5abc <send_frag+0xb8>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    5b12:	461a      	mov	r2, r3
    5b14:	681b      	ldr	r3, [r3, #0]
    5b16:	e7c7      	b.n	5aa8 <send_frag+0xa4>
			(*pending_no_cb)--;
    5b18:	f8d8 3000 	ldr.w	r3, [r8]
    5b1c:	3b01      	subs	r3, #1
    5b1e:	f8c8 3000 	str.w	r3, [r8]
    5b22:	e7cd      	b.n	5ac0 <send_frag+0xbc>
	return true;
    5b24:	2701      	movs	r7, #1
    5b26:	e7db      	b.n	5ae0 <send_frag+0xdc>
    5b28:	200048c4 	.word	0x200048c4
    5b2c:	0000e6dc 	.word	0x0000e6dc
    5b30:	0000e6e4 	.word	0x0000e6e4
    5b34:	0000fcfc 	.word	0x0000fcfc

00005b38 <conn_cleanup>:

static struct k_poll_signal conn_change =
		K_POLL_SIGNAL_INITIALIZER(conn_change);

static void conn_cleanup(struct bt_conn *conn)
{
    5b38:	b570      	push	{r4, r5, r6, lr}
    5b3a:	4605      	mov	r5, r0
	struct net_buf *buf;

	/* Give back any allocated buffers */
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
    5b3c:	f100 0634 	add.w	r6, r0, #52	; 0x34
    5b40:	2100      	movs	r1, #0
    5b42:	4630      	mov	r0, r6
    5b44:	f007 fa0c 	bl	cf60 <net_buf_get>
    5b48:	4604      	mov	r4, r0
    5b4a:	b950      	cbnz	r0, 5b62 <conn_cleanup+0x2a>
	}

	__ASSERT(sys_slist_is_empty(&conn->tx_pending), "Pending TX packets");
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);

	bt_conn_reset_rx_state(conn);
    5b4c:	4628      	mov	r0, r5
    5b4e:	f006 fba4 	bl	c29a <bt_conn_reset_rx_state>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    5b52:	4622      	mov	r2, r4
    5b54:	f105 0150 	add.w	r1, r5, #80	; 0x50
    5b58:	4806      	ldr	r0, [pc, #24]	; (5b74 <conn_cleanup+0x3c>)

	k_delayed_work_submit(&conn->update_work, K_NO_WAIT);
}
    5b5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5b5e:	f004 bb03 	b.w	a168 <k_delayed_work_submit_to_queue>
		if (tx_data(buf)->tx) {
    5b62:	6960      	ldr	r0, [r4, #20]
    5b64:	b108      	cbz	r0, 5b6a <conn_cleanup+0x32>
			tx_free(tx_data(buf)->tx);
    5b66:	f7ff ff2d 	bl	59c4 <tx_free>
		net_buf_unref(buf);
    5b6a:	4620      	mov	r0, r4
    5b6c:	f002 fc14 	bl	8398 <net_buf_unref>
    5b70:	e7e6      	b.n	5b40 <conn_cleanup+0x8>
    5b72:	bf00      	nop
    5b74:	2000120c 	.word	0x2000120c

00005b78 <bt_conn_get_pkts>:
}
    5b78:	4800      	ldr	r0, [pc, #0]	; (5b7c <bt_conn_get_pkts+0x4>)
    5b7a:	4770      	bx	lr
    5b7c:	200048c4 	.word	0x200048c4

00005b80 <notify_le_param_updated>:
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
    5b80:	1d02      	adds	r2, r0, #4
{
    5b82:	b570      	push	{r4, r5, r6, lr}
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
    5b84:	2109      	movs	r1, #9
{
    5b86:	4604      	mov	r4, r0
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
    5b88:	4610      	mov	r0, r2
    5b8a:	f006 fb7f 	bl	c28c <atomic_test_bit>
    5b8e:	b1a8      	cbz	r0, 5bbc <notify_le_param_updated+0x3c>
	    conn->le.interval >= conn->le.interval_min &&
    5b90:	f8b4 3086 	ldrh.w	r3, [r4, #134]	; 0x86
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
    5b94:	f8b4 1088 	ldrh.w	r1, [r4, #136]	; 0x88
    5b98:	4299      	cmp	r1, r3
    5b9a:	d80f      	bhi.n	5bbc <notify_le_param_updated+0x3c>
	    conn->le.interval >= conn->le.interval_min &&
    5b9c:	f8b4 108a 	ldrh.w	r1, [r4, #138]	; 0x8a
    5ba0:	4299      	cmp	r1, r3
    5ba2:	d30b      	bcc.n	5bbc <notify_le_param_updated+0x3c>
	    conn->le.latency == conn->le.pending_latency &&
    5ba4:	e9d4 1323 	ldrd	r1, r3, [r4, #140]	; 0x8c
    5ba8:	4299      	cmp	r1, r3
    5baa:	d107      	bne.n	5bbc <notify_le_param_updated+0x3c>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    5bac:	e8d2 3fef 	ldaex	r3, [r2]
    5bb0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    5bb4:	e8c2 3fe1 	stlex	r1, r3, [r2]
    5bb8:	2900      	cmp	r1, #0
    5bba:	d1f7      	bne.n	5bac <notify_le_param_updated+0x2c>
	for (cb = callback_list; cb; cb = cb->_next) {
    5bbc:	4b07      	ldr	r3, [pc, #28]	; (5bdc <notify_le_param_updated+0x5c>)
    5bbe:	681d      	ldr	r5, [r3, #0]
    5bc0:	b905      	cbnz	r5, 5bc4 <notify_le_param_updated+0x44>
}
    5bc2:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->le_param_updated) {
    5bc4:	68ee      	ldr	r6, [r5, #12]
    5bc6:	b13e      	cbz	r6, 5bd8 <notify_le_param_updated+0x58>
			cb->le_param_updated(conn, conn->le.interval,
    5bc8:	f8b4 308e 	ldrh.w	r3, [r4, #142]	; 0x8e
    5bcc:	f8b4 208c 	ldrh.w	r2, [r4, #140]	; 0x8c
    5bd0:	f8b4 1086 	ldrh.w	r1, [r4, #134]	; 0x86
    5bd4:	4620      	mov	r0, r4
    5bd6:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
    5bd8:	692d      	ldr	r5, [r5, #16]
    5bda:	e7f1      	b.n	5bc0 <notify_le_param_updated+0x40>
    5bdc:	20000528 	.word	0x20000528

00005be0 <le_param_req>:
{
    5be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5be2:	4607      	mov	r7, r0
	if (!bt_le_conn_params_valid(param)) {
    5be4:	4608      	mov	r0, r1
{
    5be6:	460e      	mov	r6, r1
	if (!bt_le_conn_params_valid(param)) {
    5be8:	f006 fab8 	bl	c15c <bt_le_conn_params_valid>
    5bec:	4605      	mov	r5, r0
    5bee:	b910      	cbnz	r0, 5bf6 <le_param_req+0x16>
		return false;
    5bf0:	2500      	movs	r5, #0
}
    5bf2:	4628      	mov	r0, r5
    5bf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
    5bf6:	4b09      	ldr	r3, [pc, #36]	; (5c1c <le_param_req+0x3c>)
    5bf8:	681c      	ldr	r4, [r3, #0]
    5bfa:	2c00      	cmp	r4, #0
    5bfc:	d0f9      	beq.n	5bf2 <le_param_req+0x12>
		if (!cb->le_param_req) {
    5bfe:	68a3      	ldr	r3, [r4, #8]
    5c00:	b90b      	cbnz	r3, 5c06 <le_param_req+0x26>
	for (cb = callback_list; cb; cb = cb->_next) {
    5c02:	6924      	ldr	r4, [r4, #16]
    5c04:	e7f9      	b.n	5bfa <le_param_req+0x1a>
		if (!cb->le_param_req(conn, param)) {
    5c06:	4631      	mov	r1, r6
    5c08:	4638      	mov	r0, r7
    5c0a:	4798      	blx	r3
    5c0c:	2800      	cmp	r0, #0
    5c0e:	d0ef      	beq.n	5bf0 <le_param_req+0x10>
		if (!bt_le_conn_params_valid(param)) {
    5c10:	4630      	mov	r0, r6
    5c12:	f006 faa3 	bl	c15c <bt_le_conn_params_valid>
    5c16:	2800      	cmp	r0, #0
    5c18:	d1f3      	bne.n	5c02 <le_param_req+0x22>
    5c1a:	e7e9      	b.n	5bf0 <le_param_req+0x10>
    5c1c:	20000528 	.word	0x20000528

00005c20 <bt_conn_cb_register>:
	cb->_next = callback_list;
    5c20:	4b02      	ldr	r3, [pc, #8]	; (5c2c <bt_conn_cb_register+0xc>)
    5c22:	681a      	ldr	r2, [r3, #0]
	callback_list = cb;
    5c24:	6018      	str	r0, [r3, #0]
	cb->_next = callback_list;
    5c26:	6102      	str	r2, [r0, #16]
}
    5c28:	4770      	bx	lr
    5c2a:	bf00      	nop
    5c2c:	20000528 	.word	0x20000528

00005c30 <bt_conn_recv>:
{
    5c30:	b570      	push	{r4, r5, r6, lr}
    5c32:	4616      	mov	r6, r2
    5c34:	4604      	mov	r4, r0
    5c36:	460d      	mov	r5, r1
	tx_notify(conn);
    5c38:	f006 fb4c 	bl	c2d4 <tx_notify>
	switch (flags) {
    5c3c:	2e01      	cmp	r6, #1
    5c3e:	d020      	beq.n	5c82 <bt_conn_recv+0x52>
    5c40:	2e02      	cmp	r6, #2
    5c42:	f040 8081 	bne.w	5d48 <bt_conn_recv+0x118>
		len = sys_le16_to_cpu(hdr->len);
    5c46:	68ab      	ldr	r3, [r5, #8]
    5c48:	881e      	ldrh	r6, [r3, #0]
		if (conn->rx_len) {
    5c4a:	89a3      	ldrh	r3, [r4, #12]
    5c4c:	b183      	cbz	r3, 5c70 <bt_conn_recv+0x40>
			BT_ERR("Unexpected first L2CAP frame");
    5c4e:	2301      	movs	r3, #1
    5c50:	f04f 0100 	mov.w	r1, #0
    5c54:	4a47      	ldr	r2, [pc, #284]	; (5d74 <bt_conn_recv+0x144>)
    5c56:	f363 0107 	bfi	r1, r3, #0, #8
    5c5a:	4b47      	ldr	r3, [pc, #284]	; (5d78 <bt_conn_recv+0x148>)
    5c5c:	4847      	ldr	r0, [pc, #284]	; (5d7c <bt_conn_recv+0x14c>)
    5c5e:	1a9b      	subs	r3, r3, r2
    5c60:	08db      	lsrs	r3, r3, #3
    5c62:	f363 118f 	bfi	r1, r3, #6, #10
    5c66:	f005 fc8b 	bl	b580 <log_0>
			bt_conn_reset_rx_state(conn);
    5c6a:	4620      	mov	r0, r4
    5c6c:	f006 fb15 	bl	c29a <bt_conn_reset_rx_state>
		conn->rx_len = (sizeof(*hdr) + len) - buf->len;
    5c70:	89ab      	ldrh	r3, [r5, #12]
    5c72:	1af3      	subs	r3, r6, r3
    5c74:	3304      	adds	r3, #4
    5c76:	b29b      	uxth	r3, r3
    5c78:	81a3      	strh	r3, [r4, #12]
		if (conn->rx_len) {
    5c7a:	2b00      	cmp	r3, #0
    5c7c:	d04f      	beq.n	5d1e <bt_conn_recv+0xee>
			conn->rx = buf;
    5c7e:	6125      	str	r5, [r4, #16]
}
    5c80:	bd70      	pop	{r4, r5, r6, pc}
		if (!conn->rx_len) {
    5c82:	89a3      	ldrh	r3, [r4, #12]
    5c84:	b9ab      	cbnz	r3, 5cb2 <bt_conn_recv+0x82>
			BT_ERR("Unexpected L2CAP continuation");
    5c86:	2301      	movs	r3, #1
    5c88:	f04f 0100 	mov.w	r1, #0
    5c8c:	4a39      	ldr	r2, [pc, #228]	; (5d74 <bt_conn_recv+0x144>)
    5c8e:	f363 0107 	bfi	r1, r3, #0, #8
    5c92:	4b39      	ldr	r3, [pc, #228]	; (5d78 <bt_conn_recv+0x148>)
    5c94:	483a      	ldr	r0, [pc, #232]	; (5d80 <bt_conn_recv+0x150>)
    5c96:	1a9b      	subs	r3, r3, r2
    5c98:	08db      	lsrs	r3, r3, #3
    5c9a:	f363 118f 	bfi	r1, r3, #6, #10
			BT_ERR("L2CAP data overflow");
    5c9e:	f005 fc6f 	bl	b580 <log_0>
			bt_conn_reset_rx_state(conn);
    5ca2:	4620      	mov	r0, r4
    5ca4:	f006 faf9 	bl	c29a <bt_conn_reset_rx_state>
			net_buf_unref(buf);
    5ca8:	4628      	mov	r0, r5
}
    5caa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			net_buf_unref(buf);
    5cae:	f002 bb73 	b.w	8398 <net_buf_unref>
		if (buf->len > conn->rx_len) {
    5cb2:	89ae      	ldrh	r6, [r5, #12]
    5cb4:	42b3      	cmp	r3, r6
    5cb6:	d20c      	bcs.n	5cd2 <bt_conn_recv+0xa2>
			BT_ERR("L2CAP data overflow");
    5cb8:	2301      	movs	r3, #1
    5cba:	f04f 0100 	mov.w	r1, #0
    5cbe:	4a2d      	ldr	r2, [pc, #180]	; (5d74 <bt_conn_recv+0x144>)
    5cc0:	f363 0107 	bfi	r1, r3, #0, #8
    5cc4:	4b2c      	ldr	r3, [pc, #176]	; (5d78 <bt_conn_recv+0x148>)
    5cc6:	482f      	ldr	r0, [pc, #188]	; (5d84 <bt_conn_recv+0x154>)
    5cc8:	1a9b      	subs	r3, r3, r2
    5cca:	08db      	lsrs	r3, r3, #3
    5ccc:	f363 118f 	bfi	r1, r3, #6, #10
    5cd0:	e7e5      	b.n	5c9e <bt_conn_recv+0x6e>
		if (buf->len > net_buf_tailroom(conn->rx)) {
    5cd2:	6920      	ldr	r0, [r4, #16]
    5cd4:	3008      	adds	r0, #8
    5cd6:	f007 f9b5 	bl	d044 <net_buf_simple_tailroom>
    5cda:	4286      	cmp	r6, r0
    5cdc:	d90c      	bls.n	5cf8 <bt_conn_recv+0xc8>
			BT_ERR("Not enough buffer space for L2CAP data");
    5cde:	2301      	movs	r3, #1
    5ce0:	f04f 0100 	mov.w	r1, #0
    5ce4:	4a23      	ldr	r2, [pc, #140]	; (5d74 <bt_conn_recv+0x144>)
    5ce6:	f363 0107 	bfi	r1, r3, #0, #8
    5cea:	4b23      	ldr	r3, [pc, #140]	; (5d78 <bt_conn_recv+0x148>)
    5cec:	4826      	ldr	r0, [pc, #152]	; (5d88 <bt_conn_recv+0x158>)
    5cee:	1a9b      	subs	r3, r3, r2
    5cf0:	08db      	lsrs	r3, r3, #3
    5cf2:	f363 118f 	bfi	r1, r3, #6, #10
    5cf6:	e7d2      	b.n	5c9e <bt_conn_recv+0x6e>
		net_buf_add_mem(conn->rx, buf->data, buf->len);
    5cf8:	6920      	ldr	r0, [r4, #16]
    5cfa:	89aa      	ldrh	r2, [r5, #12]
    5cfc:	68a9      	ldr	r1, [r5, #8]
    5cfe:	3008      	adds	r0, #8
    5d00:	f007 f962 	bl	cfc8 <net_buf_simple_add_mem>
		conn->rx_len -= buf->len;
    5d04:	89a3      	ldrh	r3, [r4, #12]
    5d06:	89aa      	ldrh	r2, [r5, #12]
		net_buf_unref(buf);
    5d08:	4628      	mov	r0, r5
		conn->rx_len -= buf->len;
    5d0a:	1a9b      	subs	r3, r3, r2
    5d0c:	81a3      	strh	r3, [r4, #12]
		net_buf_unref(buf);
    5d0e:	f002 fb43 	bl	8398 <net_buf_unref>
		if (conn->rx_len) {
    5d12:	89a3      	ldrh	r3, [r4, #12]
    5d14:	2b00      	cmp	r3, #0
    5d16:	d1b3      	bne.n	5c80 <bt_conn_recv+0x50>
		buf = conn->rx;
    5d18:	6925      	ldr	r5, [r4, #16]
		conn->rx_len = 0U;
    5d1a:	81a3      	strh	r3, [r4, #12]
		conn->rx = NULL;
    5d1c:	6123      	str	r3, [r4, #16]
	len = sys_le16_to_cpu(hdr->len);
    5d1e:	68ab      	ldr	r3, [r5, #8]
	if (sizeof(*hdr) + len != buf->len) {
    5d20:	89aa      	ldrh	r2, [r5, #12]
    5d22:	8819      	ldrh	r1, [r3, #0]
    5d24:	1d0b      	adds	r3, r1, #4
    5d26:	4293      	cmp	r3, r2
    5d28:	d01e      	beq.n	5d68 <bt_conn_recv+0x138>
		BT_ERR("ACL len mismatch (%u != %u)", len, buf->len);
    5d2a:	2001      	movs	r0, #1
    5d2c:	f04f 0300 	mov.w	r3, #0
    5d30:	4c10      	ldr	r4, [pc, #64]	; (5d74 <bt_conn_recv+0x144>)
    5d32:	f360 0307 	bfi	r3, r0, #0, #8
    5d36:	4810      	ldr	r0, [pc, #64]	; (5d78 <bt_conn_recv+0x148>)
    5d38:	1b00      	subs	r0, r0, r4
    5d3a:	08c0      	lsrs	r0, r0, #3
    5d3c:	f360 138f 	bfi	r3, r0, #6, #10
    5d40:	4812      	ldr	r0, [pc, #72]	; (5d8c <bt_conn_recv+0x15c>)
    5d42:	f005 fc3e 	bl	b5c2 <log_2>
		net_buf_unref(buf);
    5d46:	e7af      	b.n	5ca8 <bt_conn_recv+0x78>
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
    5d48:	2301      	movs	r3, #1
    5d4a:	f04f 0200 	mov.w	r2, #0
    5d4e:	4909      	ldr	r1, [pc, #36]	; (5d74 <bt_conn_recv+0x144>)
    5d50:	f363 0207 	bfi	r2, r3, #0, #8
    5d54:	4b08      	ldr	r3, [pc, #32]	; (5d78 <bt_conn_recv+0x148>)
    5d56:	480e      	ldr	r0, [pc, #56]	; (5d90 <bt_conn_recv+0x160>)
    5d58:	1a5b      	subs	r3, r3, r1
    5d5a:	08db      	lsrs	r3, r3, #3
    5d5c:	f363 128f 	bfi	r2, r3, #6, #10
    5d60:	4631      	mov	r1, r6
    5d62:	f005 fc1a 	bl	b59a <log_1>
		bt_conn_reset_rx_state(conn);
    5d66:	e79c      	b.n	5ca2 <bt_conn_recv+0x72>
	bt_l2cap_recv(conn, buf);
    5d68:	4629      	mov	r1, r5
    5d6a:	4620      	mov	r0, r4
}
    5d6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_recv(conn, buf);
    5d70:	f000 bd28 	b.w	67c4 <bt_l2cap_recv>
    5d74:	0000e6dc 	.word	0x0000e6dc
    5d78:	0000e6e4 	.word	0x0000e6e4
    5d7c:	0001052c 	.word	0x0001052c
    5d80:	00010549 	.word	0x00010549
    5d84:	00010567 	.word	0x00010567
    5d88:	0001057b 	.word	0x0001057b
    5d8c:	000105c0 	.word	0x000105c0
    5d90:	000105a2 	.word	0x000105a2

00005d94 <bt_conn_send_cb>:
{
    5d94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5d98:	4698      	mov	r8, r3
	if (conn->state != BT_CONN_CONNECTED) {
    5d9a:	7a83      	ldrb	r3, [r0, #10]
{
    5d9c:	4606      	mov	r6, r0
	if (conn->state != BT_CONN_CONNECTED) {
    5d9e:	2b06      	cmp	r3, #6
{
    5da0:	460d      	mov	r5, r1
    5da2:	4617      	mov	r7, r2
	if (conn->state != BT_CONN_CONNECTED) {
    5da4:	d013      	beq.n	5dce <bt_conn_send_cb+0x3a>
		BT_ERR("not connected!");
    5da6:	2301      	movs	r3, #1
    5da8:	f04f 0100 	mov.w	r1, #0
    5dac:	4a2d      	ldr	r2, [pc, #180]	; (5e64 <bt_conn_send_cb+0xd0>)
    5dae:	f363 0107 	bfi	r1, r3, #0, #8
    5db2:	4b2d      	ldr	r3, [pc, #180]	; (5e68 <bt_conn_send_cb+0xd4>)
    5db4:	482d      	ldr	r0, [pc, #180]	; (5e6c <bt_conn_send_cb+0xd8>)
    5db6:	1a9b      	subs	r3, r3, r2
    5db8:	08db      	lsrs	r3, r3, #3
    5dba:	f363 118f 	bfi	r1, r3, #6, #10
    5dbe:	f005 fbdf 	bl	b580 <log_0>
		net_buf_unref(buf);
    5dc2:	4628      	mov	r0, r5
    5dc4:	f002 fae8 	bl	8398 <net_buf_unref>
			return -ENOTCONN;
    5dc8:	f06f 0038 	mvn.w	r0, #56	; 0x38
    5dcc:	e021      	b.n	5e12 <bt_conn_send_cb+0x7e>
	if (cb) {
    5dce:	2a00      	cmp	r2, #0
    5dd0:	d045      	beq.n	5e5e <bt_conn_send_cb+0xca>
	return z_impl_k_current_get();
    5dd2:	f004 f851 	bl	9e78 <z_impl_k_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
    5dd6:	4b26      	ldr	r3, [pc, #152]	; (5e70 <bt_conn_send_cb+0xdc>)
    5dd8:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
    5dda:	4826      	ldr	r0, [pc, #152]	; (5e74 <bt_conn_send_cb+0xe0>)
    5ddc:	bf0c      	ite	eq
    5dde:	2100      	moveq	r1, #0
    5de0:	f04f 31ff 	movne.w	r1, #4294967295
    5de4:	f007 ff63 	bl	dcae <z_impl_k_queue_get>
    5de8:	4604      	mov	r4, r0
		if (!tx) {
    5dea:	b9a0      	cbnz	r0, 5e16 <bt_conn_send_cb+0x82>
			BT_ERR("Unable to allocate TX context");
    5dec:	2301      	movs	r3, #1
    5dee:	f04f 0100 	mov.w	r1, #0
    5df2:	4a1c      	ldr	r2, [pc, #112]	; (5e64 <bt_conn_send_cb+0xd0>)
    5df4:	f363 0107 	bfi	r1, r3, #0, #8
    5df8:	4b1b      	ldr	r3, [pc, #108]	; (5e68 <bt_conn_send_cb+0xd4>)
    5dfa:	481f      	ldr	r0, [pc, #124]	; (5e78 <bt_conn_send_cb+0xe4>)
    5dfc:	1a9b      	subs	r3, r3, r2
    5dfe:	08db      	lsrs	r3, r3, #3
    5e00:	f363 118f 	bfi	r1, r3, #6, #10
    5e04:	f005 fbbc 	bl	b580 <log_0>
			net_buf_unref(buf);
    5e08:	4628      	mov	r0, r5
    5e0a:	f002 fac5 	bl	8398 <net_buf_unref>
			return -ENOBUFS;
    5e0e:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
    5e12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->state != BT_CONN_CONNECTED) {
    5e16:	7ab3      	ldrb	r3, [r6, #10]
    5e18:	2b06      	cmp	r3, #6
    5e1a:	d014      	beq.n	5e46 <bt_conn_send_cb+0xb2>
			BT_WARN("Disconnected while allocating context");
    5e1c:	2302      	movs	r3, #2
    5e1e:	f04f 0100 	mov.w	r1, #0
    5e22:	4a10      	ldr	r2, [pc, #64]	; (5e64 <bt_conn_send_cb+0xd0>)
    5e24:	f363 0107 	bfi	r1, r3, #0, #8
    5e28:	4b0f      	ldr	r3, [pc, #60]	; (5e68 <bt_conn_send_cb+0xd4>)
    5e2a:	4814      	ldr	r0, [pc, #80]	; (5e7c <bt_conn_send_cb+0xe8>)
    5e2c:	1a9b      	subs	r3, r3, r2
    5e2e:	08db      	lsrs	r3, r3, #3
    5e30:	f363 118f 	bfi	r1, r3, #6, #10
    5e34:	f005 fba4 	bl	b580 <log_0>
			net_buf_unref(buf);
    5e38:	4628      	mov	r0, r5
    5e3a:	f002 faad 	bl	8398 <net_buf_unref>
			tx_free(tx);
    5e3e:	4620      	mov	r0, r4
    5e40:	f7ff fdc0 	bl	59c4 <tx_free>
    5e44:	e7c0      	b.n	5dc8 <bt_conn_send_cb+0x34>
		tx->pending_no_cb = 0U;
    5e46:	2300      	movs	r3, #0
		tx->user_data = user_data;
    5e48:	e9c0 7801 	strd	r7, r8, [r0, #4]
		tx->pending_no_cb = 0U;
    5e4c:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
    5e4e:	6168      	str	r0, [r5, #20]
	net_buf_put(&conn->tx_queue, buf);
    5e50:	f106 0034 	add.w	r0, r6, #52	; 0x34
    5e54:	4629      	mov	r1, r5
    5e56:	f007 f8a0 	bl	cf9a <net_buf_put>
	return 0;
    5e5a:	2000      	movs	r0, #0
    5e5c:	e7d9      	b.n	5e12 <bt_conn_send_cb+0x7e>
		tx_data(buf)->tx = NULL;
    5e5e:	616a      	str	r2, [r5, #20]
    5e60:	e7f6      	b.n	5e50 <bt_conn_send_cb+0xbc>
    5e62:	bf00      	nop
    5e64:	0000e6dc 	.word	0x0000e6dc
    5e68:	0000e6e4 	.word	0x0000e6e4
    5e6c:	000105dc 	.word	0x000105dc
    5e70:	2000121c 	.word	0x2000121c
    5e74:	20004cf4 	.word	0x20004cf4
    5e78:	000105eb 	.word	0x000105eb
    5e7c:	00010609 	.word	0x00010609

00005e80 <bt_conn_prepare_events>:
{
	int i, ev_count = 0;

	BT_DBG("");

	conn_change.signaled = 0U;
    5e80:	2200      	movs	r2, #0
    5e82:	4b18      	ldr	r3, [pc, #96]	; (5ee4 <bt_conn_prepare_events+0x64>)
{
    5e84:	b510      	push	{r4, lr}
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    5e86:	2101      	movs	r1, #1
	conn_change.signaled = 0U;
    5e88:	609a      	str	r2, [r3, #8]
{
    5e8a:	4604      	mov	r4, r0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    5e8c:	f004 fb1c 	bl	a4c8 <k_poll_event_init>
			  K_POLL_MODE_NOTIFY_ONLY, &conn_change);

	for (i = 0; i < ARRAY_SIZE(conns); i++) {
		struct bt_conn *conn = &conns[i];

		if (!atomic_get(&conn->ref)) {
    5e90:	4b15      	ldr	r3, [pc, #84]	; (5ee8 <bt_conn_prepare_events+0x68>)
    5e92:	f103 004c 	add.w	r0, r3, #76	; 0x4c
    5e96:	f006 f9f6 	bl	c286 <atomic_get>
    5e9a:	4619      	mov	r1, r3
    5e9c:	b908      	cbnz	r0, 5ea2 <bt_conn_prepare_events+0x22>
		}

		if (conn->state == BT_CONN_DISCONNECTED &&
		    atomic_test_and_clear_bit(conn->flags, BT_CONN_CLEANUP)) {
			conn_cleanup(conn);
			continue;
    5e9e:	2001      	movs	r0, #1
				  &conn->tx_queue);
		events[ev_count++].tag = BT_EVENT_CONN_TX_QUEUE;
	}

	return ev_count;
}
    5ea0:	bd10      	pop	{r4, pc}
		if (conn->state == BT_CONN_DISCONNECTED &&
    5ea2:	7a9a      	ldrb	r2, [r3, #10]
    5ea4:	b97a      	cbnz	r2, 5ec6 <bt_conn_prepare_events+0x46>
    5ea6:	1d1a      	adds	r2, r3, #4
    5ea8:	e8d2 0fef 	ldaex	r0, [r2]
    5eac:	f020 0c40 	bic.w	ip, r0, #64	; 0x40
    5eb0:	e8c2 cfee 	stlex	lr, ip, [r2]
    5eb4:	f1be 0f00 	cmp.w	lr, #0
    5eb8:	d1f6      	bne.n	5ea8 <bt_conn_prepare_events+0x28>
    5eba:	0642      	lsls	r2, r0, #25
    5ebc:	d503      	bpl.n	5ec6 <bt_conn_prepare_events+0x46>
			conn_cleanup(conn);
    5ebe:	4618      	mov	r0, r3
    5ec0:	f7ff fe3a 	bl	5b38 <conn_cleanup>
    5ec4:	e7eb      	b.n	5e9e <bt_conn_prepare_events+0x1e>
		if (conn->state != BT_CONN_CONNECTED) {
    5ec6:	7a8b      	ldrb	r3, [r1, #10]
    5ec8:	2b06      	cmp	r3, #6
    5eca:	d1e8      	bne.n	5e9e <bt_conn_prepare_events+0x1e>
		k_poll_event_init(&events[ev_count],
    5ecc:	4b07      	ldr	r3, [pc, #28]	; (5eec <bt_conn_prepare_events+0x6c>)
    5ece:	f104 0014 	add.w	r0, r4, #20
    5ed2:	2200      	movs	r2, #0
    5ed4:	2104      	movs	r1, #4
    5ed6:	f004 faf7 	bl	a4c8 <k_poll_event_init>
		events[ev_count++].tag = BT_EVENT_CONN_TX_QUEUE;
    5eda:	2301      	movs	r3, #1
    5edc:	2002      	movs	r0, #2
    5ede:	f884 3020 	strb.w	r3, [r4, #32]
	return ev_count;
    5ee2:	e7dd      	b.n	5ea0 <bt_conn_prepare_events+0x20>
    5ee4:	200049fc 	.word	0x200049fc
    5ee8:	2000057c 	.word	0x2000057c
    5eec:	200005b0 	.word	0x200005b0

00005ef0 <bt_conn_add_le>:
		net_buf_unref(buf);
	}
}

struct bt_conn *bt_conn_add_le(u8_t id, const bt_addr_le_t *peer)
{
    5ef0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if (!atomic_get(&conns[i].ref)) {
    5ef4:	4c17      	ldr	r4, [pc, #92]	; (5f54 <bt_conn_add_le+0x64>)
{
    5ef6:	4680      	mov	r8, r0
		if (!atomic_get(&conns[i].ref)) {
    5ef8:	f104 064c 	add.w	r6, r4, #76	; 0x4c
    5efc:	4630      	mov	r0, r6
{
    5efe:	460f      	mov	r7, r1
		if (!atomic_get(&conns[i].ref)) {
    5f00:	f006 f9c1 	bl	c286 <atomic_get>
    5f04:	4605      	mov	r5, r0
    5f06:	b110      	cbz	r0, 5f0e <bt_conn_add_le+0x1e>
	struct bt_conn *conn = conn_new();

	if (!conn) {
		return NULL;
    5f08:	2000      	movs	r0, #0
	conn->type = BT_CONN_TYPE_LE;
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
    5f0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	(void)memset(conn, 0, sizeof(*conn));
    5f0e:	4601      	mov	r1, r0
    5f10:	22a0      	movs	r2, #160	; 0xa0
    5f12:	4620      	mov	r0, r4
    5f14:	f005 ffed 	bl	bef2 <memset>
	k_delayed_work_init(&conn->update_work, conn_update_timeout);
    5f18:	490f      	ldr	r1, [pc, #60]	; (5f58 <bt_conn_add_le+0x68>)
    5f1a:	f104 0050 	add.w	r0, r4, #80	; 0x50
    5f1e:	f008 f8a4 	bl	e06a <k_delayed_work_init>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    5f22:	4b0e      	ldr	r3, [pc, #56]	; (5f5c <bt_conn_add_le+0x6c>)
    5f24:	62a5      	str	r5, [r4, #40]	; 0x28
    5f26:	e9c4 350b 	strd	r3, r5, [r4, #44]	; 0x2c
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    5f2a:	2501      	movs	r5, #1
    5f2c:	e8d6 3fef 	ldaex	r3, [r6]
    5f30:	e8c6 5fe2 	stlex	r2, r5, [r6]
    5f34:	2a00      	cmp	r2, #0
    5f36:	d1f9      	bne.n	5f2c <bt_conn_add_le+0x3c>
}

static inline void bt_addr_le_copy(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    5f38:	2207      	movs	r2, #7
    5f3a:	4639      	mov	r1, r7
    5f3c:	f104 0070 	add.w	r0, r4, #112	; 0x70
	conn->id = id;
    5f40:	f884 8008 	strb.w	r8, [r4, #8]
    5f44:	f005 ffab 	bl	be9e <memcpy>
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
    5f48:	4b05      	ldr	r3, [pc, #20]	; (5f60 <bt_conn_add_le+0x70>)
	conn->type = BT_CONN_TYPE_LE;
    5f4a:	70a5      	strb	r5, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
    5f4c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
			conn = &conns[i];
    5f50:	4620      	mov	r0, r4
	return conn;
    5f52:	e7da      	b.n	5f0a <bt_conn_add_le+0x1a>
    5f54:	2000057c 	.word	0x2000057c
    5f58:	00006259 	.word	0x00006259
    5f5c:	0000c31b 	.word	0x0000c31b
    5f60:	00280018 	.word	0x00280018

00005f64 <bt_conn_set_state>:
		k_sem_give(bt_conn_get_pkts(conn));
	}
}

void bt_conn_set_state(struct bt_conn *conn, bt_conn_state_t state)
{
    5f64:	b570      	push	{r4, r5, r6, lr}
	bt_conn_state_t old_state;

	BT_DBG("%s -> %s", state2str(conn->state), state2str(state));

	if (conn->state == state) {
    5f66:	7a85      	ldrb	r5, [r0, #10]
{
    5f68:	4604      	mov	r4, r0
	if (conn->state == state) {
    5f6a:	428d      	cmp	r5, r1
{
    5f6c:	460e      	mov	r6, r1
	if (conn->state == state) {
    5f6e:	d10f      	bne.n	5f90 <bt_conn_set_state+0x2c>
	default:
		BT_WARN("no valid (%u) state was set", state);

		break;
	}
}
    5f70:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_WARN("no transition");
    5f74:	2302      	movs	r3, #2
    5f76:	f04f 0100 	mov.w	r1, #0
    5f7a:	4a56      	ldr	r2, [pc, #344]	; (60d4 <bt_conn_set_state+0x170>)
    5f7c:	f363 0107 	bfi	r1, r3, #0, #8
    5f80:	4b55      	ldr	r3, [pc, #340]	; (60d8 <bt_conn_set_state+0x174>)
    5f82:	4856      	ldr	r0, [pc, #344]	; (60dc <bt_conn_set_state+0x178>)
    5f84:	1a9b      	subs	r3, r3, r2
    5f86:	08db      	lsrs	r3, r3, #3
    5f88:	f363 118f 	bfi	r1, r3, #6, #10
    5f8c:	f005 baf8 	b.w	b580 <log_0>
	conn->state = state;
    5f90:	72a1      	strb	r1, [r4, #10]
	switch (old_state) {
    5f92:	b915      	cbnz	r5, 5f9a <bt_conn_set_state+0x36>
#endif /* defined(CONFIG_BT_BREDR) */
}

struct bt_conn *bt_conn_ref(struct bt_conn *conn)
{
	atomic_inc(&conn->ref);
    5f94:	304c      	adds	r0, #76	; 0x4c
    5f96:	f006 f994 	bl	c2c2 <atomic_inc>
	switch (conn->state) {
    5f9a:	7aa3      	ldrb	r3, [r4, #10]
    5f9c:	2b07      	cmp	r3, #7
    5f9e:	f200 8087 	bhi.w	60b0 <bt_conn_set_state+0x14c>
    5fa2:	e8df f003 	tbb	[pc, r3]
    5fa6:	841a      	.short	0x841a
    5fa8:	84848484 	.word	0x84848484
    5fac:	8404      	.short	0x8404
		if (conn->type == BT_CONN_TYPE_SCO) {
    5fae:	78a3      	ldrb	r3, [r4, #2]
    5fb0:	2b04      	cmp	r3, #4
    5fb2:	d07c      	beq.n	60ae <bt_conn_set_state+0x14a>
	z_impl_k_queue_init(queue);
    5fb4:	f104 0034 	add.w	r0, r4, #52	; 0x34
    5fb8:	f007 fe43 	bl	dc42 <z_impl_k_queue_init>
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&signal, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(signal, result);
    5fbc:	2100      	movs	r1, #0
    5fbe:	4848      	ldr	r0, [pc, #288]	; (60e0 <bt_conn_set_state+0x17c>)
    5fc0:	f004 faea 	bl	a598 <z_impl_k_poll_signal_raise>
	list->head = NULL;
    5fc4:	2300      	movs	r3, #0
		bt_l2cap_connected(conn);
    5fc6:	4620      	mov	r0, r4
	list->tail = NULL;
    5fc8:	e9c4 3311 	strd	r3, r3, [r4, #68]	; 0x44
    5fcc:	f000 fb22 	bl	6614 <bt_l2cap_connected>
		notify_connected(conn);
    5fd0:	4620      	mov	r0, r4
}
    5fd2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify_connected(conn);
    5fd6:	f7ff bcff 	b.w	59d8 <notify_connected>
		if (conn->type == BT_CONN_TYPE_SCO) {
    5fda:	78a3      	ldrb	r3, [r4, #2]
    5fdc:	2b04      	cmp	r3, #4
    5fde:	d105      	bne.n	5fec <bt_conn_set_state+0x88>
	return conn;
}

void bt_conn_unref(struct bt_conn *conn)
{
	atomic_dec(&conn->ref);
    5fe0:	f104 004c 	add.w	r0, r4, #76	; 0x4c
}
    5fe4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	atomic_dec(&conn->ref);
    5fe8:	f006 b962 	b.w	c2b0 <atomic_dec>
		if (old_state == BT_CONN_CONNECTED ||
    5fec:	1fab      	subs	r3, r5, #6
    5fee:	2b01      	cmp	r3, #1
    5ff0:	d84d      	bhi.n	608e <bt_conn_set_state+0x12a>
		tx->pending_no_cb = 0U;
    5ff2:	2600      	movs	r6, #0
	z_impl_k_sem_give(sem);
    5ff4:	4d3b      	ldr	r5, [pc, #236]	; (60e4 <bt_conn_set_state+0x180>)
	__asm__ volatile(
    5ff6:	f04f 0320 	mov.w	r3, #32
    5ffa:	f3ef 8211 	mrs	r2, BASEPRI
    5ffe:	f383 8811 	msr	BASEPRI, r3
    6002:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
    6006:	69e3      	ldr	r3, [r4, #28]
    6008:	b14b      	cbz	r3, 601e <bt_conn_set_state+0xba>
			conn->pending_no_cb--;
    600a:	3b01      	subs	r3, #1
    600c:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
    600e:	f382 8811 	msr	BASEPRI, r2
    6012:	f3bf 8f6f 	isb	sy
    6016:	4628      	mov	r0, r5
    6018:	f003 ff34 	bl	9e84 <z_impl_k_sem_give>
    601c:	e7eb      	b.n	5ff6 <bt_conn_set_state+0x92>
Z_GENLIST_IS_EMPTY(slist)
    601e:	6960      	ldr	r0, [r4, #20]
Z_GENLIST_GET(slist, snode)
    6020:	b128      	cbz	r0, 602e <bt_conn_set_state+0xca>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    6022:	69a1      	ldr	r1, [r4, #24]
    6024:	6803      	ldr	r3, [r0, #0]
    6026:	4288      	cmp	r0, r1
	list->head = node;
    6028:	6163      	str	r3, [r4, #20]
	list->tail = node;
    602a:	bf08      	it	eq
    602c:	61a3      	streq	r3, [r4, #24]
    602e:	f382 8811 	msr	BASEPRI, r2
    6032:	f3bf 8f6f 	isb	sy
		if (!node) {
    6036:	b188      	cbz	r0, 605c <bt_conn_set_state+0xf8>
	__asm__ volatile(
    6038:	f04f 0220 	mov.w	r2, #32
    603c:	f3ef 8311 	mrs	r3, BASEPRI
    6040:	f382 8811 	msr	BASEPRI, r2
    6044:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
    6048:	68c2      	ldr	r2, [r0, #12]
    604a:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
    604c:	60c6      	str	r6, [r0, #12]
	__asm__ volatile(
    604e:	f383 8811 	msr	BASEPRI, r3
    6052:	f3bf 8f6f 	isb	sy
		tx_free(tx);
    6056:	f7ff fcb5 	bl	59c4 <tx_free>
    605a:	e7dc      	b.n	6016 <bt_conn_set_state+0xb2>
			tx_notify(conn);
    605c:	4620      	mov	r0, r4
    605e:	f006 f939 	bl	c2d4 <tx_notify>
			if (conn->type == BT_CONN_TYPE_LE) {
    6062:	78a3      	ldrb	r3, [r4, #2]
    6064:	2b01      	cmp	r3, #1
    6066:	d103      	bne.n	6070 <bt_conn_set_state+0x10c>
				k_delayed_work_cancel(&conn->update_work);
    6068:	f104 0050 	add.w	r0, r4, #80	; 0x50
    606c:	f008 f805 	bl	e07a <k_delayed_work_cancel>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    6070:	3404      	adds	r4, #4
    6072:	e8d4 3fef 	ldaex	r3, [r4]
    6076:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    607a:	e8c4 3fe2 	stlex	r2, r3, [r4]
    607e:	2a00      	cmp	r2, #0
    6080:	d1f7      	bne.n	6072 <bt_conn_set_state+0x10e>
}
    6082:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return z_impl_k_poll_signal_raise(signal, result);
    6086:	2100      	movs	r1, #0
    6088:	4815      	ldr	r0, [pc, #84]	; (60e0 <bt_conn_set_state+0x17c>)
    608a:	f004 ba85 	b.w	a598 <z_impl_k_poll_signal_raise>
		} else if (old_state == BT_CONN_CONNECT) {
    608e:	2d05      	cmp	r5, #5
    6090:	d106      	bne.n	60a0 <bt_conn_set_state+0x13c>
			if (conn->err) {
    6092:	7a63      	ldrb	r3, [r4, #9]
    6094:	2b00      	cmp	r3, #0
    6096:	d0a3      	beq.n	5fe0 <bt_conn_set_state+0x7c>
				notify_connected(conn);
    6098:	4620      	mov	r0, r4
    609a:	f7ff fc9d 	bl	59d8 <notify_connected>
    609e:	e79f      	b.n	5fe0 <bt_conn_set_state+0x7c>
		} else if (old_state == BT_CONN_CONNECT_SCAN) {
    60a0:	2d01      	cmp	r5, #1
    60a2:	d0f6      	beq.n	6092 <bt_conn_set_state+0x12e>
		} else if (old_state == BT_CONN_CONNECT_DIR_ADV) {
    60a4:	2d04      	cmp	r5, #4
    60a6:	d0f4      	beq.n	6092 <bt_conn_set_state+0x12e>
		} else if (old_state == BT_CONN_CONNECT_AUTO) {
    60a8:	3d02      	subs	r5, #2
    60aa:	2d01      	cmp	r5, #1
    60ac:	d998      	bls.n	5fe0 <bt_conn_set_state+0x7c>
}
    60ae:	bd70      	pop	{r4, r5, r6, pc}
		BT_WARN("no valid (%u) state was set", state);
    60b0:	2302      	movs	r3, #2
    60b2:	f04f 0200 	mov.w	r2, #0
    60b6:	4907      	ldr	r1, [pc, #28]	; (60d4 <bt_conn_set_state+0x170>)
    60b8:	f363 0207 	bfi	r2, r3, #0, #8
    60bc:	4b06      	ldr	r3, [pc, #24]	; (60d8 <bt_conn_set_state+0x174>)
    60be:	480a      	ldr	r0, [pc, #40]	; (60e8 <bt_conn_set_state+0x184>)
    60c0:	1a5b      	subs	r3, r3, r1
    60c2:	08db      	lsrs	r3, r3, #3
    60c4:	4631      	mov	r1, r6
}
    60c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_WARN("no valid (%u) state was set", state);
    60ca:	f363 128f 	bfi	r2, r3, #6, #10
    60ce:	f005 ba64 	b.w	b59a <log_1>
    60d2:	bf00      	nop
    60d4:	0000e6dc 	.word	0x0000e6dc
    60d8:	0000e6e4 	.word	0x0000e6e4
    60dc:	0001062f 	.word	0x0001062f
    60e0:	200049fc 	.word	0x200049fc
    60e4:	200048c4 	.word	0x200048c4
    60e8:	0001063d 	.word	0x0001063d

000060ec <bt_conn_lookup_handle>:
{
    60ec:	b510      	push	{r4, lr}
		if (!atomic_get(&conns[i].ref)) {
    60ee:	4c0b      	ldr	r4, [pc, #44]	; (611c <bt_conn_lookup_handle+0x30>)
{
    60f0:	4602      	mov	r2, r0
		if (!atomic_get(&conns[i].ref)) {
    60f2:	f104 004c 	add.w	r0, r4, #76	; 0x4c
    60f6:	f006 f8c6 	bl	c286 <atomic_get>
    60fa:	b158      	cbz	r0, 6114 <bt_conn_lookup_handle+0x28>
		if (conns[i].state != BT_CONN_CONNECTED &&
    60fc:	7aa3      	ldrb	r3, [r4, #10]
    60fe:	3b06      	subs	r3, #6
    6100:	2b01      	cmp	r3, #1
    6102:	d808      	bhi.n	6116 <bt_conn_lookup_handle+0x2a>
		if (conns[i].handle == handle) {
    6104:	8823      	ldrh	r3, [r4, #0]
    6106:	4293      	cmp	r3, r2
    6108:	d105      	bne.n	6116 <bt_conn_lookup_handle+0x2a>
	atomic_inc(&conn->ref);
    610a:	f104 004c 	add.w	r0, r4, #76	; 0x4c
    610e:	f006 f8d8 	bl	c2c2 <atomic_inc>
			return bt_conn_ref(&conns[i]);
    6112:	4620      	mov	r0, r4
}
    6114:	bd10      	pop	{r4, pc}
	return NULL;
    6116:	2000      	movs	r0, #0
    6118:	e7fc      	b.n	6114 <bt_conn_lookup_handle+0x28>
    611a:	bf00      	nop
    611c:	2000057c 	.word	0x2000057c

00006120 <bt_conn_lookup_addr_le>:
{
    6120:	b510      	push	{r4, lr}
		if (!atomic_get(&conns[i].ref)) {
    6122:	4c0d      	ldr	r4, [pc, #52]	; (6158 <bt_conn_lookup_addr_le+0x38>)
{
    6124:	4603      	mov	r3, r0
		if (!atomic_get(&conns[i].ref)) {
    6126:	f104 004c 	add.w	r0, r4, #76	; 0x4c
    612a:	f006 f8ac 	bl	c286 <atomic_get>
    612e:	b908      	cbnz	r0, 6134 <bt_conn_lookup_addr_le+0x14>
	return NULL;
    6130:	2000      	movs	r0, #0
}
    6132:	bd10      	pop	{r4, pc}
		if (conns[i].type != BT_CONN_TYPE_LE) {
    6134:	78a2      	ldrb	r2, [r4, #2]
    6136:	2a01      	cmp	r2, #1
    6138:	d1fa      	bne.n	6130 <bt_conn_lookup_addr_le+0x10>
		if (conns[i].id == id &&
    613a:	7a22      	ldrb	r2, [r4, #8]
    613c:	429a      	cmp	r2, r3
    613e:	d1f7      	bne.n	6130 <bt_conn_lookup_addr_le+0x10>
		    !bt_conn_addr_le_cmp(&conns[i], peer)) {
    6140:	4620      	mov	r0, r4
    6142:	f006 f8ef 	bl	c324 <bt_conn_addr_le_cmp>
		if (conns[i].id == id &&
    6146:	2800      	cmp	r0, #0
    6148:	d1f2      	bne.n	6130 <bt_conn_lookup_addr_le+0x10>
	atomic_inc(&conn->ref);
    614a:	f104 004c 	add.w	r0, r4, #76	; 0x4c
    614e:	f006 f8b8 	bl	c2c2 <atomic_inc>
		    !bt_conn_addr_le_cmp(&conns[i], peer)) {
    6152:	4620      	mov	r0, r4
			return bt_conn_ref(&conns[i]);
    6154:	e7ed      	b.n	6132 <bt_conn_lookup_addr_le+0x12>
    6156:	bf00      	nop
    6158:	2000057c 	.word	0x2000057c

0000615c <bt_conn_lookup_state_le>:
{
    615c:	b538      	push	{r3, r4, r5, lr}
		if (!atomic_get(&conns[i].ref)) {
    615e:	4c0e      	ldr	r4, [pc, #56]	; (6198 <bt_conn_lookup_state_le+0x3c>)
{
    6160:	4603      	mov	r3, r0
		if (!atomic_get(&conns[i].ref)) {
    6162:	f104 004c 	add.w	r0, r4, #76	; 0x4c
{
    6166:	460d      	mov	r5, r1
		if (!atomic_get(&conns[i].ref)) {
    6168:	f006 f88d 	bl	c286 <atomic_get>
    616c:	b908      	cbnz	r0, 6172 <bt_conn_lookup_state_le+0x16>
	return NULL;
    616e:	2000      	movs	r0, #0
}
    6170:	bd38      	pop	{r3, r4, r5, pc}
		if (conns[i].type != BT_CONN_TYPE_LE) {
    6172:	78a2      	ldrb	r2, [r4, #2]
    6174:	2a01      	cmp	r2, #1
    6176:	d1fa      	bne.n	616e <bt_conn_lookup_state_le+0x12>
		if (peer && bt_conn_addr_le_cmp(&conns[i], peer)) {
    6178:	b93b      	cbnz	r3, 618a <bt_conn_lookup_state_le+0x2e>
		if (conns[i].state == state) {
    617a:	7aa3      	ldrb	r3, [r4, #10]
    617c:	42ab      	cmp	r3, r5
    617e:	d1f6      	bne.n	616e <bt_conn_lookup_state_le+0x12>
	atomic_inc(&conn->ref);
    6180:	4806      	ldr	r0, [pc, #24]	; (619c <bt_conn_lookup_state_le+0x40>)
    6182:	f006 f89e 	bl	c2c2 <atomic_inc>
			return bt_conn_ref(&conns[i]);
    6186:	4804      	ldr	r0, [pc, #16]	; (6198 <bt_conn_lookup_state_le+0x3c>)
    6188:	e7f2      	b.n	6170 <bt_conn_lookup_state_le+0x14>
		if (peer && bt_conn_addr_le_cmp(&conns[i], peer)) {
    618a:	4619      	mov	r1, r3
    618c:	4620      	mov	r0, r4
    618e:	f006 f8c9 	bl	c324 <bt_conn_addr_le_cmp>
    6192:	2800      	cmp	r0, #0
    6194:	d0f1      	beq.n	617a <bt_conn_lookup_state_le+0x1e>
    6196:	e7ea      	b.n	616e <bt_conn_lookup_state_le+0x12>
    6198:	2000057c 	.word	0x2000057c
    619c:	200005c8 	.word	0x200005c8

000061a0 <bt_conn_get_info>:
{
	return &conn->le.dst;
}

int bt_conn_get_info(const struct bt_conn *conn, struct bt_conn_info *info)
{
    61a0:	b510      	push	{r4, lr}
	info->type = conn->type;
    61a2:	7882      	ldrb	r2, [r0, #2]
    61a4:	700a      	strb	r2, [r1, #0]
	info->role = conn->role;
    61a6:	78c4      	ldrb	r4, [r0, #3]
	info->id = conn->id;

	switch (conn->type) {
    61a8:	2a01      	cmp	r2, #1
	info->role = conn->role;
    61aa:	704c      	strb	r4, [r1, #1]
	info->id = conn->id;
    61ac:	7a03      	ldrb	r3, [r0, #8]
    61ae:	708b      	strb	r3, [r1, #2]
	switch (conn->type) {
    61b0:	d11c      	bne.n	61ec <bt_conn_get_info+0x4c>
	case BT_CONN_TYPE_LE:
		info->le.dst = &conn->le.dst;
    61b2:	f100 0270 	add.w	r2, r0, #112	; 0x70
    61b6:	608a      	str	r2, [r1, #8]
		info->le.src = &bt_dev.id_addr[conn->id];
    61b8:	4a0e      	ldr	r2, [pc, #56]	; (61f4 <bt_conn_get_info+0x54>)
    61ba:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    61be:	4413      	add	r3, r2
    61c0:	604b      	str	r3, [r1, #4]
		if (conn->role == BT_HCI_ROLE_MASTER) {
    61c2:	f100 027e 	add.w	r2, r0, #126	; 0x7e
    61c6:	f100 0377 	add.w	r3, r0, #119	; 0x77
    61ca:	b964      	cbnz	r4, 61e6 <bt_conn_get_info+0x46>
			info->le.local = &conn->le.init_addr;
			info->le.remote = &conn->le.resp_addr;
    61cc:	e9c1 3203 	strd	r3, r2, [r1, #12]
		} else {
			info->le.local = &conn->le.resp_addr;
			info->le.remote = &conn->le.init_addr;
		}
		info->le.interval = conn->le.interval;
    61d0:	f8b0 3086 	ldrh.w	r3, [r0, #134]	; 0x86
    61d4:	828b      	strh	r3, [r1, #20]
		info->le.latency = conn->le.latency;
    61d6:	f8b0 308c 	ldrh.w	r3, [r0, #140]	; 0x8c
    61da:	82cb      	strh	r3, [r1, #22]
		info->le.timeout = conn->le.timeout;
    61dc:	f8b0 308e 	ldrh.w	r3, [r0, #142]	; 0x8e
		return 0;
    61e0:	2000      	movs	r0, #0
		info->le.timeout = conn->le.timeout;
    61e2:	830b      	strh	r3, [r1, #24]
		return 0;
#endif
	}

	return -EINVAL;
}
    61e4:	bd10      	pop	{r4, pc}
			info->le.remote = &conn->le.init_addr;
    61e6:	e9c1 2303 	strd	r2, r3, [r1, #12]
    61ea:	e7f1      	b.n	61d0 <bt_conn_get_info+0x30>
	return -EINVAL;
    61ec:	f06f 0015 	mvn.w	r0, #21
    61f0:	e7f8      	b.n	61e4 <bt_conn_get_info+0x44>
    61f2:	bf00      	nop
    61f4:	20004838 	.word	0x20004838

000061f8 <send_conn_le_param_update>:
{
    61f8:	b538      	push	{r3, r4, r5, lr}
    61fa:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
    61fc:	4608      	mov	r0, r1
{
    61fe:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
    6200:	f005 ffac 	bl	c15c <bt_le_conn_params_valid>
    6204:	b310      	cbz	r0, 624c <send_conn_le_param_update+0x54>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    6206:	4b13      	ldr	r3, [pc, #76]	; (6254 <send_conn_le_param_update+0x5c>)
    6208:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    620c:	079a      	lsls	r2, r3, #30
    620e:	d407      	bmi.n	6220 <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_L2CAP)) ||
    6210:	78e3      	ldrb	r3, [r4, #3]
    6212:	b17b      	cbz	r3, 6234 <send_conn_le_param_update+0x3c>
	return bt_l2cap_update_conn_param(conn, param);
    6214:	4629      	mov	r1, r5
    6216:	4620      	mov	r0, r4
}
    6218:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
    621c:	f000 bb14 	b.w	6848 <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    6220:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
    6224:	079b      	lsls	r3, r3, #30
    6226:	d5f3      	bpl.n	6210 <send_conn_le_param_update+0x18>
	     !atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_L2CAP)) ||
    6228:	210a      	movs	r1, #10
    622a:	1d20      	adds	r0, r4, #4
    622c:	f006 f82e 	bl	c28c <atomic_test_bit>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
    6230:	2800      	cmp	r0, #0
    6232:	d1ed      	bne.n	6210 <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
    6234:	4629      	mov	r1, r5
    6236:	4620      	mov	r0, r4
    6238:	f006 f891 	bl	c35e <bt_conn_le_conn_update>
		if (rc == 0) {
    623c:	b928      	cbnz	r0, 624a <send_conn_le_param_update+0x52>
			conn->le.pending_latency = param->latency;
    623e:	88ab      	ldrh	r3, [r5, #4]
    6240:	f8a4 3090 	strh.w	r3, [r4, #144]	; 0x90
			conn->le.pending_timeout = param->timeout;
    6244:	88eb      	ldrh	r3, [r5, #6]
    6246:	f8a4 3092 	strh.w	r3, [r4, #146]	; 0x92
}
    624a:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    624c:	f06f 0015 	mvn.w	r0, #21
    6250:	e7fb      	b.n	624a <send_conn_le_param_update+0x52>
    6252:	bf00      	nop
    6254:	20004838 	.word	0x20004838

00006258 <conn_update_timeout>:
{
    6258:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
    625a:	f810 3c46 	ldrb.w	r3, [r0, #-70]
{
    625e:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(work, struct bt_conn, update_work);
    6260:	f1a0 0650 	sub.w	r6, r0, #80	; 0x50
	if (conn->state == BT_CONN_DISCONNECTED) {
    6264:	b9f3      	cbnz	r3, 62a4 <conn_update_timeout+0x4c>
		bt_l2cap_disconnected(conn);
    6266:	4630      	mov	r0, r6
    6268:	f006 f8d4 	bl	c414 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
    626c:	4b21      	ldr	r3, [pc, #132]	; (62f4 <conn_update_timeout+0x9c>)
    626e:	681d      	ldr	r5, [r3, #0]
    6270:	b985      	cbnz	r5, 6294 <conn_update_timeout+0x3c>
	atomic_dec(&conn->ref);
    6272:	1f20      	subs	r0, r4, #4
    6274:	f006 f81c 	bl	c2b0 <atomic_dec>
		    atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    6278:	2109      	movs	r1, #9
    627a:	481f      	ldr	r0, [pc, #124]	; (62f8 <conn_update_timeout+0xa0>)
    627c:	f006 f806 	bl	c28c <atomic_test_bit>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    6280:	b130      	cbz	r0, 6290 <conn_update_timeout+0x38>
		    !atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    6282:	2105      	movs	r1, #5
    6284:	481c      	ldr	r0, [pc, #112]	; (62f8 <conn_update_timeout+0xa0>)
    6286:	f006 f801 	bl	c28c <atomic_test_bit>
		    atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    628a:	b908      	cbnz	r0, 6290 <conn_update_timeout+0x38>
			bt_le_adv_resume();
    628c:	f7ff f95c 	bl	5548 <bt_le_adv_resume>
}
    6290:	b004      	add	sp, #16
    6292:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->disconnected) {
    6294:	686b      	ldr	r3, [r5, #4]
    6296:	b11b      	cbz	r3, 62a0 <conn_update_timeout+0x48>
			cb->disconnected(conn, conn->err);
    6298:	f814 1c47 	ldrb.w	r1, [r4, #-71]
    629c:	4630      	mov	r0, r6
    629e:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    62a0:	692d      	ldr	r5, [r5, #16]
    62a2:	e7e5      	b.n	6270 <conn_update_timeout+0x18>
	if (conn->type != BT_CONN_TYPE_LE) {
    62a4:	f810 3c4e 	ldrb.w	r3, [r0, #-78]
    62a8:	2b01      	cmp	r3, #1
    62aa:	d1f1      	bne.n	6290 <conn_update_timeout+0x38>
		if (atomic_test_and_clear_bit(conn->flags,
    62ac:	f1a0 054c 	sub.w	r5, r0, #76	; 0x4c
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    62b0:	e8d5 3fef 	ldaex	r3, [r5]
    62b4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
    62b8:	e8c5 2fe1 	stlex	r1, r2, [r5]
    62bc:	2900      	cmp	r1, #0
    62be:	d1f7      	bne.n	62b0 <conn_update_timeout+0x58>
    62c0:	059b      	lsls	r3, r3, #22
    62c2:	d510      	bpl.n	62e6 <conn_update_timeout+0x8e>
			send_conn_le_param_update(conn, param);
    62c4:	4669      	mov	r1, sp
			param = BT_LE_CONN_PARAM(conn->le.interval_min,
    62c6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    62c8:	9300      	str	r3, [sp, #0]
    62ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
    62cc:	9301      	str	r3, [sp, #4]
			send_conn_le_param_update(conn, param);
    62ce:	4630      	mov	r0, r6
    62d0:	f7ff ff92 	bl	61f8 <send_conn_le_param_update>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    62d4:	e8d5 3fef 	ldaex	r3, [r5]
    62d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    62dc:	e8c5 3fe2 	stlex	r2, r3, [r5]
    62e0:	2a00      	cmp	r2, #0
    62e2:	d0d5      	beq.n	6290 <conn_update_timeout+0x38>
    62e4:	e7f6      	b.n	62d4 <conn_update_timeout+0x7c>
			param = BT_LE_CONN_PARAM(
    62e6:	4a05      	ldr	r2, [pc, #20]	; (62fc <conn_update_timeout+0xa4>)
    62e8:	ab02      	add	r3, sp, #8
    62ea:	6851      	ldr	r1, [r2, #4]
    62ec:	6810      	ldr	r0, [r2, #0]
    62ee:	c303      	stmia	r3!, {r0, r1}
			send_conn_le_param_update(conn, param);
    62f0:	a902      	add	r1, sp, #8
    62f2:	e7ec      	b.n	62ce <conn_update_timeout+0x76>
    62f4:	20000528 	.word	0x20000528
    62f8:	200048a8 	.word	0x200048a8
    62fc:	0000e7ec 	.word	0x0000e7ec

00006300 <bt_conn_create_pdu_timeout>:
	} else {
#if defined(CONFIG_NET_BUF_LOG)
		buf = net_buf_alloc_fixed_debug(pool, timeout, func,
							line);
#else
		buf = net_buf_alloc(pool, timeout);
    6300:	4b10      	ldr	r3, [pc, #64]	; (6344 <bt_conn_create_pdu_timeout+0x44>)
{
    6302:	b570      	push	{r4, r5, r6, lr}
		buf = net_buf_alloc(pool, timeout);
    6304:	2800      	cmp	r0, #0
    6306:	bf08      	it	eq
    6308:	4618      	moveq	r0, r3
{
    630a:	460e      	mov	r6, r1
		buf = net_buf_alloc(pool, timeout);
    630c:	4611      	mov	r1, r2
{
    630e:	4615      	mov	r5, r2
		buf = net_buf_alloc(pool, timeout);
    6310:	f006 fe20 	bl	cf54 <net_buf_alloc_fixed>
#endif
	}

	if (!buf) {
    6314:	4604      	mov	r4, r0
    6316:	b980      	cbnz	r0, 633a <bt_conn_create_pdu_timeout+0x3a>
		BT_WARN("Unable to allocate buffer: timeout %d", timeout);
    6318:	2302      	movs	r3, #2
    631a:	f04f 0200 	mov.w	r2, #0
    631e:	490a      	ldr	r1, [pc, #40]	; (6348 <bt_conn_create_pdu_timeout+0x48>)
    6320:	f363 0207 	bfi	r2, r3, #0, #8
    6324:	4b09      	ldr	r3, [pc, #36]	; (634c <bt_conn_create_pdu_timeout+0x4c>)
    6326:	480a      	ldr	r0, [pc, #40]	; (6350 <bt_conn_create_pdu_timeout+0x50>)
    6328:	1a5b      	subs	r3, r3, r1
    632a:	08db      	lsrs	r3, r3, #3
    632c:	f363 128f 	bfi	r2, r3, #6, #10
    6330:	4629      	mov	r1, r5
    6332:	f005 f932 	bl	b59a <log_1>

	reserve += sizeof(struct bt_hci_acl_hdr) + BT_BUF_RESERVE;
	net_buf_reserve(buf, reserve);

	return buf;
}
    6336:	4620      	mov	r0, r4
    6338:	bd70      	pop	{r4, r5, r6, pc}
	net_buf_reserve(buf, reserve);
    633a:	1d71      	adds	r1, r6, #5
    633c:	3008      	adds	r0, #8
    633e:	f006 fe28 	bl	cf92 <net_buf_simple_reserve>
	return buf;
    6342:	e7f8      	b.n	6336 <bt_conn_create_pdu_timeout+0x36>
    6344:	20004d24 	.word	0x20004d24
    6348:	0000e6dc 	.word	0x0000e6dc
    634c:	0000e6e4 	.word	0x0000e6e4
    6350:	000104d6 	.word	0x000104d6

00006354 <bt_conn_create_frag_timeout>:
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
    6354:	460a      	mov	r2, r1
    6356:	4601      	mov	r1, r0
    6358:	4801      	ldr	r0, [pc, #4]	; (6360 <bt_conn_create_frag_timeout+0xc>)
    635a:	f7ff bfd1 	b.w	6300 <bt_conn_create_pdu_timeout>
    635e:	bf00      	nop
    6360:	20004d84 	.word	0x20004d84

00006364 <create_frag.isra.11>:
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
    6364:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6368:	4606      	mov	r6, r0
    636a:	460c      	mov	r4, r1
	frag = bt_conn_create_frag(0);
    636c:	2000      	movs	r0, #0
    636e:	f04f 31ff 	mov.w	r1, #4294967295
    6372:	f7ff ffef 	bl	6354 <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
    6376:	7833      	ldrb	r3, [r6, #0]
	frag = bt_conn_create_frag(0);
    6378:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
    637a:	2b06      	cmp	r3, #6
    637c:	f04f 0600 	mov.w	r6, #0
    6380:	d005      	beq.n	638e <create_frag.isra.11+0x2a>
		net_buf_unref(frag);
    6382:	f002 f809 	bl	8398 <net_buf_unref>
		return NULL;
    6386:	4635      	mov	r5, r6
}
    6388:	4628      	mov	r0, r5
    638a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
    638e:	6146      	str	r6, [r0, #20]
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    6390:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.mtu;
    6394:	4e0c      	ldr	r6, [pc, #48]	; (63c8 <create_frag.isra.11+0x64>)
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    6396:	4638      	mov	r0, r7
    6398:	f8b6 8088 	ldrh.w	r8, [r6, #136]	; 0x88
    639c:	f006 fe52 	bl	d044 <net_buf_simple_tailroom>
    63a0:	4580      	cmp	r8, r0
    63a2:	d20c      	bcs.n	63be <create_frag.isra.11+0x5a>
	return bt_dev.le.mtu;
    63a4:	f8b6 6088 	ldrh.w	r6, [r6, #136]	; 0x88
	net_buf_add_mem(frag, buf->data, frag_len);
    63a8:	f854 1f08 	ldr.w	r1, [r4, #8]!
    63ac:	4632      	mov	r2, r6
    63ae:	4638      	mov	r0, r7
    63b0:	f006 fe0a 	bl	cfc8 <net_buf_simple_add_mem>
	net_buf_pull(buf, frag_len);
    63b4:	4631      	mov	r1, r6
    63b6:	4620      	mov	r0, r4
    63b8:	f006 fe28 	bl	d00c <net_buf_simple_pull>
	return frag;
    63bc:	e7e4      	b.n	6388 <create_frag.isra.11+0x24>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    63be:	4638      	mov	r0, r7
    63c0:	f006 fe40 	bl	d044 <net_buf_simple_tailroom>
    63c4:	b286      	uxth	r6, r0
    63c6:	e7ef      	b.n	63a8 <create_frag.isra.11+0x44>
    63c8:	20004838 	.word	0x20004838

000063cc <bt_conn_process_tx>:
{
    63cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
    63ce:	7a83      	ldrb	r3, [r0, #10]
{
    63d0:	4605      	mov	r5, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
    63d2:	b973      	cbnz	r3, 63f2 <bt_conn_process_tx+0x26>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    63d4:	1d03      	adds	r3, r0, #4
    63d6:	e8d3 2fef 	ldaex	r2, [r3]
    63da:	f022 0140 	bic.w	r1, r2, #64	; 0x40
    63de:	e8c3 1fe4 	stlex	r4, r1, [r3]
    63e2:	2c00      	cmp	r4, #0
    63e4:	d1f7      	bne.n	63d6 <bt_conn_process_tx+0xa>
    63e6:	0653      	lsls	r3, r2, #25
    63e8:	d503      	bpl.n	63f2 <bt_conn_process_tx+0x26>
}
    63ea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		conn_cleanup(conn);
    63ee:	f7ff bba3 	b.w	5b38 <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
    63f2:	2100      	movs	r1, #0
    63f4:	f105 0034 	add.w	r0, r5, #52	; 0x34
    63f8:	f006 fdb2 	bl	cf60 <net_buf_get>
	BT_ASSERT(buf);
    63fc:	4604      	mov	r4, r0
    63fe:	b960      	cbnz	r0, 641a <bt_conn_process_tx+0x4e>
    6400:	f240 6316 	movw	r3, #1558	; 0x616
    6404:	4a1f      	ldr	r2, [pc, #124]	; (6484 <bt_conn_process_tx+0xb8>)
    6406:	4920      	ldr	r1, [pc, #128]	; (6488 <bt_conn_process_tx+0xbc>)
    6408:	4820      	ldr	r0, [pc, #128]	; (648c <bt_conn_process_tx+0xc0>)
    640a:	f004 fc3b 	bl	ac84 <printk>
    640e:	4040      	eors	r0, r0
    6410:	f380 8811 	msr	BASEPRI, r0
    6414:	f04f 0003 	mov.w	r0, #3
    6418:	df02      	svc	2
	return bt_dev.le.mtu;
    641a:	4e1d      	ldr	r6, [pc, #116]	; (6490 <bt_conn_process_tx+0xc4>)
	if (buf->len <= conn_mtu(conn)) {
    641c:	89a1      	ldrh	r1, [r4, #12]
    641e:	f8b6 2088 	ldrh.w	r2, [r6, #136]	; 0x88
    6422:	4291      	cmp	r1, r2
    6424:	d807      	bhi.n	6436 <bt_conn_process_tx+0x6a>
		return send_frag(conn, buf, BT_ACL_START_NO_FLUSH, false);
    6426:	2300      	movs	r3, #0
    6428:	461a      	mov	r2, r3
	return send_frag(conn, buf, BT_ACL_CONT, false);
    642a:	4621      	mov	r1, r4
    642c:	4628      	mov	r0, r5
    642e:	f7ff fae9 	bl	5a04 <send_frag>
	if (!send_buf(conn, buf)) {
    6432:	b140      	cbz	r0, 6446 <bt_conn_process_tx+0x7a>
}
    6434:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	frag = create_frag(conn, buf);
    6436:	f105 070a 	add.w	r7, r5, #10
    643a:	4621      	mov	r1, r4
    643c:	4638      	mov	r0, r7
    643e:	f7ff ff91 	bl	6364 <create_frag.isra.11>
	if (!frag) {
    6442:	4601      	mov	r1, r0
    6444:	b920      	cbnz	r0, 6450 <bt_conn_process_tx+0x84>
		net_buf_unref(buf);
    6446:	4620      	mov	r0, r4
}
    6448:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		net_buf_unref(buf);
    644c:	f001 bfa4 	b.w	8398 <net_buf_unref>
	if (!send_frag(conn, frag, BT_ACL_START_NO_FLUSH, true)) {
    6450:	2301      	movs	r3, #1
    6452:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, BT_ACL_CONT, true)) {
    6454:	4628      	mov	r0, r5
    6456:	f7ff fad5 	bl	5a04 <send_frag>
    645a:	2800      	cmp	r0, #0
    645c:	d0f3      	beq.n	6446 <bt_conn_process_tx+0x7a>
	while (buf->len > conn_mtu(conn)) {
    645e:	89a2      	ldrh	r2, [r4, #12]
    6460:	f8b6 3088 	ldrh.w	r3, [r6, #136]	; 0x88
    6464:	429a      	cmp	r2, r3
    6466:	d802      	bhi.n	646e <bt_conn_process_tx+0xa2>
	return send_frag(conn, buf, BT_ACL_CONT, false);
    6468:	2300      	movs	r3, #0
    646a:	2201      	movs	r2, #1
    646c:	e7dd      	b.n	642a <bt_conn_process_tx+0x5e>
		frag = create_frag(conn, buf);
    646e:	4621      	mov	r1, r4
    6470:	4638      	mov	r0, r7
    6472:	f7ff ff77 	bl	6364 <create_frag.isra.11>
		if (!frag) {
    6476:	4601      	mov	r1, r0
    6478:	2800      	cmp	r0, #0
    647a:	d0e4      	beq.n	6446 <bt_conn_process_tx+0x7a>
		if (!send_frag(conn, frag, BT_ACL_CONT, true)) {
    647c:	2301      	movs	r3, #1
    647e:	461a      	mov	r2, r3
    6480:	e7e8      	b.n	6454 <bt_conn_process_tx+0x88>
    6482:	bf00      	nop
    6484:	000104fc 	.word	0x000104fc
    6488:	00010aff 	.word	0x00010aff
    648c:	000101e2 	.word	0x000101e2
    6490:	20004838 	.word	0x20004838

00006494 <bt_conn_index>:
}
#endif /* CONFIG_BT_SMP || CONFIG_BT_BREDR */

u8_t bt_conn_index(struct bt_conn *conn)
{
	u8_t index = conn - conns;
    6494:	4b03      	ldr	r3, [pc, #12]	; (64a4 <bt_conn_index+0x10>)
    6496:	1ac0      	subs	r0, r0, r3
    6498:	4b03      	ldr	r3, [pc, #12]	; (64a8 <bt_conn_index+0x14>)
    649a:	1140      	asrs	r0, r0, #5
    649c:	4358      	muls	r0, r3

	__ASSERT(index < CONFIG_BT_MAX_CONN, "Invalid bt_conn pointer");
	return index;
}
    649e:	b2c0      	uxtb	r0, r0
    64a0:	4770      	bx	lr
    64a2:	bf00      	nop
    64a4:	2000057c 	.word	0x2000057c
    64a8:	cccccccd 	.word	0xcccccccd

000064ac <bt_conn_lookup_id>:

struct bt_conn *bt_conn_lookup_id(u8_t id)
{
    64ac:	b508      	push	{r3, lr}
	struct bt_conn *conn;

	if (id >= ARRAY_SIZE(conns)) {
    64ae:	b108      	cbz	r0, 64b4 <bt_conn_lookup_id+0x8>
		return NULL;
    64b0:	2000      	movs	r0, #0
	if (!atomic_get(&conn->ref)) {
		return NULL;
	}

	return bt_conn_ref(conn);
}
    64b2:	bd08      	pop	{r3, pc}
	if (!atomic_get(&conn->ref)) {
    64b4:	4804      	ldr	r0, [pc, #16]	; (64c8 <bt_conn_lookup_id+0x1c>)
    64b6:	f005 fee6 	bl	c286 <atomic_get>
    64ba:	2800      	cmp	r0, #0
    64bc:	d0f8      	beq.n	64b0 <bt_conn_lookup_id+0x4>
	atomic_inc(&conn->ref);
    64be:	4802      	ldr	r0, [pc, #8]	; (64c8 <bt_conn_lookup_id+0x1c>)
    64c0:	f005 feff 	bl	c2c2 <atomic_inc>
	return bt_conn_ref(conn);
    64c4:	4801      	ldr	r0, [pc, #4]	; (64cc <bt_conn_lookup_id+0x20>)
    64c6:	e7f4      	b.n	64b2 <bt_conn_lookup_id+0x6>
    64c8:	200005c8 	.word	0x200005c8
    64cc:	2000057c 	.word	0x2000057c

000064d0 <bt_conn_init>:

int bt_conn_init(void)
{
    64d0:	b510      	push	{r4, lr}
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
    64d2:	490f      	ldr	r1, [pc, #60]	; (6510 <bt_conn_init+0x40>)
    64d4:	480f      	ldr	r0, [pc, #60]	; (6514 <bt_conn_init+0x44>)
    64d6:	f007 fbbc 	bl	dc52 <k_queue_append>
    64da:	490f      	ldr	r1, [pc, #60]	; (6518 <bt_conn_init+0x48>)
    64dc:	480d      	ldr	r0, [pc, #52]	; (6514 <bt_conn_init+0x44>)
    64de:	f007 fbb8 	bl	dc52 <k_queue_append>
    64e2:	490e      	ldr	r1, [pc, #56]	; (651c <bt_conn_init+0x4c>)
    64e4:	480b      	ldr	r0, [pc, #44]	; (6514 <bt_conn_init+0x44>)
    64e6:	f007 fbb4 	bl	dc52 <k_queue_append>
    64ea:	490d      	ldr	r1, [pc, #52]	; (6520 <bt_conn_init+0x50>)
    64ec:	4809      	ldr	r0, [pc, #36]	; (6514 <bt_conn_init+0x44>)
    64ee:	f007 fbb0 	bl	dc52 <k_queue_append>
    64f2:	490c      	ldr	r1, [pc, #48]	; (6524 <bt_conn_init+0x54>)
    64f4:	4807      	ldr	r0, [pc, #28]	; (6514 <bt_conn_init+0x44>)
    64f6:	f007 fbac 	bl	dc52 <k_queue_append>
	}

	bt_att_init();
    64fa:	f006 fa14 	bl	c926 <bt_att_init>

	err = bt_smp_init();
    64fe:	f006 fd22 	bl	cf46 <bt_smp_init>
	if (err) {
    6502:	4604      	mov	r4, r0
    6504:	b908      	cbnz	r0, 650a <bt_conn_init+0x3a>
		return err;
	}

	bt_l2cap_init();
    6506:	f005 ffc9 	bl	c49c <bt_l2cap_init>
#endif /* !defined(CONFIG_BT_WHITELIST) */
		}
	}

	return 0;
}
    650a:	4620      	mov	r0, r4
    650c:	bd10      	pop	{r4, pc}
    650e:	bf00      	nop
    6510:	2000052c 	.word	0x2000052c
    6514:	20004cf4 	.word	0x20004cf4
    6518:	2000053c 	.word	0x2000053c
    651c:	2000054c 	.word	0x2000054c
    6520:	2000055c 	.word	0x2000055c
    6524:	2000056c 	.word	0x2000056c

00006528 <l2cap_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
    6528:	4a0d      	ldr	r2, [pc, #52]	; (6560 <l2cap_accept+0x38>)
{
    652a:	b508      	push	{r3, lr}
		if (l2cap->chan.chan.conn) {
    652c:	6813      	ldr	r3, [r2, #0]
    652e:	b923      	cbnz	r3, 653a <l2cap_accept+0x12>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
    6530:	480c      	ldr	r0, [pc, #48]	; (6564 <l2cap_accept+0x3c>)
    6532:	6050      	str	r0, [r2, #4]
		*chan = &l2cap->chan.chan;

		return 0;
    6534:	4618      	mov	r0, r3
		*chan = &l2cap->chan.chan;
    6536:	600a      	str	r2, [r1, #0]
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
}
    6538:	bd08      	pop	{r3, pc}
	BT_ERR("No available L2CAP context for conn %p", conn);
    653a:	2301      	movs	r3, #1
    653c:	f04f 0200 	mov.w	r2, #0
    6540:	4909      	ldr	r1, [pc, #36]	; (6568 <l2cap_accept+0x40>)
    6542:	f363 0207 	bfi	r2, r3, #0, #8
    6546:	4b09      	ldr	r3, [pc, #36]	; (656c <l2cap_accept+0x44>)
    6548:	1a5b      	subs	r3, r3, r1
    654a:	08db      	lsrs	r3, r3, #3
    654c:	4601      	mov	r1, r0
    654e:	f363 128f 	bfi	r2, r3, #6, #10
    6552:	4807      	ldr	r0, [pc, #28]	; (6570 <l2cap_accept+0x48>)
    6554:	f005 f821 	bl	b59a <log_1>
	return -ENOMEM;
    6558:	f06f 000b 	mvn.w	r0, #11
    655c:	e7ec      	b.n	6538 <l2cap_accept+0x10>
    655e:	bf00      	nop
    6560:	2000061c 	.word	0x2000061c
    6564:	0000eb9c 	.word	0x0000eb9c
    6568:	0000e6dc 	.word	0x0000e6dc
    656c:	0000e714 	.word	0x0000e714
    6570:	000106e4 	.word	0x000106e4

00006574 <l2cap_create_le_sig_pdu.isra.8>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
    6574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6576:	4605      	mov	r5, r0
    6578:	460f      	mov	r7, r1
    657a:	4616      	mov	r6, r2
	return bt_conn_create_pdu_timeout(pool,
    657c:	2104      	movs	r1, #4
    657e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
    6582:	2000      	movs	r0, #0
    6584:	f7ff febc 	bl	6300 <bt_conn_create_pdu_timeout>
	if (!buf) {
    6588:	4604      	mov	r4, r0
    658a:	b980      	cbnz	r0, 65ae <l2cap_create_le_sig_pdu.isra.8+0x3a>
		BT_ERR("Unable to allocate buffer for op 0x%02x", code);
    658c:	2301      	movs	r3, #1
    658e:	f04f 0200 	mov.w	r2, #0
    6592:	490b      	ldr	r1, [pc, #44]	; (65c0 <l2cap_create_le_sig_pdu.isra.8+0x4c>)
    6594:	f363 0207 	bfi	r2, r3, #0, #8
    6598:	4b0a      	ldr	r3, [pc, #40]	; (65c4 <l2cap_create_le_sig_pdu.isra.8+0x50>)
    659a:	480b      	ldr	r0, [pc, #44]	; (65c8 <l2cap_create_le_sig_pdu.isra.8+0x54>)
    659c:	1a5b      	subs	r3, r3, r1
    659e:	08db      	lsrs	r3, r3, #3
    65a0:	f363 128f 	bfi	r2, r3, #6, #10
    65a4:	4629      	mov	r1, r5
    65a6:	f004 fff8 	bl	b59a <log_1>
}
    65aa:	4620      	mov	r0, r4
    65ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	hdr = net_buf_add(buf, sizeof(*hdr));
    65ae:	2104      	movs	r1, #4
    65b0:	3008      	adds	r0, #8
    65b2:	f006 fd03 	bl	cfbc <net_buf_simple_add>
	hdr->code = code;
    65b6:	7005      	strb	r5, [r0, #0]
	hdr->ident = ident;
    65b8:	7047      	strb	r7, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
    65ba:	8046      	strh	r6, [r0, #2]
	return buf;
    65bc:	e7f5      	b.n	65aa <l2cap_create_le_sig_pdu.isra.8+0x36>
    65be:	bf00      	nop
    65c0:	0000e6dc 	.word	0x0000e6dc
    65c4:	0000e714 	.word	0x0000e714
    65c8:	0001070b 	.word	0x0001070b

000065cc <l2cap_rtx_timeout>:
{
    65cc:	b538      	push	{r3, r4, r5, lr}
	BT_ERR("chan %p timeout", chan);
    65ce:	f04f 0200 	mov.w	r2, #0
    65d2:	2301      	movs	r3, #1
{
    65d4:	4605      	mov	r5, r0
	BT_ERR("chan %p timeout", chan);
    65d6:	f363 0207 	bfi	r2, r3, #0, #8
    65da:	490b      	ldr	r1, [pc, #44]	; (6608 <l2cap_rtx_timeout+0x3c>)
    65dc:	4b0b      	ldr	r3, [pc, #44]	; (660c <l2cap_rtx_timeout+0x40>)
	struct bt_l2cap_le_chan *chan = LE_CHAN_RTX(work);
    65de:	f1a0 0410 	sub.w	r4, r0, #16
    65e2:	1a5b      	subs	r3, r3, r1
    65e4:	08db      	lsrs	r3, r3, #3
	BT_ERR("chan %p timeout", chan);
    65e6:	f363 128f 	bfi	r2, r3, #6, #10
    65ea:	4621      	mov	r1, r4
    65ec:	4808      	ldr	r0, [pc, #32]	; (6610 <l2cap_rtx_timeout+0x44>)
    65ee:	f004 ffd4 	bl	b59a <log_1>
	bt_l2cap_chan_remove(chan->chan.conn, &chan->chan);
    65f2:	f855 0c10 	ldr.w	r0, [r5, #-16]
    65f6:	4621      	mov	r1, r4
    65f8:	f005 fedb 	bl	c3b2 <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
    65fc:	4620      	mov	r0, r4
}
    65fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_l2cap_chan_del(&chan->chan);
    6602:	f005 bef6 	b.w	c3f2 <bt_l2cap_chan_del>
    6606:	bf00      	nop
    6608:	0000e6dc 	.word	0x0000e6dc
    660c:	0000e714 	.word	0x0000e714
    6610:	000107cd 	.word	0x000107cd

00006614 <bt_l2cap_connected>:
{
    6614:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    6618:	4606      	mov	r6, r0
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    661a:	4d24      	ldr	r5, [pc, #144]	; (66ac <bt_l2cap_connected+0x98>)
    661c:	4f24      	ldr	r7, [pc, #144]	; (66b0 <bt_l2cap_connected+0x9c>)
	k_delayed_work_init(&chan->rtx_work, l2cap_rtx_timeout);
    661e:	f8df 8094 	ldr.w	r8, [pc, #148]	; 66b4 <bt_l2cap_connected+0xa0>
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    6622:	42bd      	cmp	r5, r7
    6624:	d302      	bcc.n	662c <bt_l2cap_connected+0x18>
}
    6626:	b003      	add	sp, #12
    6628:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fchan->accept(conn, &chan) < 0) {
    662c:	686b      	ldr	r3, [r5, #4]
    662e:	a901      	add	r1, sp, #4
    6630:	4630      	mov	r0, r6
    6632:	4798      	blx	r3
    6634:	2800      	cmp	r0, #0
    6636:	db34      	blt.n	66a2 <bt_l2cap_connected+0x8e>
		ch = BT_L2CAP_LE_CHAN(chan);
    6638:	9c01      	ldr	r4, [sp, #4]
		ch->rx.cid = fchan->cid;
    663a:	882b      	ldrh	r3, [r5, #0]
	k_delayed_work_init(&chan->rtx_work, l2cap_rtx_timeout);
    663c:	4641      	mov	r1, r8
		ch->rx.cid = fchan->cid;
    663e:	86a3      	strh	r3, [r4, #52]	; 0x34
		ch->tx.cid = fchan->cid;
    6640:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
	k_delayed_work_init(&chan->rtx_work, l2cap_rtx_timeout);
    6644:	f104 0010 	add.w	r0, r4, #16
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
    6648:	f8d5 9008 	ldr.w	r9, [r5, #8]
	k_delayed_work_init(&chan->rtx_work, l2cap_rtx_timeout);
    664c:	f007 fd0d 	bl	e06a <k_delayed_work_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    6650:	2200      	movs	r2, #0
    6652:	f104 0330 	add.w	r3, r4, #48	; 0x30
    6656:	e8d3 1fef 	ldaex	r1, [r3]
    665a:	e8c3 2fe0 	stlex	r0, r2, [r3]
    665e:	2800      	cmp	r0, #0
    6660:	d1f9      	bne.n	6656 <bt_l2cap_connected+0x42>
	parent->next = child;
    6662:	60a2      	str	r2, [r4, #8]
Z_GENLIST_APPEND(slist, snode)
    6664:	6cb2      	ldr	r2, [r6, #72]	; 0x48
	sys_slist_append(&conn->channels, &chan->node);
    6666:	f104 0308 	add.w	r3, r4, #8
    666a:	b9e2      	cbnz	r2, 66a6 <bt_l2cap_connected+0x92>
	list->head = node;
    666c:	e9c6 3311 	strd	r3, r3, [r6, #68]	; 0x44
		if (chan->ops->connected) {
    6670:	9801      	ldr	r0, [sp, #4]
	chan->conn = conn;
    6672:	6026      	str	r6, [r4, #0]
		if (chan->ops->connected) {
    6674:	6843      	ldr	r3, [r0, #4]
	chan->destroy = destroy;
    6676:	f8c4 900c 	str.w	r9, [r4, #12]
		if (chan->ops->connected) {
    667a:	681b      	ldr	r3, [r3, #0]
    667c:	b103      	cbz	r3, 6680 <bt_l2cap_connected+0x6c>
			chan->ops->connected(chan);
    667e:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    6680:	9b01      	ldr	r3, [sp, #4]
    6682:	3330      	adds	r3, #48	; 0x30
    6684:	e8d3 2fef 	ldaex	r2, [r3]
    6688:	f042 0201 	orr.w	r2, r2, #1
    668c:	e8c3 2fe1 	stlex	r1, r2, [r3]
    6690:	2900      	cmp	r1, #0
    6692:	d1f7      	bne.n	6684 <bt_l2cap_connected+0x70>
		if (chan->ops->status) {
    6694:	9801      	ldr	r0, [sp, #4]
    6696:	6843      	ldr	r3, [r0, #4]
    6698:	699b      	ldr	r3, [r3, #24]
    669a:	b113      	cbz	r3, 66a2 <bt_l2cap_connected+0x8e>
			chan->ops->status(chan, chan->status);
    669c:	f100 0130 	add.w	r1, r0, #48	; 0x30
    66a0:	4798      	blx	r3
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    66a2:	350c      	adds	r5, #12
    66a4:	e7bd      	b.n	6622 <bt_l2cap_connected+0xe>
	parent->next = child;
    66a6:	6013      	str	r3, [r2, #0]
	list->tail = node;
    66a8:	64b3      	str	r3, [r6, #72]	; 0x48
    66aa:	e7e1      	b.n	6670 <bt_l2cap_connected+0x5c>
    66ac:	0000e6a0 	.word	0x0000e6a0
    66b0:	0000e6c4 	.word	0x0000e6c4
    66b4:	000065cd 	.word	0x000065cd

000066b8 <l2cap_recv>:
	if (buf->len < sizeof(*hdr)) {
    66b8:	898b      	ldrh	r3, [r1, #12]
{
    66ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (buf->len < sizeof(*hdr)) {
    66bc:	2b03      	cmp	r3, #3
{
    66be:	4605      	mov	r5, r0
    66c0:	460e      	mov	r6, r1
	if (buf->len < sizeof(*hdr)) {
    66c2:	d80e      	bhi.n	66e2 <l2cap_recv+0x2a>
		BT_ERR("Too small L2CAP signaling PDU");
    66c4:	2301      	movs	r3, #1
    66c6:	f04f 0100 	mov.w	r1, #0
    66ca:	4a37      	ldr	r2, [pc, #220]	; (67a8 <l2cap_recv+0xf0>)
    66cc:	f363 0107 	bfi	r1, r3, #0, #8
    66d0:	4b36      	ldr	r3, [pc, #216]	; (67ac <l2cap_recv+0xf4>)
    66d2:	4837      	ldr	r0, [pc, #220]	; (67b0 <l2cap_recv+0xf8>)
    66d4:	1a9b      	subs	r3, r3, r2
    66d6:	08db      	lsrs	r3, r3, #3
    66d8:	f363 118f 	bfi	r1, r3, #6, #10
		BT_ERR("Invalid ident value in L2CAP PDU");
    66dc:	f004 ff50 	bl	b580 <log_0>
		return 0;
    66e0:	e017      	b.n	6712 <l2cap_recv+0x5a>
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    66e2:	2104      	movs	r1, #4
    66e4:	f106 0008 	add.w	r0, r6, #8
    66e8:	f006 fc98 	bl	d01c <net_buf_simple_pull_mem>
	if (buf->len != len) {
    66ec:	89b1      	ldrh	r1, [r6, #12]
	len = sys_le16_to_cpu(hdr->len);
    66ee:	8842      	ldrh	r2, [r0, #2]
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    66f0:	4604      	mov	r4, r0
	if (buf->len != len) {
    66f2:	428a      	cmp	r2, r1
    66f4:	d010      	beq.n	6718 <l2cap_recv+0x60>
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
    66f6:	2001      	movs	r0, #1
    66f8:	f04f 0300 	mov.w	r3, #0
    66fc:	4c2a      	ldr	r4, [pc, #168]	; (67a8 <l2cap_recv+0xf0>)
    66fe:	f360 0307 	bfi	r3, r0, #0, #8
    6702:	482a      	ldr	r0, [pc, #168]	; (67ac <l2cap_recv+0xf4>)
    6704:	1b00      	subs	r0, r0, r4
    6706:	08c0      	lsrs	r0, r0, #3
    6708:	f360 138f 	bfi	r3, r0, #6, #10
    670c:	4829      	ldr	r0, [pc, #164]	; (67b4 <l2cap_recv+0xfc>)
    670e:	f004 ff58 	bl	b5c2 <log_2>
}
    6712:	2000      	movs	r0, #0
    6714:	b002      	add	sp, #8
    6716:	bd70      	pop	{r4, r5, r6, pc}
	if (!hdr->ident) {
    6718:	7843      	ldrb	r3, [r0, #1]
    671a:	b963      	cbnz	r3, 6736 <l2cap_recv+0x7e>
		BT_ERR("Invalid ident value in L2CAP PDU");
    671c:	2301      	movs	r3, #1
    671e:	f04f 0100 	mov.w	r1, #0
    6722:	4a21      	ldr	r2, [pc, #132]	; (67a8 <l2cap_recv+0xf0>)
    6724:	f363 0107 	bfi	r1, r3, #0, #8
    6728:	4b20      	ldr	r3, [pc, #128]	; (67ac <l2cap_recv+0xf4>)
    672a:	4823      	ldr	r0, [pc, #140]	; (67b8 <l2cap_recv+0x100>)
    672c:	1a9b      	subs	r3, r3, r2
    672e:	08db      	lsrs	r3, r3, #3
    6730:	f363 118f 	bfi	r1, r3, #6, #10
    6734:	e7d2      	b.n	66dc <l2cap_recv+0x24>
	switch (hdr->code) {
    6736:	7801      	ldrb	r1, [r0, #0]
    6738:	2901      	cmp	r1, #1
    673a:	d0ea      	beq.n	6712 <l2cap_recv+0x5a>
    673c:	2913      	cmp	r1, #19
    673e:	d10e      	bne.n	675e <l2cap_recv+0xa6>
	if (buf->len < sizeof(*rsp)) {
    6740:	2a01      	cmp	r2, #1
    6742:	d8e6      	bhi.n	6712 <l2cap_recv+0x5a>
		BT_ERR("Too small LE conn param rsp");
    6744:	2301      	movs	r3, #1
    6746:	f04f 0100 	mov.w	r1, #0
    674a:	4a17      	ldr	r2, [pc, #92]	; (67a8 <l2cap_recv+0xf0>)
    674c:	f363 0107 	bfi	r1, r3, #0, #8
    6750:	4b16      	ldr	r3, [pc, #88]	; (67ac <l2cap_recv+0xf4>)
    6752:	481a      	ldr	r0, [pc, #104]	; (67bc <l2cap_recv+0x104>)
    6754:	1a9b      	subs	r3, r3, r2
    6756:	08db      	lsrs	r3, r3, #3
    6758:	f363 118f 	bfi	r1, r3, #6, #10
    675c:	e7be      	b.n	66dc <l2cap_recv+0x24>
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
    675e:	2302      	movs	r3, #2
    6760:	f04f 0200 	mov.w	r2, #0
    6764:	4810      	ldr	r0, [pc, #64]	; (67a8 <l2cap_recv+0xf0>)
    6766:	f363 0207 	bfi	r2, r3, #0, #8
    676a:	4b10      	ldr	r3, [pc, #64]	; (67ac <l2cap_recv+0xf4>)
    676c:	1a1b      	subs	r3, r3, r0
    676e:	08db      	lsrs	r3, r3, #3
    6770:	f363 128f 	bfi	r2, r3, #6, #10
    6774:	4812      	ldr	r0, [pc, #72]	; (67c0 <l2cap_recv+0x108>)
    6776:	f004 ff10 	bl	b59a <log_1>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    677a:	7861      	ldrb	r1, [r4, #1]
    677c:	2202      	movs	r2, #2
    677e:	2001      	movs	r0, #1
		l2cap_send_reject(chan->conn, hdr->ident,
    6780:	682d      	ldr	r5, [r5, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    6782:	f7ff fef7 	bl	6574 <l2cap_create_le_sig_pdu.isra.8>
	if (!buf) {
    6786:	4604      	mov	r4, r0
    6788:	2800      	cmp	r0, #0
    678a:	d0c2      	beq.n	6712 <l2cap_recv+0x5a>
	rej = net_buf_add(buf, sizeof(*rej));
    678c:	2102      	movs	r1, #2
    678e:	3008      	adds	r0, #8
    6790:	f006 fc14 	bl	cfbc <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
    6794:	2300      	movs	r3, #0
		     bt_conn_tx_cb_t cb, void *user_data);

static inline void bt_l2cap_send(struct bt_conn *conn, u16_t cid,
				 struct net_buf *buf)
{
	bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
    6796:	4622      	mov	r2, r4
    6798:	7003      	strb	r3, [r0, #0]
    679a:	7043      	strb	r3, [r0, #1]
    679c:	2105      	movs	r1, #5
    679e:	9300      	str	r3, [sp, #0]
    67a0:	4628      	mov	r0, r5
    67a2:	f005 fe4d 	bl	c440 <bt_l2cap_send_cb>
    67a6:	e7b4      	b.n	6712 <l2cap_recv+0x5a>
    67a8:	0000e6dc 	.word	0x0000e6dc
    67ac:	0000e714 	.word	0x0000e714
    67b0:	00010733 	.word	0x00010733
    67b4:	00010751 	.word	0x00010751
    67b8:	00010772 	.word	0x00010772
    67bc:	00010793 	.word	0x00010793
    67c0:	000107af 	.word	0x000107af

000067c4 <bt_l2cap_recv>:
	if (buf->len < sizeof(*hdr)) {
    67c4:	898b      	ldrh	r3, [r1, #12]
{
    67c6:	b570      	push	{r4, r5, r6, lr}
	if (buf->len < sizeof(*hdr)) {
    67c8:	2b03      	cmp	r3, #3
{
    67ca:	4606      	mov	r6, r0
    67cc:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
    67ce:	d812      	bhi.n	67f6 <bt_l2cap_recv+0x32>
		BT_ERR("Too small L2CAP PDU received");
    67d0:	2301      	movs	r3, #1
    67d2:	f04f 0100 	mov.w	r1, #0
    67d6:	4a18      	ldr	r2, [pc, #96]	; (6838 <bt_l2cap_recv+0x74>)
    67d8:	f363 0107 	bfi	r1, r3, #0, #8
    67dc:	4b17      	ldr	r3, [pc, #92]	; (683c <bt_l2cap_recv+0x78>)
    67de:	4818      	ldr	r0, [pc, #96]	; (6840 <bt_l2cap_recv+0x7c>)
    67e0:	1a9b      	subs	r3, r3, r2
    67e2:	08db      	lsrs	r3, r3, #3
    67e4:	f363 118f 	bfi	r1, r3, #6, #10
    67e8:	f004 feca 	bl	b580 <log_0>
	net_buf_unref(buf);
    67ec:	4620      	mov	r0, r4
}
    67ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	net_buf_unref(buf);
    67f2:	f001 bdd1 	b.w	8398 <net_buf_unref>
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    67f6:	2104      	movs	r1, #4
    67f8:	f104 0008 	add.w	r0, r4, #8
    67fc:	f006 fc0e 	bl	d01c <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
    6800:	8845      	ldrh	r5, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
    6802:	4630      	mov	r0, r6
    6804:	4629      	mov	r1, r5
    6806:	f005 fe3f 	bl	c488 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    680a:	b978      	cbnz	r0, 682c <bt_l2cap_recv+0x68>
		BT_WARN("Ignoring data for unknown CID 0x%04x", cid);
    680c:	2302      	movs	r3, #2
    680e:	f04f 0200 	mov.w	r2, #0
    6812:	4909      	ldr	r1, [pc, #36]	; (6838 <bt_l2cap_recv+0x74>)
    6814:	f363 0207 	bfi	r2, r3, #0, #8
    6818:	4b08      	ldr	r3, [pc, #32]	; (683c <bt_l2cap_recv+0x78>)
    681a:	480a      	ldr	r0, [pc, #40]	; (6844 <bt_l2cap_recv+0x80>)
    681c:	1a5b      	subs	r3, r3, r1
    681e:	08db      	lsrs	r3, r3, #3
    6820:	f363 128f 	bfi	r2, r3, #6, #10
    6824:	4629      	mov	r1, r5
    6826:	f004 feb8 	bl	b59a <log_1>
		net_buf_unref(buf);
    682a:	e7df      	b.n	67ec <bt_l2cap_recv+0x28>
	chan->ops->recv(chan, buf);
    682c:	6843      	ldr	r3, [r0, #4]
    682e:	4621      	mov	r1, r4
    6830:	691b      	ldr	r3, [r3, #16]
    6832:	4798      	blx	r3
    6834:	e7da      	b.n	67ec <bt_l2cap_recv+0x28>
    6836:	bf00      	nop
    6838:	0000e6dc 	.word	0x0000e6dc
    683c:	0000e714 	.word	0x0000e714
    6840:	000106a2 	.word	0x000106a2
    6844:	000106bf 	.word	0x000106bf

00006848 <bt_l2cap_update_conn_param>:
{
    6848:	b573      	push	{r0, r1, r4, r5, r6, lr}
	ident++;
    684a:	4b15      	ldr	r3, [pc, #84]	; (68a0 <bt_l2cap_update_conn_param+0x58>)
{
    684c:	4605      	mov	r5, r0
	ident++;
    684e:	781a      	ldrb	r2, [r3, #0]
{
    6850:	460c      	mov	r4, r1
	ident++;
    6852:	3201      	adds	r2, #1
	if (!ident) {
    6854:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
		ident++;
    6858:	bf08      	it	eq
    685a:	2201      	moveq	r2, #1
    685c:	701a      	strb	r2, [r3, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
    685e:	7819      	ldrb	r1, [r3, #0]
    6860:	2208      	movs	r2, #8
    6862:	2012      	movs	r0, #18
    6864:	f7ff fe86 	bl	6574 <l2cap_create_le_sig_pdu.isra.8>
	if (!buf) {
    6868:	4606      	mov	r6, r0
    686a:	b1b0      	cbz	r0, 689a <bt_l2cap_update_conn_param+0x52>
	req = net_buf_add(buf, sizeof(*req));
    686c:	2108      	movs	r1, #8
    686e:	4408      	add	r0, r1
    6870:	f006 fba4 	bl	cfbc <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
    6874:	8823      	ldrh	r3, [r4, #0]
    6876:	4632      	mov	r2, r6
    6878:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
    687a:	8863      	ldrh	r3, [r4, #2]
    687c:	2105      	movs	r1, #5
    687e:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
    6880:	88a3      	ldrh	r3, [r4, #4]
    6882:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
    6884:	88e3      	ldrh	r3, [r4, #6]
    6886:	2400      	movs	r4, #0
    6888:	80c3      	strh	r3, [r0, #6]
    688a:	9400      	str	r4, [sp, #0]
    688c:	4623      	mov	r3, r4
    688e:	4628      	mov	r0, r5
    6890:	f005 fdd6 	bl	c440 <bt_l2cap_send_cb>
	return 0;
    6894:	4620      	mov	r0, r4
}
    6896:	b002      	add	sp, #8
    6898:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
    689a:	f06f 000b 	mvn.w	r0, #11
    689e:	e7fa      	b.n	6896 <bt_l2cap_update_conn_param+0x4e>
    68a0:	2000151d 	.word	0x2000151d

000068a4 <bt_att_destroy>:

	return 0;
}

void bt_att_destroy(struct bt_l2cap_chan *chan)
{
    68a4:	b507      	push	{r0, r1, r2, lr}
	struct bt_att *att = ATT_CHAN(chan);
    68a6:	9001      	str	r0, [sp, #4]

	BT_DBG("chan %p", chan);

	k_mem_slab_free(&att_slab, (void **)&att);
    68a8:	a901      	add	r1, sp, #4
    68aa:	4803      	ldr	r0, [pc, #12]	; (68b8 <bt_att_destroy+0x14>)
    68ac:	f002 fef0 	bl	9690 <k_mem_slab_free>
}
    68b0:	b003      	add	sp, #12
    68b2:	f85d fb04 	ldr.w	pc, [sp], #4
    68b6:	bf00      	nop
    68b8:	20004c2c 	.word	0x20004c2c

000068bc <find_type_cb>:
{
    68bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    68c0:	f642 0301 	movw	r3, #10241	; 0x2801
    68c4:	2700      	movs	r7, #0
{
    68c6:	b092      	sub	sp, #72	; 0x48
	struct bt_att *att = data->att;
    68c8:	680e      	ldr	r6, [r1, #0]
{
    68ca:	4605      	mov	r5, r0
    68cc:	460c      	mov	r4, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    68ce:	6800      	ldr	r0, [r0, #0]
    68d0:	a902      	add	r1, sp, #8
	struct bt_conn *conn = att->chan.chan.conn;
    68d2:	f8d6 8000 	ldr.w	r8, [r6]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    68d6:	f88d 7008 	strb.w	r7, [sp, #8]
    68da:	f8ad 300a 	strh.w	r3, [sp, #10]
    68de:	f005 fbaf 	bl	c040 <bt_uuid_cmp>
    68e2:	2800      	cmp	r0, #0
    68e4:	d03e      	beq.n	6964 <find_type_cb+0xa8>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
    68e6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    68ea:	a903      	add	r1, sp, #12
    68ec:	6828      	ldr	r0, [r5, #0]
    68ee:	f88d 700c 	strb.w	r7, [sp, #12]
    68f2:	f8ad 300e 	strh.w	r3, [sp, #14]
    68f6:	f005 fba3 	bl	c040 <bt_uuid_cmp>
    68fa:	b150      	cbz	r0, 6912 <find_type_cb+0x56>
		if (data->group &&
    68fc:	68a3      	ldr	r3, [r4, #8]
    68fe:	b123      	cbz	r3, 690a <find_type_cb+0x4e>
		    attr->handle > sys_le16_to_cpu(data->group->end_handle)) {
    6900:	8a2a      	ldrh	r2, [r5, #16]
		if (data->group &&
    6902:	8859      	ldrh	r1, [r3, #2]
    6904:	4291      	cmp	r1, r2
    6906:	d200      	bcs.n	690a <find_type_cb+0x4e>
			data->group->end_handle = sys_cpu_to_le16(attr->handle);
    6908:	805a      	strh	r2, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
    690a:	2001      	movs	r0, #1
}
    690c:	b012      	add	sp, #72	; 0x48
    690e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (att->chan.tx.mtu - data->buf->len < sizeof(*data->group)) {
    6912:	6862      	ldr	r2, [r4, #4]
    6914:	f8b6 3042 	ldrh.w	r3, [r6, #66]	; 0x42
    6918:	8992      	ldrh	r2, [r2, #12]
    691a:	1a9b      	subs	r3, r3, r2
    691c:	2b03      	cmp	r3, #3
    691e:	d9f5      	bls.n	690c <find_type_cb+0x50>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
    6920:	2310      	movs	r3, #16
    6922:	9000      	str	r0, [sp, #0]
    6924:	686e      	ldr	r6, [r5, #4]
    6926:	eb0d 0203 	add.w	r2, sp, r3
    692a:	4629      	mov	r1, r5
    692c:	4640      	mov	r0, r8
    692e:	47b0      	blx	r6
	if (read < 0) {
    6930:	1e06      	subs	r6, r0, #0
    6932:	db17      	blt.n	6964 <find_type_cb+0xa8>
	if (read != data->value_len) {
    6934:	7c22      	ldrb	r2, [r4, #16]
    6936:	68e0      	ldr	r0, [r4, #12]
    6938:	4296      	cmp	r6, r2
    693a:	d03c      	beq.n	69b6 <find_type_cb+0xfa>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
    693c:	4601      	mov	r1, r0
    693e:	a80d      	add	r0, sp, #52	; 0x34
    6940:	f005 fba8 	bl	c094 <bt_uuid_create>
    6944:	b988      	cbnz	r0, 696a <find_type_cb+0xae>
			BT_WARN("Unable to create UUID: size %u", data->value_len);
    6946:	2302      	movs	r3, #2
    6948:	f04f 0200 	mov.w	r2, #0
    694c:	491c      	ldr	r1, [pc, #112]	; (69c0 <find_type_cb+0x104>)
    694e:	f363 0207 	bfi	r2, r3, #0, #8
    6952:	4b1c      	ldr	r3, [pc, #112]	; (69c4 <find_type_cb+0x108>)
    6954:	481c      	ldr	r0, [pc, #112]	; (69c8 <find_type_cb+0x10c>)
    6956:	1a5b      	subs	r3, r3, r1
    6958:	08db      	lsrs	r3, r3, #3
    695a:	7c21      	ldrb	r1, [r4, #16]
    695c:	f363 128f 	bfi	r2, r3, #6, #10
			BT_WARN("Unable to create UUID: size %d", read);
    6960:	f004 fe1b 	bl	b59a <log_1>
	data->group = NULL;
    6964:	2300      	movs	r3, #0
    6966:	60a3      	str	r3, [r4, #8]
	return BT_GATT_ITER_CONTINUE;
    6968:	e7cf      	b.n	690a <find_type_cb+0x4e>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
    696a:	b2f2      	uxtb	r2, r6
    696c:	a904      	add	r1, sp, #16
    696e:	a808      	add	r0, sp, #32
    6970:	f005 fb90 	bl	c094 <bt_uuid_create>
    6974:	b968      	cbnz	r0, 6992 <find_type_cb+0xd6>
			BT_WARN("Unable to create UUID: size %d", read);
    6976:	2302      	movs	r3, #2
    6978:	f04f 0200 	mov.w	r2, #0
    697c:	4910      	ldr	r1, [pc, #64]	; (69c0 <find_type_cb+0x104>)
    697e:	f363 0207 	bfi	r2, r3, #0, #8
    6982:	4b10      	ldr	r3, [pc, #64]	; (69c4 <find_type_cb+0x108>)
    6984:	4811      	ldr	r0, [pc, #68]	; (69cc <find_type_cb+0x110>)
    6986:	1a5b      	subs	r3, r3, r1
    6988:	08db      	lsrs	r3, r3, #3
    698a:	f363 128f 	bfi	r2, r3, #6, #10
    698e:	4631      	mov	r1, r6
    6990:	e7e6      	b.n	6960 <find_type_cb+0xa4>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
    6992:	a908      	add	r1, sp, #32
    6994:	a80d      	add	r0, sp, #52	; 0x34
    6996:	f005 fb53 	bl	c040 <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
    699a:	2800      	cmp	r0, #0
    699c:	d1e2      	bne.n	6964 <find_type_cb+0xa8>
	data->err = 0x00;
    699e:	2300      	movs	r3, #0
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    69a0:	6860      	ldr	r0, [r4, #4]
	data->err = 0x00;
    69a2:	7463      	strb	r3, [r4, #17]
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    69a4:	2104      	movs	r1, #4
    69a6:	3008      	adds	r0, #8
    69a8:	f006 fb08 	bl	cfbc <net_buf_simple_add>
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    69ac:	8a2b      	ldrh	r3, [r5, #16]
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    69ae:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    69b0:	8003      	strh	r3, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(attr->handle);
    69b2:	8043      	strh	r3, [r0, #2]
	return BT_GATT_ITER_CONTINUE;
    69b4:	e7a9      	b.n	690a <find_type_cb+0x4e>
	} else if (memcmp(data->value, uuid, read)) {
    69b6:	4632      	mov	r2, r6
    69b8:	a904      	add	r1, sp, #16
    69ba:	f005 fa60 	bl	be7e <memcmp>
    69be:	e7ec      	b.n	699a <find_type_cb+0xde>
    69c0:	0000e6dc 	.word	0x0000e6dc
    69c4:	0000e6dc 	.word	0x0000e6dc
    69c8:	00010949 	.word	0x00010949
    69cc:	00010968 	.word	0x00010968

000069d0 <bt_att_connected>:
{
    69d0:	b510      	push	{r4, lr}
    69d2:	4604      	mov	r4, r0
	z_impl_k_queue_init(queue);
    69d4:	30d8      	adds	r0, #216	; 0xd8
    69d6:	f007 f934 	bl	dc42 <z_impl_k_queue_init>
	ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    69da:	2317      	movs	r3, #23
	k_delayed_work_init(&att->timeout_work, att_timeout);
    69dc:	4905      	ldr	r1, [pc, #20]	; (69f4 <bt_att_connected+0x24>)
	ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    69de:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
	ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
    69e2:	86e3      	strh	r3, [r4, #54]	; 0x36
	k_delayed_work_init(&att->timeout_work, att_timeout);
    69e4:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
    69e8:	f007 fb3f 	bl	e06a <k_delayed_work_init>
	list->head = NULL;
    69ec:	2300      	movs	r3, #0
	list->tail = NULL;
    69ee:	e9c4 3326 	strd	r3, r3, [r4, #152]	; 0x98
}
    69f2:	bd10      	pop	{r4, pc}
    69f4:	0000755d 	.word	0x0000755d

000069f8 <att_send>:
{
    69f8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    69fc:	4698      	mov	r8, r3
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    69fe:	688b      	ldr	r3, [r1, #8]
{
    6a00:	4607      	mov	r7, r0
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    6a02:	781b      	ldrb	r3, [r3, #0]
{
    6a04:	460c      	mov	r4, r1
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    6a06:	2bd2      	cmp	r3, #210	; 0xd2
{
    6a08:	4615      	mov	r5, r2
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    6a0a:	d118      	bne.n	6a3e <att_send+0x46>
		err = bt_smp_sign(conn, buf);
    6a0c:	f006 fa98 	bl	cf40 <bt_smp_sign>
		if (err) {
    6a10:	4606      	mov	r6, r0
    6a12:	b1a0      	cbz	r0, 6a3e <att_send+0x46>
			BT_ERR("Error signing data");
    6a14:	2301      	movs	r3, #1
    6a16:	f04f 0100 	mov.w	r1, #0
    6a1a:	4a14      	ldr	r2, [pc, #80]	; (6a6c <att_send+0x74>)
    6a1c:	f363 0107 	bfi	r1, r3, #0, #8
    6a20:	4b13      	ldr	r3, [pc, #76]	; (6a70 <att_send+0x78>)
    6a22:	4814      	ldr	r0, [pc, #80]	; (6a74 <att_send+0x7c>)
    6a24:	1a9b      	subs	r3, r3, r2
    6a26:	08db      	lsrs	r3, r3, #3
    6a28:	f363 118f 	bfi	r1, r3, #6, #10
    6a2c:	f004 fda8 	bl	b580 <log_0>
			net_buf_unref(buf);
    6a30:	4620      	mov	r0, r4
    6a32:	f001 fcb1 	bl	8398 <net_buf_unref>
}
    6a36:	4630      	mov	r0, r6
    6a38:	b002      	add	sp, #8
    6a3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf,
    6a3e:	b95d      	cbnz	r5, 6a58 <att_send+0x60>
	switch (att_op_get_type(buf->data[0])) {
    6a40:	68a3      	ldr	r3, [r4, #8]
    6a42:	7818      	ldrb	r0, [r3, #0]
    6a44:	f005 fd2d 	bl	c4a2 <att_op_get_type>
    6a48:	3801      	subs	r0, #1
    6a4a:	b2c0      	uxtb	r0, r0
    6a4c:	2804      	cmp	r0, #4
    6a4e:	bf96      	itet	ls
    6a50:	4b09      	ldrls	r3, [pc, #36]	; (6a78 <att_send+0x80>)
    6a52:	4d0a      	ldrhi	r5, [pc, #40]	; (6a7c <att_send+0x84>)
    6a54:	f853 5020 	ldrls.w	r5, [r3, r0, lsl #2]
	return bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf,
    6a58:	f8cd 8000 	str.w	r8, [sp]
    6a5c:	462b      	mov	r3, r5
    6a5e:	4622      	mov	r2, r4
    6a60:	2104      	movs	r1, #4
    6a62:	4638      	mov	r0, r7
    6a64:	f005 fcec 	bl	c440 <bt_l2cap_send_cb>
    6a68:	4606      	mov	r6, r0
    6a6a:	e7e4      	b.n	6a36 <att_send+0x3e>
    6a6c:	0000e6dc 	.word	0x0000e6dc
    6a70:	0000e6dc 	.word	0x0000e6dc
    6a74:	00010851 	.word	0x00010851
    6a78:	0000ebb8 	.word	0x0000ebb8
    6a7c:	0000c779 	.word	0x0000c779

00006a80 <bt_att_accept>:
{
    6a80:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
    6a82:	2200      	movs	r2, #0
{
    6a84:	4606      	mov	r6, r0
    6a86:	460d      	mov	r5, r1
	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
    6a88:	4814      	ldr	r0, [pc, #80]	; (6adc <bt_att_accept+0x5c>)
    6a8a:	a901      	add	r1, sp, #4
    6a8c:	f002 fdd4 	bl	9638 <k_mem_slab_alloc>
    6a90:	4604      	mov	r4, r0
    6a92:	b198      	cbz	r0, 6abc <bt_att_accept+0x3c>
		BT_ERR("No available ATT context for conn %p", conn);
    6a94:	2301      	movs	r3, #1
    6a96:	f04f 0200 	mov.w	r2, #0
    6a9a:	4911      	ldr	r1, [pc, #68]	; (6ae0 <bt_att_accept+0x60>)
    6a9c:	f363 0207 	bfi	r2, r3, #0, #8
    6aa0:	4b10      	ldr	r3, [pc, #64]	; (6ae4 <bt_att_accept+0x64>)
    6aa2:	4811      	ldr	r0, [pc, #68]	; (6ae8 <bt_att_accept+0x68>)
    6aa4:	1a5b      	subs	r3, r3, r1
    6aa6:	08db      	lsrs	r3, r3, #3
    6aa8:	f363 128f 	bfi	r2, r3, #6, #10
    6aac:	4631      	mov	r1, r6
    6aae:	f004 fd74 	bl	b59a <log_1>
		return -ENOMEM;
    6ab2:	f06f 040b 	mvn.w	r4, #11
}
    6ab6:	4620      	mov	r0, r4
    6ab8:	b002      	add	sp, #8
    6aba:	bd70      	pop	{r4, r5, r6, pc}
	(void)memset(att, 0, sizeof(*att));
    6abc:	4601      	mov	r1, r0
    6abe:	22e8      	movs	r2, #232	; 0xe8
    6ac0:	9801      	ldr	r0, [sp, #4]
    6ac2:	f005 fa16 	bl	bef2 <memset>
	att->chan.chan.ops = &ops;
    6ac6:	9801      	ldr	r0, [sp, #4]
    6ac8:	4b08      	ldr	r3, [pc, #32]	; (6aec <bt_att_accept+0x6c>)
    6aca:	6043      	str	r3, [r0, #4]
	return z_impl_k_sem_init(sem, initial_count, limit);
    6acc:	2205      	movs	r2, #5
    6ace:	30c0      	adds	r0, #192	; 0xc0
    6ad0:	4611      	mov	r1, r2
    6ad2:	f007 fa45 	bl	df60 <z_impl_k_sem_init>
	*chan = &att->chan.chan;
    6ad6:	9b01      	ldr	r3, [sp, #4]
    6ad8:	602b      	str	r3, [r5, #0]
	return 0;
    6ada:	e7ec      	b.n	6ab6 <bt_att_accept+0x36>
    6adc:	20004c2c 	.word	0x20004c2c
    6ae0:	0000e6dc 	.word	0x0000e6dc
    6ae4:	0000e6dc 	.word	0x0000e6dc
    6ae8:	00010870 	.word	0x00010870
    6aec:	0000ec34 	.word	0x0000ec34

00006af0 <att_chan_get>:
	if (conn->state != BT_CONN_CONNECTED) {
    6af0:	7a83      	ldrb	r3, [r0, #10]
{
    6af2:	b510      	push	{r4, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    6af4:	2b06      	cmp	r3, #6
    6af6:	d00f      	beq.n	6b18 <att_chan_get+0x28>
		BT_WARN("Not connected");
    6af8:	2302      	movs	r3, #2
    6afa:	f04f 0100 	mov.w	r1, #0
    6afe:	4a1a      	ldr	r2, [pc, #104]	; (6b68 <att_chan_get+0x78>)
    6b00:	f363 0107 	bfi	r1, r3, #0, #8
    6b04:	4b19      	ldr	r3, [pc, #100]	; (6b6c <att_chan_get+0x7c>)
    6b06:	481a      	ldr	r0, [pc, #104]	; (6b70 <att_chan_get+0x80>)
    6b08:	1a9b      	subs	r3, r3, r2
    6b0a:	08db      	lsrs	r3, r3, #3
    6b0c:	f363 118f 	bfi	r1, r3, #6, #10
		BT_WARN("ATT context flagged as disconnected");
    6b10:	f004 fd36 	bl	b580 <log_0>
		return NULL;
    6b14:	2400      	movs	r4, #0
    6b16:	e012      	b.n	6b3e <att_chan_get+0x4e>
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
    6b18:	2104      	movs	r1, #4
    6b1a:	f005 fcb5 	bl	c488 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    6b1e:	4604      	mov	r4, r0
    6b20:	b978      	cbnz	r0, 6b42 <att_chan_get+0x52>
		BT_ERR("Unable to find ATT channel");
    6b22:	2301      	movs	r3, #1
    6b24:	f04f 0100 	mov.w	r1, #0
    6b28:	4a0f      	ldr	r2, [pc, #60]	; (6b68 <att_chan_get+0x78>)
    6b2a:	f363 0107 	bfi	r1, r3, #0, #8
    6b2e:	4b0f      	ldr	r3, [pc, #60]	; (6b6c <att_chan_get+0x7c>)
    6b30:	4810      	ldr	r0, [pc, #64]	; (6b74 <att_chan_get+0x84>)
    6b32:	1a9b      	subs	r3, r3, r2
    6b34:	08db      	lsrs	r3, r3, #3
    6b36:	f363 118f 	bfi	r1, r3, #6, #10
    6b3a:	f004 fd21 	bl	b580 <log_0>
}
    6b3e:	4620      	mov	r0, r4
    6b40:	bd10      	pop	{r4, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    6b42:	f100 0390 	add.w	r3, r0, #144	; 0x90
    6b46:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_test_bit(att->flags, ATT_DISCONNECTED)) {
    6b4a:	075b      	lsls	r3, r3, #29
    6b4c:	d5f7      	bpl.n	6b3e <att_chan_get+0x4e>
		BT_WARN("ATT context flagged as disconnected");
    6b4e:	2302      	movs	r3, #2
    6b50:	f04f 0100 	mov.w	r1, #0
    6b54:	4a04      	ldr	r2, [pc, #16]	; (6b68 <att_chan_get+0x78>)
    6b56:	f363 0107 	bfi	r1, r3, #0, #8
    6b5a:	4b04      	ldr	r3, [pc, #16]	; (6b6c <att_chan_get+0x7c>)
    6b5c:	4806      	ldr	r0, [pc, #24]	; (6b78 <att_chan_get+0x88>)
    6b5e:	1a9b      	subs	r3, r3, r2
    6b60:	08db      	lsrs	r3, r3, #3
    6b62:	f363 118f 	bfi	r1, r3, #6, #10
    6b66:	e7d3      	b.n	6b10 <att_chan_get+0x20>
    6b68:	0000e6dc 	.word	0x0000e6dc
    6b6c:	0000e6dc 	.word	0x0000e6dc
    6b70:	000107ed 	.word	0x000107ed
    6b74:	000107fb 	.word	0x000107fb
    6b78:	00010816 	.word	0x00010816

00006b7c <att_req_sent>:
{
    6b7c:	b538      	push	{r3, r4, r5, lr}
    6b7e:	460d      	mov	r5, r1
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    6b80:	2104      	movs	r1, #4
{
    6b82:	4604      	mov	r4, r0
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    6b84:	f005 fc75 	bl	c472 <bt_l2cap_le_lookup_tx_cid>
	if (att->req) {
    6b88:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
    6b8c:	b133      	cbz	r3, 6b9c <att_req_sent+0x20>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    6b8e:	f100 01a0 	add.w	r1, r0, #160	; 0xa0
    6b92:	f247 5230 	movw	r2, #30000	; 0x7530
    6b96:	4804      	ldr	r0, [pc, #16]	; (6ba8 <att_req_sent+0x2c>)
    6b98:	f003 fae6 	bl	a168 <k_delayed_work_submit_to_queue>
	att_pdu_sent(conn, user_data);
    6b9c:	4629      	mov	r1, r5
    6b9e:	4620      	mov	r0, r4
}
    6ba0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	att_pdu_sent(conn, user_data);
    6ba4:	f005 bde8 	b.w	c778 <att_pdu_sent>
    6ba8:	2000120c 	.word	0x2000120c

00006bac <att_send_req>:
{
    6bac:	b573      	push	{r0, r1, r4, r5, r6, lr}
    6bae:	4605      	mov	r5, r0
    6bb0:	460c      	mov	r4, r1
	att->req = req;
    6bb2:	f8c5 1094 	str.w	r1, [r5, #148]	; 0x94
	return z_impl_k_sem_take(sem, timeout);
    6bb6:	2100      	movs	r1, #0
    6bb8:	30c0      	adds	r0, #192	; 0xc0
    6bba:	f003 f98f 	bl	9edc <z_impl_k_sem_take>
	if (k_sem_take(&att->tx_sem, K_NO_WAIT) < 0) {
    6bbe:	2800      	cmp	r0, #0
    6bc0:	da08      	bge.n	6bd4 <att_send_req+0x28>
		k_fifo_put(&att->tx_queue, req->buf);
    6bc2:	f105 00d8 	add.w	r0, r5, #216	; 0xd8
    6bc6:	6921      	ldr	r1, [r4, #16]
    6bc8:	f007 f843 	bl	dc52 <k_queue_append>
		return 0;
    6bcc:	2500      	movs	r5, #0
}
    6bce:	4628      	mov	r0, r5
    6bd0:	b002      	add	sp, #8
    6bd2:	bd70      	pop	{r4, r5, r6, pc}
	net_buf_simple_save(&req->buf->b, &req->state);
    6bd4:	6926      	ldr	r6, [r4, #16]
	state->offset = net_buf_simple_headroom(buf);
    6bd6:	f106 0008 	add.w	r0, r6, #8
    6bda:	f006 fa2f 	bl	d03c <net_buf_simple_headroom>
	state->len = buf->len;
    6bde:	89b3      	ldrh	r3, [r6, #12]
	state->offset = net_buf_simple_headroom(buf);
    6be0:	81a0      	strh	r0, [r4, #12]
	state->len = buf->len;
    6be2:	81e3      	strh	r3, [r4, #14]
	err = bt_l2cap_send_cb(att->chan.chan.conn, BT_L2CAP_CID_ATT,
    6be4:	6920      	ldr	r0, [r4, #16]
    6be6:	682d      	ldr	r5, [r5, #0]
    6be8:	f006 f9e4 	bl	cfb4 <net_buf_ref>
    6bec:	6923      	ldr	r3, [r4, #16]
    6bee:	4602      	mov	r2, r0
	switch (att_op_get_type(buf->data[0])) {
    6bf0:	689b      	ldr	r3, [r3, #8]
	err = bt_l2cap_send_cb(att->chan.chan.conn, BT_L2CAP_CID_ATT,
    6bf2:	2600      	movs	r6, #0
	switch (att_op_get_type(buf->data[0])) {
    6bf4:	7818      	ldrb	r0, [r3, #0]
    6bf6:	f005 fc54 	bl	c4a2 <att_op_get_type>
    6bfa:	3801      	subs	r0, #1
    6bfc:	b2c0      	uxtb	r0, r0
    6bfe:	2804      	cmp	r0, #4
    6c00:	bf96      	itet	ls
    6c02:	4b08      	ldrls	r3, [pc, #32]	; (6c24 <att_send_req+0x78>)
    6c04:	4b08      	ldrhi	r3, [pc, #32]	; (6c28 <att_send_req+0x7c>)
    6c06:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
	err = bt_l2cap_send_cb(att->chan.chan.conn, BT_L2CAP_CID_ATT,
    6c0a:	9600      	str	r6, [sp, #0]
    6c0c:	4628      	mov	r0, r5
    6c0e:	2104      	movs	r1, #4
    6c10:	f005 fc16 	bl	c440 <bt_l2cap_send_cb>
	if (err) {
    6c14:	4605      	mov	r5, r0
    6c16:	2800      	cmp	r0, #0
    6c18:	d0d9      	beq.n	6bce <att_send_req+0x22>
		net_buf_unref(req->buf);
    6c1a:	6920      	ldr	r0, [r4, #16]
    6c1c:	f001 fbbc 	bl	8398 <net_buf_unref>
		req->buf = NULL;
    6c20:	6126      	str	r6, [r4, #16]
		return err;
    6c22:	e7d4      	b.n	6bce <att_send_req+0x22>
    6c24:	0000ebb8 	.word	0x0000ebb8
    6c28:	0000c779 	.word	0x0000c779

00006c2c <att_write_cmd>:
{
    6c2c:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    6c2e:	6804      	ldr	r4, [r0, #0]
{
    6c30:	b089      	sub	sp, #36	; 0x24
	handle = net_buf_pull_le16(buf);
    6c32:	f101 0008 	add.w	r0, r1, #8
{
    6c36:	460d      	mov	r5, r1
	handle = net_buf_pull_le16(buf);
    6c38:	f006 f9f8 	bl	d02c <net_buf_simple_pull_le16>
	if (!bt_gatt_change_aware(conn, req ? true : false)) {
    6c3c:	2100      	movs	r1, #0
	handle = net_buf_pull_le16(buf);
    6c3e:	4606      	mov	r6, r0
	if (!bt_gatt_change_aware(conn, req ? true : false)) {
    6c40:	4620      	mov	r0, r4
	return att_write_rsp(conn, 0, 0, handle, 0, buf->data, buf->len);
    6c42:	68af      	ldr	r7, [r5, #8]
    6c44:	89ad      	ldrh	r5, [r5, #12]
	if (!bt_gatt_change_aware(conn, req ? true : false)) {
    6c46:	f006 f92f 	bl	cea8 <bt_gatt_change_aware>
    6c4a:	b328      	cbz	r0, 6c98 <att_write_cmd+0x6c>
	if (!handle) {
    6c4c:	b336      	cbz	r6, 6c9c <att_write_cmd+0x70>
	(void)memset(&data, 0, sizeof(data));
    6c4e:	2218      	movs	r2, #24
    6c50:	2100      	movs	r1, #0
    6c52:	a802      	add	r0, sp, #8
    6c54:	f005 f94d 	bl	bef2 <memset>
	data.req = req;
    6c58:	2300      	movs	r3, #0
    6c5a:	f88d 3010 	strb.w	r3, [sp, #16]
	data.offset = offset;
    6c5e:	f8ad 301a 	strh.w	r3, [sp, #26]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    6c62:	2301      	movs	r3, #1
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    6c64:	4a0e      	ldr	r2, [pc, #56]	; (6ca0 <att_write_cmd+0x74>)
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    6c66:	f88d 301c 	strb.w	r3, [sp, #28]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    6c6a:	4631      	mov	r1, r6
    6c6c:	ab02      	add	r3, sp, #8
    6c6e:	4630      	mov	r0, r6
	data.conn = conn;
    6c70:	9402      	str	r4, [sp, #8]
	data.value = value;
    6c72:	9705      	str	r7, [sp, #20]
	data.len = len;
    6c74:	f8ad 5018 	strh.w	r5, [sp, #24]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    6c78:	f005 fc60 	bl	c53c <bt_gatt_foreach_attr>
	if (data.err) {
    6c7c:	f89d 301c 	ldrb.w	r3, [sp, #28]
    6c80:	b93b      	cbnz	r3, 6c92 <att_write_cmd+0x66>
	if (data.buf) {
    6c82:	9a03      	ldr	r2, [sp, #12]
    6c84:	b12a      	cbz	r2, 6c92 <att_write_cmd+0x66>
		(void)bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf,
    6c86:	9300      	str	r3, [sp, #0]
    6c88:	2104      	movs	r1, #4
    6c8a:	4b06      	ldr	r3, [pc, #24]	; (6ca4 <att_write_cmd+0x78>)
    6c8c:	4620      	mov	r0, r4
    6c8e:	f005 fbd7 	bl	c440 <bt_l2cap_send_cb>
    6c92:	2000      	movs	r0, #0
}
    6c94:	b009      	add	sp, #36	; 0x24
    6c96:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    6c98:	2012      	movs	r0, #18
    6c9a:	e7fb      	b.n	6c94 <att_write_cmd+0x68>
		return BT_ATT_ERR_INVALID_HANDLE;
    6c9c:	2001      	movs	r0, #1
    6c9e:	e7f9      	b.n	6c94 <att_write_cmd+0x68>
    6ca0:	0000c825 	.word	0x0000c825
    6ca4:	0000c7fb 	.word	0x0000c7fb

00006ca8 <bt_att_create_pdu>:
{
    6ca8:	b570      	push	{r4, r5, r6, lr}
    6caa:	460e      	mov	r6, r1
    6cac:	4615      	mov	r5, r2
	att = att_chan_get(conn);
    6cae:	f7ff ff1f 	bl	6af0 <att_chan_get>
	if (!att) {
    6cb2:	4604      	mov	r4, r0
    6cb4:	b198      	cbz	r0, 6cde <bt_att_create_pdu+0x36>
	if (len + sizeof(op) > att->chan.tx.mtu) {
    6cb6:	f8b0 1042 	ldrh.w	r1, [r0, #66]	; 0x42
    6cba:	1c6a      	adds	r2, r5, #1
    6cbc:	428a      	cmp	r2, r1
    6cbe:	d910      	bls.n	6ce2 <bt_att_create_pdu+0x3a>
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
    6cc0:	2002      	movs	r0, #2
    6cc2:	f04f 0300 	mov.w	r3, #0
    6cc6:	4c1b      	ldr	r4, [pc, #108]	; (6d34 <bt_att_create_pdu+0x8c>)
    6cc8:	f360 0307 	bfi	r3, r0, #0, #8
    6ccc:	481a      	ldr	r0, [pc, #104]	; (6d38 <bt_att_create_pdu+0x90>)
    6cce:	1b00      	subs	r0, r0, r4
    6cd0:	08c0      	lsrs	r0, r0, #3
    6cd2:	f360 138f 	bfi	r3, r0, #6, #10
    6cd6:	4819      	ldr	r0, [pc, #100]	; (6d3c <bt_att_create_pdu+0x94>)
    6cd8:	f004 fc73 	bl	b5c2 <log_2>
		return NULL;
    6cdc:	2400      	movs	r4, #0
}
    6cde:	4620      	mov	r0, r4
    6ce0:	bd70      	pop	{r4, r5, r6, pc}
	switch (att_op_get_type(op)) {
    6ce2:	4630      	mov	r0, r6
    6ce4:	f005 fbdd 	bl	c4a2 <att_op_get_type>
    6ce8:	2802      	cmp	r0, #2
    6cea:	d001      	beq.n	6cf0 <bt_att_create_pdu+0x48>
    6cec:	2804      	cmp	r0, #4
    6cee:	d117      	bne.n	6d20 <bt_att_create_pdu+0x78>
		buf = bt_l2cap_create_pdu_timeout(NULL, 0, BT_ATT_TIMEOUT);
    6cf0:	f247 5230 	movw	r2, #30000	; 0x7530
		buf = bt_l2cap_create_pdu(NULL, 0);
    6cf4:	2100      	movs	r1, #0
    6cf6:	4608      	mov	r0, r1
    6cf8:	f005 fb9f 	bl	c43a <bt_l2cap_create_pdu_timeout>
    6cfc:	4604      	mov	r4, r0
	if (!buf) {
    6cfe:	b990      	cbnz	r0, 6d26 <bt_att_create_pdu+0x7e>
		BT_ERR("Unable to allocate buffer for op 0x%02x", op);
    6d00:	2301      	movs	r3, #1
    6d02:	f04f 0200 	mov.w	r2, #0
    6d06:	490b      	ldr	r1, [pc, #44]	; (6d34 <bt_att_create_pdu+0x8c>)
    6d08:	f363 0207 	bfi	r2, r3, #0, #8
    6d0c:	4b0a      	ldr	r3, [pc, #40]	; (6d38 <bt_att_create_pdu+0x90>)
    6d0e:	480c      	ldr	r0, [pc, #48]	; (6d40 <bt_att_create_pdu+0x98>)
    6d10:	1a5b      	subs	r3, r3, r1
    6d12:	08db      	lsrs	r3, r3, #3
    6d14:	f363 128f 	bfi	r2, r3, #6, #10
    6d18:	4631      	mov	r1, r6
    6d1a:	f004 fc3e 	bl	b59a <log_1>
		return NULL;
    6d1e:	e7de      	b.n	6cde <bt_att_create_pdu+0x36>
		buf = bt_l2cap_create_pdu(NULL, 0);
    6d20:	f04f 32ff 	mov.w	r2, #4294967295
    6d24:	e7e6      	b.n	6cf4 <bt_att_create_pdu+0x4c>
	hdr = net_buf_add(buf, sizeof(*hdr));
    6d26:	2101      	movs	r1, #1
    6d28:	3008      	adds	r0, #8
    6d2a:	f006 f947 	bl	cfbc <net_buf_simple_add>
	hdr->code = op;
    6d2e:	7006      	strb	r6, [r0, #0]
	return buf;
    6d30:	e7d5      	b.n	6cde <bt_att_create_pdu+0x36>
    6d32:	bf00      	nop
    6d34:	0000e6dc 	.word	0x0000e6dc
    6d38:	0000e6dc 	.word	0x0000e6dc
    6d3c:	00010895 	.word	0x00010895
    6d40:	0001070b 	.word	0x0001070b

00006d44 <att_mtu_req>:
	mtu_client = sys_le16_to_cpu(req->mtu);
    6d44:	688b      	ldr	r3, [r1, #8]
{
    6d46:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
    6d4a:	881b      	ldrh	r3, [r3, #0]
{
    6d4c:	4605      	mov	r5, r0
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
    6d4e:	2b16      	cmp	r3, #22
    6d50:	d91e      	bls.n	6d90 <att_mtu_req+0x4c>
	struct bt_conn *conn = att->chan.chan.conn;
    6d52:	f8d0 8000 	ldr.w	r8, [r0]
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
    6d56:	2202      	movs	r2, #2
    6d58:	2103      	movs	r1, #3
    6d5a:	4640      	mov	r0, r8
    6d5c:	f7ff ffa4 	bl	6ca8 <bt_att_create_pdu>
	if (!pdu) {
    6d60:	4607      	mov	r7, r0
    6d62:	b1b8      	cbz	r0, 6d94 <att_mtu_req+0x50>
	rsp = net_buf_add(pdu, sizeof(*rsp));
    6d64:	2102      	movs	r1, #2
    6d66:	3008      	adds	r0, #8
    6d68:	f006 f928 	bl	cfbc <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
    6d6c:	2400      	movs	r4, #0
    6d6e:	2617      	movs	r6, #23
    6d70:	7044      	strb	r4, [r0, #1]
    6d72:	7006      	strb	r6, [r0, #0]
	(void)bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, pdu, att_rsp_sent, NULL);
    6d74:	4b08      	ldr	r3, [pc, #32]	; (6d98 <att_mtu_req+0x54>)
    6d76:	9400      	str	r4, [sp, #0]
    6d78:	463a      	mov	r2, r7
    6d7a:	2104      	movs	r1, #4
    6d7c:	4640      	mov	r0, r8
    6d7e:	f005 fb5f 	bl	c440 <bt_l2cap_send_cb>
	return 0;
    6d82:	4620      	mov	r0, r4
	att->chan.rx.mtu = MIN(mtu_client, mtu_server);
    6d84:	86ee      	strh	r6, [r5, #54]	; 0x36
	att->chan.tx.mtu = att->chan.rx.mtu;
    6d86:	f8a5 6042 	strh.w	r6, [r5, #66]	; 0x42
}
    6d8a:	b002      	add	sp, #8
    6d8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_ATT_ERR_INVALID_PDU;
    6d90:	2004      	movs	r0, #4
    6d92:	e7fa      	b.n	6d8a <att_mtu_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
    6d94:	200e      	movs	r0, #14
    6d96:	e7f8      	b.n	6d8a <att_mtu_req+0x46>
    6d98:	0000c7fb 	.word	0x0000c7fb

00006d9c <send_err_rsp.part.10>:
static void send_err_rsp(struct bt_conn *conn, u8_t req, u16_t handle,
    6d9c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    6da0:	4688      	mov	r8, r1
    6da2:	4617      	mov	r7, r2
	buf = bt_att_create_pdu(conn, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
    6da4:	2101      	movs	r1, #1
    6da6:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_conn *conn, u8_t req, u16_t handle,
    6da8:	4605      	mov	r5, r0
    6daa:	461e      	mov	r6, r3
	buf = bt_att_create_pdu(conn, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
    6dac:	f7ff ff7c 	bl	6ca8 <bt_att_create_pdu>
	if (!buf) {
    6db0:	4604      	mov	r4, r0
    6db2:	b180      	cbz	r0, 6dd6 <send_err_rsp.part.10+0x3a>
	rsp = net_buf_add(buf, sizeof(*rsp));
    6db4:	2104      	movs	r1, #4
    6db6:	3008      	adds	r0, #8
    6db8:	f006 f900 	bl	cfbc <net_buf_simple_add>
	(void)bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_rsp_sent, NULL);
    6dbc:	2300      	movs	r3, #0
	rsp->request = req;
    6dbe:	f880 8000 	strb.w	r8, [r0]
	rsp->handle = sys_cpu_to_le16(handle);
    6dc2:	f8a0 7001 	strh.w	r7, [r0, #1]
	rsp->error = err;
    6dc6:	70c6      	strb	r6, [r0, #3]
	(void)bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_rsp_sent, NULL);
    6dc8:	4622      	mov	r2, r4
    6dca:	9300      	str	r3, [sp, #0]
    6dcc:	2104      	movs	r1, #4
    6dce:	4b03      	ldr	r3, [pc, #12]	; (6ddc <send_err_rsp.part.10+0x40>)
    6dd0:	4628      	mov	r0, r5
    6dd2:	f005 fb35 	bl	c440 <bt_l2cap_send_cb>
}
    6dd6:	b002      	add	sp, #8
    6dd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6ddc:	0000c7fb 	.word	0x0000c7fb

00006de0 <bt_att_recv>:
{
    6de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
    6de2:	898b      	ldrh	r3, [r1, #12]
{
    6de4:	4604      	mov	r4, r0
    6de6:	460f      	mov	r7, r1
	if (buf->len < sizeof(*hdr)) {
    6de8:	b97b      	cbnz	r3, 6e0a <bt_att_recv+0x2a>
		BT_ERR("Too small ATT PDU received");
    6dea:	2301      	movs	r3, #1
    6dec:	f04f 0100 	mov.w	r1, #0
    6df0:	4a4e      	ldr	r2, [pc, #312]	; (6f2c <bt_att_recv+0x14c>)
    6df2:	f363 0107 	bfi	r1, r3, #0, #8
    6df6:	4b4e      	ldr	r3, [pc, #312]	; (6f30 <bt_att_recv+0x150>)
    6df8:	484e      	ldr	r0, [pc, #312]	; (6f34 <bt_att_recv+0x154>)
    6dfa:	1a9b      	subs	r3, r3, r2
    6dfc:	08db      	lsrs	r3, r3, #3
    6dfe:	f363 118f 	bfi	r1, r3, #6, #10
			BT_WARN("Ignoring unexpected indication");
    6e02:	f004 fbbd 	bl	b580 <log_0>
}
    6e06:	2000      	movs	r0, #0
    6e08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    6e0a:	2101      	movs	r1, #1
    6e0c:	f107 0008 	add.w	r0, r7, #8
    6e10:	f006 f904 	bl	d01c <net_buf_simple_pull_mem>
		if (hdr->code == handlers[i].op) {
    6e14:	4a48      	ldr	r2, [pc, #288]	; (6f38 <bt_att_recv+0x158>)
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    6e16:	4605      	mov	r5, r0
		if (hdr->code == handlers[i].op) {
    6e18:	7801      	ldrb	r1, [r0, #0]
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    6e1a:	2300      	movs	r3, #0
    6e1c:	4610      	mov	r0, r2
		if (hdr->code == handlers[i].op) {
    6e1e:	f812 6033 	ldrb.w	r6, [r2, r3, lsl #3]
    6e22:	428e      	cmp	r6, r1
    6e24:	d11e      	bne.n	6e64 <bt_att_recv+0x84>
		if (handler->type == ATT_REQUEST &&
    6e26:	00db      	lsls	r3, r3, #3
    6e28:	441a      	add	r2, r3
    6e2a:	7896      	ldrb	r6, [r2, #2]
    6e2c:	2e01      	cmp	r6, #1
    6e2e:	d138      	bne.n	6ea2 <bt_att_recv+0xc2>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    6e30:	f104 0290 	add.w	r2, r4, #144	; 0x90
    6e34:	e8d2 1fef 	ldaex	r1, [r2]
    6e38:	f041 0c01 	orr.w	ip, r1, #1
    6e3c:	e8c2 cfee 	stlex	lr, ip, [r2]
    6e40:	f1be 0f00 	cmp.w	lr, #0
    6e44:	d1f6      	bne.n	6e34 <bt_att_recv+0x54>
    6e46:	07c9      	lsls	r1, r1, #31
    6e48:	d547      	bpl.n	6eda <bt_att_recv+0xfa>
			BT_WARN("Ignoring unexpected request");
    6e4a:	2302      	movs	r3, #2
    6e4c:	f04f 0100 	mov.w	r1, #0
    6e50:	4a36      	ldr	r2, [pc, #216]	; (6f2c <bt_att_recv+0x14c>)
    6e52:	f363 0107 	bfi	r1, r3, #0, #8
    6e56:	4b36      	ldr	r3, [pc, #216]	; (6f30 <bt_att_recv+0x150>)
    6e58:	4838      	ldr	r0, [pc, #224]	; (6f3c <bt_att_recv+0x15c>)
    6e5a:	1a9b      	subs	r3, r3, r2
    6e5c:	08db      	lsrs	r3, r3, #3
    6e5e:	f363 118f 	bfi	r1, r3, #6, #10
    6e62:	e7ce      	b.n	6e02 <bt_att_recv+0x22>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    6e64:	3301      	adds	r3, #1
    6e66:	2b0d      	cmp	r3, #13
    6e68:	d1d9      	bne.n	6e1e <bt_att_recv+0x3e>
		BT_WARN("Unhandled ATT code 0x%02x", hdr->code);
    6e6a:	2302      	movs	r3, #2
    6e6c:	f04f 0200 	mov.w	r2, #0
    6e70:	482e      	ldr	r0, [pc, #184]	; (6f2c <bt_att_recv+0x14c>)
    6e72:	f363 0207 	bfi	r2, r3, #0, #8
    6e76:	4b2e      	ldr	r3, [pc, #184]	; (6f30 <bt_att_recv+0x150>)
    6e78:	1a1b      	subs	r3, r3, r0
    6e7a:	08db      	lsrs	r3, r3, #3
    6e7c:	4830      	ldr	r0, [pc, #192]	; (6f40 <bt_att_recv+0x160>)
    6e7e:	f363 128f 	bfi	r2, r3, #6, #10
    6e82:	f004 fb8a 	bl	b59a <log_1>
		if (att_op_get_type(hdr->code) != ATT_COMMAND) {
    6e86:	7829      	ldrb	r1, [r5, #0]
    6e88:	4608      	mov	r0, r1
    6e8a:	f005 fb0a 	bl	c4a2 <att_op_get_type>
    6e8e:	2800      	cmp	r0, #0
    6e90:	d0b9      	beq.n	6e06 <bt_att_recv+0x26>
	if (!req) {
    6e92:	2900      	cmp	r1, #0
    6e94:	d0b7      	beq.n	6e06 <bt_att_recv+0x26>
    6e96:	2306      	movs	r3, #6
    6e98:	2200      	movs	r2, #0
    6e9a:	6820      	ldr	r0, [r4, #0]
    6e9c:	f7ff ff7e 	bl	6d9c <send_err_rsp.part.10>
    6ea0:	e7b1      	b.n	6e06 <bt_att_recv+0x26>
		} else if (handler->type == ATT_INDICATION &&
    6ea2:	2e05      	cmp	r6, #5
    6ea4:	d119      	bne.n	6eda <bt_att_recv+0xfa>
    6ea6:	f104 0290 	add.w	r2, r4, #144	; 0x90
    6eaa:	e8d2 1fef 	ldaex	r1, [r2]
    6eae:	f041 0c02 	orr.w	ip, r1, #2
    6eb2:	e8c2 cfee 	stlex	lr, ip, [r2]
    6eb6:	f1be 0f00 	cmp.w	lr, #0
    6eba:	d1f6      	bne.n	6eaa <bt_att_recv+0xca>
    6ebc:	078a      	lsls	r2, r1, #30
    6ebe:	d50c      	bpl.n	6eda <bt_att_recv+0xfa>
			BT_WARN("Ignoring unexpected indication");
    6ec0:	2302      	movs	r3, #2
    6ec2:	f04f 0100 	mov.w	r1, #0
    6ec6:	4a19      	ldr	r2, [pc, #100]	; (6f2c <bt_att_recv+0x14c>)
    6ec8:	f363 0107 	bfi	r1, r3, #0, #8
    6ecc:	4b18      	ldr	r3, [pc, #96]	; (6f30 <bt_att_recv+0x150>)
    6ece:	481d      	ldr	r0, [pc, #116]	; (6f44 <bt_att_recv+0x164>)
    6ed0:	1a9b      	subs	r3, r3, r2
    6ed2:	08db      	lsrs	r3, r3, #3
    6ed4:	f363 118f 	bfi	r1, r3, #6, #10
    6ed8:	e793      	b.n	6e02 <bt_att_recv+0x22>
	if (buf->len < handler->expect_len) {
    6eda:	4403      	add	r3, r0
    6edc:	89b9      	ldrh	r1, [r7, #12]
    6ede:	785a      	ldrb	r2, [r3, #1]
    6ee0:	428a      	cmp	r2, r1
    6ee2:	d913      	bls.n	6f0c <bt_att_recv+0x12c>
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
    6ee4:	2201      	movs	r2, #1
    6ee6:	f04f 0300 	mov.w	r3, #0
    6eea:	4810      	ldr	r0, [pc, #64]	; (6f2c <bt_att_recv+0x14c>)
    6eec:	f362 0307 	bfi	r3, r2, #0, #8
    6ef0:	4a0f      	ldr	r2, [pc, #60]	; (6f30 <bt_att_recv+0x150>)
    6ef2:	1a12      	subs	r2, r2, r0
    6ef4:	08d2      	lsrs	r2, r2, #3
    6ef6:	f362 138f 	bfi	r3, r2, #6, #10
    6efa:	4813      	ldr	r0, [pc, #76]	; (6f48 <bt_att_recv+0x168>)
    6efc:	782a      	ldrb	r2, [r5, #0]
    6efe:	f004 fb60 	bl	b5c2 <log_2>
	if (handler->type == ATT_REQUEST && err) {
    6f02:	2e01      	cmp	r6, #1
    6f04:	f47f af7f 	bne.w	6e06 <bt_att_recv+0x26>
		err = BT_ATT_ERR_INVALID_PDU;
    6f08:	2304      	movs	r3, #4
    6f0a:	e00a      	b.n	6f22 <bt_att_recv+0x142>
		err = handler->func(att, buf);
    6f0c:	685b      	ldr	r3, [r3, #4]
    6f0e:	4639      	mov	r1, r7
    6f10:	4620      	mov	r0, r4
    6f12:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
    6f14:	2e01      	cmp	r6, #1
		err = handler->func(att, buf);
    6f16:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
    6f18:	f47f af75 	bne.w	6e06 <bt_att_recv+0x26>
    6f1c:	2800      	cmp	r0, #0
    6f1e:	f43f af72 	beq.w	6e06 <bt_att_recv+0x26>
		send_err_rsp(chan->conn, hdr->code, 0, err);
    6f22:	7829      	ldrb	r1, [r5, #0]
	if (!req) {
    6f24:	2900      	cmp	r1, #0
    6f26:	f43f af6e 	beq.w	6e06 <bt_att_recv+0x26>
    6f2a:	e7b5      	b.n	6e98 <bt_att_recv+0xb8>
    6f2c:	0000e6dc 	.word	0x0000e6dc
    6f30:	0000e6dc 	.word	0x0000e6dc
    6f34:	000108ba 	.word	0x000108ba
    6f38:	0000ebcc 	.word	0x0000ebcc
    6f3c:	000108d5 	.word	0x000108d5
    6f40:	0001092f 	.word	0x0001092f
    6f44:	000108f1 	.word	0x000108f1
    6f48:	00010910 	.word	0x00010910

00006f4c <att_read_group_req>:
{
    6f4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	u8_t uuid_len = buf->len - sizeof(*req);
    6f50:	7b0c      	ldrb	r4, [r1, #12]
{
    6f52:	4680      	mov	r8, r0
	u8_t uuid_len = buf->len - sizeof(*req);
    6f54:	3c04      	subs	r4, #4
    6f56:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
    6f58:	2c02      	cmp	r4, #2
{
    6f5a:	b08f      	sub	sp, #60	; 0x3c
    6f5c:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
    6f5e:	d001      	beq.n	6f64 <att_read_group_req+0x18>
    6f60:	2c10      	cmp	r4, #16
    6f62:	d16e      	bne.n	7042 <att_read_group_req+0xf6>
	req = net_buf_pull_mem(buf, sizeof(*req));
    6f64:	2104      	movs	r1, #4
    6f66:	3008      	adds	r0, #8
	struct bt_conn *conn = att->chan.chan.conn;
    6f68:	f8d8 9000 	ldr.w	r9, [r8]
	req = net_buf_pull_mem(buf, sizeof(*req));
    6f6c:	f006 f856 	bl	d01c <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    6f70:	ae04      	add	r6, sp, #16
	start_handle = sys_le16_to_cpu(req->start_handle);
    6f72:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    6f74:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    6f76:	1d01      	adds	r1, r0, #4
    6f78:	4622      	mov	r2, r4
    6f7a:	4630      	mov	r0, r6
    6f7c:	f005 f88a 	bl	c094 <bt_uuid_create>
    6f80:	2800      	cmp	r0, #0
    6f82:	d060      	beq.n	7046 <att_read_group_req+0xfa>
	if (!start || !end) {
    6f84:	2d00      	cmp	r5, #0
    6f86:	d036      	beq.n	6ff6 <att_read_group_req+0xaa>
    6f88:	2400      	movs	r4, #0
    6f8a:	b39f      	cbz	r7, 6ff4 <att_read_group_req+0xa8>
	if (start > end) {
    6f8c:	42bd      	cmp	r5, r7
    6f8e:	d832      	bhi.n	6ff6 <att_read_group_req+0xaa>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    6f90:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    6f94:	a902      	add	r1, sp, #8
    6f96:	4630      	mov	r0, r6
    6f98:	f88d 4008 	strb.w	r4, [sp, #8]
    6f9c:	f8ad 300a 	strh.w	r3, [sp, #10]
    6fa0:	f005 f84e 	bl	c040 <bt_uuid_cmp>
    6fa4:	bb90      	cbnz	r0, 700c <att_read_group_req+0xc0>
	struct bt_conn *conn = att->chan.chan.conn;
    6fa6:	f8d8 9000 	ldr.w	r9, [r8]
	(void)memset(&data, 0, sizeof(data));
    6faa:	2214      	movs	r2, #20
    6fac:	2100      	movs	r1, #0
    6fae:	a809      	add	r0, sp, #36	; 0x24
    6fb0:	f004 ff9f 	bl	bef2 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
    6fb4:	2201      	movs	r2, #1
    6fb6:	2111      	movs	r1, #17
    6fb8:	4648      	mov	r0, r9
    6fba:	f7ff fe75 	bl	6ca8 <bt_att_create_pdu>
    6fbe:	900b      	str	r0, [sp, #44]	; 0x2c
	if (!data.buf) {
    6fc0:	2800      	cmp	r0, #0
    6fc2:	d040      	beq.n	7046 <att_read_group_req+0xfa>
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    6fc4:	2101      	movs	r1, #1
    6fc6:	3008      	adds	r0, #8
	data.uuid = uuid;
    6fc8:	e9cd 8609 	strd	r8, r6, [sp, #36]	; 0x24
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    6fcc:	f005 fff6 	bl	cfbc <net_buf_simple_add>
	data.rsp->len = 0U;
    6fd0:	2600      	movs	r6, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    6fd2:	900c      	str	r0, [sp, #48]	; 0x30
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    6fd4:	ab09      	add	r3, sp, #36	; 0x24
	data.rsp->len = 0U;
    6fd6:	7006      	strb	r6, [r0, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    6fd8:	4a1c      	ldr	r2, [pc, #112]	; (704c <att_read_group_req+0x100>)
    6fda:	4639      	mov	r1, r7
    6fdc:	4628      	mov	r0, r5
	data.group = NULL;
    6fde:	960d      	str	r6, [sp, #52]	; 0x34
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    6fe0:	f005 faac 	bl	c53c <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
    6fe4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    6fe6:	781c      	ldrb	r4, [r3, #0]
    6fe8:	bb1c      	cbnz	r4, 7032 <att_read_group_req+0xe6>
		net_buf_unref(data.buf);
    6fea:	980b      	ldr	r0, [sp, #44]	; 0x2c
    6fec:	f001 f9d4 	bl	8398 <net_buf_unref>
	if (!req) {
    6ff0:	230a      	movs	r3, #10
    6ff2:	e018      	b.n	7026 <att_read_group_req+0xda>
			*err = 0U;
    6ff4:	463d      	mov	r5, r7
	if (!req) {
    6ff6:	2301      	movs	r3, #1
    6ff8:	462a      	mov	r2, r5
    6ffa:	2110      	movs	r1, #16
    6ffc:	4648      	mov	r0, r9
    6ffe:	f7ff fecd 	bl	6d9c <send_err_rsp.part.10>
		return 0;
    7002:	2400      	movs	r4, #0
}
    7004:	4620      	mov	r0, r4
    7006:	b00f      	add	sp, #60	; 0x3c
    7008:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
    700c:	f642 0301 	movw	r3, #10241	; 0x2801
    7010:	a903      	add	r1, sp, #12
    7012:	4630      	mov	r0, r6
    7014:	f88d 400c 	strb.w	r4, [sp, #12]
    7018:	f8ad 300e 	strh.w	r3, [sp, #14]
    701c:	f005 f810 	bl	c040 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    7020:	2800      	cmp	r0, #0
    7022:	d0c0      	beq.n	6fa6 <att_read_group_req+0x5a>
	if (!req) {
    7024:	2310      	movs	r3, #16
    7026:	462a      	mov	r2, r5
    7028:	2110      	movs	r1, #16
    702a:	4648      	mov	r0, r9
    702c:	f7ff feb6 	bl	6d9c <send_err_rsp.part.10>
		return 0;
    7030:	e7e8      	b.n	7004 <att_read_group_req+0xb8>
	(void)bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent,
    7032:	9600      	str	r6, [sp, #0]
    7034:	4b06      	ldr	r3, [pc, #24]	; (7050 <att_read_group_req+0x104>)
    7036:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    7038:	2104      	movs	r1, #4
    703a:	4648      	mov	r0, r9
    703c:	f005 fa00 	bl	c440 <bt_l2cap_send_cb>
	return 0;
    7040:	e7df      	b.n	7002 <att_read_group_req+0xb6>
		return BT_ATT_ERR_INVALID_PDU;
    7042:	2404      	movs	r4, #4
    7044:	e7de      	b.n	7004 <att_read_group_req+0xb8>
		return BT_ATT_ERR_UNLIKELY;
    7046:	240e      	movs	r4, #14
    7048:	e7dc      	b.n	7004 <att_read_group_req+0xb8>
    704a:	bf00      	nop
    704c:	0000c553 	.word	0x0000c553
    7050:	0000c7fb 	.word	0x0000c7fb

00007054 <att_read_mult_req>:
{
    7054:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    7058:	6805      	ldr	r5, [r0, #0]
{
    705a:	b089      	sub	sp, #36	; 0x24
	(void)memset(&data, 0, sizeof(data));
    705c:	2214      	movs	r2, #20
{
    705e:	4606      	mov	r6, r0
    7060:	460c      	mov	r4, r1
	(void)memset(&data, 0, sizeof(data));
    7062:	a803      	add	r0, sp, #12
    7064:	2100      	movs	r1, #0
    7066:	f004 ff44 	bl	bef2 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
    706a:	2200      	movs	r2, #0
    706c:	210f      	movs	r1, #15
    706e:	4628      	mov	r0, r5
    7070:	f7ff fe1a 	bl	6ca8 <bt_att_create_pdu>
    7074:	9005      	str	r0, [sp, #20]
	if (!data.buf) {
    7076:	b378      	cbz	r0, 70d8 <att_read_mult_req+0x84>
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    7078:	f04f 0801 	mov.w	r8, #1
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    707c:	f8df 9060 	ldr.w	r9, [pc, #96]	; 70e0 <att_read_mult_req+0x8c>
	data.att = att;
    7080:	9603      	str	r6, [sp, #12]
		handle = net_buf_pull_le16(buf);
    7082:	f104 0708 	add.w	r7, r4, #8
	while (buf->len >= sizeof(u16_t)) {
    7086:	89a3      	ldrh	r3, [r4, #12]
    7088:	2b01      	cmp	r3, #1
    708a:	d808      	bhi.n	709e <att_read_mult_req+0x4a>
	(void)bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent,
    708c:	2400      	movs	r4, #0
    708e:	4b13      	ldr	r3, [pc, #76]	; (70dc <att_read_mult_req+0x88>)
    7090:	9400      	str	r4, [sp, #0]
    7092:	9a05      	ldr	r2, [sp, #20]
    7094:	2104      	movs	r1, #4
    7096:	4628      	mov	r0, r5
    7098:	f005 f9d2 	bl	c440 <bt_l2cap_send_cb>
	return 0;
    709c:	e018      	b.n	70d0 <att_read_mult_req+0x7c>
		handle = net_buf_pull_le16(buf);
    709e:	4638      	mov	r0, r7
    70a0:	f005 ffc4 	bl	d02c <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    70a4:	ab03      	add	r3, sp, #12
    70a6:	464a      	mov	r2, r9
    70a8:	4601      	mov	r1, r0
		handle = net_buf_pull_le16(buf);
    70aa:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    70ac:	f88d 801c 	strb.w	r8, [sp, #28]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    70b0:	f005 fa44 	bl	c53c <bt_gatt_foreach_attr>
		if (data.err) {
    70b4:	f89d 301c 	ldrb.w	r3, [sp, #28]
    70b8:	2b00      	cmp	r3, #0
    70ba:	d0e4      	beq.n	7086 <att_read_mult_req+0x32>
			net_buf_unref(data.buf);
    70bc:	9805      	ldr	r0, [sp, #20]
    70be:	f001 f96b 	bl	8398 <net_buf_unref>
	if (!req) {
    70c2:	f89d 301c 	ldrb.w	r3, [sp, #28]
    70c6:	4632      	mov	r2, r6
    70c8:	210e      	movs	r1, #14
    70ca:	4628      	mov	r0, r5
    70cc:	f7ff fe66 	bl	6d9c <send_err_rsp.part.10>
			return 0;
    70d0:	2000      	movs	r0, #0
}
    70d2:	b009      	add	sp, #36	; 0x24
    70d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_UNLIKELY;
    70d8:	200e      	movs	r0, #14
    70da:	e7fa      	b.n	70d2 <att_read_mult_req+0x7e>
    70dc:	0000c7fb 	.word	0x0000c7fb
    70e0:	0000c881 	.word	0x0000c881

000070e4 <att_read_rsp>:
{
    70e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    70e8:	6805      	ldr	r5, [r0, #0]
{
    70ea:	b088      	sub	sp, #32
    70ec:	4604      	mov	r4, r0
    70ee:	460f      	mov	r7, r1
	if (!bt_gatt_change_aware(conn, true)) {
    70f0:	4628      	mov	r0, r5
    70f2:	2101      	movs	r1, #1
{
    70f4:	4690      	mov	r8, r2
    70f6:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(conn, true)) {
    70f8:	f005 fed6 	bl	cea8 <bt_gatt_change_aware>
    70fc:	b3a0      	cbz	r0, 7168 <att_read_rsp+0x84>
	if (!handle) {
    70fe:	b3ae      	cbz	r6, 716c <att_read_rsp+0x88>
	(void)memset(&data, 0, sizeof(data));
    7100:	2214      	movs	r2, #20
    7102:	2100      	movs	r1, #0
    7104:	a803      	add	r0, sp, #12
    7106:	f004 fef4 	bl	bef2 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
    710a:	2200      	movs	r2, #0
    710c:	4641      	mov	r1, r8
    710e:	4628      	mov	r0, r5
    7110:	f7ff fdca 	bl	6ca8 <bt_att_create_pdu>
    7114:	9005      	str	r0, [sp, #20]
	if (!data.buf) {
    7116:	b358      	cbz	r0, 7170 <att_read_rsp+0x8c>
	data.offset = offset;
    7118:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    711c:	4a15      	ldr	r2, [pc, #84]	; (7174 <att_read_rsp+0x90>)
	data.offset = offset;
    711e:	f8ad 3010 	strh.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    7122:	2301      	movs	r3, #1
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    7124:	4631      	mov	r1, r6
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    7126:	f88d 301c 	strb.w	r3, [sp, #28]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    712a:	4630      	mov	r0, r6
    712c:	ab03      	add	r3, sp, #12
	data.att = att;
    712e:	9403      	str	r4, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    7130:	f005 fa04 	bl	c53c <bt_gatt_foreach_attr>
	if (data.err) {
    7134:	f89d 401c 	ldrb.w	r4, [sp, #28]
    7138:	b174      	cbz	r4, 7158 <att_read_rsp+0x74>
		net_buf_unref(data.buf);
    713a:	9805      	ldr	r0, [sp, #20]
    713c:	f001 f92c 	bl	8398 <net_buf_unref>
	if (!req) {
    7140:	f89d 301c 	ldrb.w	r3, [sp, #28]
    7144:	4632      	mov	r2, r6
    7146:	4639      	mov	r1, r7
    7148:	4628      	mov	r0, r5
    714a:	f7ff fe27 	bl	6d9c <send_err_rsp.part.10>
		return 0;
    714e:	2400      	movs	r4, #0
}
    7150:	4620      	mov	r0, r4
    7152:	b008      	add	sp, #32
    7154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	(void)bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent,
    7158:	9400      	str	r4, [sp, #0]
    715a:	4b07      	ldr	r3, [pc, #28]	; (7178 <att_read_rsp+0x94>)
    715c:	9a05      	ldr	r2, [sp, #20]
    715e:	2104      	movs	r1, #4
    7160:	4628      	mov	r0, r5
    7162:	f005 f96d 	bl	c440 <bt_l2cap_send_cb>
	return 0;
    7166:	e7f3      	b.n	7150 <att_read_rsp+0x6c>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    7168:	2412      	movs	r4, #18
    716a:	e7f1      	b.n	7150 <att_read_rsp+0x6c>
		return BT_ATT_ERR_INVALID_HANDLE;
    716c:	2401      	movs	r4, #1
    716e:	e7ef      	b.n	7150 <att_read_rsp+0x6c>
		return BT_ATT_ERR_UNLIKELY;
    7170:	240e      	movs	r4, #14
    7172:	e7ed      	b.n	7150 <att_read_rsp+0x6c>
    7174:	0000c881 	.word	0x0000c881
    7178:	0000c7fb 	.word	0x0000c7fb

0000717c <att_read_type_req>:
{
    717c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	u8_t uuid_len = buf->len - sizeof(*req);
    7180:	7b0c      	ldrb	r4, [r1, #12]
{
    7182:	4680      	mov	r8, r0
	u8_t uuid_len = buf->len - sizeof(*req);
    7184:	3c04      	subs	r4, #4
    7186:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
    7188:	2c02      	cmp	r4, #2
{
    718a:	b08f      	sub	sp, #60	; 0x3c
    718c:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
    718e:	d001      	beq.n	7194 <att_read_type_req+0x18>
    7190:	2c10      	cmp	r4, #16
    7192:	d154      	bne.n	723e <att_read_type_req+0xc2>
	req = net_buf_pull_mem(buf, sizeof(*req));
    7194:	2104      	movs	r1, #4
    7196:	3008      	adds	r0, #8
	struct bt_conn *conn = att->chan.chan.conn;
    7198:	f8d8 7000 	ldr.w	r7, [r8]
	req = net_buf_pull_mem(buf, sizeof(*req));
    719c:	f005 ff3e 	bl	d01c <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    71a0:	f10d 090c 	add.w	r9, sp, #12
	start_handle = sys_le16_to_cpu(req->start_handle);
    71a4:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    71a6:	8846      	ldrh	r6, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    71a8:	1d01      	adds	r1, r0, #4
    71aa:	4622      	mov	r2, r4
    71ac:	4648      	mov	r0, r9
    71ae:	f004 ff71 	bl	c094 <bt_uuid_create>
    71b2:	b188      	cbz	r0, 71d8 <att_read_type_req+0x5c>
	if (!start || !end) {
    71b4:	b19d      	cbz	r5, 71de <att_read_type_req+0x62>
    71b6:	b18e      	cbz	r6, 71dc <att_read_type_req+0x60>
	if (start > end) {
    71b8:	42b5      	cmp	r5, r6
    71ba:	d810      	bhi.n	71de <att_read_type_req+0x62>
	struct bt_conn *conn = att->chan.chan.conn;
    71bc:	f8d8 7000 	ldr.w	r7, [r8]
	(void)memset(&data, 0, sizeof(data));
    71c0:	2218      	movs	r2, #24
    71c2:	2100      	movs	r1, #0
    71c4:	a808      	add	r0, sp, #32
    71c6:	f004 fe94 	bl	bef2 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
    71ca:	2201      	movs	r2, #1
    71cc:	2109      	movs	r1, #9
    71ce:	4638      	mov	r0, r7
    71d0:	f7ff fd6a 	bl	6ca8 <bt_att_create_pdu>
    71d4:	900a      	str	r0, [sp, #40]	; 0x28
	if (!data.buf) {
    71d6:	b968      	cbnz	r0, 71f4 <att_read_type_req+0x78>
		return BT_ATT_ERR_UNLIKELY;
    71d8:	240e      	movs	r4, #14
    71da:	e007      	b.n	71ec <att_read_type_req+0x70>
			*err = 0U;
    71dc:	4635      	mov	r5, r6
	if (!req) {
    71de:	2301      	movs	r3, #1
    71e0:	462a      	mov	r2, r5
    71e2:	2108      	movs	r1, #8
    71e4:	4638      	mov	r0, r7
    71e6:	f7ff fdd9 	bl	6d9c <send_err_rsp.part.10>
		return 0;
    71ea:	2400      	movs	r4, #0
}
    71ec:	4620      	mov	r0, r4
    71ee:	b00f      	add	sp, #60	; 0x3c
    71f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    71f4:	2101      	movs	r1, #1
    71f6:	3008      	adds	r0, #8
	data.uuid = uuid;
    71f8:	e9cd 8908 	strd	r8, r9, [sp, #32]
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    71fc:	f005 fede 	bl	cfbc <net_buf_simple_add>
	data.rsp->len = 0U;
    7200:	f04f 0800 	mov.w	r8, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    7204:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    7206:	900b      	str	r0, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    7208:	4a0e      	ldr	r2, [pc, #56]	; (7244 <att_read_type_req+0xc8>)
	data.rsp->len = 0U;
    720a:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    720e:	4631      	mov	r1, r6
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    7210:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    7214:	4628      	mov	r0, r5
    7216:	ab08      	add	r3, sp, #32
    7218:	f005 f990 	bl	c53c <bt_gatt_foreach_attr>
	if (data.err) {
    721c:	f89d 4034 	ldrb.w	r4, [sp, #52]	; 0x34
    7220:	b12c      	cbz	r4, 722e <att_read_type_req+0xb2>
		net_buf_unref(data.buf);
    7222:	980a      	ldr	r0, [sp, #40]	; 0x28
    7224:	f001 f8b8 	bl	8398 <net_buf_unref>
	if (!req) {
    7228:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    722c:	e7d8      	b.n	71e0 <att_read_type_req+0x64>
	(void)bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent,
    722e:	9400      	str	r4, [sp, #0]
    7230:	4b05      	ldr	r3, [pc, #20]	; (7248 <att_read_type_req+0xcc>)
    7232:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    7234:	2104      	movs	r1, #4
    7236:	4638      	mov	r0, r7
    7238:	f005 f902 	bl	c440 <bt_l2cap_send_cb>
	return 0;
    723c:	e7d6      	b.n	71ec <att_read_type_req+0x70>
		return BT_ATT_ERR_INVALID_PDU;
    723e:	2404      	movs	r4, #4
    7240:	e7d4      	b.n	71ec <att_read_type_req+0x70>
    7242:	bf00      	nop
    7244:	0000c621 	.word	0x0000c621
    7248:	0000c7fb 	.word	0x0000c7fb

0000724c <att_find_type_req>:
{
    724c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7250:	4688      	mov	r8, r1
	struct bt_conn *conn = att->chan.chan.conn;
    7252:	f8d0 b000 	ldr.w	fp, [r0]
{
    7256:	b08b      	sub	sp, #44	; 0x2c
    7258:	4681      	mov	r9, r0
	req = net_buf_pull_mem(buf, sizeof(*req));
    725a:	2106      	movs	r1, #6
    725c:	f108 0008 	add.w	r0, r8, #8
    7260:	f005 fedc 	bl	d01c <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
    7264:	8805      	ldrh	r5, [r0, #0]
	if (!start || !end) {
    7266:	b1fd      	cbz	r5, 72a8 <att_find_type_req+0x5c>
	end_handle = sys_le16_to_cpu(req->end_handle);
    7268:	8847      	ldrh	r7, [r0, #2]
	if (!start || !end) {
    726a:	b1e7      	cbz	r7, 72a6 <att_find_type_req+0x5a>
	if (start > end) {
    726c:	42bd      	cmp	r5, r7
    726e:	d81b      	bhi.n	72a8 <att_find_type_req+0x5c>
	type = sys_le16_to_cpu(req->type);
    7270:	8883      	ldrh	r3, [r0, #4]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
    7272:	2400      	movs	r4, #0
    7274:	f8ad 300e 	strh.w	r3, [sp, #14]
    7278:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    727c:	a904      	add	r1, sp, #16
    727e:	a803      	add	r0, sp, #12
	value = buf->data;
    7280:	f8d8 a008 	ldr.w	sl, [r8, #8]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
    7284:	f88d 400c 	strb.w	r4, [sp, #12]
    7288:	f88d 4010 	strb.w	r4, [sp, #16]
    728c:	f8ad 3012 	strh.w	r3, [sp, #18]
    7290:	f004 fed6 	bl	c040 <bt_uuid_cmp>
    7294:	4606      	mov	r6, r0
    7296:	b190      	cbz	r0, 72be <att_find_type_req+0x72>
	if (!req) {
    7298:	230a      	movs	r3, #10
    729a:	462a      	mov	r2, r5
    729c:	2106      	movs	r1, #6
    729e:	4658      	mov	r0, fp
    72a0:	f7ff fd7c 	bl	6d9c <send_err_rsp.part.10>
		return 0;
    72a4:	e007      	b.n	72b6 <att_find_type_req+0x6a>
			*err = 0U;
    72a6:	463d      	mov	r5, r7
	if (!req) {
    72a8:	2301      	movs	r3, #1
    72aa:	462a      	mov	r2, r5
    72ac:	2106      	movs	r1, #6
    72ae:	4658      	mov	r0, fp
    72b0:	f7ff fd74 	bl	6d9c <send_err_rsp.part.10>
		return 0;
    72b4:	2400      	movs	r4, #0
}
    72b6:	4620      	mov	r0, r4
    72b8:	b00b      	add	sp, #44	; 0x2c
    72ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	(void)memset(&data, 0, sizeof(data));
    72be:	2214      	movs	r2, #20
	return att_find_type_rsp(att, start_handle, end_handle, value,
    72c0:	f898 400c 	ldrb.w	r4, [r8, #12]
	struct bt_conn *conn = att->chan.chan.conn;
    72c4:	f8d9 8000 	ldr.w	r8, [r9]
	(void)memset(&data, 0, sizeof(data));
    72c8:	4601      	mov	r1, r0
    72ca:	eb0d 0002 	add.w	r0, sp, r2
    72ce:	f004 fe10 	bl	bef2 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
    72d2:	4632      	mov	r2, r6
    72d4:	2107      	movs	r1, #7
    72d6:	4640      	mov	r0, r8
    72d8:	f7ff fce6 	bl	6ca8 <bt_att_create_pdu>
    72dc:	9006      	str	r0, [sp, #24]
	if (!data.buf) {
    72de:	b310      	cbz	r0, 7326 <att_find_type_req+0xda>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    72e0:	230a      	movs	r3, #10
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    72e2:	4a12      	ldr	r2, [pc, #72]	; (732c <att_find_type_req+0xe0>)
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    72e4:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    72e8:	4639      	mov	r1, r7
    72ea:	ab05      	add	r3, sp, #20
    72ec:	4628      	mov	r0, r5
	data.value_len = value_len;
    72ee:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
	data.att = att;
    72f2:	f8cd 9014 	str.w	r9, [sp, #20]
	data.value = value;
    72f6:	e9cd 6a07 	strd	r6, sl, [sp, #28]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    72fa:	f005 f91f 	bl	c53c <bt_gatt_foreach_attr>
	if (data.err) {
    72fe:	f89d 4025 	ldrb.w	r4, [sp, #37]	; 0x25
    7302:	b144      	cbz	r4, 7316 <att_find_type_req+0xca>
		net_buf_unref(data.buf);
    7304:	9806      	ldr	r0, [sp, #24]
    7306:	f001 f847 	bl	8398 <net_buf_unref>
	if (!req) {
    730a:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
    730e:	462a      	mov	r2, r5
    7310:	2106      	movs	r1, #6
    7312:	4640      	mov	r0, r8
    7314:	e7cc      	b.n	72b0 <att_find_type_req+0x64>
	(void)bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent,
    7316:	9400      	str	r4, [sp, #0]
    7318:	4b05      	ldr	r3, [pc, #20]	; (7330 <att_find_type_req+0xe4>)
    731a:	9a06      	ldr	r2, [sp, #24]
    731c:	2104      	movs	r1, #4
    731e:	4640      	mov	r0, r8
    7320:	f005 f88e 	bl	c440 <bt_l2cap_send_cb>
	return 0;
    7324:	e7c7      	b.n	72b6 <att_find_type_req+0x6a>
		return BT_ATT_ERR_UNLIKELY;
    7326:	240e      	movs	r4, #14
	return att_find_type_rsp(att, start_handle, end_handle, value,
    7328:	e7c5      	b.n	72b6 <att_find_type_req+0x6a>
    732a:	bf00      	nop
    732c:	000068bd 	.word	0x000068bd
    7330:	0000c7fb 	.word	0x0000c7fb

00007334 <att_find_info_req>:
{
    7334:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
    7336:	688b      	ldr	r3, [r1, #8]
{
    7338:	b087      	sub	sp, #28
	start_handle = sys_le16_to_cpu(req->start_handle);
    733a:	881d      	ldrh	r5, [r3, #0]
{
    733c:	4607      	mov	r7, r0
	struct bt_conn *conn = att->chan.chan.conn;
    733e:	6806      	ldr	r6, [r0, #0]
	if (!start || !end) {
    7340:	b195      	cbz	r5, 7368 <att_find_info_req+0x34>
	end_handle = sys_le16_to_cpu(req->end_handle);
    7342:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
    7344:	b17c      	cbz	r4, 7366 <att_find_info_req+0x32>
	if (start > end) {
    7346:	42a5      	cmp	r5, r4
    7348:	d80e      	bhi.n	7368 <att_find_info_req+0x34>
	(void)memset(&data, 0, sizeof(data));
    734a:	2210      	movs	r2, #16
    734c:	2100      	movs	r1, #0
    734e:	a802      	add	r0, sp, #8
    7350:	f004 fdcf 	bl	bef2 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
    7354:	2200      	movs	r2, #0
    7356:	2105      	movs	r1, #5
    7358:	4630      	mov	r0, r6
    735a:	f7ff fca5 	bl	6ca8 <bt_att_create_pdu>
    735e:	9003      	str	r0, [sp, #12]
	if (!data.buf) {
    7360:	b958      	cbnz	r0, 737a <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
    7362:	200e      	movs	r0, #14
	return att_find_info_rsp(att, start_handle, end_handle);
    7364:	e007      	b.n	7376 <att_find_info_req+0x42>
			*err = 0U;
    7366:	4625      	mov	r5, r4
	if (!req) {
    7368:	2301      	movs	r3, #1
    736a:	462a      	mov	r2, r5
    736c:	2104      	movs	r1, #4
    736e:	4630      	mov	r0, r6
    7370:	f7ff fd14 	bl	6d9c <send_err_rsp.part.10>
		return 0;
    7374:	2000      	movs	r0, #0
}
    7376:	b007      	add	sp, #28
    7378:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    737a:	4621      	mov	r1, r4
    737c:	ab02      	add	r3, sp, #8
    737e:	4a0a      	ldr	r2, [pc, #40]	; (73a8 <att_find_info_req+0x74>)
    7380:	4628      	mov	r0, r5
	data.att = att;
    7382:	9702      	str	r7, [sp, #8]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    7384:	f005 f8da 	bl	c53c <bt_gatt_foreach_attr>
	if (!data.rsp) {
    7388:	9c04      	ldr	r4, [sp, #16]
    738a:	b924      	cbnz	r4, 7396 <att_find_info_req+0x62>
		net_buf_unref(data.buf);
    738c:	9803      	ldr	r0, [sp, #12]
    738e:	f001 f803 	bl	8398 <net_buf_unref>
	if (!req) {
    7392:	230a      	movs	r3, #10
    7394:	e7e9      	b.n	736a <att_find_info_req+0x36>
	(void)bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent,
    7396:	2400      	movs	r4, #0
    7398:	4b04      	ldr	r3, [pc, #16]	; (73ac <att_find_info_req+0x78>)
    739a:	9400      	str	r4, [sp, #0]
    739c:	9a03      	ldr	r2, [sp, #12]
    739e:	2104      	movs	r1, #4
    73a0:	4630      	mov	r0, r6
    73a2:	f005 f84d 	bl	c440 <bt_l2cap_send_cb>
	return 0;
    73a6:	e7e5      	b.n	7374 <att_find_info_req+0x40>
    73a8:	0000c6db 	.word	0x0000c6db
    73ac:	0000c7fb 	.word	0x0000c7fb

000073b0 <att_write_req>:
{
    73b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    73b4:	6805      	ldr	r5, [r0, #0]
{
    73b6:	b089      	sub	sp, #36	; 0x24
	handle = net_buf_pull_le16(buf);
    73b8:	f101 0008 	add.w	r0, r1, #8
{
    73bc:	460c      	mov	r4, r1
	handle = net_buf_pull_le16(buf);
    73be:	f005 fe35 	bl	d02c <net_buf_simple_pull_le16>
	if (!bt_gatt_change_aware(conn, req ? true : false)) {
    73c2:	2101      	movs	r1, #1
	handle = net_buf_pull_le16(buf);
    73c4:	4606      	mov	r6, r0
	if (!bt_gatt_change_aware(conn, req ? true : false)) {
    73c6:	4628      	mov	r0, r5
			     handle, 0, buf->data, buf->len);
    73c8:	f8d4 9008 	ldr.w	r9, [r4, #8]
	return att_write_rsp(conn, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
    73cc:	89a4      	ldrh	r4, [r4, #12]
	if (!bt_gatt_change_aware(conn, req ? true : false)) {
    73ce:	f005 fd6b 	bl	cea8 <bt_gatt_change_aware>
    73d2:	2800      	cmp	r0, #0
    73d4:	d040      	beq.n	7458 <att_write_req+0xa8>
	if (!handle) {
    73d6:	2e00      	cmp	r6, #0
    73d8:	d040      	beq.n	745c <att_write_req+0xac>
	(void)memset(&data, 0, sizeof(data));
    73da:	2218      	movs	r2, #24
    73dc:	2100      	movs	r1, #0
    73de:	a802      	add	r0, sp, #8
    73e0:	f004 fd87 	bl	bef2 <memset>
		data.buf = bt_att_create_pdu(conn, rsp, 0);
    73e4:	2200      	movs	r2, #0
    73e6:	2113      	movs	r1, #19
    73e8:	4628      	mov	r0, r5
    73ea:	f7ff fc5d 	bl	6ca8 <bt_att_create_pdu>
    73ee:	9003      	str	r0, [sp, #12]
		if (!data.buf) {
    73f0:	b380      	cbz	r0, 7454 <att_write_req+0xa4>
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    73f2:	2301      	movs	r3, #1
	data.req = req;
    73f4:	f04f 0812 	mov.w	r8, #18
	data.offset = offset;
    73f8:	2700      	movs	r7, #0
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    73fa:	f88d 301c 	strb.w	r3, [sp, #28]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    73fe:	4a18      	ldr	r2, [pc, #96]	; (7460 <att_write_req+0xb0>)
    7400:	ab02      	add	r3, sp, #8
    7402:	4631      	mov	r1, r6
    7404:	4630      	mov	r0, r6
	data.len = len;
    7406:	f8ad 4018 	strh.w	r4, [sp, #24]
	data.conn = conn;
    740a:	9502      	str	r5, [sp, #8]
	data.req = req;
    740c:	f88d 8010 	strb.w	r8, [sp, #16]
	data.offset = offset;
    7410:	f8ad 701a 	strh.w	r7, [sp, #26]
	data.value = value;
    7414:	f8cd 9014 	str.w	r9, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    7418:	f005 f890 	bl	c53c <bt_gatt_foreach_attr>
	if (data.err) {
    741c:	f89d 401c 	ldrb.w	r4, [sp, #28]
    7420:	b174      	cbz	r4, 7440 <att_write_req+0x90>
			net_buf_unref(data.buf);
    7422:	9803      	ldr	r0, [sp, #12]
    7424:	f000 ffb8 	bl	8398 <net_buf_unref>
	if (!req) {
    7428:	f89d 301c 	ldrb.w	r3, [sp, #28]
    742c:	4632      	mov	r2, r6
    742e:	4641      	mov	r1, r8
    7430:	4628      	mov	r0, r5
    7432:	f7ff fcb3 	bl	6d9c <send_err_rsp.part.10>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    7436:	463c      	mov	r4, r7
}
    7438:	4620      	mov	r0, r4
    743a:	b009      	add	sp, #36	; 0x24
    743c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (data.buf) {
    7440:	9a03      	ldr	r2, [sp, #12]
    7442:	2a00      	cmp	r2, #0
    7444:	d0f8      	beq.n	7438 <att_write_req+0x88>
		(void)bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf,
    7446:	9400      	str	r4, [sp, #0]
    7448:	4b06      	ldr	r3, [pc, #24]	; (7464 <att_write_req+0xb4>)
    744a:	2104      	movs	r1, #4
    744c:	4628      	mov	r0, r5
    744e:	f004 fff7 	bl	c440 <bt_l2cap_send_cb>
    7452:	e7f1      	b.n	7438 <att_write_req+0x88>
			return BT_ATT_ERR_UNLIKELY;
    7454:	240e      	movs	r4, #14
    7456:	e7ef      	b.n	7438 <att_write_req+0x88>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    7458:	2412      	movs	r4, #18
    745a:	e7ed      	b.n	7438 <att_write_req+0x88>
		return BT_ATT_ERR_INVALID_HANDLE;
    745c:	2401      	movs	r4, #1
    745e:	e7eb      	b.n	7438 <att_write_req+0x88>
    7460:	0000c825 	.word	0x0000c825
    7464:	0000c7fb 	.word	0x0000c7fb

00007468 <bt_att_req_alloc>:
	/* tx and rx MTU shall be symmetric */
	return att->chan.tx.mtu;
}

struct bt_att_req *bt_att_req_alloc(s32_t timeout)
{
    7468:	b513      	push	{r0, r1, r4, lr}
	struct bt_att_req *req = NULL;
    746a:	2400      	movs	r4, #0

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
    746c:	4602      	mov	r2, r0
    746e:	a901      	add	r1, sp, #4
    7470:	4807      	ldr	r0, [pc, #28]	; (7490 <bt_att_req_alloc+0x28>)
	struct bt_att_req *req = NULL;
    7472:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
    7474:	f002 f8e0 	bl	9638 <k_mem_slab_alloc>
    7478:	4601      	mov	r1, r0
    747a:	b930      	cbnz	r0, 748a <bt_att_req_alloc+0x22>
		return NULL;
	}

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
    747c:	2218      	movs	r2, #24
    747e:	9801      	ldr	r0, [sp, #4]
    7480:	f004 fd37 	bl	bef2 <memset>

	return req;
    7484:	9801      	ldr	r0, [sp, #4]
}
    7486:	b002      	add	sp, #8
    7488:	bd10      	pop	{r4, pc}
		return NULL;
    748a:	4620      	mov	r0, r4
    748c:	e7fb      	b.n	7486 <bt_att_req_alloc+0x1e>
    748e:	bf00      	nop
    7490:	20004c48 	.word	0x20004c48

00007494 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
    7494:	b507      	push	{r0, r1, r2, lr}
    7496:	9001      	str	r0, [sp, #4]
	BT_DBG("req %p", req);

	k_mem_slab_free(&req_slab, (void **)&req);
    7498:	a901      	add	r1, sp, #4
    749a:	4803      	ldr	r0, [pc, #12]	; (74a8 <bt_att_req_free+0x14>)
    749c:	f002 f8f8 	bl	9690 <k_mem_slab_free>
}
    74a0:	b003      	add	sp, #12
    74a2:	f85d fb04 	ldr.w	pc, [sp], #4
    74a6:	bf00      	nop
    74a8:	20004c48 	.word	0x20004c48

000074ac <att_handle_rsp>:
{
    74ac:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    74b0:	4604      	mov	r4, r0
	k_delayed_work_cancel(&att->timeout_work);
    74b2:	30a0      	adds	r0, #160	; 0xa0
{
    74b4:	460f      	mov	r7, r1
    74b6:	4690      	mov	r8, r2
    74b8:	4699      	mov	r9, r3
	k_delayed_work_cancel(&att->timeout_work);
    74ba:	f006 fdde 	bl	e07a <k_delayed_work_cancel>
	if (!att->req) {
    74be:	f8d4 5094 	ldr.w	r5, [r4, #148]	; 0x94
    74c2:	bb3d      	cbnz	r5, 7514 <att_handle_rsp+0x68>
		BT_WARN("No pending ATT request");
    74c4:	2302      	movs	r3, #2
    74c6:	f04f 0100 	mov.w	r1, #0
    74ca:	4a20      	ldr	r2, [pc, #128]	; (754c <att_handle_rsp+0xa0>)
    74cc:	f363 0107 	bfi	r1, r3, #0, #8
    74d0:	4b1f      	ldr	r3, [pc, #124]	; (7550 <att_handle_rsp+0xa4>)
    74d2:	4820      	ldr	r0, [pc, #128]	; (7554 <att_handle_rsp+0xa8>)
    74d4:	1a9b      	subs	r3, r3, r2
    74d6:	08db      	lsrs	r3, r3, #3
    74d8:	f363 118f 	bfi	r1, r3, #6, #10
    74dc:	f004 f850 	bl	b580 <log_0>
Z_GENLIST_IS_EMPTY(slist)
    74e0:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
Z_GENLIST_GET(slist, snode)
    74e4:	b159      	cbz	r1, 74fe <att_handle_rsp+0x52>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    74e6:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
    74ea:	680b      	ldr	r3, [r1, #0]
    74ec:	4291      	cmp	r1, r2
	list->head = node;
    74ee:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    74f2:	d101      	bne.n	74f8 <att_handle_rsp+0x4c>
	list->tail = node;
    74f4:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	att_send_req(att, ATT_REQ(node));
    74f8:	4620      	mov	r0, r4
    74fa:	f7ff fb57 	bl	6bac <att_send_req>
	if (func) {
    74fe:	b12d      	cbz	r5, 750c <att_handle_rsp+0x60>
		func(att->chan.chan.conn, err, pdu, len, params);
    7500:	9600      	str	r6, [sp, #0]
    7502:	4643      	mov	r3, r8
    7504:	463a      	mov	r2, r7
    7506:	4649      	mov	r1, r9
    7508:	6820      	ldr	r0, [r4, #0]
    750a:	47a8      	blx	r5
}
    750c:	2000      	movs	r0, #0
    750e:	b002      	add	sp, #8
    7510:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (att->req == &cancel) {
    7514:	4b10      	ldr	r3, [pc, #64]	; (7558 <att_handle_rsp+0xac>)
    7516:	429d      	cmp	r5, r3
    7518:	d103      	bne.n	7522 <att_handle_rsp+0x76>
		att->req = NULL;
    751a:	2500      	movs	r5, #0
    751c:	f8c4 5094 	str.w	r5, [r4, #148]	; 0x94
		goto process;
    7520:	e7de      	b.n	74e0 <att_handle_rsp+0x34>
	if (att->req->buf) {
    7522:	6928      	ldr	r0, [r5, #16]
    7524:	b128      	cbz	r0, 7532 <att_handle_rsp+0x86>
		net_buf_unref(att->req->buf);
    7526:	f000 ff37 	bl	8398 <net_buf_unref>
		att->req->buf = NULL;
    752a:	2200      	movs	r2, #0
    752c:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
    7530:	611a      	str	r2, [r3, #16]
	att->req->func = NULL;
    7532:	f04f 0a00 	mov.w	sl, #0
	func = att->req->func;
    7536:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    753a:	6845      	ldr	r5, [r0, #4]
	att->req->func = NULL;
    753c:	f8c0 a004 	str.w	sl, [r0, #4]
	params = att->req->user_data;
    7540:	6946      	ldr	r6, [r0, #20]
	att_req_destroy(att->req);
    7542:	f005 f9f2 	bl	c92a <att_req_destroy>
	att->req = NULL;
    7546:	f8c4 a094 	str.w	sl, [r4, #148]	; 0x94
    754a:	e7c9      	b.n	74e0 <att_handle_rsp+0x34>
    754c:	0000e6dc 	.word	0x0000e6dc
    7550:	0000e6dc 	.word	0x0000e6dc
    7554:	0001083a 	.word	0x0001083a
    7558:	200006ac 	.word	0x200006ac

0000755c <att_timeout>:
	BT_ERR("ATT Timeout");
    755c:	2301      	movs	r3, #1
    755e:	f04f 0100 	mov.w	r1, #0
{
    7562:	b510      	push	{r4, lr}
    7564:	4604      	mov	r4, r0
    7566:	4a0b      	ldr	r2, [pc, #44]	; (7594 <att_timeout+0x38>)
	BT_ERR("ATT Timeout");
    7568:	f363 0107 	bfi	r1, r3, #0, #8
    756c:	4b0a      	ldr	r3, [pc, #40]	; (7598 <att_timeout+0x3c>)
    756e:	480b      	ldr	r0, [pc, #44]	; (759c <att_timeout+0x40>)
    7570:	1a9b      	subs	r3, r3, r2
    7572:	08db      	lsrs	r3, r3, #3
    7574:	f363 118f 	bfi	r1, r3, #6, #10
    7578:	f004 f802 	bl	b580 <log_0>
	att_reset(att);
    757c:	f1a4 00a0 	sub.w	r0, r4, #160	; 0xa0
    7580:	f005 f9e7 	bl	c952 <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
    7584:	f854 0ca0 	ldr.w	r0, [r4, #-160]
    7588:	f000 fe0e 	bl	81a8 <bt_gatt_disconnected>
	ch->chan.conn = NULL;
    758c:	2300      	movs	r3, #0
    758e:	f844 3ca0 	str.w	r3, [r4, #-160]
}
    7592:	bd10      	pop	{r4, pc}
    7594:	0000e6dc 	.word	0x0000e6dc
    7598:	0000e6dc 	.word	0x0000e6dc
    759c:	00010864 	.word	0x00010864

000075a0 <find_static_attr>:

	return BT_GATT_ITER_CONTINUE;
}

static u16_t find_static_attr(const struct bt_gatt_attr *attr)
{
    75a0:	b5f0      	push	{r4, r5, r6, r7, lr}
	u16_t handle = 1;

	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
		for (int i = 0; i < static_svc->attr_count; i++, handle++) {
			if (attr == &static_svc->attrs[i]) {
    75a2:	f04f 0c14 	mov.w	ip, #20
	u16_t handle = 1;
    75a6:	2501      	movs	r5, #1
    75a8:	490d      	ldr	r1, [pc, #52]	; (75e0 <find_static_attr+0x40>)
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    75aa:	4f0e      	ldr	r7, [pc, #56]	; (75e4 <find_static_attr+0x44>)
    75ac:	f1a1 0308 	sub.w	r3, r1, #8
    75b0:	42bb      	cmp	r3, r7
    75b2:	d211      	bcs.n	75d8 <find_static_attr+0x38>
    75b4:	f851 6c04 	ldr.w	r6, [r1, #-4]
		for (int i = 0; i < static_svc->attr_count; i++, handle++) {
    75b8:	2200      	movs	r2, #0
    75ba:	e006      	b.n	75ca <find_static_attr+0x2a>
			if (attr == &static_svc->attrs[i]) {
    75bc:	f851 4c08 	ldr.w	r4, [r1, #-8]
    75c0:	fb0c 4402 	mla	r4, ip, r2, r4
    75c4:	42a0      	cmp	r0, r4
    75c6:	d008      	beq.n	75da <find_static_attr+0x3a>
		for (int i = 0; i < static_svc->attr_count; i++, handle++) {
    75c8:	3201      	adds	r2, #1
    75ca:	18ab      	adds	r3, r5, r2
    75cc:	42b2      	cmp	r2, r6
    75ce:	b29b      	uxth	r3, r3
    75d0:	d1f4      	bne.n	75bc <find_static_attr+0x1c>
    75d2:	3108      	adds	r1, #8
    75d4:	461d      	mov	r5, r3
    75d6:	e7e9      	b.n	75ac <find_static_attr+0xc>
				return handle;
			}
		}
	}

	return 0;
    75d8:	2300      	movs	r3, #0
}
    75da:	4618      	mov	r0, r3
    75dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    75de:	bf00      	nop
    75e0:	0000e6cc 	.word	0x0000e6cc
    75e4:	0000e6dc 	.word	0x0000e6dc

000075e8 <gatt_notify>:
	};
};

static int gatt_notify(struct bt_conn *conn, u16_t handle,
		       struct bt_gatt_notify_params *params)
{
    75e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    75ec:	4614      	mov	r4, r2
		return -EAGAIN;
	}
#endif

	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
				sizeof(*nfy) + params->len);
    75ee:	8992      	ldrh	r2, [r2, #12]
{
    75f0:	4689      	mov	r9, r1
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
    75f2:	3202      	adds	r2, #2
    75f4:	211b      	movs	r1, #27
{
    75f6:	4680      	mov	r8, r0
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
    75f8:	f7ff fb56 	bl	6ca8 <bt_att_create_pdu>
	if (!buf) {
    75fc:	4605      	mov	r5, r0
    75fe:	b1c8      	cbz	r0, 7634 <gatt_notify+0x4c>
		return -ENOMEM;
	}

	BT_DBG("conn %p handle 0x%04x", conn, handle);

	nfy = net_buf_add(buf, sizeof(*nfy));
    7600:	f100 0708 	add.w	r7, r0, #8
    7604:	2102      	movs	r1, #2
    7606:	4638      	mov	r0, r7
    7608:	f005 fcd8 	bl	cfbc <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
    760c:	4606      	mov	r6, r0

	net_buf_add(buf, params->len);
    760e:	89a1      	ldrh	r1, [r4, #12]
	nfy->handle = sys_cpu_to_le16(handle);
    7610:	f826 9b02 	strh.w	r9, [r6], #2
	net_buf_add(buf, params->len);
    7614:	4638      	mov	r0, r7
    7616:	f005 fcd1 	bl	cfbc <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
    761a:	89a2      	ldrh	r2, [r4, #12]
    761c:	68a1      	ldr	r1, [r4, #8]
    761e:	4630      	mov	r0, r6
    7620:	f004 fc3d 	bl	be9e <memcpy>

	return bt_att_send(conn, buf, params->func, params->user_data);
    7624:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    7628:	4629      	mov	r1, r5
    762a:	4640      	mov	r0, r8
}
    762c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_att_send(conn, buf, params->func, params->user_data);
    7630:	f005 b9da 	b.w	c9e8 <bt_att_send>
		BT_WARN("No buffer available to send notification");
    7634:	2302      	movs	r3, #2
    7636:	f04f 0100 	mov.w	r1, #0
    763a:	4a07      	ldr	r2, [pc, #28]	; (7658 <gatt_notify+0x70>)
    763c:	f363 0107 	bfi	r1, r3, #0, #8
    7640:	4b06      	ldr	r3, [pc, #24]	; (765c <gatt_notify+0x74>)
    7642:	4807      	ldr	r0, [pc, #28]	; (7660 <gatt_notify+0x78>)
    7644:	1a9b      	subs	r3, r3, r2
    7646:	08db      	lsrs	r3, r3, #3
    7648:	f363 118f 	bfi	r1, r3, #6, #10
    764c:	f003 ff98 	bl	b580 <log_0>
}
    7650:	f06f 000b 	mvn.w	r0, #11
    7654:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7658:	0000e6dc 	.word	0x0000e6dc
    765c:	0000e6f4 	.word	0x0000e6f4
    7660:	00010a2d 	.word	0x00010a2d

00007664 <gatt_send.constprop.12>:
	struct bt_gatt_indicate_params *params = user_data;

	params->func(conn, params->attr, err);
}

static int gatt_send(struct bt_conn *conn, struct net_buf *buf,
    7664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7668:	4606      	mov	r6, r0
    766a:	4688      	mov	r8, r1
    766c:	4617      	mov	r7, r2
		     bt_att_func_t func, void *params,
		     bt_att_destroy_t destroy)
{
	int err;

	if (params) {
    766e:	461c      	mov	r4, r3
    7670:	b343      	cbz	r3, 76c4 <gatt_send.constprop.12+0x60>
		struct bt_att_req *req;

		/* Allocate new request */
		req = bt_att_req_alloc(BT_ATT_TIMEOUT);
    7672:	f247 5030 	movw	r0, #30000	; 0x7530
    7676:	f7ff fef7 	bl	7468 <bt_att_req_alloc>
		if (!req) {
    767a:	4605      	mov	r5, r0
    767c:	b348      	cbz	r0, 76d2 <gatt_send.constprop.12+0x6e>
			return -ENOMEM;
		}

		req->buf = buf;
		req->func = func;
		req->destroy = destroy;
    767e:	2300      	movs	r3, #0
		req->user_data = params;
    7680:	6144      	str	r4, [r0, #20]
		req->buf = buf;
    7682:	f8c0 8010 	str.w	r8, [r0, #16]
		req->func = func;
    7686:	6047      	str	r7, [r0, #4]
		req->destroy = destroy;
    7688:	6083      	str	r3, [r0, #8]

		err = bt_att_req_send(conn, req);
    768a:	4601      	mov	r1, r0
    768c:	4630      	mov	r0, r6
    768e:	f005 f9db 	bl	ca48 <bt_att_req_send>
		if (err) {
    7692:	4604      	mov	r4, r0
    7694:	b918      	cbnz	r0, 769e <gatt_send.constprop.12+0x3a>
static int gatt_send(struct bt_conn *conn, struct net_buf *buf,
    7696:	2400      	movs	r4, #0
	if (err) {
		BT_ERR("Error sending ATT PDU: %d", err);
	}

	return err;
}
    7698:	4620      	mov	r0, r4
    769a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			bt_att_req_free(req);
    769e:	4628      	mov	r0, r5
    76a0:	f7ff fef8 	bl	7494 <bt_att_req_free>
		BT_ERR("Error sending ATT PDU: %d", err);
    76a4:	2301      	movs	r3, #1
    76a6:	f04f 0200 	mov.w	r2, #0
    76aa:	490b      	ldr	r1, [pc, #44]	; (76d8 <gatt_send.constprop.12+0x74>)
    76ac:	f363 0207 	bfi	r2, r3, #0, #8
    76b0:	4b0a      	ldr	r3, [pc, #40]	; (76dc <gatt_send.constprop.12+0x78>)
    76b2:	480b      	ldr	r0, [pc, #44]	; (76e0 <gatt_send.constprop.12+0x7c>)
    76b4:	1a5b      	subs	r3, r3, r1
    76b6:	08db      	lsrs	r3, r3, #3
    76b8:	f363 128f 	bfi	r2, r3, #6, #10
    76bc:	4621      	mov	r1, r4
    76be:	f003 ff6c 	bl	b59a <log_1>
    76c2:	e7e9      	b.n	7698 <gatt_send.constprop.12+0x34>
		err = bt_att_send(conn, buf, NULL, NULL);
    76c4:	461a      	mov	r2, r3
    76c6:	f005 f98f 	bl	c9e8 <bt_att_send>
	if (err) {
    76ca:	4604      	mov	r4, r0
    76cc:	2800      	cmp	r0, #0
    76ce:	d0e2      	beq.n	7696 <gatt_send.constprop.12+0x32>
    76d0:	e7e8      	b.n	76a4 <gatt_send.constprop.12+0x40>
			return -ENOMEM;
    76d2:	f06f 040b 	mvn.w	r4, #11
    76d6:	e7df      	b.n	7698 <gatt_send.constprop.12+0x34>
    76d8:	0000e6dc 	.word	0x0000e6dc
    76dc:	0000e6f4 	.word	0x0000e6f4
    76e0:	00010a56 	.word	0x00010a56

000076e4 <gatt_indicate>:

static int gatt_indicate(struct bt_conn *conn, u16_t handle,
			 struct bt_gatt_indicate_params *params)
{
    76e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    76e8:	4614      	mov	r4, r2
		return -EAGAIN;
	}
#endif

	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
				sizeof(*ind) + params->len);
    76ea:	8a12      	ldrh	r2, [r2, #16]
{
    76ec:	4689      	mov	r9, r1
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
    76ee:	3202      	adds	r2, #2
    76f0:	211d      	movs	r1, #29
{
    76f2:	4680      	mov	r8, r0
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
    76f4:	f7ff fad8 	bl	6ca8 <bt_att_create_pdu>
	if (!buf) {
    76f8:	4605      	mov	r5, r0
    76fa:	b1e8      	cbz	r0, 7738 <gatt_indicate+0x54>
		return -ENOMEM;
	}

	BT_DBG("conn %p handle 0x%04x", conn, handle);

	ind = net_buf_add(buf, sizeof(*ind));
    76fc:	f100 0608 	add.w	r6, r0, #8
    7700:	2102      	movs	r1, #2
    7702:	4630      	mov	r0, r6
    7704:	f005 fc5a 	bl	cfbc <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
    7708:	4607      	mov	r7, r0

	net_buf_add(buf, params->len);
    770a:	8a21      	ldrh	r1, [r4, #16]
	ind->handle = sys_cpu_to_le16(handle);
    770c:	f827 9b02 	strh.w	r9, [r7], #2
	net_buf_add(buf, params->len);
    7710:	4630      	mov	r0, r6
    7712:	f005 fc53 	bl	cfbc <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
    7716:	8a22      	ldrh	r2, [r4, #16]
    7718:	68e1      	ldr	r1, [r4, #12]
    771a:	4638      	mov	r0, r7
    771c:	f004 fbbf 	bl	be9e <memcpy>

	if (!params->func) {
    7720:	68a3      	ldr	r3, [r4, #8]
    7722:	b933      	cbnz	r3, 7732 <gatt_indicate+0x4e>
		return gatt_send(conn, buf, NULL, NULL, NULL);
    7724:	461a      	mov	r2, r3
	}

	return gatt_send(conn, buf, gatt_indicate_rsp, params, NULL);
    7726:	4629      	mov	r1, r5
    7728:	4640      	mov	r0, r8
}
    772a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return gatt_send(conn, buf, gatt_indicate_rsp, params, NULL);
    772e:	f7ff bf99 	b.w	7664 <gatt_send.constprop.12>
    7732:	4623      	mov	r3, r4
    7734:	4a09      	ldr	r2, [pc, #36]	; (775c <gatt_indicate+0x78>)
    7736:	e7f6      	b.n	7726 <gatt_indicate+0x42>
		BT_WARN("No buffer available to send indication");
    7738:	2302      	movs	r3, #2
    773a:	f04f 0100 	mov.w	r1, #0
    773e:	4a08      	ldr	r2, [pc, #32]	; (7760 <gatt_indicate+0x7c>)
    7740:	f363 0107 	bfi	r1, r3, #0, #8
    7744:	4b07      	ldr	r3, [pc, #28]	; (7764 <gatt_indicate+0x80>)
    7746:	4808      	ldr	r0, [pc, #32]	; (7768 <gatt_indicate+0x84>)
    7748:	1a9b      	subs	r3, r3, r2
    774a:	08db      	lsrs	r3, r3, #3
    774c:	f363 118f 	bfi	r1, r3, #6, #10
    7750:	f003 ff16 	bl	b580 <log_0>
}
    7754:	f06f 000b 	mvn.w	r0, #11
    7758:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    775c:	0000caa7 	.word	0x0000caa7
    7760:	0000e6dc 	.word	0x0000e6dc
    7764:	0000e6f4 	.word	0x0000e6f4
    7768:	00010a06 	.word	0x00010a06

0000776c <find_sc_cfg>:
{
    776c:	b510      	push	{r4, lr}
		if (id == sc_cfg[i].id &&
    776e:	4c06      	ldr	r4, [pc, #24]	; (7788 <find_sc_cfg+0x1c>)
    7770:	7823      	ldrb	r3, [r4, #0]
    7772:	4283      	cmp	r3, r0
    7774:	d104      	bne.n	7780 <find_sc_cfg+0x14>
	return memcmp(a, b, sizeof(*a));
    7776:	2207      	movs	r2, #7
    7778:	1c60      	adds	r0, r4, #1
    777a:	f004 fb80 	bl	be7e <memcmp>
    777e:	b108      	cbz	r0, 7784 <find_sc_cfg+0x18>
	return NULL;
    7780:	2000      	movs	r0, #0
}
    7782:	bd10      	pop	{r4, pc}
			return &sc_cfg[i];
    7784:	4620      	mov	r0, r4
    7786:	e7fc      	b.n	7782 <find_sc_cfg+0x16>
    7788:	2000128e 	.word	0x2000128e

0000778c <find_cf_cfg>:
{
    778c:	b507      	push	{r0, r1, r2, lr}
		if (!conn) {
    778e:	b960      	cbnz	r0, 77aa <find_cf_cfg+0x1e>
			if (!bt_addr_le_cmp(&cf_cfg[i].peer, BT_ADDR_LE_ANY)) {
    7790:	9000      	str	r0, [sp, #0]
    7792:	2207      	movs	r2, #7
    7794:	f8cd 0003 	str.w	r0, [sp, #3]
    7798:	4669      	mov	r1, sp
    779a:	4807      	ldr	r0, [pc, #28]	; (77b8 <find_cf_cfg+0x2c>)
    779c:	f004 fb6f 	bl	be7e <memcmp>
    77a0:	b938      	cbnz	r0, 77b2 <find_cf_cfg+0x26>
				return &cf_cfg[i];
    77a2:	4806      	ldr	r0, [pc, #24]	; (77bc <find_cf_cfg+0x30>)
}
    77a4:	b003      	add	sp, #12
    77a6:	f85d fb04 	ldr.w	pc, [sp], #4
		} else if (!bt_conn_addr_le_cmp(conn, &cf_cfg[i].peer)) {
    77aa:	4903      	ldr	r1, [pc, #12]	; (77b8 <find_cf_cfg+0x2c>)
    77ac:	f004 fdba 	bl	c324 <bt_conn_addr_le_cmp>
    77b0:	e7f6      	b.n	77a0 <find_cf_cfg+0x14>
	return NULL;
    77b2:	2000      	movs	r0, #0
    77b4:	e7f6      	b.n	77a4 <find_cf_cfg+0x18>
    77b6:	bf00      	nop
    77b8:	200006c5 	.word	0x200006c5
    77bc:	200006c4 	.word	0x200006c4

000077c0 <sc_indicate_rsp>:
{
    77c0:	b510      	push	{r4, lr}
    77c2:	4604      	mov	r4, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    77c4:	4b10      	ldr	r3, [pc, #64]	; (7808 <sc_indicate_rsp+0x48>)
    77c6:	e8d3 2fef 	ldaex	r2, [r3]
    77ca:	f022 0202 	bic.w	r2, r2, #2
    77ce:	e8c3 2fe1 	stlex	r1, r2, [r3]
    77d2:	2900      	cmp	r1, #0
    77d4:	d1f7      	bne.n	77c6 <sc_indicate_rsp+0x6>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    77d6:	2100      	movs	r1, #0
    77d8:	4618      	mov	r0, r3
    77da:	f005 f9cd 	bl	cb78 <atomic_test_bit>
    77de:	b128      	cbz	r0, 77ec <sc_indicate_rsp+0x2c>
    77e0:	2200      	movs	r2, #0
    77e2:	f1a3 0120 	sub.w	r1, r3, #32
    77e6:	4809      	ldr	r0, [pc, #36]	; (780c <sc_indicate_rsp+0x4c>)
    77e8:	f002 fcbe 	bl	a168 <k_delayed_work_submit_to_queue>
	cfg = find_cf_cfg(conn);
    77ec:	4620      	mov	r0, r4
    77ee:	f7ff ffcd 	bl	778c <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
    77f2:	b140      	cbz	r0, 7806 <sc_indicate_rsp+0x46>
    77f4:	7a03      	ldrb	r3, [r0, #8]
    77f6:	07db      	lsls	r3, r3, #31
    77f8:	d505      	bpl.n	7806 <sc_indicate_rsp+0x46>
}
    77fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
    77fe:	2100      	movs	r1, #0
    7800:	300c      	adds	r0, #12
    7802:	f005 b9ae 	b.w	cb62 <atomic_set_bit>
}
    7806:	bd10      	pop	{r4, pc}
    7808:	2000072c 	.word	0x2000072c
    780c:	2000120c 	.word	0x2000120c

00007810 <bt_gatt_attr_write_ccc>:
{
    7810:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    7814:	4698      	mov	r8, r3
    7816:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    781a:	4607      	mov	r7, r0
    781c:	4689      	mov	r9, r1
	struct _bt_gatt_ccc *ccc = attr->user_data;
    781e:	68ce      	ldr	r6, [r1, #12]
	if (offset) {
    7820:	2b00      	cmp	r3, #0
    7822:	d157      	bne.n	78d4 <bt_gatt_attr_write_ccc+0xc4>
	if (!len || len > sizeof(u16_t)) {
    7824:	f108 33ff 	add.w	r3, r8, #4294967295
    7828:	2b01      	cmp	r3, #1
    782a:	d856      	bhi.n	78da <bt_gatt_attr_write_ccc+0xca>
	if (len < sizeof(u16_t)) {
    782c:	f1b8 0f01 	cmp.w	r8, #1
		value = *(u8_t *)buf;
    7830:	7814      	ldrb	r4, [r2, #0]
	return ((u16_t)src[1] << 8) | src[0];
    7832:	bf18      	it	ne
    7834:	7853      	ldrbne	r3, [r2, #1]
	cfg = find_ccc_cfg(conn, ccc);
    7836:	4631      	mov	r1, r6
		value = *(u8_t *)buf;
    7838:	bf0c      	ite	eq
    783a:	b2a4      	uxtheq	r4, r4
    783c:	ea44 2403 	orrne.w	r4, r4, r3, lsl #8
	cfg = find_ccc_cfg(conn, ccc);
    7840:	f005 f9b1 	bl	cba6 <find_ccc_cfg>
	if (!cfg) {
    7844:	4605      	mov	r5, r0
    7846:	bb10      	cbnz	r0, 788e <bt_gatt_attr_write_ccc+0x7e>
		if (!value) {
    7848:	b91c      	cbnz	r4, 7852 <bt_gatt_attr_write_ccc+0x42>
			return len;
    784a:	4640      	mov	r0, r8
}
    784c:	b003      	add	sp, #12
    784e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		cfg = find_ccc_cfg(NULL, ccc);
    7852:	4631      	mov	r1, r6
    7854:	f005 f9a7 	bl	cba6 <find_ccc_cfg>
		if (!cfg) {
    7858:	4605      	mov	r5, r0
    785a:	b980      	cbnz	r0, 787e <bt_gatt_attr_write_ccc+0x6e>
			BT_WARN("No space to store CCC cfg");
    785c:	2302      	movs	r3, #2
    785e:	f04f 0100 	mov.w	r1, #0
    7862:	4a1f      	ldr	r2, [pc, #124]	; (78e0 <bt_gatt_attr_write_ccc+0xd0>)
    7864:	f363 0107 	bfi	r1, r3, #0, #8
    7868:	4b1e      	ldr	r3, [pc, #120]	; (78e4 <bt_gatt_attr_write_ccc+0xd4>)
    786a:	481f      	ldr	r0, [pc, #124]	; (78e8 <bt_gatt_attr_write_ccc+0xd8>)
    786c:	1a9b      	subs	r3, r3, r2
    786e:	08db      	lsrs	r3, r3, #3
    7870:	f363 118f 	bfi	r1, r3, #6, #10
    7874:	f003 fe84 	bl	b580 <log_0>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
    7878:	f06f 0010 	mvn.w	r0, #16
    787c:	e7e6      	b.n	784c <bt_gatt_attr_write_ccc+0x3c>
	memcpy(dst, src, sizeof(*dst));
    787e:	2207      	movs	r2, #7
    7880:	f107 0170 	add.w	r1, r7, #112	; 0x70
    7884:	3001      	adds	r0, #1
    7886:	f004 fb0a 	bl	be9e <memcpy>
		cfg->id = conn->id;
    788a:	7a3b      	ldrb	r3, [r7, #8]
    788c:	702b      	strb	r3, [r5, #0]
	if (ccc->cfg_write) {
    788e:	6933      	ldr	r3, [r6, #16]
    7890:	b9a3      	cbnz	r3, 78bc <bt_gatt_attr_write_ccc+0xac>
	if (cfg->value != ccc->value) {
    7892:	8973      	ldrh	r3, [r6, #10]
	cfg->value = value;
    7894:	812c      	strh	r4, [r5, #8]
	if (cfg->value != ccc->value) {
    7896:	42a3      	cmp	r3, r4
    7898:	d003      	beq.n	78a2 <bt_gatt_attr_write_ccc+0x92>
		gatt_ccc_changed(attr, ccc);
    789a:	4631      	mov	r1, r6
    789c:	4648      	mov	r0, r9
    789e:	f005 f8f8 	bl	ca92 <gatt_ccc_changed>
	if (!value) {
    78a2:	2c00      	cmp	r4, #0
    78a4:	d1d1      	bne.n	784a <bt_gatt_attr_write_ccc+0x3a>
    78a6:	2207      	movs	r2, #7
    78a8:	4669      	mov	r1, sp
    78aa:	1c68      	adds	r0, r5, #1
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
    78ac:	9400      	str	r4, [sp, #0]
    78ae:	f8cd 4003 	str.w	r4, [sp, #3]
    78b2:	f004 faf4 	bl	be9e <memcpy>
	cfg->id = 0U;
    78b6:	702c      	strb	r4, [r5, #0]
	cfg->value = 0U;
    78b8:	812c      	strh	r4, [r5, #8]
    78ba:	e7c6      	b.n	784a <bt_gatt_attr_write_ccc+0x3a>
		ssize_t write = ccc->cfg_write(conn, attr, value);
    78bc:	4622      	mov	r2, r4
    78be:	4649      	mov	r1, r9
    78c0:	4638      	mov	r0, r7
    78c2:	4798      	blx	r3
		if (write < 0) {
    78c4:	2800      	cmp	r0, #0
    78c6:	dbc1      	blt.n	784c <bt_gatt_attr_write_ccc+0x3c>
		if (write != sizeof(value) && write != 1) {
    78c8:	3801      	subs	r0, #1
    78ca:	2801      	cmp	r0, #1
    78cc:	d9e1      	bls.n	7892 <bt_gatt_attr_write_ccc+0x82>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
    78ce:	f06f 000d 	mvn.w	r0, #13
    78d2:	e7bb      	b.n	784c <bt_gatt_attr_write_ccc+0x3c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    78d4:	f06f 0006 	mvn.w	r0, #6
    78d8:	e7b8      	b.n	784c <bt_gatt_attr_write_ccc+0x3c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
    78da:	f06f 000c 	mvn.w	r0, #12
    78de:	e7b5      	b.n	784c <bt_gatt_attr_write_ccc+0x3c>
    78e0:	0000e6dc 	.word	0x0000e6dc
    78e4:	0000e6f4 	.word	0x0000e6f4
    78e8:	0001098e 	.word	0x0001098e

000078ec <cf_write>:
{
    78ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    78f0:	4690      	mov	r8, r2
    78f2:	f8bd 2018 	ldrh.w	r2, [sp, #24]
    78f6:	4606      	mov	r6, r0
	if (offset > sizeof(cfg->data)) {
    78f8:	2a01      	cmp	r2, #1
{
    78fa:	461f      	mov	r7, r3
	if (offset > sizeof(cfg->data)) {
    78fc:	d844      	bhi.n	7988 <cf_write+0x9c>
	if (offset + len > sizeof(cfg->data)) {
    78fe:	441a      	add	r2, r3
    7900:	2a01      	cmp	r2, #1
    7902:	461d      	mov	r5, r3
    7904:	dc43      	bgt.n	798e <cf_write+0xa2>
	cfg = find_cf_cfg(conn);
    7906:	f7ff ff41 	bl	778c <find_cf_cfg>
	if (!cfg) {
    790a:	4604      	mov	r4, r0
    790c:	b9b0      	cbnz	r0, 793c <cf_write+0x50>
		cfg = find_cf_cfg(NULL);
    790e:	f7ff ff3d 	bl	778c <find_cf_cfg>
	if (!cfg) {
    7912:	4604      	mov	r4, r0
    7914:	b990      	cbnz	r0, 793c <cf_write+0x50>
		BT_WARN("No space to store Client Supported Features");
    7916:	2302      	movs	r3, #2
    7918:	f04f 0100 	mov.w	r1, #0
    791c:	4a1d      	ldr	r2, [pc, #116]	; (7994 <cf_write+0xa8>)
    791e:	f363 0107 	bfi	r1, r3, #0, #8
    7922:	4b1d      	ldr	r3, [pc, #116]	; (7998 <cf_write+0xac>)
    7924:	481d      	ldr	r0, [pc, #116]	; (799c <cf_write+0xb0>)
    7926:	1a9b      	subs	r3, r3, r2
    7928:	08db      	lsrs	r3, r3, #3
    792a:	f363 118f 	bfi	r1, r3, #6, #10
    792e:	f003 fe27 	bl	b580 <log_0>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
    7932:	f06f 0510 	mvn.w	r5, #16
}
    7936:	4628      	mov	r0, r5
    7938:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (i = 0U; i < len && i < last_byte; i++) {
    793c:	2300      	movs	r3, #0
    793e:	429f      	cmp	r7, r3
    7940:	d914      	bls.n	796c <cf_write+0x80>
    7942:	b13b      	cbz	r3, 7954 <cf_write+0x68>
		cfg->data[i] |= value[i] & ((1 << last_bit) - 1);
    7944:	f898 3000 	ldrb.w	r3, [r8]
    7948:	7a22      	ldrb	r2, [r4, #8]
    794a:	f003 0301 	and.w	r3, r3, #1
    794e:	4313      	orrs	r3, r2
    7950:	7223      	strb	r3, [r4, #8]
		BT_DBG("byte %u: data 0x%02x value 0x%02x", i, cfg->data[i],
    7952:	e00d      	b.n	7970 <cf_write+0x84>
    7954:	7a21      	ldrb	r1, [r4, #8]
		u8_t chg_bits = value[i] ^ cfg->data[i];
    7956:	f898 2000 	ldrb.w	r2, [r8]
	for (i = 0U; i < len && i < last_byte; i++) {
    795a:	2301      	movs	r3, #1
		u8_t chg_bits = value[i] ^ cfg->data[i];
    795c:	404a      	eors	r2, r1
			if ((BIT(bit) & chg_bits) &&
    795e:	07d0      	lsls	r0, r2, #31
    7960:	d5ed      	bpl.n	793e <cf_write+0x52>
    7962:	07ca      	lsls	r2, r1, #31
    7964:	d5eb      	bpl.n	793e <cf_write+0x52>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
    7966:	f06f 0512 	mvn.w	r5, #18
    796a:	e7e4      	b.n	7936 <cf_write+0x4a>
	for (i = 0U; i < len && i < last_byte; i++) {
    796c:	2f00      	cmp	r7, #0
    796e:	d1e9      	bne.n	7944 <cf_write+0x58>
    7970:	f106 0170 	add.w	r1, r6, #112	; 0x70
    7974:	2207      	movs	r2, #7
    7976:	1c60      	adds	r0, r4, #1
    7978:	f004 fa91 	bl	be9e <memcpy>
	atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
    797c:	2100      	movs	r1, #0
    797e:	f104 000c 	add.w	r0, r4, #12
    7982:	f005 f8ee 	bl	cb62 <atomic_set_bit>
	return len;
    7986:	e7d6      	b.n	7936 <cf_write+0x4a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    7988:	f06f 0506 	mvn.w	r5, #6
    798c:	e7d3      	b.n	7936 <cf_write+0x4a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
    798e:	f06f 050c 	mvn.w	r5, #12
    7992:	e7d0      	b.n	7936 <cf_write+0x4a>
    7994:	0000e6dc 	.word	0x0000e6dc
    7998:	0000e6f4 	.word	0x0000e6f4
    799c:	000109a8 	.word	0x000109a8

000079a0 <read_ppcp>:
{
    79a0:	b513      	push	{r0, r1, r4, lr}
    79a2:	4610      	mov	r0, r2
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_SLAVE_LATENCY);
    79a4:	f44f 1228 	mov.w	r2, #2752512	; 0x2a0000
{
    79a8:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_SLAVE_LATENCY);
    79ac:	4c09      	ldr	r4, [pc, #36]	; (79d4 <read_ppcp+0x34>)
	if (offset > value_len) {
    79ae:	2908      	cmp	r1, #8
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_SLAVE_LATENCY);
    79b0:	e9cd 4200 	strd	r4, r2, [sp]
	if (offset > value_len) {
    79b4:	d80b      	bhi.n	79ce <read_ppcp+0x2e>
	len = MIN(buf_len, value_len - offset);
    79b6:	f1c1 0408 	rsb	r4, r1, #8
    79ba:	429c      	cmp	r4, r3
    79bc:	bfa8      	it	ge
    79be:	461c      	movge	r4, r3
	memcpy(buf, (u8_t *)value + offset, len);
    79c0:	4469      	add	r1, sp
    79c2:	4622      	mov	r2, r4
    79c4:	f004 fa6b 	bl	be9e <memcpy>
}
    79c8:	4620      	mov	r0, r4
    79ca:	b002      	add	sp, #8
    79cc:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    79ce:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
    79d2:	e7f9      	b.n	79c8 <read_ppcp+0x28>
    79d4:	00280018 	.word	0x00280018

000079d8 <sc_save>:
{
    79d8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    79dc:	4680      	mov	r8, r0
    79de:	460f      	mov	r7, r1
    79e0:	4616      	mov	r6, r2
    79e2:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
    79e4:	f7ff fec2 	bl	776c <find_sc_cfg>
	if (!cfg) {
    79e8:	4604      	mov	r4, r0
    79ea:	b9f0      	cbnz	r0, 7a2a <sc_save+0x52>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
    79ec:	4669      	mov	r1, sp
    79ee:	9000      	str	r0, [sp, #0]
    79f0:	f8cd 0003 	str.w	r0, [sp, #3]
    79f4:	f7ff feba 	bl	776c <find_sc_cfg>
		if (!cfg) {
    79f8:	4604      	mov	r4, r0
    79fa:	b980      	cbnz	r0, 7a1e <sc_save+0x46>
			BT_ERR("unable to save SC: no cfg left");
    79fc:	2301      	movs	r3, #1
    79fe:	f04f 0100 	mov.w	r1, #0
    7a02:	4a11      	ldr	r2, [pc, #68]	; (7a48 <sc_save+0x70>)
    7a04:	f363 0107 	bfi	r1, r3, #0, #8
    7a08:	4b10      	ldr	r3, [pc, #64]	; (7a4c <sc_save+0x74>)
    7a0a:	4811      	ldr	r0, [pc, #68]	; (7a50 <sc_save+0x78>)
    7a0c:	1a9b      	subs	r3, r3, r2
    7a0e:	08db      	lsrs	r3, r3, #3
    7a10:	f363 118f 	bfi	r1, r3, #6, #10
    7a14:	f003 fdb4 	bl	b580 <log_0>
}
    7a18:	b002      	add	sp, #8
    7a1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cfg->id = id;
    7a1e:	f800 8b01 	strb.w	r8, [r0], #1
    7a22:	2207      	movs	r2, #7
    7a24:	4639      	mov	r1, r7
    7a26:	f004 fa3a 	bl	be9e <memcpy>
	if (!(cfg->data.start || cfg->data.end)) {
    7a2a:	8922      	ldrh	r2, [r4, #8]
    7a2c:	8963      	ldrh	r3, [r4, #10]
    7a2e:	b91a      	cbnz	r2, 7a38 <sc_save+0x60>
    7a30:	b923      	cbnz	r3, 7a3c <sc_save+0x64>
		cfg->data.start = start;
    7a32:	8126      	strh	r6, [r4, #8]
		*end = new_end;
    7a34:	8165      	strh	r5, [r4, #10]
    7a36:	e7ef      	b.n	7a18 <sc_save+0x40>
	if (new_start >= *start && new_end <= *end) {
    7a38:	4296      	cmp	r6, r2
    7a3a:	d302      	bcc.n	7a42 <sc_save+0x6a>
    7a3c:	429d      	cmp	r5, r3
    7a3e:	d9eb      	bls.n	7a18 <sc_save+0x40>
    7a40:	e7f8      	b.n	7a34 <sc_save+0x5c>
		*start = new_start;
    7a42:	8126      	strh	r6, [r4, #8]
	if (*end < new_end) {
    7a44:	e7fa      	b.n	7a3c <sc_save+0x64>
    7a46:	bf00      	nop
    7a48:	0000e6dc 	.word	0x0000e6dc
    7a4c:	0000e6f4 	.word	0x0000e6f4
    7a50:	00010a70 	.word	0x00010a70

00007a54 <notify_cb>:

static u8_t notify_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    7a54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct notify_data *data = user_data;
	struct _bt_gatt_ccc *ccc;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
    7a56:	4b2b      	ldr	r3, [pc, #172]	; (7b04 <notify_cb+0xb0>)
    7a58:	6882      	ldr	r2, [r0, #8]
{
    7a5a:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
    7a5c:	429a      	cmp	r2, r3
{
    7a5e:	460c      	mov	r4, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
    7a60:	d12c      	bne.n	7abc <notify_cb+0x68>
		return BT_GATT_ITER_CONTINUE;
	}

	ccc = attr->user_data;
    7a62:	68c6      	ldr	r6, [r0, #12]

	/* Save Service Changed data if peer is not connected */
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
    7a64:	4b28      	ldr	r3, [pc, #160]	; (7b08 <notify_cb+0xb4>)
    7a66:	429e      	cmp	r6, r3
    7a68:	d118      	bne.n	7a9c <notify_cb+0x48>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
			struct gatt_sc_cfg *cfg = &sc_cfg[i];
			struct bt_conn *conn;

			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
    7a6a:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
    7a6c:	4d27      	ldr	r5, [pc, #156]	; (7b0c <notify_cb+0xb8>)
    7a6e:	2207      	movs	r2, #7
    7a70:	4669      	mov	r1, sp
    7a72:	1c68      	adds	r0, r5, #1
    7a74:	9300      	str	r3, [sp, #0]
    7a76:	f8cd 3003 	str.w	r3, [sp, #3]
    7a7a:	f004 fa00 	bl	be7e <memcmp>
    7a7e:	b168      	cbz	r0, 7a9c <notify_cb+0x48>
				continue;
			}

			conn = bt_conn_lookup_state_le(&cfg->peer,
    7a80:	2106      	movs	r1, #6
    7a82:	1c68      	adds	r0, r5, #1
    7a84:	f7fe fb6a 	bl	615c <bt_conn_lookup_state_le>
						       BT_CONN_CONNECTED);
			if (!conn) {
    7a88:	b9d8      	cbnz	r0, 7ac2 <notify_cb+0x6e>
				struct sc_data *sc;

				sc = (struct sc_data *)data->ind_params->data;
				sc_save(cfg->id, &cfg->peer,
    7a8a:	4629      	mov	r1, r5
				sc = (struct sc_data *)data->ind_params->data;
    7a8c:	68a3      	ldr	r3, [r4, #8]
				sc_save(cfg->id, &cfg->peer,
    7a8e:	f811 0b01 	ldrb.w	r0, [r1], #1
				sc = (struct sc_data *)data->ind_params->data;
    7a92:	68da      	ldr	r2, [r3, #12]
				sc_save(cfg->id, &cfg->peer,
    7a94:	8853      	ldrh	r3, [r2, #2]
    7a96:	8812      	ldrh	r2, [r2, #0]
    7a98:	f7ff ff9e 	bl	79d8 <sc_save>
		int err;

		/* Check if config value matches data type since consolidated
		 * value may be for a different peer.
		 */
		if (cfg->value != data->type) {
    7a9c:	8932      	ldrh	r2, [r6, #8]
    7a9e:	88a3      	ldrh	r3, [r4, #4]
    7aa0:	429a      	cmp	r2, r3
    7aa2:	d10b      	bne.n	7abc <notify_cb+0x68>
			continue;
		}

		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
    7aa4:	4631      	mov	r1, r6
    7aa6:	f811 0b01 	ldrb.w	r0, [r1], #1
    7aaa:	f7fe fb39 	bl	6120 <bt_conn_lookup_addr_le>
		if (!conn) {
    7aae:	4605      	mov	r5, r0
    7ab0:	b120      	cbz	r0, 7abc <notify_cb+0x68>
			continue;
		}

		if (conn->state != BT_CONN_CONNECTED) {
    7ab2:	7a83      	ldrb	r3, [r0, #10]
    7ab4:	2b06      	cmp	r3, #6
    7ab6:	d007      	beq.n	7ac8 <notify_cb+0x74>
			continue;
		}

		/* Confirm match if cfg is managed by application */
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
			bt_conn_unref(conn);
    7ab8:	f004 fc4c 	bl	c354 <bt_conn_unref>
		}

		data->err = 0;
	}

	return BT_GATT_ITER_CONTINUE;
    7abc:	2001      	movs	r0, #1
}
    7abe:	b003      	add	sp, #12
    7ac0:	bdf0      	pop	{r4, r5, r6, r7, pc}
			bt_conn_unref(conn);
    7ac2:	f004 fc47 	bl	c354 <bt_conn_unref>
    7ac6:	e7e9      	b.n	7a9c <notify_cb+0x48>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
    7ac8:	6973      	ldr	r3, [r6, #20]
    7aca:	b123      	cbz	r3, 7ad6 <notify_cb+0x82>
    7acc:	4639      	mov	r1, r7
    7ace:	4798      	blx	r3
    7ad0:	b908      	cbnz	r0, 7ad6 <notify_cb+0x82>
			bt_conn_unref(conn);
    7ad2:	4628      	mov	r0, r5
    7ad4:	e7f0      	b.n	7ab8 <notify_cb+0x64>
		if (data->type == BT_GATT_CCC_INDICATE) {
    7ad6:	8a39      	ldrh	r1, [r7, #16]
    7ad8:	88a3      	ldrh	r3, [r4, #4]
    7ada:	3901      	subs	r1, #1
    7adc:	2b02      	cmp	r3, #2
    7ade:	b289      	uxth	r1, r1
    7ae0:	68a2      	ldr	r2, [r4, #8]
			err = gatt_indicate(conn, attr->handle - 1,
    7ae2:	4628      	mov	r0, r5
		if (data->type == BT_GATT_CCC_INDICATE) {
    7ae4:	d10b      	bne.n	7afe <notify_cb+0xaa>
			err = gatt_indicate(conn, attr->handle - 1,
    7ae6:	f7ff fdfd 	bl	76e4 <gatt_indicate>
			err = gatt_notify(conn, attr->handle - 1,
    7aea:	4606      	mov	r6, r0
		bt_conn_unref(conn);
    7aec:	4628      	mov	r0, r5
    7aee:	f004 fc31 	bl	c354 <bt_conn_unref>
		if (err < 0) {
    7af2:	2e00      	cmp	r6, #0
    7af4:	f04f 0000 	mov.w	r0, #0
    7af8:	dbe1      	blt.n	7abe <notify_cb+0x6a>
		data->err = 0;
    7afa:	6020      	str	r0, [r4, #0]
    7afc:	e7de      	b.n	7abc <notify_cb+0x68>
			err = gatt_notify(conn, attr->handle - 1,
    7afe:	f7ff fd73 	bl	75e8 <gatt_notify>
    7b02:	e7f2      	b.n	7aea <notify_cb+0x96>
    7b04:	00007811 	.word	0x00007811
    7b08:	20004a3c 	.word	0x20004a3c
    7b0c:	2000128e 	.word	0x2000128e

00007b10 <disconnected_cb>:
	struct _bt_gatt_ccc *ccc;
	bool value_used;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
    7b10:	6882      	ldr	r2, [r0, #8]
    7b12:	4b24      	ldr	r3, [pc, #144]	; (7ba4 <disconnected_cb+0x94>)
{
    7b14:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    7b18:	429a      	cmp	r2, r3
{
    7b1a:	4607      	mov	r7, r0
    7b1c:	460e      	mov	r6, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
    7b1e:	d102      	bne.n	7b26 <disconnected_cb+0x16>
		return BT_GATT_ITER_CONTINUE;
	}

	ccc = attr->user_data;
    7b20:	68c4      	ldr	r4, [r0, #12]

	/* If already disabled skip */
	if (!ccc->value) {
    7b22:	8963      	ldrh	r3, [r4, #10]
    7b24:	bb3b      	cbnz	r3, 7b76 <disconnected_cb+0x66>

		BT_DBG("ccc %p reseted", ccc);
	}

	return BT_GATT_ITER_CONTINUE;
}
    7b26:	2001      	movs	r0, #1
    7b28:	b002      	add	sp, #8
    7b2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		    bt_conn_addr_le_cmp(conn, &cfg->peer)) {
    7b2e:	4629      	mov	r1, r5
    7b30:	4630      	mov	r0, r6
    7b32:	f004 fbf7 	bl	c324 <bt_conn_addr_le_cmp>
		if (conn->id != cfg->id ||
    7b36:	bb30      	cbnz	r0, 7b86 <disconnected_cb+0x76>
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    7b38:	f106 0870 	add.w	r8, r6, #112	; 0x70
    7b3c:	7a30      	ldrb	r0, [r6, #8]
    7b3e:	4641      	mov	r1, r8
    7b40:	f004 fb54 	bl	c1ec <bt_addr_le_is_bonded>
    7b44:	4606      	mov	r6, r0
    7b46:	b980      	cbnz	r0, 7b6a <disconnected_cb+0x5a>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
    7b48:	9000      	str	r0, [sp, #0]
	memcpy(dst, src, sizeof(*dst));
    7b4a:	2207      	movs	r2, #7
    7b4c:	f8cd 0003 	str.w	r0, [sp, #3]
    7b50:	4669      	mov	r1, sp
    7b52:	4628      	mov	r0, r5
    7b54:	f004 f9a3 	bl	be9e <memcpy>
	cfg->id = 0U;
    7b58:	7026      	strb	r6, [r4, #0]
	cfg->value = 0U;
    7b5a:	8126      	strh	r6, [r4, #8]
	if (!value_used) {
    7b5c:	e019      	b.n	7b92 <disconnected_cb+0x82>
				if (tmp->state == BT_CONN_CONNECTED) {
    7b5e:	7a85      	ldrb	r5, [r0, #10]
				bt_conn_unref(tmp);
    7b60:	f004 fbf8 	bl	c354 <bt_conn_unref>
	if (!value_used) {
    7b64:	2d06      	cmp	r5, #6
    7b66:	d0de      	beq.n	7b26 <disconnected_cb+0x16>
    7b68:	e013      	b.n	7b92 <disconnected_cb+0x82>
    7b6a:	2207      	movs	r2, #7
    7b6c:	4641      	mov	r1, r8
    7b6e:	4628      	mov	r0, r5
    7b70:	f004 f995 	bl	be9e <memcpy>
    7b74:	e00d      	b.n	7b92 <disconnected_cb+0x82>
		if (!cfg->value) {
    7b76:	8923      	ldrh	r3, [r4, #8]
    7b78:	b15b      	cbz	r3, 7b92 <disconnected_cb+0x82>
		if (conn->id != cfg->id ||
    7b7a:	4625      	mov	r5, r4
    7b7c:	7a32      	ldrb	r2, [r6, #8]
    7b7e:	f815 3b01 	ldrb.w	r3, [r5], #1
    7b82:	429a      	cmp	r2, r3
    7b84:	d0d3      	beq.n	7b2e <disconnected_cb+0x1e>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
    7b86:	4629      	mov	r1, r5
    7b88:	7820      	ldrb	r0, [r4, #0]
    7b8a:	f7fe fac9 	bl	6120 <bt_conn_lookup_addr_le>
			if (tmp) {
    7b8e:	2800      	cmp	r0, #0
    7b90:	d1e5      	bne.n	7b5e <disconnected_cb+0x4e>
		ccc->value = 0U;
    7b92:	2100      	movs	r1, #0
		if (ccc->cfg_changed) {
    7b94:	68e3      	ldr	r3, [r4, #12]
		ccc->value = 0U;
    7b96:	8161      	strh	r1, [r4, #10]
		if (ccc->cfg_changed) {
    7b98:	2b00      	cmp	r3, #0
    7b9a:	d0c4      	beq.n	7b26 <disconnected_cb+0x16>
			ccc->cfg_changed(attr, ccc->value);
    7b9c:	4638      	mov	r0, r7
    7b9e:	4798      	blx	r3
    7ba0:	e7c1      	b.n	7b26 <disconnected_cb+0x16>
    7ba2:	bf00      	nop
    7ba4:	00007811 	.word	0x00007811

00007ba8 <bt_gatt_init>:
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    7ba8:	2201      	movs	r2, #1
{
    7baa:	b510      	push	{r4, lr}
    7bac:	4b14      	ldr	r3, [pc, #80]	; (7c00 <bt_gatt_init+0x58>)
    7bae:	e8d3 1fef 	ldaex	r1, [r3]
    7bb2:	2900      	cmp	r1, #0
    7bb4:	d103      	bne.n	7bbe <bt_gatt_init+0x16>
    7bb6:	e8c3 2fe0 	stlex	r0, r2, [r3]
    7bba:	2800      	cmp	r0, #0
    7bbc:	d1f7      	bne.n	7bae <bt_gatt_init+0x6>
	if (!atomic_cas(&init, 0, 1)) {
    7bbe:	d11d      	bne.n	7bfc <bt_gatt_init+0x54>
    7bc0:	2000      	movs	r0, #0
    7bc2:	4a10      	ldr	r2, [pc, #64]	; (7c04 <bt_gatt_init+0x5c>)
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    7bc4:	4910      	ldr	r1, [pc, #64]	; (7c08 <bt_gatt_init+0x60>)
    7bc6:	8813      	ldrh	r3, [r2, #0]
    7bc8:	4c10      	ldr	r4, [pc, #64]	; (7c0c <bt_gatt_init+0x64>)
    7bca:	42a1      	cmp	r1, r4
    7bcc:	d310      	bcc.n	7bf0 <bt_gatt_init+0x48>
    7bce:	b100      	cbz	r0, 7bd2 <bt_gatt_init+0x2a>
    7bd0:	8013      	strh	r3, [r2, #0]
	k_delayed_work_init(&db_hash_work, db_hash_process);
    7bd2:	490f      	ldr	r1, [pc, #60]	; (7c10 <bt_gatt_init+0x68>)
    7bd4:	480f      	ldr	r0, [pc, #60]	; (7c14 <bt_gatt_init+0x6c>)
    7bd6:	f006 fa48 	bl	e06a <k_delayed_work_init>
    7bda:	490e      	ldr	r1, [pc, #56]	; (7c14 <bt_gatt_init+0x6c>)
    7bdc:	220a      	movs	r2, #10
    7bde:	480e      	ldr	r0, [pc, #56]	; (7c18 <bt_gatt_init+0x70>)
    7be0:	f002 fac2 	bl	a168 <k_delayed_work_submit_to_queue>
}
    7be4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		k_delayed_work_init(&gatt_sc.work, sc_process);
    7be8:	490c      	ldr	r1, [pc, #48]	; (7c1c <bt_gatt_init+0x74>)
    7bea:	480d      	ldr	r0, [pc, #52]	; (7c20 <bt_gatt_init+0x78>)
    7bec:	f006 ba3d 	b.w	e06a <k_delayed_work_init>
		last_static_handle += svc->attr_count;
    7bf0:	6848      	ldr	r0, [r1, #4]
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    7bf2:	3108      	adds	r1, #8
		last_static_handle += svc->attr_count;
    7bf4:	4403      	add	r3, r0
    7bf6:	b29b      	uxth	r3, r3
    7bf8:	2001      	movs	r0, #1
    7bfa:	e7e6      	b.n	7bca <bt_gatt_init+0x22>
}
    7bfc:	bd10      	pop	{r4, pc}
    7bfe:	bf00      	nop
    7c00:	20000730 	.word	0x20000730
    7c04:	2000128c 	.word	0x2000128c
    7c08:	0000e6c4 	.word	0x0000e6c4
    7c0c:	0000e6dc 	.word	0x0000e6dc
    7c10:	0000cdcb 	.word	0x0000cdcb
    7c14:	200006d4 	.word	0x200006d4
    7c18:	2000120c 	.word	0x2000120c
    7c1c:	00007fc5 	.word	0x00007fc5
    7c20:	2000070c 	.word	0x2000070c

00007c24 <bt_gatt_attr_value_handle>:
{
    7c24:	b508      	push	{r3, lr}
	if ((attr != NULL)
    7c26:	b188      	cbz	r0, 7c4c <bt_gatt_attr_value_handle+0x28>
	    && (attr->read == bt_gatt_attr_read_chrc)) {
    7c28:	6841      	ldr	r1, [r0, #4]
    7c2a:	4b09      	ldr	r3, [pc, #36]	; (7c50 <bt_gatt_attr_value_handle+0x2c>)
    7c2c:	4299      	cmp	r1, r3
    7c2e:	d10d      	bne.n	7c4c <bt_gatt_attr_value_handle+0x28>
		handle = chrc->value_handle;
    7c30:	68c3      	ldr	r3, [r0, #12]
    7c32:	889b      	ldrh	r3, [r3, #4]
		if (handle == 0) {
    7c34:	b91b      	cbnz	r3, 7c3e <bt_gatt_attr_value_handle+0x1a>
			handle = (attr->handle ? : find_static_attr(attr)) + 1U;
    7c36:	8a03      	ldrh	r3, [r0, #16]
    7c38:	b11b      	cbz	r3, 7c42 <bt_gatt_attr_value_handle+0x1e>
    7c3a:	3301      	adds	r3, #1
    7c3c:	b29b      	uxth	r3, r3
}
    7c3e:	4618      	mov	r0, r3
    7c40:	bd08      	pop	{r3, pc}
			handle = (attr->handle ? : find_static_attr(attr)) + 1U;
    7c42:	f7ff fcad 	bl	75a0 <find_static_attr>
    7c46:	3001      	adds	r0, #1
    7c48:	b283      	uxth	r3, r0
	return handle;
    7c4a:	e7f8      	b.n	7c3e <bt_gatt_attr_value_handle+0x1a>
	u16_t handle = 0;
    7c4c:	2300      	movs	r3, #0
    7c4e:	e7f6      	b.n	7c3e <bt_gatt_attr_value_handle+0x1a>
    7c50:	0000cd53 	.word	0x0000cd53

00007c54 <bt_gatt_foreach_attr_type>:
{
    7c54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7c58:	4699      	mov	r9, r3
		num_matches = UINT16_MAX;
    7c5a:	f64f 73ff 	movw	r3, #65535	; 0xffff
{
    7c5e:	b089      	sub	sp, #36	; 0x24
    7c60:	f8bd 5048 	ldrh.w	r5, [sp, #72]	; 0x48
    7c64:	4607      	mov	r7, r0
		num_matches = UINT16_MAX;
    7c66:	2d00      	cmp	r5, #0
    7c68:	bf08      	it	eq
    7c6a:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
    7c6c:	4b25      	ldr	r3, [pc, #148]	; (7d04 <bt_gatt_foreach_attr_type+0xb0>)
{
    7c6e:	9101      	str	r1, [sp, #4]
	if (start_handle <= last_static_handle) {
    7c70:	881b      	ldrh	r3, [r3, #0]
{
    7c72:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
    7c74:	4283      	cmp	r3, r0
    7c76:	d33c      	bcc.n	7cf2 <bt_gatt_foreach_attr_type+0x9e>
		u16_t handle = 1;
    7c78:	2401      	movs	r4, #1
				memcpy(&attr, &static_svc->attrs[i],
    7c7a:	f04f 0b14 	mov.w	fp, #20
    7c7e:	f8df a08c 	ldr.w	sl, [pc, #140]	; 7d0c <bt_gatt_foreach_attr_type+0xb8>
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    7c82:	4b21      	ldr	r3, [pc, #132]	; (7d08 <bt_gatt_foreach_attr_type+0xb4>)
    7c84:	f1aa 0208 	sub.w	r2, sl, #8
    7c88:	429a      	cmp	r2, r3
    7c8a:	d232      	bcs.n	7cf2 <bt_gatt_foreach_attr_type+0x9e>
			if (handle + static_svc->attr_count < start_handle) {
    7c8c:	f85a 2c04 	ldr.w	r2, [sl, #-4]
    7c90:	4422      	add	r2, r4
    7c92:	42ba      	cmp	r2, r7
    7c94:	d234      	bcs.n	7d00 <bt_gatt_foreach_attr_type+0xac>
				handle += static_svc->attr_count;
    7c96:	b294      	uxth	r4, r2
				continue;
    7c98:	f10a 0a08 	add.w	sl, sl, #8
    7c9c:	e7f1      	b.n	7c82 <bt_gatt_foreach_attr_type+0x2e>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
    7c9e:	9903      	ldr	r1, [sp, #12]
    7ca0:	4640      	mov	r0, r8
    7ca2:	f004 f9cd 	bl	c040 <bt_uuid_cmp>
    7ca6:	b1c0      	cbz	r0, 7cda <bt_gatt_foreach_attr_type+0x86>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
    7ca8:	3401      	adds	r4, #1
    7caa:	3601      	adds	r6, #1
    7cac:	b2a4      	uxth	r4, r4
    7cae:	f85a 2c04 	ldr.w	r2, [sl, #-4]
    7cb2:	42b2      	cmp	r2, r6
    7cb4:	d9f0      	bls.n	7c98 <bt_gatt_foreach_attr_type+0x44>
				memcpy(&attr, &static_svc->attrs[i],
    7cb6:	f85a 1c08 	ldr.w	r1, [sl, #-8]
    7cba:	2214      	movs	r2, #20
    7cbc:	fb0b 1106 	mla	r1, fp, r6, r1
    7cc0:	a803      	add	r0, sp, #12
    7cc2:	f004 f8ec 	bl	be9e <memcpy>
	if (attr->handle > end_handle) {
    7cc6:	9b01      	ldr	r3, [sp, #4]
				attr.handle = handle;
    7cc8:	f8ad 401c 	strh.w	r4, [sp, #28]
	if (attr->handle > end_handle) {
    7ccc:	429c      	cmp	r4, r3
    7cce:	d810      	bhi.n	7cf2 <bt_gatt_foreach_attr_type+0x9e>
	if (attr->handle < start_handle) {
    7cd0:	42bc      	cmp	r4, r7
    7cd2:	d3e9      	bcc.n	7ca8 <bt_gatt_foreach_attr_type+0x54>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
    7cd4:	f1b8 0f00 	cmp.w	r8, #0
    7cd8:	d1e1      	bne.n	7c9e <bt_gatt_foreach_attr_type+0x4a>
	if (attr_data && attr_data != attr->user_data) {
    7cda:	f1b9 0f00 	cmp.w	r9, #0
    7cde:	d10b      	bne.n	7cf8 <bt_gatt_foreach_attr_type+0xa4>
	*num_matches -= 1;
    7ce0:	3d01      	subs	r5, #1
    7ce2:	b2ad      	uxth	r5, r5
	result = func(attr, user_data);
    7ce4:	9914      	ldr	r1, [sp, #80]	; 0x50
    7ce6:	a803      	add	r0, sp, #12
    7ce8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    7cea:	4798      	blx	r3
	if (!*num_matches) {
    7cec:	b10d      	cbz	r5, 7cf2 <bt_gatt_foreach_attr_type+0x9e>
				if (gatt_foreach_iter(&attr, start_handle,
    7cee:	2800      	cmp	r0, #0
    7cf0:	d1da      	bne.n	7ca8 <bt_gatt_foreach_attr_type+0x54>
}
    7cf2:	b009      	add	sp, #36	; 0x24
    7cf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (attr_data && attr_data != attr->user_data) {
    7cf8:	9a06      	ldr	r2, [sp, #24]
    7cfa:	4591      	cmp	r9, r2
    7cfc:	d1d4      	bne.n	7ca8 <bt_gatt_foreach_attr_type+0x54>
    7cfe:	e7ef      	b.n	7ce0 <bt_gatt_foreach_attr_type+0x8c>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
    7d00:	2600      	movs	r6, #0
    7d02:	e7d4      	b.n	7cae <bt_gatt_foreach_attr_type+0x5a>
    7d04:	2000128c 	.word	0x2000128c
    7d08:	0000e6dc 	.word	0x0000e6dc
    7d0c:	0000e6cc 	.word	0x0000e6cc

00007d10 <db_hash_gen.isra.9>:
static void db_hash_gen(bool store)
    7d10:	b510      	push	{r4, lr}
    7d12:	b0c8      	sub	sp, #288	; 0x120
	u8_t key[16] = {};
    7d14:	2210      	movs	r2, #16
    7d16:	2100      	movs	r1, #0
    7d18:	4668      	mov	r0, sp
    7d1a:	f004 f8ea 	bl	bef2 <memset>
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
    7d1e:	aa1c      	add	r2, sp, #112	; 0x70
    7d20:	4669      	mov	r1, sp
    7d22:	a804      	add	r0, sp, #16
    7d24:	f003 f8f9 	bl	af1a <tc_cmac_setup>
    7d28:	b978      	cbnz	r0, 7d4a <db_hash_gen.isra.9+0x3a>
		BT_ERR("Unable to setup AES CMAC");
    7d2a:	2301      	movs	r3, #1
    7d2c:	f04f 0100 	mov.w	r1, #0
    7d30:	4a19      	ldr	r2, [pc, #100]	; (7d98 <db_hash_gen.isra.9+0x88>)
    7d32:	f363 0107 	bfi	r1, r3, #0, #8
    7d36:	4b19      	ldr	r3, [pc, #100]	; (7d9c <db_hash_gen.isra.9+0x8c>)
    7d38:	4819      	ldr	r0, [pc, #100]	; (7da0 <db_hash_gen.isra.9+0x90>)
    7d3a:	1a9b      	subs	r3, r3, r2
    7d3c:	08db      	lsrs	r3, r3, #3
    7d3e:	f363 118f 	bfi	r1, r3, #6, #10
		BT_ERR("Unable to calculate hash");
    7d42:	f003 fc1d 	bl	b580 <log_0>
}
    7d46:	b048      	add	sp, #288	; 0x120
    7d48:	bd10      	pop	{r4, pc}
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
    7d4a:	f64f 71ff 	movw	r1, #65535	; 0xffff
    7d4e:	2001      	movs	r0, #1
    7d50:	ab04      	add	r3, sp, #16
    7d52:	4a14      	ldr	r2, [pc, #80]	; (7da4 <db_hash_gen.isra.9+0x94>)
    7d54:	f005 f82e 	bl	cdb4 <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash, &state.state) == TC_CRYPTO_FAIL) {
    7d58:	a904      	add	r1, sp, #16
    7d5a:	4813      	ldr	r0, [pc, #76]	; (7da8 <db_hash_gen.isra.9+0x98>)
    7d5c:	f003 f972 	bl	b044 <tc_cmac_final>
    7d60:	b960      	cbnz	r0, 7d7c <db_hash_gen.isra.9+0x6c>
		BT_ERR("Unable to calculate hash");
    7d62:	2301      	movs	r3, #1
    7d64:	f04f 0100 	mov.w	r1, #0
    7d68:	4a0b      	ldr	r2, [pc, #44]	; (7d98 <db_hash_gen.isra.9+0x88>)
    7d6a:	f363 0107 	bfi	r1, r3, #0, #8
    7d6e:	4b0b      	ldr	r3, [pc, #44]	; (7d9c <db_hash_gen.isra.9+0x8c>)
    7d70:	480e      	ldr	r0, [pc, #56]	; (7dac <db_hash_gen.isra.9+0x9c>)
    7d72:	1a9b      	subs	r3, r3, r2
    7d74:	08db      	lsrs	r3, r3, #3
    7d76:	f363 118f 	bfi	r1, r3, #6, #10
    7d7a:	e7e2      	b.n	7d42 <db_hash_gen.isra.9+0x32>
	if (tc_cmac_final(db_hash, &state.state) == TC_CRYPTO_FAIL) {
    7d7c:	2208      	movs	r2, #8
    7d7e:	4b0a      	ldr	r3, [pc, #40]	; (7da8 <db_hash_gen.isra.9+0x98>)
    7d80:	f103 0110 	add.w	r1, r3, #16
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
		u8_t tmp = ((u8_t *)buf)[i];
    7d84:	7818      	ldrb	r0, [r3, #0]

		((u8_t *)buf)[i] = ((u8_t *)buf)[length - 1 - i];
    7d86:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
	for (i = 0; i < (length/2); i++) {
    7d8a:	3a01      	subs	r2, #1
		((u8_t *)buf)[i] = ((u8_t *)buf)[length - 1 - i];
    7d8c:	f803 4b01 	strb.w	r4, [r3], #1
		((u8_t *)buf)[length - 1 - i] = tmp;
    7d90:	7008      	strb	r0, [r1, #0]
	for (i = 0; i < (length/2); i++) {
    7d92:	d1f7      	bne.n	7d84 <db_hash_gen.isra.9+0x74>
    7d94:	e7d7      	b.n	7d46 <db_hash_gen.isra.9+0x36>
    7d96:	bf00      	nop
    7d98:	0000e6dc 	.word	0x0000e6dc
    7d9c:	0000e6f4 	.word	0x0000e6f4
    7da0:	000109d4 	.word	0x000109d4
    7da4:	0000cab7 	.word	0x0000cab7
    7da8:	2000151e 	.word	0x2000151e
    7dac:	000109ed 	.word	0x000109ed

00007db0 <bt_gatt_attr_next>:
	struct bt_gatt_attr *next = NULL;
    7db0:	2300      	movs	r3, #0
{
    7db2:	b507      	push	{r0, r1, r2, lr}
	u16_t handle = attr->handle ? : find_static_attr(attr);
    7db4:	8a01      	ldrh	r1, [r0, #16]
	struct bt_gatt_attr *next = NULL;
    7db6:	9301      	str	r3, [sp, #4]
	u16_t handle = attr->handle ? : find_static_attr(attr);
    7db8:	b911      	cbnz	r1, 7dc0 <bt_gatt_attr_next+0x10>
    7dba:	f7ff fbf1 	bl	75a0 <find_static_attr>
    7dbe:	4601      	mov	r1, r0
	bt_gatt_foreach_attr(handle + 1, handle + 1, find_next, &next);
    7dc0:	3101      	adds	r1, #1
    7dc2:	b289      	uxth	r1, r1
    7dc4:	4608      	mov	r0, r1
    7dc6:	ab01      	add	r3, sp, #4
    7dc8:	4a03      	ldr	r2, [pc, #12]	; (7dd8 <bt_gatt_attr_next+0x28>)
    7dca:	f004 fff3 	bl	cdb4 <bt_gatt_foreach_attr>
}
    7dce:	9801      	ldr	r0, [sp, #4]
    7dd0:	b003      	add	sp, #12
    7dd2:	f85d fb04 	ldr.w	pc, [sp], #4
    7dd6:	bf00      	nop
    7dd8:	0000ca8d 	.word	0x0000ca8d

00007ddc <bt_gatt_notify_cb>:
{
    7ddc:	b570      	push	{r4, r5, r6, lr}
    7dde:	4605      	mov	r5, r0
    7de0:	b08a      	sub	sp, #40	; 0x28
    7de2:	460e      	mov	r6, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    7de4:	4837      	ldr	r0, [pc, #220]	; (7ec4 <bt_gatt_notify_cb+0xe8>)
    7de6:	2101      	movs	r1, #1
    7de8:	f004 fec6 	bl	cb78 <atomic_test_bit>
    7dec:	2800      	cmp	r0, #0
    7dee:	d05f      	beq.n	7eb0 <bt_gatt_notify_cb+0xd4>
	attr = params->attr;
    7df0:	6870      	ldr	r0, [r6, #4]
    7df2:	9004      	str	r0, [sp, #16]
	if (conn && conn->state != BT_CONN_CONNECTED) {
    7df4:	b115      	cbz	r5, 7dfc <bt_gatt_notify_cb+0x20>
    7df6:	7aab      	ldrb	r3, [r5, #10]
    7df8:	2b06      	cmp	r3, #6
    7dfa:	d15c      	bne.n	7eb6 <bt_gatt_notify_cb+0xda>
	handle = attr->handle ? : find_static_attr(attr);
    7dfc:	8a04      	ldrh	r4, [r0, #16]
    7dfe:	b93c      	cbnz	r4, 7e10 <bt_gatt_notify_cb+0x34>
    7e00:	f7ff fbce 	bl	75a0 <find_static_attr>
	if (!handle) {
    7e04:	4604      	mov	r4, r0
    7e06:	b918      	cbnz	r0, 7e10 <bt_gatt_notify_cb+0x34>
		return -ENOENT;
    7e08:	f06f 0001 	mvn.w	r0, #1
}
    7e0c:	b00a      	add	sp, #40	; 0x28
    7e0e:	bd70      	pop	{r4, r5, r6, pc}
	if (params->uuid) {
    7e10:	6832      	ldr	r2, [r6, #0]
    7e12:	b1b2      	cbz	r2, 7e42 <bt_gatt_notify_cb+0x66>
		bt_gatt_foreach_attr_type(handle, 0xffff, params->uuid,
    7e14:	a904      	add	r1, sp, #16
    7e16:	9102      	str	r1, [sp, #8]
    7e18:	492b      	ldr	r1, [pc, #172]	; (7ec8 <bt_gatt_notify_cb+0xec>)
		attr = NULL;
    7e1a:	2300      	movs	r3, #0
		bt_gatt_foreach_attr_type(handle, 0xffff, params->uuid,
    7e1c:	9101      	str	r1, [sp, #4]
    7e1e:	2101      	movs	r1, #1
    7e20:	4620      	mov	r0, r4
    7e22:	9100      	str	r1, [sp, #0]
    7e24:	f64f 71ff 	movw	r1, #65535	; 0xffff
		attr = NULL;
    7e28:	9304      	str	r3, [sp, #16]
		bt_gatt_foreach_attr_type(handle, 0xffff, params->uuid,
    7e2a:	f7ff ff13 	bl	7c54 <bt_gatt_foreach_attr_type>
		if (!attr) {
    7e2e:	9804      	ldr	r0, [sp, #16]
    7e30:	2800      	cmp	r0, #0
    7e32:	d0e9      	beq.n	7e08 <bt_gatt_notify_cb+0x2c>
		handle = attr->handle ? : find_static_attr(attr);
    7e34:	8a04      	ldrh	r4, [r0, #16]
    7e36:	b924      	cbnz	r4, 7e42 <bt_gatt_notify_cb+0x66>
    7e38:	f7ff fbb2 	bl	75a0 <find_static_attr>
		if (!handle) {
    7e3c:	4604      	mov	r4, r0
    7e3e:	2800      	cmp	r0, #0
    7e40:	d0e2      	beq.n	7e08 <bt_gatt_notify_cb+0x2c>
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
    7e42:	9b04      	ldr	r3, [sp, #16]
    7e44:	a905      	add	r1, sp, #20
    7e46:	6818      	ldr	r0, [r3, #0]
    7e48:	2300      	movs	r3, #0
    7e4a:	f88d 3014 	strb.w	r3, [sp, #20]
    7e4e:	f642 0303 	movw	r3, #10243	; 0x2803
    7e52:	f8ad 3016 	strh.w	r3, [sp, #22]
    7e56:	f004 f8f3 	bl	c040 <bt_uuid_cmp>
    7e5a:	b938      	cbnz	r0, 7e6c <bt_gatt_notify_cb+0x90>
		struct bt_gatt_chrc *chrc = attr->user_data;
    7e5c:	9804      	ldr	r0, [sp, #16]
		if (!(chrc->properties & BT_GATT_CHRC_NOTIFY)) {
    7e5e:	68c3      	ldr	r3, [r0, #12]
    7e60:	799b      	ldrb	r3, [r3, #6]
    7e62:	06db      	lsls	r3, r3, #27
    7e64:	d52a      	bpl.n	7ebc <bt_gatt_notify_cb+0xe0>
		handle = bt_gatt_attr_value_handle(attr);
    7e66:	f7ff fedd 	bl	7c24 <bt_gatt_attr_value_handle>
    7e6a:	4604      	mov	r4, r0
	if (conn) {
    7e6c:	b12d      	cbz	r5, 7e7a <bt_gatt_notify_cb+0x9e>
		return gatt_notify(conn, handle, params);
    7e6e:	4632      	mov	r2, r6
    7e70:	4621      	mov	r1, r4
    7e72:	4628      	mov	r0, r5
    7e74:	f7ff fbb8 	bl	75e8 <gatt_notify>
    7e78:	e7c8      	b.n	7e0c <bt_gatt_notify_cb+0x30>
	data.err = -ENOTCONN;
    7e7a:	f06f 0338 	mvn.w	r3, #56	; 0x38
	bt_gatt_foreach_attr_type(handle, 0xffff, BT_UUID_GATT_CCC, NULL, 1,
    7e7e:	f642 1202 	movw	r2, #10498	; 0x2902
	data.err = -ENOTCONN;
    7e82:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_NOTIFY;
    7e84:	2301      	movs	r3, #1
	bt_gatt_foreach_attr_type(handle, 0xffff, BT_UUID_GATT_CCC, NULL, 1,
    7e86:	f8ad 201a 	strh.w	r2, [sp, #26]
    7e8a:	aa07      	add	r2, sp, #28
    7e8c:	9202      	str	r2, [sp, #8]
    7e8e:	4a0f      	ldr	r2, [pc, #60]	; (7ecc <bt_gatt_notify_cb+0xf0>)
	data.type = BT_GATT_CCC_NOTIFY;
    7e90:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(handle, 0xffff, BT_UUID_GATT_CCC, NULL, 1,
    7e94:	e9cd 3200 	strd	r3, r2, [sp]
    7e98:	4620      	mov	r0, r4
    7e9a:	462b      	mov	r3, r5
    7e9c:	aa06      	add	r2, sp, #24
    7e9e:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.nfy_params = params;
    7ea2:	9609      	str	r6, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(handle, 0xffff, BT_UUID_GATT_CCC, NULL, 1,
    7ea4:	f88d 5018 	strb.w	r5, [sp, #24]
    7ea8:	f7ff fed4 	bl	7c54 <bt_gatt_foreach_attr_type>
	return data.err;
    7eac:	9807      	ldr	r0, [sp, #28]
    7eae:	e7ad      	b.n	7e0c <bt_gatt_notify_cb+0x30>
		return -EAGAIN;
    7eb0:	f06f 000a 	mvn.w	r0, #10
    7eb4:	e7aa      	b.n	7e0c <bt_gatt_notify_cb+0x30>
		return -ENOTCONN;
    7eb6:	f06f 0038 	mvn.w	r0, #56	; 0x38
    7eba:	e7a7      	b.n	7e0c <bt_gatt_notify_cb+0x30>
			return -EINVAL;
    7ebc:	f06f 0015 	mvn.w	r0, #21
    7ec0:	e7a4      	b.n	7e0c <bt_gatt_notify_cb+0x30>
    7ec2:	bf00      	nop
    7ec4:	200048a8 	.word	0x200048a8
    7ec8:	0000cb85 	.word	0x0000cb85
    7ecc:	00007a55 	.word	0x00007a55

00007ed0 <bt_gatt_indicate>:
{
    7ed0:	b570      	push	{r4, r5, r6, lr}
    7ed2:	4605      	mov	r5, r0
    7ed4:	b08a      	sub	sp, #40	; 0x28
    7ed6:	460e      	mov	r6, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    7ed8:	4837      	ldr	r0, [pc, #220]	; (7fb8 <bt_gatt_indicate+0xe8>)
    7eda:	2101      	movs	r1, #1
    7edc:	f004 fe4c 	bl	cb78 <atomic_test_bit>
    7ee0:	2800      	cmp	r0, #0
    7ee2:	d060      	beq.n	7fa6 <bt_gatt_indicate+0xd6>
	attr = params->attr;
    7ee4:	6870      	ldr	r0, [r6, #4]
    7ee6:	9004      	str	r0, [sp, #16]
	if (conn && conn->state != BT_CONN_CONNECTED) {
    7ee8:	b115      	cbz	r5, 7ef0 <bt_gatt_indicate+0x20>
    7eea:	7aab      	ldrb	r3, [r5, #10]
    7eec:	2b06      	cmp	r3, #6
    7eee:	d15d      	bne.n	7fac <bt_gatt_indicate+0xdc>
	handle = attr->handle ? : find_static_attr(attr);
    7ef0:	8a04      	ldrh	r4, [r0, #16]
    7ef2:	b93c      	cbnz	r4, 7f04 <bt_gatt_indicate+0x34>
    7ef4:	f7ff fb54 	bl	75a0 <find_static_attr>
	if (!handle) {
    7ef8:	4604      	mov	r4, r0
    7efa:	b918      	cbnz	r0, 7f04 <bt_gatt_indicate+0x34>
		return -ENOENT;
    7efc:	f06f 0001 	mvn.w	r0, #1
}
    7f00:	b00a      	add	sp, #40	; 0x28
    7f02:	bd70      	pop	{r4, r5, r6, pc}
	if (params->uuid) {
    7f04:	6832      	ldr	r2, [r6, #0]
    7f06:	b1b2      	cbz	r2, 7f36 <bt_gatt_indicate+0x66>
		bt_gatt_foreach_attr_type(handle, 0xffff, params->uuid,
    7f08:	a904      	add	r1, sp, #16
    7f0a:	9102      	str	r1, [sp, #8]
    7f0c:	492b      	ldr	r1, [pc, #172]	; (7fbc <bt_gatt_indicate+0xec>)
		attr = NULL;
    7f0e:	2300      	movs	r3, #0
		bt_gatt_foreach_attr_type(handle, 0xffff, params->uuid,
    7f10:	9101      	str	r1, [sp, #4]
    7f12:	2101      	movs	r1, #1
    7f14:	4620      	mov	r0, r4
    7f16:	9100      	str	r1, [sp, #0]
    7f18:	f64f 71ff 	movw	r1, #65535	; 0xffff
		attr = NULL;
    7f1c:	9304      	str	r3, [sp, #16]
		bt_gatt_foreach_attr_type(handle, 0xffff, params->uuid,
    7f1e:	f7ff fe99 	bl	7c54 <bt_gatt_foreach_attr_type>
		if (!attr) {
    7f22:	9804      	ldr	r0, [sp, #16]
    7f24:	2800      	cmp	r0, #0
    7f26:	d0e9      	beq.n	7efc <bt_gatt_indicate+0x2c>
		handle = attr->handle ? : find_static_attr(attr);
    7f28:	8a04      	ldrh	r4, [r0, #16]
    7f2a:	b924      	cbnz	r4, 7f36 <bt_gatt_indicate+0x66>
    7f2c:	f7ff fb38 	bl	75a0 <find_static_attr>
		if (!handle) {
    7f30:	4604      	mov	r4, r0
    7f32:	2800      	cmp	r0, #0
    7f34:	d0e2      	beq.n	7efc <bt_gatt_indicate+0x2c>
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
    7f36:	9b04      	ldr	r3, [sp, #16]
    7f38:	a905      	add	r1, sp, #20
    7f3a:	6818      	ldr	r0, [r3, #0]
    7f3c:	2300      	movs	r3, #0
    7f3e:	f88d 3014 	strb.w	r3, [sp, #20]
    7f42:	f642 0303 	movw	r3, #10243	; 0x2803
    7f46:	f8ad 3016 	strh.w	r3, [sp, #22]
    7f4a:	f004 f879 	bl	c040 <bt_uuid_cmp>
    7f4e:	b938      	cbnz	r0, 7f60 <bt_gatt_indicate+0x90>
		struct bt_gatt_chrc *chrc = params->attr->user_data;
    7f50:	6870      	ldr	r0, [r6, #4]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
    7f52:	68c3      	ldr	r3, [r0, #12]
    7f54:	799b      	ldrb	r3, [r3, #6]
    7f56:	069b      	lsls	r3, r3, #26
    7f58:	d52b      	bpl.n	7fb2 <bt_gatt_indicate+0xe2>
		handle = bt_gatt_attr_value_handle(params->attr);
    7f5a:	f7ff fe63 	bl	7c24 <bt_gatt_attr_value_handle>
    7f5e:	4604      	mov	r4, r0
	if (conn) {
    7f60:	b12d      	cbz	r5, 7f6e <bt_gatt_indicate+0x9e>
		return gatt_indicate(conn, handle, params);
    7f62:	4632      	mov	r2, r6
    7f64:	4621      	mov	r1, r4
    7f66:	4628      	mov	r0, r5
    7f68:	f7ff fbbc 	bl	76e4 <gatt_indicate>
    7f6c:	e7c8      	b.n	7f00 <bt_gatt_indicate+0x30>
	data.err = -ENOTCONN;
    7f6e:	f06f 0338 	mvn.w	r3, #56	; 0x38
    7f72:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
    7f74:	2302      	movs	r3, #2
    7f76:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(handle, 0xffff, BT_UUID_GATT_CCC, NULL, 1,
    7f7a:	f642 1302 	movw	r3, #10498	; 0x2902
    7f7e:	f8ad 301a 	strh.w	r3, [sp, #26]
    7f82:	ab07      	add	r3, sp, #28
    7f84:	9302      	str	r3, [sp, #8]
    7f86:	4b0e      	ldr	r3, [pc, #56]	; (7fc0 <bt_gatt_indicate+0xf0>)
    7f88:	4620      	mov	r0, r4
    7f8a:	9301      	str	r3, [sp, #4]
    7f8c:	2301      	movs	r3, #1
    7f8e:	aa06      	add	r2, sp, #24
    7f90:	9300      	str	r3, [sp, #0]
    7f92:	f64f 71ff 	movw	r1, #65535	; 0xffff
    7f96:	462b      	mov	r3, r5
	data.ind_params = params;
    7f98:	9609      	str	r6, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(handle, 0xffff, BT_UUID_GATT_CCC, NULL, 1,
    7f9a:	f88d 5018 	strb.w	r5, [sp, #24]
    7f9e:	f7ff fe59 	bl	7c54 <bt_gatt_foreach_attr_type>
	return data.err;
    7fa2:	9807      	ldr	r0, [sp, #28]
    7fa4:	e7ac      	b.n	7f00 <bt_gatt_indicate+0x30>
		return -EAGAIN;
    7fa6:	f06f 000a 	mvn.w	r0, #10
    7faa:	e7a9      	b.n	7f00 <bt_gatt_indicate+0x30>
		return -ENOTCONN;
    7fac:	f06f 0038 	mvn.w	r0, #56	; 0x38
    7fb0:	e7a6      	b.n	7f00 <bt_gatt_indicate+0x30>
			return -EINVAL;
    7fb2:	f06f 0015 	mvn.w	r0, #21
    7fb6:	e7a3      	b.n	7f00 <bt_gatt_indicate+0x30>
    7fb8:	200048a8 	.word	0x200048a8
    7fbc:	0000cb85 	.word	0x0000cb85
    7fc0:	00007a55 	.word	0x00007a55

00007fc4 <sc_process>:
{
    7fc4:	4603      	mov	r3, r0
    7fc6:	b513      	push	{r0, r1, r4, lr}
	sc_range[0] = sys_cpu_to_le16(sc->start);
    7fc8:	f850 2c04 	ldr.w	r2, [r0, #-4]
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
    7fcc:	f1a0 0118 	sub.w	r1, r0, #24
	sc_range[0] = sys_cpu_to_le16(sc->start);
    7fd0:	9201      	str	r2, [sp, #4]
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
    7fd2:	f100 0420 	add.w	r4, r0, #32
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    7fd6:	e8d4 2fef 	ldaex	r2, [r4]
    7fda:	f022 0201 	bic.w	r2, r2, #1
    7fde:	e8c4 2fe0 	stlex	r0, r2, [r4]
    7fe2:	2800      	cmp	r0, #0
    7fe4:	d1f7      	bne.n	7fd6 <sc_process+0x12>
	sc->params.attr = &_1_gatt_svc.attrs[2];
    7fe6:	4a0d      	ldr	r2, [pc, #52]	; (801c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1c>)
	sc->start = 0U;
    7fe8:	2000      	movs	r0, #0
	sc->params.attr = &_1_gatt_svc.attrs[2];
    7fea:	f843 2c14 	str.w	r2, [r3, #-20]
	sc->params.func = sc_indicate_rsp;
    7fee:	4a0c      	ldr	r2, [pc, #48]	; (8020 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x20>)
	sc->start = 0U;
    7ff0:	f823 0c04 	strh.w	r0, [r3, #-4]
	sc->params.func = sc_indicate_rsp;
    7ff4:	f843 2c10 	str.w	r2, [r3, #-16]
	sc->params.data = &sc_range[0];
    7ff8:	aa01      	add	r2, sp, #4
    7ffa:	f843 2c0c 	str.w	r2, [r3, #-12]
	sc->params.len = sizeof(sc_range);
    7ffe:	2204      	movs	r2, #4
	sc->end = 0U;
    8000:	f823 0c02 	strh.w	r0, [r3, #-2]
	sc->params.len = sizeof(sc_range);
    8004:	f823 2c08 	strh.w	r2, [r3, #-8]
	if (bt_gatt_indicate(NULL, &sc->params)) {
    8008:	f7ff ff62 	bl	7ed0 <bt_gatt_indicate>
    800c:	b918      	cbnz	r0, 8016 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x16>
	atomic_set_bit(sc->flags, SC_INDICATE_PENDING);
    800e:	2101      	movs	r1, #1
    8010:	4620      	mov	r0, r4
    8012:	f004 fda6 	bl	cb62 <atomic_set_bit>
}
    8016:	b002      	add	sp, #8
    8018:	bd10      	pop	{r4, pc}
    801a:	bf00      	nop
    801c:	0000ec78 	.word	0x0000ec78
    8020:	000077c1 	.word	0x000077c1

00008024 <update_ccc>:
	if (attr->write != bt_gatt_attr_write_ccc) {
    8024:	6882      	ldr	r2, [r0, #8]
    8026:	4b36      	ldr	r3, [pc, #216]	; (8100 <update_ccc+0xdc>)
{
    8028:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    802a:	429a      	cmp	r2, r3
{
    802c:	4605      	mov	r5, r0
	struct bt_conn *conn = data->conn;
    802e:	680c      	ldr	r4, [r1, #0]
	if (attr->write != bt_gatt_attr_write_ccc) {
    8030:	d11d      	bne.n	806e <update_ccc+0x4a>
	ccc = attr->user_data;
    8032:	68c6      	ldr	r6, [r0, #12]
		if (!ccc->cfg[i].value ||
    8034:	8933      	ldrh	r3, [r6, #8]
    8036:	b1d3      	cbz	r3, 806e <update_ccc+0x4a>
		    bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    8038:	1c71      	adds	r1, r6, #1
    803a:	4620      	mov	r0, r4
    803c:	f004 f972 	bl	c324 <bt_conn_addr_le_cmp>
		if (!ccc->cfg[i].value ||
    8040:	b9a8      	cbnz	r0, 806e <update_ccc+0x4a>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
    8042:	222a      	movs	r2, #42	; 0x2a
    8044:	4629      	mov	r1, r5
    8046:	4620      	mov	r0, r4
    8048:	f004 fec1 	bl	cdce <bt_gatt_check_perm>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
    804c:	2803      	cmp	r0, #3
    804e:	d111      	bne.n	8074 <update_ccc+0x50>
				BT_WARN("CCC %p not writable", attr);
    8050:	2302      	movs	r3, #2
    8052:	f04f 0200 	mov.w	r2, #0
    8056:	492b      	ldr	r1, [pc, #172]	; (8104 <update_ccc+0xe0>)
    8058:	f363 0207 	bfi	r2, r3, #0, #8
    805c:	4b2a      	ldr	r3, [pc, #168]	; (8108 <update_ccc+0xe4>)
    805e:	482b      	ldr	r0, [pc, #172]	; (810c <update_ccc+0xe8>)
    8060:	1a5b      	subs	r3, r3, r1
    8062:	08db      	lsrs	r3, r3, #3
    8064:	f363 128f 	bfi	r2, r3, #6, #10
    8068:	4629      	mov	r1, r5
    806a:	f003 fa96 	bl	b59a <log_1>
}
    806e:	2001      	movs	r0, #1
    8070:	b002      	add	sp, #8
    8072:	bd70      	pop	{r4, r5, r6, pc}
		gatt_ccc_changed(attr, ccc);
    8074:	4631      	mov	r1, r6
    8076:	4628      	mov	r0, r5
    8078:	f004 fd0b 	bl	ca92 <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
    807c:	4b24      	ldr	r3, [pc, #144]	; (8110 <update_ccc+0xec>)
    807e:	429e      	cmp	r6, r3
    8080:	d1f5      	bne.n	806e <update_ccc+0x4a>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
    8082:	f104 0170 	add.w	r1, r4, #112	; 0x70
    8086:	7a20      	ldrb	r0, [r4, #8]
    8088:	f7ff fb70 	bl	776c <find_sc_cfg>
	if (!cfg) {
    808c:	4605      	mov	r5, r0
    808e:	2800      	cmp	r0, #0
    8090:	d0ed      	beq.n	806e <update_ccc+0x4a>
	if (!(cfg->data.start || cfg->data.end)) {
    8092:	8902      	ldrh	r2, [r0, #8]
    8094:	8943      	ldrh	r3, [r0, #10]
    8096:	ea52 0103 	orrs.w	r1, r2, r3
    809a:	d0e8      	beq.n	806e <update_ccc+0x4a>
	index = bt_conn_index(conn);
    809c:	4620      	mov	r0, r4
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
    809e:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
    80a2:	f8ad 3006 	strh.w	r3, [sp, #6]
	index = bt_conn_index(conn);
    80a6:	f7fe f9f5 	bl	6494 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
    80aa:	2314      	movs	r3, #20
    80ac:	4919      	ldr	r1, [pc, #100]	; (8114 <update_ccc+0xf0>)
    80ae:	4a1a      	ldr	r2, [pc, #104]	; (8118 <update_ccc+0xf4>)
    80b0:	fb03 1300 	mla	r3, r3, r0, r1
    80b4:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
    80b6:	4a19      	ldr	r2, [pc, #100]	; (811c <update_ccc+0xf8>)
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
    80b8:	b200      	sxth	r0, r0
	sc_restore_params[index].func = sc_restore_rsp;
    80ba:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
    80bc:	aa01      	add	r2, sp, #4
    80be:	60da      	str	r2, [r3, #12]
	sc_restore_params[index].len = sizeof(sc_range);
    80c0:	2204      	movs	r2, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
    80c2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    80c6:	eb01 0180 	add.w	r1, r1, r0, lsl #2
	sc_restore_params[index].len = sizeof(sc_range);
    80ca:	821a      	strh	r2, [r3, #16]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
    80cc:	4620      	mov	r0, r4
    80ce:	f7ff feff 	bl	7ed0 <bt_gatt_indicate>
    80d2:	b168      	cbz	r0, 80f0 <update_ccc+0xcc>
		BT_ERR("SC restore indication failed");
    80d4:	2301      	movs	r3, #1
    80d6:	f04f 0100 	mov.w	r1, #0
    80da:	4a0a      	ldr	r2, [pc, #40]	; (8104 <update_ccc+0xe0>)
    80dc:	f363 0107 	bfi	r1, r3, #0, #8
    80e0:	4b09      	ldr	r3, [pc, #36]	; (8108 <update_ccc+0xe4>)
    80e2:	480f      	ldr	r0, [pc, #60]	; (8120 <update_ccc+0xfc>)
    80e4:	1a9b      	subs	r3, r3, r2
    80e6:	08db      	lsrs	r3, r3, #3
    80e8:	f363 118f 	bfi	r1, r3, #6, #10
    80ec:	f003 fa48 	bl	b580 <log_0>
	memset(&cfg->data, 0, sizeof(cfg->data));
    80f0:	2204      	movs	r2, #4
    80f2:	2100      	movs	r1, #0
    80f4:	f105 0008 	add.w	r0, r5, #8
    80f8:	f003 fefb 	bl	bef2 <memset>
	if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
    80fc:	e7b7      	b.n	806e <update_ccc+0x4a>
    80fe:	bf00      	nop
    8100:	00007811 	.word	0x00007811
    8104:	0000e6dc 	.word	0x0000e6dc
    8108:	0000e6f4 	.word	0x0000e6f4
    810c:	00010a9e 	.word	0x00010a9e
    8110:	20004a3c 	.word	0x20004a3c
    8114:	20000734 	.word	0x20000734
    8118:	0000ec78 	.word	0x0000ec78
    811c:	0000cb8b 	.word	0x0000cb8b
    8120:	00010ab2 	.word	0x00010ab2

00008124 <bt_gatt_connected>:
	}
	return 0;
}

void bt_gatt_connected(struct bt_conn *conn)
{
    8124:	b507      	push	{r0, r1, r2, lr}
	struct conn_data data;

	BT_DBG("conn %p", conn);

	data.conn = conn;
    8126:	9000      	str	r0, [sp, #0]
	data.sec = BT_SECURITY_L1;
    8128:	2001      	movs	r0, #1
		}

		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
	}

	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    812a:	466b      	mov	r3, sp
    812c:	4a04      	ldr	r2, [pc, #16]	; (8140 <bt_gatt_connected+0x1c>)
    812e:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.sec = BT_SECURITY_L1;
    8132:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    8136:	f004 fe3d 	bl	cdb4 <bt_gatt_foreach_attr>
	}

#if defined(CONFIG_BT_GATT_CLIENT)
	add_subscriptions(conn);
#endif /* CONFIG_BT_GATT_CLIENT */
}
    813a:	b003      	add	sp, #12
    813c:	f85d fb04 	ldr.w	pc, [sp], #4
    8140:	00008025 	.word	0x00008025

00008144 <db_hash_read>:
{
    8144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8146:	4604      	mov	r4, r0
 * @return Remaining time (in milliseconds).
 * @req K-DWORK-001
 */
static inline s32_t k_delayed_work_remaining_get(struct k_delayed_work *work)
{
	return k_ticks_to_ms_floor64(z_timeout_remaining(&work->timeout));
    8148:	4814      	ldr	r0, [pc, #80]	; (819c <db_hash_read+0x58>)
    814a:	461f      	mov	r7, r3
    814c:	4616      	mov	r6, r2
    814e:	f8bd 5018 	ldrh.w	r5, [sp, #24]
    8152:	f002 f8c9 	bl	a2e8 <z_timeout_remaining>
		}
	} else {
		if (result32) {
			return (u32_t)((t * to_hz + off) / from_hz);
		} else {
			return (t * to_hz + off) / from_hz;
    8156:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    815a:	fb80 0103 	smull	r0, r1, r0, r3
    815e:	0bc3      	lsrs	r3, r0, #15
	if (k_delayed_work_remaining_get(&db_hash_work)) {
    8160:	ea53 4341 	orrs.w	r3, r3, r1, lsl #17
    8164:	d004      	beq.n	8170 <db_hash_read+0x2c>
		k_delayed_work_cancel(&db_hash_work);
    8166:	480e      	ldr	r0, [pc, #56]	; (81a0 <db_hash_read+0x5c>)
    8168:	f005 ff87 	bl	e07a <k_delayed_work_cancel>
		db_hash_gen(true);
    816c:	f7ff fdd0 	bl	7d10 <db_hash_gen.isra.9>
	bt_gatt_change_aware(conn, true);
    8170:	2101      	movs	r1, #1
    8172:	4620      	mov	r0, r4
    8174:	f004 fe98 	bl	cea8 <bt_gatt_change_aware>
	if (offset > value_len) {
    8178:	2d10      	cmp	r5, #16
    817a:	d80c      	bhi.n	8196 <db_hash_read+0x52>
	len = MIN(buf_len, value_len - offset);
    817c:	f1c5 0410 	rsb	r4, r5, #16
    8180:	42bc      	cmp	r4, r7
    8182:	bfa8      	it	ge
    8184:	463c      	movge	r4, r7
	memcpy(buf, (u8_t *)value + offset, len);
    8186:	4907      	ldr	r1, [pc, #28]	; (81a4 <db_hash_read+0x60>)
    8188:	4622      	mov	r2, r4
    818a:	4429      	add	r1, r5
    818c:	4630      	mov	r0, r6
    818e:	f003 fe86 	bl	be9e <memcpy>
}
    8192:	4620      	mov	r0, r4
    8194:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    8196:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash,
    819a:	e7fa      	b.n	8192 <db_hash_read+0x4e>
    819c:	200006e0 	.word	0x200006e0
    81a0:	200006d4 	.word	0x200006d4
    81a4:	2000151e 	.word	0x2000151e

000081a8 <bt_gatt_disconnected>:
	return 0;

}

void bt_gatt_disconnected(struct bt_conn *conn)
{
    81a8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    81aa:	4605      	mov	r5, r0
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    81ac:	4603      	mov	r3, r0
    81ae:	4a18      	ldr	r2, [pc, #96]	; (8210 <bt_gatt_disconnected+0x68>)
    81b0:	f64f 71ff 	movw	r1, #65535	; 0xffff
    81b4:	2001      	movs	r0, #1
    81b6:	f004 fdfd 	bl	cdb4 <bt_gatt_foreach_attr>
	cfg = find_cf_cfg(conn);
    81ba:	4628      	mov	r0, r5
    81bc:	f7ff fae6 	bl	778c <find_cf_cfg>
	if (!cfg) {
    81c0:	4604      	mov	r4, r0
    81c2:	b1e8      	cbz	r0, 8200 <bt_gatt_disconnected+0x58>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    81c4:	f105 0670 	add.w	r6, r5, #112	; 0x70
    81c8:	7a28      	ldrb	r0, [r5, #8]
    81ca:	4631      	mov	r1, r6
    81cc:	f004 f80e 	bl	c1ec <bt_addr_le_is_bonded>
    81d0:	1c63      	adds	r3, r4, #1
    81d2:	4605      	mov	r5, r0
    81d4:	b9b0      	cbnz	r0, 8204 <bt_gatt_disconnected+0x5c>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
    81d6:	9000      	str	r0, [sp, #0]
    81d8:	2207      	movs	r2, #7
    81da:	f8cd 0003 	str.w	r0, [sp, #3]
    81de:	4669      	mov	r1, sp
    81e0:	4618      	mov	r0, r3
    81e2:	f003 fe5c 	bl	be9e <memcpy>
	memset(cfg->data, 0, sizeof(cfg->data));
    81e6:	f104 0008 	add.w	r0, r4, #8
    81ea:	2201      	movs	r2, #1
    81ec:	4629      	mov	r1, r5
    81ee:	f003 fe80 	bl	bef2 <memset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    81f2:	340c      	adds	r4, #12
    81f4:	e8d4 3fef 	ldaex	r3, [r4]
    81f8:	e8c4 5fe2 	stlex	r2, r5, [r4]
    81fc:	2a00      	cmp	r2, #0
    81fe:	d1f9      	bne.n	81f4 <bt_gatt_disconnected+0x4c>
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
    8200:	b002      	add	sp, #8
    8202:	bd70      	pop	{r4, r5, r6, pc}
    8204:	2207      	movs	r2, #7
    8206:	4631      	mov	r1, r6
    8208:	4618      	mov	r0, r3
    820a:	f003 fe48 	bl	be9e <memcpy>
    820e:	e7f7      	b.n	8200 <bt_gatt_disconnected+0x58>
    8210:	00007b11 	.word	0x00007b11

00008214 <bt_smp_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_l2cap_le_chan *smp = &bt_smp_pool[i];

		if (smp->chan.conn) {
    8214:	4a0d      	ldr	r2, [pc, #52]	; (824c <bt_smp_accept+0x38>)
{
    8216:	b508      	push	{r3, lr}
		if (smp->chan.conn) {
    8218:	6813      	ldr	r3, [r2, #0]
    821a:	b923      	cbnz	r3, 8226 <bt_smp_accept+0x12>
			continue;
		}

		smp->chan.ops = &ops;
    821c:	480c      	ldr	r0, [pc, #48]	; (8250 <bt_smp_accept+0x3c>)
    821e:	6050      	str	r0, [r2, #4]

		*chan = &smp->chan;

		return 0;
    8220:	4618      	mov	r0, r3
		*chan = &smp->chan;
    8222:	600a      	str	r2, [r1, #0]
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
}
    8224:	bd08      	pop	{r3, pc}
	BT_ERR("No available SMP context for conn %p", conn);
    8226:	2301      	movs	r3, #1
    8228:	f04f 0200 	mov.w	r2, #0
    822c:	4909      	ldr	r1, [pc, #36]	; (8254 <bt_smp_accept+0x40>)
    822e:	f363 0207 	bfi	r2, r3, #0, #8
    8232:	4b09      	ldr	r3, [pc, #36]	; (8258 <bt_smp_accept+0x44>)
    8234:	1a5b      	subs	r3, r3, r1
    8236:	08db      	lsrs	r3, r3, #3
    8238:	4601      	mov	r1, r0
    823a:	f363 128f 	bfi	r2, r3, #6, #10
    823e:	4807      	ldr	r0, [pc, #28]	; (825c <bt_smp_accept+0x48>)
    8240:	f003 f9ab 	bl	b59a <log_1>
	return -ENOMEM;
    8244:	f06f 000b 	mvn.w	r0, #11
    8248:	e7ec      	b.n	8224 <bt_smp_accept+0x10>
    824a:	bf00      	nop
    824c:	20000748 	.word	0x20000748
    8250:	0000ed7c 	.word	0x0000ed7c
    8254:	0000e6dc 	.word	0x0000e6dc
    8258:	0000e71c 	.word	0x0000e71c
    825c:	00010acf 	.word	0x00010acf

00008260 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
    8260:	4b01      	ldr	r3, [pc, #4]	; (8268 <net_buf_pool_get+0x8>)
    8262:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    8266:	4770      	bx	lr
    8268:	20004d04 	.word	0x20004d04

0000826c <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    826c:	7982      	ldrb	r2, [r0, #6]

	return buf - pool->__bufs;
    826e:	4b04      	ldr	r3, [pc, #16]	; (8280 <net_buf_id+0x14>)
    8270:	eb03 1342 	add.w	r3, r3, r2, lsl #5
    8274:	69db      	ldr	r3, [r3, #28]
    8276:	1ac0      	subs	r0, r0, r3
}
    8278:	4b02      	ldr	r3, [pc, #8]	; (8284 <net_buf_id+0x18>)
	return buf - pool->__bufs;
    827a:	10c0      	asrs	r0, r0, #3
}
    827c:	4358      	muls	r0, r3
    827e:	4770      	bx	lr
    8280:	20004d04 	.word	0x20004d04
    8284:	aaaaaaab 	.word	0xaaaaaaab

00008288 <fixed_data_alloc>:
	.ref   = generic_data_ref,
	.unref = mem_pool_data_unref,
};

static u8_t *fixed_data_alloc(struct net_buf *buf, size_t *size, s32_t timeout)
{
    8288:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
    828a:	4b09      	ldr	r3, [pc, #36]	; (82b0 <fixed_data_alloc+0x28>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    828c:	7982      	ldrb	r2, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
    828e:	eb03 1342 	add.w	r3, r3, r2, lsl #5
    8292:	699b      	ldr	r3, [r3, #24]

	*size = MIN(fixed->data_size, *size);
    8294:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
    8296:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
    8298:	6823      	ldr	r3, [r4, #0]
    829a:	429a      	cmp	r2, r3
    829c:	bf94      	ite	ls
    829e:	600a      	strls	r2, [r1, #0]
    82a0:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
    82a2:	f7ff ffe3 	bl	826c <net_buf_id>
    82a6:	e9d4 2300 	ldrd	r2, r3, [r4]
}
    82aa:	fb02 3000 	mla	r0, r2, r0, r3
    82ae:	bd10      	pop	{r4, pc}
    82b0:	20004d04 	.word	0x20004d04

000082b4 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  s32_t timeout)
#endif
{
    82b4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    82b8:	4605      	mov	r5, r0
    82ba:	9101      	str	r1, [sp, #4]
    82bc:	4616      	mov	r6, r2
	u32_t alloc_start = k_uptime_get_32();
    82be:	f004 fe45 	bl	cf4c <k_uptime_get_32>
    82c2:	4607      	mov	r7, r0
	__asm__ volatile(
    82c4:	f04f 0320 	mov.w	r3, #32
    82c8:	f3ef 8811 	mrs	r8, BASEPRI
    82cc:	f383 8811 	msr	BASEPRI, r3
    82d0:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
    82d4:	8a6b      	ldrh	r3, [r5, #18]
    82d6:	2b00      	cmp	r3, #0
    82d8:	d041      	beq.n	835e <net_buf_alloc_len+0xaa>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
    82da:	8a2a      	ldrh	r2, [r5, #16]
    82dc:	429a      	cmp	r2, r3
    82de:	d92c      	bls.n	833a <net_buf_alloc_len+0x86>
	return z_impl_k_queue_get(queue, timeout);
    82e0:	2100      	movs	r1, #0
    82e2:	4628      	mov	r0, r5
    82e4:	f005 fce3 	bl	dcae <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
    82e8:	4604      	mov	r4, r0
    82ea:	b330      	cbz	r0, 833a <net_buf_alloc_len+0x86>
	__asm__ volatile(
    82ec:	f388 8811 	msr	BASEPRI, r8
    82f0:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
    82f4:	9b01      	ldr	r3, [sp, #4]
    82f6:	2b00      	cmp	r3, #0
    82f8:	d040      	beq.n	837c <net_buf_alloc_len+0xc8>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (timeout != K_NO_WAIT && timeout != K_FOREVER) {
    82fa:	1c73      	adds	r3, r6, #1
    82fc:	2b01      	cmp	r3, #1
    82fe:	d906      	bls.n	830e <net_buf_alloc_len+0x5a>
			u32_t diff = k_uptime_get_32() - alloc_start;
    8300:	f004 fe24 	bl	cf4c <k_uptime_get_32>
    8304:	1bc0      	subs	r0, r0, r7

			timeout -= MIN(timeout, diff);
    8306:	42b0      	cmp	r0, r6
    8308:	bf94      	ite	ls
    830a:	1a36      	subls	r6, r6, r0
    830c:	1bb6      	subhi	r6, r6, r6
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    830e:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
    8310:	4f20      	ldr	r7, [pc, #128]	; (8394 <net_buf_alloc_len+0xe0>)
    8312:	4632      	mov	r2, r6
    8314:	eb07 1343 	add.w	r3, r7, r3, lsl #5
    8318:	699b      	ldr	r3, [r3, #24]
    831a:	a901      	add	r1, sp, #4
    831c:	681b      	ldr	r3, [r3, #0]
    831e:	4620      	mov	r0, r4
    8320:	681b      	ldr	r3, [r3, #0]
    8322:	4798      	blx	r3
    8324:	4605      	mov	r5, r0
		}

		buf->__buf = data_alloc(buf, &size, timeout);
    8326:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
    8328:	bb48      	cbnz	r0, 837e <net_buf_alloc_len+0xca>
	k_lifo_put(&pool->free, buf);
    832a:	79a0      	ldrb	r0, [r4, #6]
    832c:	4621      	mov	r1, r4
    832e:	eb07 1040 	add.w	r0, r7, r0, lsl #5
    8332:	f005 fc93 	bl	dc5c <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
    8336:	462c      	mov	r4, r5
    8338:	e01c      	b.n	8374 <net_buf_alloc_len+0xc0>
		uninit_count = pool->uninit_count--;
    833a:	8a6b      	ldrh	r3, [r5, #18]
    833c:	1e5a      	subs	r2, r3, #1
    833e:	826a      	strh	r2, [r5, #18]
    8340:	f388 8811 	msr	BASEPRI, r8
    8344:	f3bf 8f6f 	isb	sy
	buf = &pool->__bufs[pool->buf_count - uninit_count];
    8348:	2218      	movs	r2, #24
    834a:	8a2c      	ldrh	r4, [r5, #16]
    834c:	1ae4      	subs	r4, r4, r3
    834e:	69eb      	ldr	r3, [r5, #28]
    8350:	fb02 3404 	mla	r4, r2, r4, r3
	return pool - _net_buf_pool_list;
    8354:	4b0f      	ldr	r3, [pc, #60]	; (8394 <net_buf_alloc_len+0xe0>)
    8356:	1aed      	subs	r5, r5, r3
    8358:	116d      	asrs	r5, r5, #5
	buf->pool_id = pool_id(pool);
    835a:	71a5      	strb	r5, [r4, #6]
		goto success;
    835c:	e7ca      	b.n	82f4 <net_buf_alloc_len+0x40>
    835e:	f388 8811 	msr	BASEPRI, r8
    8362:	f3bf 8f6f 	isb	sy
    8366:	4631      	mov	r1, r6
    8368:	4628      	mov	r0, r5
    836a:	f005 fca0 	bl	dcae <z_impl_k_queue_get>
	if (!buf) {
    836e:	4604      	mov	r4, r0
    8370:	2800      	cmp	r0, #0
    8372:	d1bf      	bne.n	82f4 <net_buf_alloc_len+0x40>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	pool->avail_count--;
	__ASSERT_NO_MSG(pool->avail_count >= 0);
#endif
	return buf;
}
    8374:	4620      	mov	r0, r4
    8376:	b002      	add	sp, #8
    8378:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		buf->__buf = NULL;
    837c:	6123      	str	r3, [r4, #16]
	buf->frags = NULL;
    837e:	2300      	movs	r3, #0
	buf->ref   = 1U;
    8380:	2201      	movs	r2, #1
	buf->frags = NULL;
    8382:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
    8384:	80a2      	strh	r2, [r4, #4]
	buf->len  = 0U;
    8386:	81a3      	strh	r3, [r4, #12]
	buf->size  = size;
    8388:	9a01      	ldr	r2, [sp, #4]
	buf->data = buf->__buf;
    838a:	6923      	ldr	r3, [r4, #16]
    838c:	81e2      	strh	r2, [r4, #14]
    838e:	60a3      	str	r3, [r4, #8]
	return buf;
    8390:	e7f0      	b.n	8374 <net_buf_alloc_len+0xc0>
    8392:	bf00      	nop
    8394:	20004d04 	.word	0x20004d04

00008398 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
    8398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    839a:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
    839c:	2600      	movs	r6, #0
    839e:	4d14      	ldr	r5, [pc, #80]	; (83f0 <net_buf_unref+0x58>)
	while (buf) {
    83a0:	b904      	cbnz	r4, 83a4 <net_buf_unref+0xc>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
    83a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (--buf->ref > 0) {
    83a4:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
    83a6:	6827      	ldr	r7, [r4, #0]
		if (--buf->ref > 0) {
    83a8:	3b01      	subs	r3, #1
    83aa:	b2db      	uxtb	r3, r3
    83ac:	7123      	strb	r3, [r4, #4]
    83ae:	2b00      	cmp	r3, #0
    83b0:	d1f7      	bne.n	83a2 <net_buf_unref+0xa>
		if (buf->__buf) {
    83b2:	6921      	ldr	r1, [r4, #16]
    83b4:	b159      	cbz	r1, 83ce <net_buf_unref+0x36>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
    83b6:	7963      	ldrb	r3, [r4, #5]
    83b8:	079b      	lsls	r3, r3, #30
    83ba:	d407      	bmi.n	83cc <net_buf_unref+0x34>
	pool->alloc->cb->unref(buf, data);
    83bc:	79a3      	ldrb	r3, [r4, #6]
    83be:	4620      	mov	r0, r4
    83c0:	eb05 1343 	add.w	r3, r5, r3, lsl #5
    83c4:	699b      	ldr	r3, [r3, #24]
    83c6:	681b      	ldr	r3, [r3, #0]
    83c8:	689b      	ldr	r3, [r3, #8]
    83ca:	4798      	blx	r3
			buf->__buf = NULL;
    83cc:	6126      	str	r6, [r4, #16]
		pool = net_buf_pool_get(buf->pool_id);
    83ce:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
    83d0:	60a6      	str	r6, [r4, #8]
		if (pool->destroy) {
    83d2:	eb05 1340 	add.w	r3, r5, r0, lsl #5
    83d6:	695b      	ldr	r3, [r3, #20]
		buf->frags = NULL;
    83d8:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
    83da:	b11b      	cbz	r3, 83e4 <net_buf_unref+0x4c>
			pool->destroy(buf);
    83dc:	4620      	mov	r0, r4
    83de:	4798      	blx	r3
{
    83e0:	463c      	mov	r4, r7
    83e2:	e7dd      	b.n	83a0 <net_buf_unref+0x8>
	k_lifo_put(&pool->free, buf);
    83e4:	4621      	mov	r1, r4
    83e6:	eb05 1040 	add.w	r0, r5, r0, lsl #5
    83ea:	f005 fc37 	bl	dc5c <k_queue_prepend>
    83ee:	e7f7      	b.n	83e0 <net_buf_unref+0x48>
    83f0:	20004d04 	.word	0x20004d04

000083f4 <gpio_nrfx_init>:
#endif
	}
}

static int gpio_nrfx_init(struct device *port)
{
    83f4:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
    83f6:	4b09      	ldr	r3, [pc, #36]	; (841c <gpio_nrfx_init+0x28>)
    83f8:	781a      	ldrb	r2, [r3, #0]
    83fa:	b96a      	cbnz	r2, 8418 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
    83fc:	2101      	movs	r1, #1
		IRQ_CONNECT(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0,
    83fe:	200d      	movs	r0, #13
		gpio_initialized = true;
    8400:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0,
    8402:	2105      	movs	r1, #5
    8404:	f7f9 fd8e 	bl	1f24 <z_arm_irq_priority_set>
			    DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0_PRIORITY,
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0);
    8408:	200d      	movs	r0, #13
    840a:	f7f9 fd7b 	bl	1f04 <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
    840e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    8412:	4b03      	ldr	r3, [pc, #12]	; (8420 <gpio_nrfx_init+0x2c>)
    8414:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
    8418:	2000      	movs	r0, #0
    841a:	bd08      	pop	{r3, pc}
    841c:	2000152e 	.word	0x2000152e
    8420:	5000d000 	.word	0x5000d000

00008424 <nrf_gpio_cfg_sense_set>:
{
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
    8424:	281f      	cmp	r0, #31
        return NRF_P0;
    }
    else
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
        return NRF_P1;
    8426:	bf8a      	itet	hi
    8428:	4b07      	ldrhi	r3, [pc, #28]	; (8448 <nrf_gpio_cfg_sense_set+0x24>)
        return NRF_P0;
    842a:	4b08      	ldrls	r3, [pc, #32]	; (844c <nrf_gpio_cfg_sense_set+0x28>)
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
    842c:	f000 001f 	andhi.w	r0, r0, #31
NRF_STATIC_INLINE void nrf_gpio_cfg_sense_set(uint32_t             pin_number,
                                              nrf_gpio_pin_sense_t sense_config)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    /*lint -e{845} // A zero has been given as right argument to operator '|'" */
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    8430:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    8434:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    8438:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000

    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    843c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    8440:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
    8444:	4770      	bx	lr
    8446:	bf00      	nop
    8448:	50842800 	.word	0x50842800
    844c:	50842500 	.word	0x50842500

00008450 <gpiote_pin_int_cfg>:
{
    8450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return port->config->config_info;
    8452:	6803      	ldr	r3, [r0, #0]
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    8454:	f001 051f 	and.w	r5, r1, #31
    8458:	689b      	ldr	r3, [r3, #8]
{
    845a:	460e      	mov	r6, r1
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    845c:	791b      	ldrb	r3, [r3, #4]
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
    845e:	494c      	ldr	r1, [pc, #304]	; (8590 <gpiote_pin_int_cfg+0x140>)
    8460:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    8464:	2300      	movs	r3, #0
    8466:	f8d1 2304 	ldr.w	r2, [r1, #772]	; 0x304
	struct gpio_nrfx_data *data = get_port_data(port);
    846a:	6887      	ldr	r7, [r0, #8]
    846c:	b2d2      	uxtb	r2, r2
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    846e:	f503 70a2 	add.w	r0, r3, #324	; 0x144
    8472:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    8476:	f3c0 2005 	ubfx	r0, r0, #8, #6
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
    847a:	4285      	cmp	r5, r0
    847c:	d16c      	bne.n	8558 <gpiote_pin_int_cfg+0x108>
		    && (intenset & BIT(i))) {
    847e:	fa22 f003 	lsr.w	r0, r2, r3
    8482:	07c0      	lsls	r0, r0, #31
    8484:	d568      	bpl.n	8558 <gpiote_pin_int_cfg+0x108>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
    8486:	009a      	lsls	r2, r3, #2
    8488:	f102 42a0 	add.w	r2, r2, #1342177280	; 0x50000000
    848c:	f502 4250 	add.w	r2, r2, #53248	; 0xd000
    8490:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    8494:	f020 0001 	bic.w	r0, r0, #1
    8498:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
    849c:	2201      	movs	r2, #1
    849e:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENCLR = mask;
    84a2:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
    84a6:	4628      	mov	r0, r5
    84a8:	2100      	movs	r1, #0
    84aa:	f7ff ffbb 	bl	8424 <nrf_gpio_cfg_sense_set>
	if ((data->pin_int_en & BIT(pin)) && (data->int_en & BIT(pin))) {
    84ae:	68b8      	ldr	r0, [r7, #8]
    84b0:	40f0      	lsrs	r0, r6
    84b2:	f010 0001 	ands.w	r0, r0, #1
    84b6:	d04e      	beq.n	8556 <gpiote_pin_int_cfg+0x106>
    84b8:	68f8      	ldr	r0, [r7, #12]
    84ba:	40f0      	lsrs	r0, r6
    84bc:	f010 0001 	ands.w	r0, r0, #1
    84c0:	d049      	beq.n	8556 <gpiote_pin_int_cfg+0x106>
		if (data->trig_edge & BIT(pin)) {
    84c2:	6978      	ldr	r0, [r7, #20]
    84c4:	40f0      	lsrs	r0, r6
    84c6:	f010 0401 	ands.w	r4, r0, #1
    84ca:	d051      	beq.n	8570 <gpiote_pin_int_cfg+0x120>
			if (data->double_edge & BIT(pin)) {
    84cc:	69bb      	ldr	r3, [r7, #24]
    84ce:	40f3      	lsrs	r3, r6
    84d0:	07db      	lsls	r3, r3, #31
    84d2:	d445      	bmi.n	8560 <gpiote_pin_int_cfg+0x110>
			} else if (((data->active_level & BIT(pin)) != 0U)
    84d4:	693b      	ldr	r3, [r7, #16]
				   ^ ((BIT(pin) & data->inverted) != 0)) {
    84d6:	69fa      	ldr	r2, [r7, #28]
			} else if (((data->active_level & BIT(pin)) != 0U)
    84d8:	40f3      	lsrs	r3, r6
				   ^ ((BIT(pin) & data->inverted) != 0)) {
    84da:	fa22 f606 	lsr.w	r6, r2, r6
			} else if (((data->active_level & BIT(pin)) != 0U)
    84de:	f003 0301 	and.w	r3, r3, #1
    84e2:	f006 0601 	and.w	r6, r6, #1
				pol = NRF_GPIOTE_POLARITY_HITOLO;
    84e6:	42b3      	cmp	r3, r6
    84e8:	bf14      	ite	ne
    84ea:	2601      	movne	r6, #1
    84ec:	2602      	moveq	r6, #2
    84ee:	2100      	movs	r1, #0
    p_reg->CONFIG[idx] = 0;
}

NRF_STATIC_INLINE bool nrf_gpiote_te_is_enabled(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return (p_reg->CONFIG[idx] & GPIOTE_CONFIG_MODE_Msk) != GPIOTE_CONFIG_MODE_Disabled;
    84f0:	4c27      	ldr	r4, [pc, #156]	; (8590 <gpiote_pin_int_cfg+0x140>)
    84f2:	f501 73a2 	add.w	r3, r1, #324	; 0x144
    84f6:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
		if (!nrf_gpiote_te_is_enabled(NRF_GPIOTE, channel)) {
    84fa:	f010 0003 	ands.w	r0, r0, #3
    84fe:	d131      	bne.n	8564 <gpiote_pin_int_cfg+0x114>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    8500:	008b      	lsls	r3, r1, #2
    8502:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    8506:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    850a:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    850e:	022d      	lsls	r5, r5, #8
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    8510:	f422 324f 	bic.w	r2, r2, #211968	; 0x33c00
    8514:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    8518:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    851c:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    8520:	f405 557c 	and.w	r5, r5, #16128	; 0x3f00
    8524:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
    8528:	4316      	orrs	r6, r2
			nrf_gpiote_event_t evt =
    852a:	f101 0240 	add.w	r2, r1, #64	; 0x40
    852e:	0092      	lsls	r2, r2, #2
    return ((uint32_t)p_reg + event);
    8530:	b292      	uxth	r2, r2
    8532:	f102 42a0 	add.w	r2, r2, #1342177280	; 0x50000000
    8536:	f502 4250 	add.w	r2, r2, #53248	; 0xd000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    853a:	f8c3 6510 	str.w	r6, [r3, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    853e:	6010      	str	r0, [r2, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    8540:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    8544:	f042 0201 	orr.w	r2, r2, #1
    8548:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
			nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
    854c:	2301      	movs	r3, #1
    854e:	fa03 f101 	lsl.w	r1, r3, r1
    p_reg->INTENSET = mask;
    8552:	f8c4 1304 	str.w	r1, [r4, #772]	; 0x304
}
    8556:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    8558:	3301      	adds	r3, #1
    855a:	2b08      	cmp	r3, #8
    855c:	d187      	bne.n	846e <gpiote_pin_int_cfg+0x1e>
    855e:	e7a2      	b.n	84a6 <gpiote_pin_int_cfg+0x56>
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
    8560:	2603      	movs	r6, #3
    8562:	e7c4      	b.n	84ee <gpiote_pin_int_cfg+0x9e>
    8564:	3101      	adds	r1, #1
	for (u8_t channel = 0; channel < GPIOTE_CH_NUM; ++channel) {
    8566:	2908      	cmp	r1, #8
    8568:	d1c3      	bne.n	84f2 <gpiote_pin_int_cfg+0xa2>
	return -ENODEV;
    856a:	f06f 0012 	mvn.w	r0, #18
    856e:	e7f2      	b.n	8556 <gpiote_pin_int_cfg+0x106>
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
    8570:	693b      	ldr	r3, [r7, #16]
    8572:	69fa      	ldr	r2, [r7, #28]
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    8574:	4628      	mov	r0, r5
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
    8576:	4053      	eors	r3, r2
    8578:	fa23 f606 	lsr.w	r6, r3, r6
		return NRF_GPIO_PIN_SENSE_HIGH;
    857c:	f016 0f01 	tst.w	r6, #1
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    8580:	bf0c      	ite	eq
    8582:	2103      	moveq	r1, #3
    8584:	2102      	movne	r1, #2
    8586:	f7ff ff4d 	bl	8424 <nrf_gpio_cfg_sense_set>
	int res = 0;
    858a:	4620      	mov	r0, r4
    858c:	e7e3      	b.n	8556 <gpiote_pin_int_cfg+0x106>
    858e:	bf00      	nop
    8590:	5000d000 	.word	0x5000d000

00008594 <gpio_nrfx_config>:
{
    8594:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8598:	4680      	mov	r8, r0
	struct gpio_nrfx_data *data = get_port_data(port);
    859a:	6885      	ldr	r5, [r0, #8]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
    859c:	f403 4070 	and.w	r0, r3, #61440	; 0xf000
    85a0:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
{
    85a4:	461e      	mov	r6, r3
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
    85a6:	d03e      	beq.n	8626 <gpio_nrfx_config+0x92>
    85a8:	dc09      	bgt.n	85be <gpio_nrfx_config+0x2a>
    85aa:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
    85ae:	d03c      	beq.n	862a <gpio_nrfx_config+0x96>
    85b0:	f5b0 5f40 	cmp.w	r0, #12288	; 0x3000
    85b4:	d03b      	beq.n	862e <gpio_nrfx_config+0x9a>
    85b6:	b190      	cbz	r0, 85de <gpio_nrfx_config+0x4a>
		return -EINVAL;
    85b8:	f06f 0015 	mvn.w	r0, #21
    85bc:	e031      	b.n	8622 <gpio_nrfx_config+0x8e>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
    85be:	f5b0 4fe0 	cmp.w	r0, #28672	; 0x7000
    85c2:	d036      	beq.n	8632 <gpio_nrfx_config+0x9e>
    85c4:	dc04      	bgt.n	85d0 <gpio_nrfx_config+0x3c>
    85c6:	f5b0 4fa0 	cmp.w	r0, #20480	; 0x5000
    85ca:	d1f5      	bne.n	85b8 <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_H0H1;
    85cc:	2003      	movs	r0, #3
    85ce:	e006      	b.n	85de <gpio_nrfx_config+0x4a>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
    85d0:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
    85d4:	d02f      	beq.n	8636 <gpio_nrfx_config+0xa2>
    85d6:	f5b0 4f50 	cmp.w	r0, #53248	; 0xd000
    85da:	d1ed      	bne.n	85b8 <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_H0D1;
    85dc:	2007      	movs	r0, #7
	if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
    85de:	f406 7740 	and.w	r7, r6, #768	; 0x300
    85e2:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
    85e6:	d028      	beq.n	863a <gpio_nrfx_config+0xa6>
		pull = NRF_GPIO_PIN_NOPULL;
    85e8:	f5a7 7400 	sub.w	r4, r7, #512	; 0x200
    85ec:	4263      	negs	r3, r4
    85ee:	4163      	adcs	r3, r4
	if (access_op == GPIO_ACCESS_BY_PORT) {
    85f0:	2901      	cmp	r1, #1
		from_pin = pin;
    85f2:	bf19      	ittee	ne
    85f4:	b2d4      	uxtbne	r4, r2
		to_pin   = pin;
    85f6:	46a1      	movne	r9, r4
		to_pin   = 31U;
    85f8:	f04f 091f 	moveq.w	r9, #31
		from_pin = 0U;
    85fc:	2400      	moveq	r4, #0
    85fe:	f04f 0a01 	mov.w	sl, #1
	dir = ((flags & GPIO_DIR_MASK) == GPIO_DIR_OUT)
    8602:	f006 0c01 	and.w	ip, r6, #1
                               | ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos)
    8606:	ea4f 074c 	mov.w	r7, ip, lsl #1
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
    860a:	ea47 070c 	orr.w	r7, r7, ip
    860e:	ea47 2000 	orr.w	r0, r7, r0, lsl #8
    8612:	ea40 0783 	orr.w	r7, r0, r3, lsl #2
        return NRF_P1;
    8616:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 86bc <gpio_nrfx_config+0x128>
        return NRF_P0;
    861a:	4b27      	ldr	r3, [pc, #156]	; (86b8 <gpio_nrfx_config+0x124>)
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    861c:	45a1      	cmp	r9, r4
    861e:	d20e      	bcs.n	863e <gpio_nrfx_config+0xaa>
	return 0;
    8620:	2000      	movs	r0, #0
}
    8622:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		drive = NRF_GPIO_PIN_S0H1;
    8626:	2002      	movs	r0, #2
    8628:	e7d9      	b.n	85de <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_H0S1;
    862a:	2001      	movs	r0, #1
    862c:	e7d7      	b.n	85de <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_D0S1;
    862e:	2004      	movs	r0, #4
    8630:	e7d5      	b.n	85de <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_D0H1;
    8632:	2005      	movs	r0, #5
    8634:	e7d3      	b.n	85de <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_S0D1;
    8636:	2006      	movs	r0, #6
    8638:	e7d1      	b.n	85de <gpio_nrfx_config+0x4a>
		pull = NRF_GPIO_PIN_PULLUP;
    863a:	2303      	movs	r3, #3
    863c:	e7d8      	b.n	85f0 <gpio_nrfx_config+0x5c>
	return port->config->config_info;
    863e:	f8d8 2000 	ldr.w	r2, [r8]
		nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num,
    8642:	6892      	ldr	r2, [r2, #8]
    8644:	7911      	ldrb	r1, [r2, #4]
    8646:	f004 021f 	and.w	r2, r4, #31
    864a:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
    if (*p_pin < P0_PIN_NUM)
    864e:	2a1f      	cmp	r2, #31
        return NRF_P0;
    8650:	bfd2      	itee	le
    8652:	4619      	movle	r1, r3
        return NRF_P1;
    8654:	4659      	movgt	r1, fp
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
    8656:	f002 021f 	andgt.w	r2, r2, #31
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    865a:	3280      	adds	r2, #128	; 0x80
    865c:	f841 7022 	str.w	r7, [r1, r2, lsl #2]
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
    8660:	68a9      	ldr	r1, [r5, #8]
    8662:	fa0a f204 	lsl.w	r2, sl, r4
    8666:	07b3      	lsls	r3, r6, #30
    8668:	bf4c      	ite	mi
    866a:	4311      	orrmi	r1, r2
    866c:	4391      	bicpl	r1, r2
    866e:	60a9      	str	r1, [r5, #8]
		WRITE_BIT(data->trig_edge, curr_pin, flags & GPIO_INT_EDGE);
    8670:	6969      	ldr	r1, [r5, #20]
    8672:	06b0      	lsls	r0, r6, #26
    8674:	bf4c      	ite	mi
    8676:	4311      	orrmi	r1, r2
    8678:	4391      	bicpl	r1, r2
    867a:	6169      	str	r1, [r5, #20]
		WRITE_BIT(data->double_edge, curr_pin,
    867c:	69a9      	ldr	r1, [r5, #24]
    867e:	0673      	lsls	r3, r6, #25
    8680:	bf4c      	ite	mi
    8682:	4311      	orrmi	r1, r2
    8684:	4391      	bicpl	r1, r2
    8686:	61a9      	str	r1, [r5, #24]
		WRITE_BIT(data->active_level, curr_pin,
    8688:	6929      	ldr	r1, [r5, #16]
    868a:	0770      	lsls	r0, r6, #29
    868c:	bf4c      	ite	mi
    868e:	4311      	orrmi	r1, r2
    8690:	4391      	bicpl	r1, r2
    8692:	6129      	str	r1, [r5, #16]
		WRITE_BIT(data->inverted, curr_pin, flags & GPIO_POL_INV);
    8694:	69e9      	ldr	r1, [r5, #28]
    8696:	0633      	lsls	r3, r6, #24
    8698:	bf4c      	ite	mi
    869a:	430a      	orrmi	r2, r1
    869c:	ea21 0202 	bicpl.w	r2, r1, r2
    86a0:	61ea      	str	r2, [r5, #28]
		res = gpiote_pin_int_cfg(port, curr_pin);
    86a2:	4621      	mov	r1, r4
    86a4:	4640      	mov	r0, r8
    86a6:	f7ff fed3 	bl	8450 <gpiote_pin_int_cfg>
		if (res != 0) {
    86aa:	2800      	cmp	r0, #0
    86ac:	d1b9      	bne.n	8622 <gpio_nrfx_config+0x8e>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    86ae:	3401      	adds	r4, #1
    86b0:	b2e4      	uxtb	r4, r4
    86b2:	4b01      	ldr	r3, [pc, #4]	; (86b8 <gpio_nrfx_config+0x124>)
    86b4:	e7b2      	b.n	861c <gpio_nrfx_config+0x88>
    86b6:	bf00      	nop
    86b8:	50842500 	.word	0x50842500
    86bc:	50842800 	.word	0x50842800

000086c0 <gpiote_event_handler>:
{
    86c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	u32_t fired_triggers[GPIO_COUNT] = {0};
    86c2:	2500      	movs	r5, #0
    86c4:	e9cd 5500 	strd	r5, r5, [sp]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    86c8:	4e24      	ldr	r6, [pc, #144]	; (875c <gpiote_event_handler+0x9c>)
    86ca:	6834      	ldr	r4, [r6, #0]
	if (port_event) {
    86cc:	b144      	cbz	r4, 86e0 <gpiote_event_handler+0x20>
			check_level_trigger_pins(DEVICE_GET(gpio_nrfx_p0));
    86ce:	4824      	ldr	r0, [pc, #144]	; (8760 <gpiote_event_handler+0xa0>)
    86d0:	f004 fd54 	bl	d17c <check_level_trigger_pins>
		fired_triggers[0] =
    86d4:	9000      	str	r0, [sp, #0]
			check_level_trigger_pins(DEVICE_GET(gpio_nrfx_p1));
    86d6:	4823      	ldr	r0, [pc, #140]	; (8764 <gpiote_event_handler+0xa4>)
    86d8:	f004 fd50 	bl	d17c <check_level_trigger_pins>
		fired_triggers[1] =
    86dc:	9001      	str	r0, [sp, #4]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    86de:	6035      	str	r5, [r6, #0]
{
    86e0:	2200      	movs	r2, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
    86e2:	2601      	movs	r6, #1
    86e4:	4694      	mov	ip, r2
    return p_reg->INTENSET & mask;
    86e6:	4d20      	ldr	r5, [pc, #128]	; (8768 <gpiote_event_handler+0xa8>)
    86e8:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
    86ec:	fa06 f102 	lsl.w	r1, r6, r2
    86f0:	4219      	tst	r1, r3
    86f2:	d01a      	beq.n	872a <gpiote_event_handler+0x6a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    86f4:	0091      	lsls	r1, r2, #2
    86f6:	f101 41a0 	add.w	r1, r1, #1342177280	; 0x50000000
    86fa:	f501 4151 	add.w	r1, r1, #53504	; 0xd100
    86fe:	680b      	ldr	r3, [r1, #0]
    8700:	b19b      	cbz	r3, 872a <gpiote_event_handler+0x6a>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    8702:	f502 73a2 	add.w	r3, r2, #324	; 0x144
    8706:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
    870a:	af02      	add	r7, sp, #8
    870c:	f3c3 3040 	ubfx	r0, r3, #13, #1
    8710:	eb07 0080 	add.w	r0, r7, r0, lsl #2
    8714:	f850 7c08 	ldr.w	r7, [r0, #-8]
    8718:	f3c3 2304 	ubfx	r3, r3, #8, #5
    871c:	fa06 f303 	lsl.w	r3, r6, r3
    8720:	433b      	orrs	r3, r7
    8722:	f840 3c08 	str.w	r3, [r0, #-8]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    8726:	f8c1 c000 	str.w	ip, [r1]
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    872a:	3201      	adds	r2, #1
    872c:	2a08      	cmp	r2, #8
    872e:	d1db      	bne.n	86e8 <gpiote_event_handler+0x28>
	if (fired_triggers[0]) {
    8730:	9900      	ldr	r1, [sp, #0]
    8732:	b111      	cbz	r1, 873a <gpiote_event_handler+0x7a>
		fire_callbacks(DEVICE_GET(gpio_nrfx_p0), fired_triggers[0]);
    8734:	480a      	ldr	r0, [pc, #40]	; (8760 <gpiote_event_handler+0xa0>)
    8736:	f004 fceb 	bl	d110 <fire_callbacks>
	if (fired_triggers[1]) {
    873a:	9901      	ldr	r1, [sp, #4]
    873c:	b111      	cbz	r1, 8744 <gpiote_event_handler+0x84>
		fire_callbacks(DEVICE_GET(gpio_nrfx_p1), fired_triggers[1]);
    873e:	4809      	ldr	r0, [pc, #36]	; (8764 <gpiote_event_handler+0xa4>)
    8740:	f004 fce6 	bl	d110 <fire_callbacks>
	if (port_event) {
    8744:	b144      	cbz	r4, 8758 <gpiote_event_handler+0x98>
		cfg_level_pins(DEVICE_GET(gpio_nrfx_p0));
    8746:	4806      	ldr	r0, [pc, #24]	; (8760 <gpiote_event_handler+0xa0>)
    8748:	f004 fd45 	bl	d1d6 <cfg_level_pins>
		cfg_level_pins(DEVICE_GET(gpio_nrfx_p1));
    874c:	4805      	ldr	r0, [pc, #20]	; (8764 <gpiote_event_handler+0xa4>)
}
    874e:	b003      	add	sp, #12
    8750:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		cfg_level_pins(DEVICE_GET(gpio_nrfx_p1));
    8754:	f004 bd3f 	b.w	d1d6 <cfg_level_pins>
}
    8758:	b003      	add	sp, #12
    875a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    875c:	5000d17c 	.word	0x5000d17c
    8760:	20004bfc 	.word	0x20004bfc
    8764:	20004c08 	.word	0x20004c08
    8768:	5000d000 	.word	0x5000d000

0000876c <vipm_nrf_1_register_callback>:
		    &vipm_nrf_##_idx##_driver_api)

#define VIPM_DEVICE(_idx, _)						\
	IF_ENABLED(CONFIG_IPM_MSG_CH_##_idx##_ENABLE, (VIPM_DEVICE_1(_idx);))

UTIL_LISTIFY(NRFX_IPC_ID_MAX_VALUE, VIPM_DEVICE, _);
    876c:	4b01      	ldr	r3, [pc, #4]	; (8774 <vipm_nrf_1_register_callback+0x8>)
    876e:	6059      	str	r1, [r3, #4]
    8770:	645a      	str	r2, [r3, #68]	; 0x44
    8772:	4770      	bx	lr
    8774:	20000820 	.word	0x20000820

00008778 <vipm_nrf_init>:
{
    8778:	b538      	push	{r3, r4, r5, lr}
	if (!nrfx_vipm_data.ipm_init) {
    877a:	4d0b      	ldr	r5, [pc, #44]	; (87a8 <vipm_nrf_init+0x30>)
    877c:	f895 4080 	ldrb.w	r4, [r5, #128]	; 0x80
    8780:	b97c      	cbnz	r4, 87a2 <vipm_nrf_init+0x2a>
{
	/* Init IPC */
#if IS_ENABLED(CONFIG_IPM_NRF_SINGLE_INSTANCE)
	nrfx_ipc_init(0, nrfx_ipc_handler, (void *)&nrfx_ipm_data);
#else
	nrfx_ipc_init(0, vipm_dispatcher, (void *)&nrfx_ipm_data);
    8782:	4a0a      	ldr	r2, [pc, #40]	; (87ac <vipm_nrf_init+0x34>)
    8784:	490a      	ldr	r1, [pc, #40]	; (87b0 <vipm_nrf_init+0x38>)
    8786:	4620      	mov	r0, r4
    8788:	f000 fa48 	bl	8c1c <nrfx_ipc_init>
#endif
	IRQ_CONNECT(DT_INST_0_NORDIC_NRF_IPC_IRQ_0,
    878c:	4622      	mov	r2, r4
    878e:	2101      	movs	r1, #1
    8790:	202a      	movs	r0, #42	; 0x2a
    8792:	f7f9 fbc7 	bl	1f24 <z_arm_irq_priority_set>
		    DT_INST_0_NORDIC_NRF_IPC_IRQ_0_PRIORITY,
		    nrfx_isr, nrfx_ipc_irq_handler, 0);

	/* Set up signals and channels */
	nrfx_ipc_config_load(&ipc_cfg);
    8796:	4807      	ldr	r0, [pc, #28]	; (87b4 <vipm_nrf_init+0x3c>)
    8798:	f000 fa58 	bl	8c4c <nrfx_ipc_config_load>
		nrfx_vipm_data.ipm_init = true;
    879c:	2301      	movs	r3, #1
    879e:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
}
    87a2:	2000      	movs	r0, #0
    87a4:	bd38      	pop	{r3, r4, r5, pc}
    87a6:	bf00      	nop
    87a8:	20000820 	.word	0x20000820
    87ac:	20000818 	.word	0x20000818
    87b0:	000087b9 	.word	0x000087b9
    87b4:	0000edd0 	.word	0x0000edd0

000087b8 <vipm_dispatcher>:
{
    87b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    87ba:	4604      	mov	r4, r0
		event_mask &= ~BIT(event_idx);
    87bc:	2701      	movs	r7, #1
		if (nrfx_vipm_data.callback[event_idx] != NULL) {
    87be:	4d0b      	ldr	r5, [pc, #44]	; (87ec <vipm_dispatcher+0x34>)
	while (event_mask) {
    87c0:	b904      	cbnz	r4, 87c4 <vipm_dispatcher+0xc>
}
    87c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
    87c4:	fa94 f3a4 	rbit	r3, r4
   */
  if (value == 0U)
  {
    return 32U;
  }
  return __builtin_clz(value);
    87c8:	fab3 f383 	clz	r3, r3
		if (nrfx_vipm_data.callback[event_idx] != NULL) {
    87cc:	f855 6023 	ldr.w	r6, [r5, r3, lsl #2]
		event_mask &= ~BIT(event_idx);
    87d0:	fa07 f203 	lsl.w	r2, r7, r3
    87d4:	ea24 0402 	bic.w	r4, r4, r2
		if (nrfx_vipm_data.callback[event_idx] != NULL) {
    87d8:	2e00      	cmp	r6, #0
    87da:	d0f1      	beq.n	87c0 <vipm_dispatcher+0x8>
			nrfx_vipm_data.callback[event_idx]
    87dc:	2200      	movs	r2, #0
    87de:	3310      	adds	r3, #16
    87e0:	4611      	mov	r1, r2
    87e2:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
    87e6:	47b0      	blx	r6
    87e8:	e7ea      	b.n	87c0 <vipm_dispatcher+0x8>
    87ea:	bf00      	nop
    87ec:	20000820 	.word	0x20000820

000087f0 <vipm_nrf_0_set_enabled>:
UTIL_LISTIFY(NRFX_IPC_ID_MAX_VALUE, VIPM_DEVICE, _);
    87f0:	b508      	push	{r3, lr}
    87f2:	f04f 0100 	mov.w	r1, #0
    87f6:	2301      	movs	r3, #1
    87f8:	4a06      	ldr	r2, [pc, #24]	; (8814 <vipm_nrf_0_set_enabled+0x24>)
    87fa:	f363 0107 	bfi	r1, r3, #0, #8
    87fe:	4b06      	ldr	r3, [pc, #24]	; (8818 <vipm_nrf_0_set_enabled+0x28>)
    8800:	4806      	ldr	r0, [pc, #24]	; (881c <vipm_nrf_0_set_enabled+0x2c>)
    8802:	1a9b      	subs	r3, r3, r2
    8804:	08db      	lsrs	r3, r3, #3
    8806:	f363 118f 	bfi	r1, r3, #6, #10
    880a:	f002 feb9 	bl	b580 <log_0>
    880e:	f06f 0015 	mvn.w	r0, #21
    8812:	bd08      	pop	{r3, pc}
    8814:	0000e6dc 	.word	0x0000e6dc
    8818:	0000e734 	.word	0x0000e734
    881c:	00010bb5 	.word	0x00010bb5

00008820 <vipm_nrf_0_register_callback>:
    8820:	2302      	movs	r3, #2
    8822:	f04f 0100 	mov.w	r1, #0
    8826:	4a05      	ldr	r2, [pc, #20]	; (883c <vipm_nrf_0_register_callback+0x1c>)
    8828:	f363 0107 	bfi	r1, r3, #0, #8
    882c:	4b04      	ldr	r3, [pc, #16]	; (8840 <vipm_nrf_0_register_callback+0x20>)
    882e:	4805      	ldr	r0, [pc, #20]	; (8844 <vipm_nrf_0_register_callback+0x24>)
    8830:	1a9b      	subs	r3, r3, r2
    8832:	08db      	lsrs	r3, r3, #3
    8834:	f363 118f 	bfi	r1, r3, #6, #10
    8838:	f002 bea2 	b.w	b580 <log_0>
    883c:	0000e6dc 	.word	0x0000e6dc
    8840:	0000e734 	.word	0x0000e734
    8844:	00010b1e 	.word	0x00010b1e

00008848 <vipm_nrf_1_send>:
    8848:	b508      	push	{r3, lr}
    884a:	f04f 0100 	mov.w	r1, #0
    884e:	2301      	movs	r3, #1
    8850:	4a06      	ldr	r2, [pc, #24]	; (886c <vipm_nrf_1_send+0x24>)
    8852:	f363 0107 	bfi	r1, r3, #0, #8
    8856:	4b06      	ldr	r3, [pc, #24]	; (8870 <vipm_nrf_1_send+0x28>)
    8858:	4806      	ldr	r0, [pc, #24]	; (8874 <vipm_nrf_1_send+0x2c>)
    885a:	1a9b      	subs	r3, r3, r2
    885c:	08db      	lsrs	r3, r3, #3
    885e:	f363 118f 	bfi	r1, r3, #6, #10
    8862:	f002 fe8d 	bl	b580 <log_0>
    8866:	f06f 0015 	mvn.w	r0, #21
    886a:	bd08      	pop	{r3, pc}
    886c:	0000e6dc 	.word	0x0000e6dc
    8870:	0000e734 	.word	0x0000e734
    8874:	00010bd1 	.word	0x00010bd1

00008878 <vipm_nrf_0_send>:
    8878:	2a10      	cmp	r2, #16
    887a:	b508      	push	{r3, lr}
    887c:	d824      	bhi.n	88c8 <vipm_nrf_0_send+0x50>
    887e:	b16a      	cbz	r2, 889c <vipm_nrf_0_send+0x24>
    8880:	2302      	movs	r3, #2
    8882:	f04f 0100 	mov.w	r1, #0
    8886:	4a12      	ldr	r2, [pc, #72]	; (88d0 <vipm_nrf_0_send+0x58>)
    8888:	f363 0107 	bfi	r1, r3, #0, #8
    888c:	4b11      	ldr	r3, [pc, #68]	; (88d4 <vipm_nrf_0_send+0x5c>)
    888e:	4812      	ldr	r0, [pc, #72]	; (88d8 <vipm_nrf_0_send+0x60>)
    8890:	1a9b      	subs	r3, r3, r2
    8892:	08db      	lsrs	r3, r3, #3
    8894:	f363 118f 	bfi	r1, r3, #6, #10
    8898:	f002 fe72 	bl	b580 <log_0>
    889c:	9b02      	ldr	r3, [sp, #8]
    889e:	2b00      	cmp	r3, #0
    88a0:	dd0d      	ble.n	88be <vipm_nrf_0_send+0x46>
    88a2:	2302      	movs	r3, #2
    88a4:	f04f 0100 	mov.w	r1, #0
    88a8:	4a09      	ldr	r2, [pc, #36]	; (88d0 <vipm_nrf_0_send+0x58>)
    88aa:	f363 0107 	bfi	r1, r3, #0, #8
    88ae:	4b09      	ldr	r3, [pc, #36]	; (88d4 <vipm_nrf_0_send+0x5c>)
    88b0:	480a      	ldr	r0, [pc, #40]	; (88dc <vipm_nrf_0_send+0x64>)
    88b2:	1a9b      	subs	r3, r3, r2
    88b4:	08db      	lsrs	r3, r3, #3
    88b6:	f363 118f 	bfi	r1, r3, #6, #10
    88ba:	f002 fe61 	bl	b580 <log_0>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ipc_task_trigger(NRF_IPC_Type * p_reg, nrf_ipc_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    88be:	2201      	movs	r2, #1
    88c0:	2000      	movs	r0, #0
    88c2:	4b07      	ldr	r3, [pc, #28]	; (88e0 <vipm_nrf_0_send+0x68>)
    88c4:	601a      	str	r2, [r3, #0]
    88c6:	bd08      	pop	{r3, pc}
    88c8:	f06f 0015 	mvn.w	r0, #21
    88cc:	e7fb      	b.n	88c6 <vipm_nrf_0_send+0x4e>
    88ce:	bf00      	nop
    88d0:	0000e6dc 	.word	0x0000e6dc
    88d4:	0000e734 	.word	0x0000e734
    88d8:	00010b50 	.word	0x00010b50
    88dc:	00010b84 	.word	0x00010b84
    88e0:	5002a000 	.word	0x5002a000

000088e4 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(struct device *dev,
				const struct uart_config *cfg)
{
    88e4:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    88e6:	794b      	ldrb	r3, [r1, #5]
    88e8:	2b01      	cmp	r3, #1
    88ea:	d02d      	beq.n	8948 <uarte_nrfx_configure+0x64>
    88ec:	2b03      	cmp	r3, #3
    88ee:	d128      	bne.n	8942 <uarte_nrfx_configure+0x5e>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    88f0:	2710      	movs	r7, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    88f2:	798b      	ldrb	r3, [r1, #6]
    88f4:	2b03      	cmp	r3, #3
    88f6:	d124      	bne.n	8942 <uarte_nrfx_configure+0x5e>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    88f8:	79cd      	ldrb	r5, [r1, #7]
    88fa:	b12d      	cbz	r5, 8908 <uarte_nrfx_configure+0x24>
    88fc:	2d01      	cmp	r5, #1
    88fe:	d120      	bne.n	8942 <uarte_nrfx_configure+0x5e>
	return dev->config->config_info;
    8900:	6803      	ldr	r3, [r0, #0]
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
    8902:	689b      	ldr	r3, [r3, #8]
    8904:	791b      	ldrb	r3, [r3, #4]
    8906:	b1e3      	cbz	r3, 8942 <uarte_nrfx_configure+0x5e>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    8908:	790c      	ldrb	r4, [r1, #4]
    890a:	2c01      	cmp	r4, #1
    890c:	d01e      	beq.n	894c <uarte_nrfx_configure+0x68>
    890e:	b262      	sxtb	r2, r4
    8910:	b11a      	cbz	r2, 891a <uarte_nrfx_configure+0x36>
    8912:	2c02      	cmp	r4, #2
    8914:	d115      	bne.n	8942 <uarte_nrfx_configure+0x5e>
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
    8916:	2200      	movs	r2, #0
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
		break;
#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	case UART_CFG_PARITY_ODD:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    8918:	240e      	movs	r4, #14
	switch (baudrate) {
    891a:	f647 2c12 	movw	ip, #31250	; 0x7a12
	return dev->config->config_info;
    891e:	6806      	ldr	r6, [r0, #0]
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    8920:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    8922:	68b6      	ldr	r6, [r6, #8]
	switch (baudrate) {
    8924:	4563      	cmp	r3, ip
	return config->uarte_regs;
    8926:	6836      	ldr	r6, [r6, #0]
	switch (baudrate) {
    8928:	d069      	beq.n	89fe <uarte_nrfx_configure+0x11a>
    892a:	d82c      	bhi.n	8986 <uarte_nrfx_configure+0xa2>
    892c:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    8930:	d068      	beq.n	8a04 <uarte_nrfx_configure+0x120>
    8932:	d817      	bhi.n	8964 <uarte_nrfx_configure+0x80>
    8934:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    8938:	d066      	beq.n	8a08 <uarte_nrfx_configure+0x124>
    893a:	d80a      	bhi.n	8952 <uarte_nrfx_configure+0x6e>
    893c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    8940:	d065      	beq.n	8a0e <uarte_nrfx_configure+0x12a>
		return -ENOTSUP;
    8942:	f06f 0022 	mvn.w	r0, #34	; 0x22
    8946:	e059      	b.n	89fc <uarte_nrfx_configure+0x118>
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
    8948:	2700      	movs	r7, #0
    894a:	e7d2      	b.n	88f2 <uarte_nrfx_configure+0xe>
		uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_ODD;
    894c:	f44f 7280 	mov.w	r2, #256	; 0x100
    8950:	e7e2      	b.n	8918 <uarte_nrfx_configure+0x34>
	switch (baudrate) {
    8952:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    8956:	d05d      	beq.n	8a14 <uarte_nrfx_configure+0x130>
    8958:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    895c:	d1f1      	bne.n	8942 <uarte_nrfx_configure+0x5e>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    895e:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    8962:	e03e      	b.n	89e2 <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
    8964:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    8968:	d057      	beq.n	8a1a <uarte_nrfx_configure+0x136>
    896a:	d804      	bhi.n	8976 <uarte_nrfx_configure+0x92>
    896c:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    8970:	d1e7      	bne.n	8942 <uarte_nrfx_configure+0x5e>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    8972:	4b35      	ldr	r3, [pc, #212]	; (8a48 <uarte_nrfx_configure+0x164>)
    8974:	e035      	b.n	89e2 <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
    8976:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    897a:	d050      	beq.n	8a1e <uarte_nrfx_configure+0x13a>
    897c:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    8980:	d1df      	bne.n	8942 <uarte_nrfx_configure+0x5e>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    8982:	4b32      	ldr	r3, [pc, #200]	; (8a4c <uarte_nrfx_configure+0x168>)
    8984:	e02d      	b.n	89e2 <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
    8986:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    898a:	d04a      	beq.n	8a22 <uarte_nrfx_configure+0x13e>
    898c:	d812      	bhi.n	89b4 <uarte_nrfx_configure+0xd0>
    898e:	f64d 2cc0 	movw	ip, #56000	; 0xdac0
    8992:	4563      	cmp	r3, ip
    8994:	d048      	beq.n	8a28 <uarte_nrfx_configure+0x144>
    8996:	d805      	bhi.n	89a4 <uarte_nrfx_configure+0xc0>
    8998:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
    899c:	d1d1      	bne.n	8942 <uarte_nrfx_configure+0x5e>
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    899e:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    89a2:	e01e      	b.n	89e2 <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
    89a4:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    89a8:	d041      	beq.n	8a2e <uarte_nrfx_configure+0x14a>
    89aa:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    89ae:	d1c8      	bne.n	8942 <uarte_nrfx_configure+0x5e>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    89b0:	4b27      	ldr	r3, [pc, #156]	; (8a50 <uarte_nrfx_configure+0x16c>)
    89b2:	e016      	b.n	89e2 <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
    89b4:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    89b8:	d03c      	beq.n	8a34 <uarte_nrfx_configure+0x150>
    89ba:	d809      	bhi.n	89d0 <uarte_nrfx_configure+0xec>
    89bc:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    89c0:	d03b      	beq.n	8a3a <uarte_nrfx_configure+0x156>
    89c2:	f8df c09c 	ldr.w	ip, [pc, #156]	; 8a60 <uarte_nrfx_configure+0x17c>
    89c6:	4563      	cmp	r3, ip
    89c8:	d1bb      	bne.n	8942 <uarte_nrfx_configure+0x5e>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    89ca:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    89ce:	e008      	b.n	89e2 <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
    89d0:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    89d4:	d034      	beq.n	8a40 <uarte_nrfx_configure+0x15c>
    89d6:	f8df c08c 	ldr.w	ip, [pc, #140]	; 8a64 <uarte_nrfx_configure+0x180>
    89da:	4563      	cmp	r3, ip
    89dc:	d1b1      	bne.n	8942 <uarte_nrfx_configure+0x5e>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    89de:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    89e2:	f8c6 3524 	str.w	r3, [r6, #1316]	; 0x524
                    | (uint32_t)p_cfg->hwfc;
    89e6:	432a      	orrs	r2, r5
                    | (uint32_t)p_cfg->stop
    89e8:	ea44 0307 	orr.w	r3, r4, r7
                    | (uint32_t)p_cfg->hwfc;
    89ec:	4313      	orrs	r3, r2
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    89ee:	f8c6 356c 	str.w	r3, [r6, #1388]	; 0x56c
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
    89f2:	6883      	ldr	r3, [r0, #8]
    89f4:	c903      	ldmia	r1, {r0, r1}
    89f6:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    89fa:	2000      	movs	r0, #0
}
    89fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    89fe:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    8a02:	e7ee      	b.n	89e2 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    8a04:	4b13      	ldr	r3, [pc, #76]	; (8a54 <uarte_nrfx_configure+0x170>)
    8a06:	e7ec      	b.n	89e2 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = 0x00027000;
    8a08:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    8a0c:	e7e9      	b.n	89e2 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = 0x00014000;
    8a0e:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    8a12:	e7e6      	b.n	89e2 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    8a14:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    8a18:	e7e3      	b.n	89e2 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    8a1a:	4b0f      	ldr	r3, [pc, #60]	; (8a58 <uarte_nrfx_configure+0x174>)
    8a1c:	e7e1      	b.n	89e2 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    8a1e:	4b0f      	ldr	r3, [pc, #60]	; (8a5c <uarte_nrfx_configure+0x178>)
    8a20:	e7df      	b.n	89e2 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    8a22:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    8a26:	e7dc      	b.n	89e2 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    8a28:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    8a2c:	e7d9      	b.n	89e2 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    8a2e:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    8a32:	e7d6      	b.n	89e2 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    8a34:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    8a38:	e7d3      	b.n	89e2 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    8a3a:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    8a3e:	e7d0      	b.n	89e2 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    8a40:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    8a44:	e7cd      	b.n	89e2 <uarte_nrfx_configure+0xfe>
    8a46:	bf00      	nop
    8a48:	00275000 	.word	0x00275000
    8a4c:	0075c000 	.word	0x0075c000
    8a50:	013a9000 	.word	0x013a9000
    8a54:	0013b000 	.word	0x0013b000
    8a58:	003af000 	.word	0x003af000
    8a5c:	004ea000 	.word	0x004ea000
    8a60:	0003d090 	.word	0x0003d090
    8a64:	000f4240 	.word	0x000f4240

00008a68 <uarte_0_init>:
	return dev->config->config_info;
    8a68:	6802      	ldr	r2, [r0, #0]
	#endif
	#if !defined(DT_NORDIC_NRF_UARTE_UART_0_RX_PIN)
	#define DT_NORDIC_NRF_UARTE_UART_0_RX_PIN NRF_UARTE_PSEL_DISCONNECTED
	#endif

	UART_NRF_UARTE_DEVICE(0);
    8a6a:	b570      	push	{r4, r5, r6, lr}
	return config->uarte_regs;
    8a6c:	6892      	ldr	r2, [r2, #8]
}


NRF_STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
    8a6e:	4b18      	ldr	r3, [pc, #96]	; (8ad0 <uarte_0_init+0x68>)
    8a70:	6814      	ldr	r4, [r2, #0]
    8a72:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
	struct uarte_nrfx_data *data = get_dev_data(dev);
    8a76:	6885      	ldr	r5, [r0, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    8a78:	2103      	movs	r1, #3
    p_reg->OUTSET = set_mask;
    8a7a:	609a      	str	r2, [r3, #8]
    p_reg->PSEL.TXD = pseltxd;
    8a7c:	2614      	movs	r6, #20
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    8a7e:	2200      	movs	r2, #0
    8a80:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
    8a84:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258
    8a88:	f8c4 650c 	str.w	r6, [r4, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
    8a8c:	2616      	movs	r6, #22
    8a8e:	f8c4 6514 	str.w	r6, [r4, #1300]	; 0x514
    p_reg->OUTSET = set_mask;
    8a92:	f44f 2600 	mov.w	r6, #524288	; 0x80000
    8a96:	609e      	str	r6, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    8a98:	f8c3 124c 	str.w	r1, [r3, #588]	; 0x24c
    8a9c:	f8c3 2254 	str.w	r2, [r3, #596]	; 0x254
    p_reg->PSEL.RTS = pselrts;
    8aa0:	2313      	movs	r3, #19
    8aa2:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
    8aa6:	2315      	movs	r3, #21
	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    8aa8:	4629      	mov	r1, r5
    8aaa:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
    8aae:	f7ff ff19 	bl	88e4 <uarte_nrfx_configure>
	if (err) {
    8ab2:	b958      	cbnz	r0, 8acc <uarte_0_init+0x64>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    8ab4:	2308      	movs	r3, #8
    8ab6:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    8aba:	441d      	add	r5, r3
NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    p_reg->RXD.MAXCNT = length;
    8abc:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8abe:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    8ac2:	f8c4 5534 	str.w	r5, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    8ac6:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    8aca:	6023      	str	r3, [r4, #0]
	UART_NRF_UARTE_DEVICE(0);
    8acc:	bd70      	pop	{r4, r5, r6, pc}
    8ace:	bf00      	nop
    8ad0:	50842500 	.word	0x50842500

00008ad4 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    8ad4:	b508      	push	{r3, lr}
	z_impl_log_panic();
    8ad6:	f7f8 facb 	bl	1070 <z_impl_log_panic>
	ARG_UNUSED(esf);
	ARG_UNUSED(reason);

	LOG_PANIC();

	LOG_ERR("Resetting system");
    8ada:	2301      	movs	r3, #1
    8adc:	f04f 0100 	mov.w	r1, #0
    8ae0:	4a06      	ldr	r2, [pc, #24]	; (8afc <k_sys_fatal_error_handler+0x28>)
    8ae2:	f363 0107 	bfi	r1, r3, #0, #8
    8ae6:	4b06      	ldr	r3, [pc, #24]	; (8b00 <k_sys_fatal_error_handler+0x2c>)
    8ae8:	4806      	ldr	r0, [pc, #24]	; (8b04 <k_sys_fatal_error_handler+0x30>)
    8aea:	1a9b      	subs	r3, r3, r2
    8aec:	08db      	lsrs	r3, r3, #3
    8aee:	f363 118f 	bfi	r1, r3, #6, #10
    8af2:	f002 fd45 	bl	b580 <log_0>
	sys_arch_reboot(0);
    8af6:	2000      	movs	r0, #0
    8af8:	f7f9 fdc6 	bl	2688 <sys_arch_reboot>

	CODE_UNREACHABLE;
    8afc:	0000e6dc 	.word	0x0000e6dc
    8b00:	0000e72c 	.word	0x0000e72c
    8b04:	00010bfd 	.word	0x00010bfd

00008b08 <nrf53_errata_42>:
    #ifndef NRF53_SERIES
        return false;
    #else
        #if defined (NRF5340_XXAA_APPLICATION) || defined (DEVELOP_IN_NRF5340_APPLICATION)
            uint32_t var1 = *(uint32_t *)0x00FF0130ul;
            uint32_t var2 = *(uint32_t *)0x00FF0134ul;
    8b08:	4b05      	ldr	r3, [pc, #20]	; (8b20 <nrf53_errata_42+0x18>)
    8b0a:	6818      	ldr	r0, [r3, #0]
            uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    8b0c:	3b04      	subs	r3, #4
        #endif
        #if defined (NRF5340_XXAA_APPLICATION) || defined (DEVELOP_IN_NRF5340_APPLICATION)
            if (var1 == 0x07)
    8b0e:	681b      	ldr	r3, [r3, #0]
    8b10:	2b07      	cmp	r3, #7
    8b12:	d103      	bne.n	8b1c <nrf53_errata_42+0x14>
            {
                switch(var2)
    8b14:	1e83      	subs	r3, r0, #2
    8b16:	4258      	negs	r0, r3
    8b18:	4158      	adcs	r0, r3
    8b1a:	4770      	bx	lr
                    case 0x03ul:
                        return false;
                }
            }
        #endif
        return false;
    8b1c:	2000      	movs	r0, #0
    #endif
}
    8b1e:	4770      	bx	lr
    8b20:	00ff0134 	.word	0x00ff0134

00008b24 <SystemCoreClockUpdate>:
void SystemCoreClockUpdate(void)
{
#if defined(NRF_TRUSTZONE_NONSECURE)
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_NS->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
#else
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_S->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
    8b24:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    8b28:	f8d3 2558 	ldr.w	r2, [r3, #1368]	; 0x558
    8b2c:	4b03      	ldr	r3, [pc, #12]	; (8b3c <SystemCoreClockUpdate+0x18>)
    8b2e:	f002 0201 	and.w	r2, r2, #1
    8b32:	40d3      	lsrs	r3, r2
    8b34:	4a02      	ldr	r2, [pc, #8]	; (8b40 <SystemCoreClockUpdate+0x1c>)
    8b36:	6013      	str	r3, [r2, #0]
#endif
}
    8b38:	4770      	bx	lr
    8b3a:	bf00      	nop
    8b3c:	07a12000 	.word	0x07a12000
    8b40:	20004a60 	.word	0x20004a60

00008b44 <SystemInit>:
        #endif

        /* Trimming of the device. Copy all the trimming values from FICR into the target addresses. Trim
         until one ADDR is not initialized. */
        uint32_t index = 0;
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
    8b44:	2200      	movs	r2, #0
{
    8b46:	b508      	push	{r3, lr}
    8b48:	00d3      	lsls	r3, r2, #3
    8b4a:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
    8b4e:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
    8b52:	3101      	adds	r1, #1
    8b54:	d007      	beq.n	8b66 <SystemInit+0x22>
            #if defined ( __ICCARM__ )
                /* IAR will complain about the order of volatile pointer accesses. */
                #pragma diag_suppress=Pa082
            #endif
            *NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    8b56:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
    8b5a:	3201      	adds	r2, #1
            *NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    8b5c:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
    8b60:	2a20      	cmp	r2, #32
            *NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    8b62:	600b      	str	r3, [r1, #0]
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
    8b64:	d1f0      	bne.n	8b48 <SystemInit+0x4>
        }

        /* errata 64 must be before errata 42, as errata 42 is dependant on the changes in errata 64*/
        /* Workaround for Errata 64 "VREGMAIN has invalid configuration when CPU is running at 128 MHz" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_64())
    8b66:	f7ff ffcf 	bl	8b08 <nrf53_errata_42>
    8b6a:	2800      	cmp	r0, #0
    8b6c:	d142      	bne.n	8bf4 <SystemInit+0xb0>
            *((volatile uint32_t *)0x5000473Cul) = 0x3ul;
        }

        /* Workaround for Errata 42 "Reset value of HFCLKCTRL is invalid" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_42())
    8b6e:	f7ff ffcb 	bl	8b08 <nrf53_errata_42>
    8b72:	b138      	cbz	r0, 8b84 <SystemInit+0x40>
        {
            *((volatile uint32_t *)0x50039530ul) = 0xBEEF0044ul;
    8b74:	4b22      	ldr	r3, [pc, #136]	; (8c00 <SystemInit+0xbc>)
    8b76:	4a23      	ldr	r2, [pc, #140]	; (8c04 <SystemInit+0xc0>)
    8b78:	601a      	str	r2, [r3, #0]
            NRF_CLOCK_S->HFCLKCTRL = CLOCK_HFCLKCTRL_HCLK_Div2 << CLOCK_HFCLKCTRL_HCLK_Pos;
    8b7a:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    8b7e:	2201      	movs	r2, #1
    8b80:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558
        }

        /* Workaround for Errata 46 "Higher power consumption of LFRC" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_46())
    8b84:	f7ff ffc0 	bl	8b08 <nrf53_errata_42>
    8b88:	b110      	cbz	r0, 8b90 <SystemInit+0x4c>
        {
            *((volatile uint32_t *)0x5003254Cul) = 0;
    8b8a:	2200      	movs	r2, #0
    8b8c:	4b1e      	ldr	r3, [pc, #120]	; (8c08 <SystemInit+0xc4>)
    8b8e:	601a      	str	r2, [r3, #0]
        }

        /* Workaround for Errata 49 "SLEEPENTER and SLEEPEXIT events asserted after pin reset" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_49())
    8b90:	f7ff ffba 	bl	8b08 <nrf53_errata_42>
    8b94:	b150      	cbz	r0, 8bac <SystemInit+0x68>
        {
            if (NRF_RESET_S->RESETREAS & RESET_RESETREAS_RESETPIN_Msk)
    8b96:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    8b9a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    8b9e:	07d1      	lsls	r1, r2, #31
            {
                NRF_POWER_S->EVENTS_SLEEPENTER = 0;
    8ba0:	bf42      	ittt	mi
    8ba2:	2200      	movmi	r2, #0
    8ba4:	f8c3 2114 	strmi.w	r2, [r3, #276]	; 0x114
                NRF_POWER_S->EVENTS_SLEEPEXIT = 0;
    8ba8:	f8c3 2118 	strmi.w	r2, [r3, #280]	; 0x118
        return false;
    #else
        #if defined (NRF5340_XXAA_APPLICATION) || defined (DEVELOP_IN_NRF5340_APPLICATION)\
         || defined (NRF5340_XXAA_NETWORK) || defined (DEVELOP_IN_NRF5340_NETWORK)
            #if defined(NRF_APPLICATION)
                uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    8bac:	4b17      	ldr	r3, [pc, #92]	; (8c0c <SystemInit+0xc8>)
                uint32_t var2 = *(uint32_t *)0x01FF0134ul;
            #endif
        #endif
        #if defined (NRF5340_XXAA_APPLICATION) || defined (DEVELOP_IN_NRF5340_APPLICATION)\
         || defined (NRF5340_XXAA_NETWORK) || defined (DEVELOP_IN_NRF5340_NETWORK)
            if (var1 == 0x07)
    8bae:	681b      	ldr	r3, [r3, #0]
    8bb0:	2b07      	cmp	r3, #7
    8bb2:	d10e      	bne.n	8bd2 <SystemInit+0x8e>
                uint32_t var2 = *(uint32_t *)0x00FF0134ul;
    8bb4:	4b16      	ldr	r3, [pc, #88]	; (8c10 <SystemInit+0xcc>)
            {
                switch(var2)
    8bb6:	681b      	ldr	r3, [r3, #0]
    8bb8:	3b02      	subs	r3, #2
    8bba:	2b01      	cmp	r3, #1
    8bbc:	d809      	bhi.n	8bd2 <SystemInit+0x8e>

        /* Workaround for Errata 55 "Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_55())
        {
            if (NRF_RESET_S->RESETREAS & RESET_RESETREAS_RESETPIN_Msk){
    8bbe:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    8bc2:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    8bc6:	07d2      	lsls	r2, r2, #31
                NRF_RESET_S->RESETREAS = ~RESET_RESETREAS_RESETPIN_Msk;
    8bc8:	bf44      	itt	mi
    8bca:	f06f 0201 	mvnmi.w	r2, #1
    8bce:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
            }
        }

        /* Workaround for Errata 69 "VREGMAIN configuration is not retained in System OFF" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_69())
    8bd2:	f7ff ff99 	bl	8b08 <nrf53_errata_42>
    8bd6:	b110      	cbz	r0, 8bde <SystemInit+0x9a>
        {
            *((volatile uint32_t *)0x5000470Cul) =0x65ul;
    8bd8:	2265      	movs	r2, #101	; 0x65
    8bda:	4b0e      	ldr	r3, [pc, #56]	; (8c14 <SystemInit+0xd0>)
    8bdc:	601a      	str	r2, [r3, #0]

        #endif

        /* Allow Non-Secure code to run FPU instructions.
         * If only the secure code should control FPU power state these registers should be configured accordingly in the secure application code. */
        SCB->NSACR |= (3UL << 10);
    8bde:	4a0e      	ldr	r2, [pc, #56]	; (8c18 <SystemInit+0xd4>)
    8be0:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
    8be4:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
    8be8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
        __DSB();
        __ISB();
    #endif

    SystemCoreClockUpdate();
}
    8bec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    SystemCoreClockUpdate();
    8bf0:	f7ff bf98 	b.w	8b24 <SystemCoreClockUpdate>
            *((volatile uint32_t *)0x5000470Cul) = 0x29ul;
    8bf4:	2229      	movs	r2, #41	; 0x29
    8bf6:	4b07      	ldr	r3, [pc, #28]	; (8c14 <SystemInit+0xd0>)
    8bf8:	601a      	str	r2, [r3, #0]
            *((volatile uint32_t *)0x5000473Cul) = 0x3ul;
    8bfa:	2203      	movs	r2, #3
    8bfc:	631a      	str	r2, [r3, #48]	; 0x30
    8bfe:	e7b6      	b.n	8b6e <SystemInit+0x2a>
    8c00:	50039530 	.word	0x50039530
    8c04:	beef0044 	.word	0xbeef0044
    8c08:	5003254c 	.word	0x5003254c
    8c0c:	00ff0130 	.word	0x00ff0130
    8c10:	00ff0134 	.word	0x00ff0134
    8c14:	5000470c 	.word	0x5000470c
    8c18:	e000ed00 	.word	0xe000ed00

00008c1c <nrfx_ipc_init>:
} ipc_control_block_t;

static ipc_control_block_t m_ipc_cb;

nrfx_err_t nrfx_ipc_init(uint8_t irq_priority, nrfx_ipc_handler_t handler, void * p_context)
{
    8c1c:	b570      	push	{r4, r5, r6, lr}
    NRFX_ASSERT(handler);
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    8c1e:	4c08      	ldr	r4, [pc, #32]	; (8c40 <nrfx_ipc_init+0x24>)
{
    8c20:	460e      	mov	r6, r1
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    8c22:	7923      	ldrb	r3, [r4, #4]
{
    8c24:	4615      	mov	r5, r2
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    8c26:	b943      	cbnz	r3, 8c3a <nrfx_ipc_init+0x1e>
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
    }

    NRFX_IRQ_PRIORITY_SET(IPC_IRQn, irq_priority);
    NRFX_IRQ_ENABLE(IPC_IRQn);
    8c28:	202a      	movs	r0, #42	; 0x2a
    8c2a:	f7f9 f96b 	bl	1f04 <arch_irq_enable>

    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
    8c2e:	2301      	movs	r3, #1
    m_ipc_cb.handler = handler;
    m_ipc_cb.p_context = p_context;

    return NRFX_SUCCESS;
    8c30:	4804      	ldr	r0, [pc, #16]	; (8c44 <nrfx_ipc_init+0x28>)
    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
    8c32:	7123      	strb	r3, [r4, #4]
    m_ipc_cb.handler = handler;
    8c34:	6026      	str	r6, [r4, #0]
    m_ipc_cb.p_context = p_context;
    8c36:	60a5      	str	r5, [r4, #8]
}
    8c38:	bd70      	pop	{r4, r5, r6, pc}
        return NRFX_ERROR_ALREADY_INITIALIZED;
    8c3a:	4803      	ldr	r0, [pc, #12]	; (8c48 <nrfx_ipc_init+0x2c>)
    8c3c:	e7fc      	b.n	8c38 <nrfx_ipc_init+0x1c>
    8c3e:	bf00      	nop
    8c40:	200008a8 	.word	0x200008a8
    8c44:	0bad0000 	.word	0x0bad0000
    8c48:	0bad000c 	.word	0x0bad000c

00008c4c <nrfx_ipc_config_load>:
{
    NRFX_ASSERT(p_config);
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);

    uint32_t i;
    for (i = 0; i < IPC_CONF_NUM; ++i)
    8c4c:	2300      	movs	r3, #0
{
    8c4e:	b530      	push	{r4, r5, lr}

NRF_STATIC_INLINE void nrf_ipc_send_config_set(NRF_IPC_Type * p_reg,
                                               uint8_t        index,
                                               uint32_t       channels_mask)
{
    p_reg->SEND_CNF[index] = channels_mask;
    8c50:	4a0d      	ldr	r2, [pc, #52]	; (8c88 <nrfx_ipc_config_load+0x3c>)
    {
        nrf_ipc_send_config_set(NRF_IPC, i, p_config->send_task_config[i]);
    8c52:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
    8c56:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    for (i = 0; i < IPC_CONF_NUM; ++i)
    8c5a:	3301      	adds	r3, #1
    8c5c:	2b10      	cmp	r3, #16
    8c5e:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
    8c62:	d1f6      	bne.n	8c52 <nrfx_ipc_config_load+0x6>
    }

    for (i = 0; i < IPC_CONF_NUM; ++i)
    8c64:	2300      	movs	r3, #0

NRF_STATIC_INLINE void nrf_ipc_receive_config_set(NRF_IPC_Type * p_reg,
                                                  uint8_t        index,
                                                  uint32_t       channels_mask)
{
    p_reg->RECEIVE_CNF[index] = channels_mask;
    8c66:	4a08      	ldr	r2, [pc, #32]	; (8c88 <nrfx_ipc_config_load+0x3c>)
    8c68:	f100 0140 	add.w	r1, r0, #64	; 0x40
    8c6c:	f503 74b2 	add.w	r4, r3, #356	; 0x164
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, p_config->receive_event_config[i]);
    8c70:	f851 5b04 	ldr.w	r5, [r1], #4
    for (i = 0; i < IPC_CONF_NUM; ++i)
    8c74:	3301      	adds	r3, #1
    8c76:	2b10      	cmp	r3, #16
    8c78:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
    8c7c:	d1f6      	bne.n	8c6c <nrfx_ipc_config_load+0x20>
    }

    nrf_ipc_int_enable(NRF_IPC, p_config->receive_events_enabled);
    8c7e:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
    p_reg->INTENSET = mask;
    8c82:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    8c86:	bd30      	pop	{r4, r5, pc}
    8c88:	5002a000 	.word	0x5002a000

00008c8c <nrfx_ipc_receive_event_enable>:
}

void nrfx_ipc_receive_event_enable(uint8_t event_index)
{
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
    nrf_ipc_int_enable(NRF_IPC, (1UL << event_index));
    8c8c:	2301      	movs	r3, #1
    8c8e:	fa03 f000 	lsl.w	r0, r3, r0
    8c92:	4b02      	ldr	r3, [pc, #8]	; (8c9c <nrfx_ipc_receive_event_enable+0x10>)
    8c94:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
}
    8c98:	4770      	bx	lr
    8c9a:	bf00      	nop
    8c9c:	5002a000 	.word	0x5002a000

00008ca0 <nrfx_ipc_receive_event_disable>:

void nrfx_ipc_receive_event_disable(uint8_t event_index)
{
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
    nrf_ipc_int_disable(NRF_IPC, (1UL << event_index));
    8ca0:	2301      	movs	r3, #1
    8ca2:	fa03 f000 	lsl.w	r0, r3, r0
    p_reg->INTENCLR = mask;
    8ca6:	4b02      	ldr	r3, [pc, #8]	; (8cb0 <nrfx_ipc_receive_event_disable+0x10>)
    8ca8:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
}
    8cac:	4770      	bx	lr
    8cae:	bf00      	nop
    8cb0:	5002a000 	.word	0x5002a000

00008cb4 <nrfx_ipc_irq_handler>:
    return p_reg->INTPEND;
    8cb4:	4b0c      	ldr	r3, [pc, #48]	; (8ce8 <nrfx_ipc_irq_handler+0x34>)
    channel_bitmask |= nrf_ipc_send_config_get(NRF_IPC, send_index);
    nrf_ipc_send_config_set(NRF_IPC, send_index, channel_bitmask);
}

void nrfx_ipc_irq_handler(void)
{
    8cb6:	b430      	push	{r4, r5}
    8cb8:	f8d3 030c 	ldr.w	r0, [r3, #780]	; 0x30c
    // Clear these events
    uint32_t bitmask = events_map;
    while (bitmask)
    {
        uint8_t event_idx = __CLZ(__RBIT(bitmask));
        bitmask &= ~(1UL << event_idx);
    8cbc:	2401      	movs	r4, #1
    uint32_t bitmask = events_map;
    8cbe:	4602      	mov	r2, r0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8cc0:	2500      	movs	r5, #0
    while (bitmask)
    8cc2:	b922      	cbnz	r2, 8cce <nrfx_ipc_irq_handler+0x1a>
        nrf_ipc_event_clear(NRF_IPC, nrf_ipc_receive_event_get(event_idx));
    }

    // Execute interrupt handler to provide information about events to app
    m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
}
    8cc4:	bc30      	pop	{r4, r5}
    m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
    8cc6:	4b09      	ldr	r3, [pc, #36]	; (8cec <nrfx_ipc_irq_handler+0x38>)
    8cc8:	681a      	ldr	r2, [r3, #0]
    8cca:	6899      	ldr	r1, [r3, #8]
    8ccc:	4710      	bx	r2
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
    8cce:	fa92 f3a2 	rbit	r3, r2
  return __builtin_clz(value);
    8cd2:	fab3 f383 	clz	r3, r3
        bitmask &= ~(1UL << event_idx);
    8cd6:	fa04 f103 	lsl.w	r1, r4, r3
    8cda:	ea22 0201 	bic.w	r2, r2, r1
    8cde:	4904      	ldr	r1, [pc, #16]	; (8cf0 <nrfx_ipc_irq_handler+0x3c>)
}

NRF_STATIC_INLINE nrf_ipc_event_t nrf_ipc_receive_event_get(uint8_t index)
{
    NRFX_ASSERT(index < IPC_CH_NUM);
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
    8ce0:	009b      	lsls	r3, r3, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8ce2:	50cd      	str	r5, [r1, r3]
    8ce4:	e7ed      	b.n	8cc2 <nrfx_ipc_irq_handler+0xe>
    8ce6:	bf00      	nop
    8ce8:	5002a000 	.word	0x5002a000
    8cec:	200008a8 	.word	0x200008a8
    8cf0:	5002a100 	.word	0x5002a100

00008cf4 <metal_generic_dev_open>:
	return 0;
}

int metal_generic_dev_open(struct metal_bus *bus, const char *dev_name,
			   struct metal_device **device)
{
    8cf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8cf8:	460f      	mov	r7, r1
    8cfa:	4690      	mov	r8, r2
	struct metal_list *node;
	struct metal_device *dev;

	(void)bus;

	metal_list_for_each(&_metal.common.generic_device_list, node) {
    8cfc:	4d0c      	ldr	r5, [pc, #48]	; (8d30 <metal_generic_dev_open+0x3c>)
    8cfe:	f855 4f18 	ldr.w	r4, [r5, #24]!
    8d02:	42ac      	cmp	r4, r5
    8d04:	d103      	bne.n	8d0e <metal_generic_dev_open+0x1a>
		*device = dev;
		return metal_generic_dev_sys_open(dev);
	}

	return -ENODEV;
}
    8d06:	f06f 0012 	mvn.w	r0, #18
    8d0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (strcmp(dev->name, dev_name) != 0)
    8d0e:	4639      	mov	r1, r7
    8d10:	f854 0c44 	ldr.w	r0, [r4, #-68]
		dev = metal_container_of(node, struct metal_device, node);
    8d14:	f1a4 0644 	sub.w	r6, r4, #68	; 0x44
		if (strcmp(dev->name, dev_name) != 0)
    8d18:	f003 f896 	bl	be48 <strcmp>
    8d1c:	b108      	cbz	r0, 8d22 <metal_generic_dev_open+0x2e>
	metal_list_for_each(&_metal.common.generic_device_list, node) {
    8d1e:	6824      	ldr	r4, [r4, #0]
    8d20:	e7ef      	b.n	8d02 <metal_generic_dev_open+0xe>
		*device = dev;
    8d22:	f8c8 6000 	str.w	r6, [r8]
		return metal_generic_dev_sys_open(dev);
    8d26:	4630      	mov	r0, r6
}
    8d28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return metal_generic_dev_sys_open(dev);
    8d2c:	f004 bbc5 	b.w	d4ba <metal_generic_dev_sys_open>
    8d30:	200008b4 	.word	0x200008b4

00008d34 <metal_bus_find>:
{
    8d34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8d38:	4607      	mov	r7, r0
    8d3a:	460e      	mov	r6, r1
	metal_list_for_each(&_metal.common.bus_list, node) {
    8d3c:	4d0b      	ldr	r5, [pc, #44]	; (8d6c <metal_bus_find+0x38>)
    8d3e:	f855 4f08 	ldr.w	r4, [r5, #8]!
    8d42:	42ac      	cmp	r4, r5
    8d44:	d102      	bne.n	8d4c <metal_bus_find+0x18>
	return -ENOENT;
    8d46:	f06f 0001 	mvn.w	r0, #1
    8d4a:	e00c      	b.n	8d66 <metal_bus_find+0x32>
		if (strcmp(bus->name, name) != 0)
    8d4c:	4639      	mov	r1, r7
    8d4e:	f854 0c24 	ldr.w	r0, [r4, #-36]
		bus = metal_container_of(node, struct metal_bus, node);
    8d52:	f1a4 0824 	sub.w	r8, r4, #36	; 0x24
		if (strcmp(bus->name, name) != 0)
    8d56:	f003 f877 	bl	be48 <strcmp>
    8d5a:	b108      	cbz	r0, 8d60 <metal_bus_find+0x2c>
	metal_list_for_each(&_metal.common.bus_list, node) {
    8d5c:	6824      	ldr	r4, [r4, #0]
    8d5e:	e7f0      	b.n	8d42 <metal_bus_find+0xe>
		if (result)
    8d60:	b10e      	cbz	r6, 8d66 <metal_bus_find+0x32>
			*result = bus;
    8d62:	f8c6 8000 	str.w	r8, [r6]
}
    8d66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8d6a:	bf00      	nop
    8d6c:	200008b4 	.word	0x200008b4

00008d70 <metal_bus_register>:
{
    8d70:	b510      	push	{r4, lr}
	if (!bus || !bus->name || !strlen(bus->name))
    8d72:	4604      	mov	r4, r0
    8d74:	b910      	cbnz	r0, 8d7c <metal_bus_register+0xc>
		return -EINVAL;
    8d76:	f06f 0015 	mvn.w	r0, #21
}
    8d7a:	bd10      	pop	{r4, pc}
	if (!bus || !bus->name || !strlen(bus->name))
    8d7c:	6800      	ldr	r0, [r0, #0]
    8d7e:	2800      	cmp	r0, #0
    8d80:	d0f9      	beq.n	8d76 <metal_bus_register+0x6>
    8d82:	f003 f85a 	bl	be3a <strlen>
    8d86:	2800      	cmp	r0, #0
    8d88:	d0f5      	beq.n	8d76 <metal_bus_register+0x6>
	if (metal_bus_find(bus->name, NULL) == 0)
    8d8a:	2100      	movs	r1, #0
    8d8c:	6820      	ldr	r0, [r4, #0]
    8d8e:	f7ff ffd1 	bl	8d34 <metal_bus_find>
    8d92:	b1c0      	cbz	r0, 8dc6 <metal_bus_register+0x56>
	metal_list_init(&bus->devices);
    8d94:	f104 031c 	add.w	r3, r4, #28
#define METAL_DECLARE_LIST(name)			\
	struct metal_list name = METAL_INIT_LIST(name)

static inline void metal_list_init(struct metal_list *list)
{
	list->next = list->prev = list;
    8d98:	e9c4 3307 	strd	r3, r3, [r4, #28]
}

static inline void metal_list_add_before(struct metal_list *node,
					 struct metal_list *new_node)
{
	new_node->prev = node->prev;
    8d9c:	4b0c      	ldr	r3, [pc, #48]	; (8dd0 <metal_bus_register+0x60>)
	metal_list_add_tail(&_metal.common.bus_list, &bus->node);
    8d9e:	f104 0224 	add.w	r2, r4, #36	; 0x24
    8da2:	68d9      	ldr	r1, [r3, #12]
	new_node->next = node;
    8da4:	f103 0008 	add.w	r0, r3, #8
	new_node->next->prev = new_node;
    8da8:	60da      	str	r2, [r3, #12]
	new_node->prev = node->prev;
    8daa:	62a1      	str	r1, [r4, #40]	; 0x28
	new_node->next = node;
    8dac:	6260      	str	r0, [r4, #36]	; 0x24
	new_node->prev->next = new_node;
    8dae:	600a      	str	r2, [r1, #0]
	metal_log(METAL_LOG_DEBUG, "registered %s bus\n", bus->name);
    8db0:	781a      	ldrb	r2, [r3, #0]
    8db2:	2a06      	cmp	r2, #6
    8db4:	d905      	bls.n	8dc2 <metal_bus_register+0x52>
    8db6:	685b      	ldr	r3, [r3, #4]
    8db8:	b143      	cbz	r3, 8dcc <metal_bus_register+0x5c>
    8dba:	6822      	ldr	r2, [r4, #0]
    8dbc:	4905      	ldr	r1, [pc, #20]	; (8dd4 <metal_bus_register+0x64>)
    8dbe:	2007      	movs	r0, #7
    8dc0:	4798      	blx	r3
	return 0;
    8dc2:	2000      	movs	r0, #0
    8dc4:	e7d9      	b.n	8d7a <metal_bus_register+0xa>
		return -EEXIST;
    8dc6:	f06f 0010 	mvn.w	r0, #16
    8dca:	e7d6      	b.n	8d7a <metal_bus_register+0xa>
	return 0;
    8dcc:	4618      	mov	r0, r3
    8dce:	e7d4      	b.n	8d7a <metal_bus_register+0xa>
    8dd0:	200008b4 	.word	0x200008b4
    8dd4:	00010c1a 	.word	0x00010c1a

00008dd8 <metal_register_generic_device>:
{
    8dd8:	b510      	push	{r4, lr}
    8dda:	4604      	mov	r4, r0
	if (!device->name || !strlen(device->name) ||
    8ddc:	6800      	ldr	r0, [r0, #0]
    8dde:	b910      	cbnz	r0, 8de6 <metal_register_generic_device+0xe>
		return -EINVAL;
    8de0:	f06f 0015 	mvn.w	r0, #21
}
    8de4:	bd10      	pop	{r4, pc}
	if (!device->name || !strlen(device->name) ||
    8de6:	f003 f828 	bl	be3a <strlen>
    8dea:	2800      	cmp	r0, #0
    8dec:	d0f8      	beq.n	8de0 <metal_register_generic_device+0x8>
    8dee:	68a3      	ldr	r3, [r4, #8]
    8df0:	2b01      	cmp	r3, #1
    8df2:	d8f5      	bhi.n	8de0 <metal_register_generic_device+0x8>
	device->bus = &metal_generic_bus;
    8df4:	4b06      	ldr	r3, [pc, #24]	; (8e10 <metal_register_generic_device+0x38>)
	metal_list_add_tail(&_metal.common.generic_device_list,
    8df6:	f104 0144 	add.w	r1, r4, #68	; 0x44
	device->bus = &metal_generic_bus;
    8dfa:	6063      	str	r3, [r4, #4]
	new_node->prev = node->prev;
    8dfc:	4b05      	ldr	r3, [pc, #20]	; (8e14 <metal_register_generic_device+0x3c>)
    8dfe:	69da      	ldr	r2, [r3, #28]
	new_node->next = node;
    8e00:	f103 0018 	add.w	r0, r3, #24
    8e04:	6460      	str	r0, [r4, #68]	; 0x44
	new_node->prev = node->prev;
    8e06:	64a2      	str	r2, [r4, #72]	; 0x48
	new_node->next->prev = new_node;
    8e08:	61d9      	str	r1, [r3, #28]
	return 0;
    8e0a:	2000      	movs	r0, #0
	new_node->prev->next = new_node;
    8e0c:	6011      	str	r1, [r2, #0]
    8e0e:	e7e9      	b.n	8de4 <metal_register_generic_device+0xc>
    8e10:	20004a64 	.word	0x20004a64
    8e14:	200008b4 	.word	0x200008b4

00008e18 <metal_init>:

#include <string.h>
#include <metal/sys.h>

int metal_init(const struct metal_init_params *params)
{
    8e18:	b538      	push	{r3, r4, r5, lr}
    8e1a:	4605      	mov	r5, r0
	int error = 0;

	memset(&_metal, 0, sizeof(_metal));
    8e1c:	4c0d      	ldr	r4, [pc, #52]	; (8e54 <metal_init+0x3c>)
    8e1e:	2220      	movs	r2, #32
    8e20:	4620      	mov	r0, r4
    8e22:	2100      	movs	r1, #0
    8e24:	f003 f865 	bl	bef2 <memset>

	_metal.common.log_handler   = params->log_handler;
    8e28:	682b      	ldr	r3, [r5, #0]
	_metal.common.log_level     = params->log_level;
    8e2a:	792a      	ldrb	r2, [r5, #4]
	_metal.common.log_handler   = params->log_handler;
    8e2c:	6063      	str	r3, [r4, #4]
	_metal.common.log_level     = params->log_level;
    8e2e:	4623      	mov	r3, r4
    8e30:	f803 2b08 	strb.w	r2, [r3], #8
	list->next = list->prev = list;
    8e34:	e9c4 3302 	strd	r3, r3, [r4, #8]
    8e38:	f104 0310 	add.w	r3, r4, #16
    8e3c:	e9c4 3304 	strd	r3, r3, [r4, #16]
    8e40:	f104 0318 	add.w	r3, r4, #24
    8e44:	e9c4 3306 	strd	r3, r3, [r4, #24]

	metal_list_init(&_metal.common.bus_list);
	metal_list_init(&_metal.common.generic_shmem_list);
	metal_list_init(&_metal.common.generic_device_list);

	error = metal_sys_init(params);
    8e48:	4628      	mov	r0, r5
	if (error)
		return error;

	return error;
}
    8e4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	error = metal_sys_init(params);
    8e4e:	f000 b803 	b.w	8e58 <metal_sys_init>
    8e52:	bf00      	nop
    8e54:	200008b4 	.word	0x200008b4

00008e58 <metal_sys_init>:
#include <metal/utilities.h>

struct metal_state _metal;

int metal_sys_init(const struct metal_init_params *params)
{
    8e58:	b508      	push	{r3, lr}
	metal_bus_register(&metal_generic_bus);
    8e5a:	4802      	ldr	r0, [pc, #8]	; (8e64 <metal_sys_init+0xc>)
    8e5c:	f7ff ff88 	bl	8d70 <metal_bus_register>
	return 0;
}
    8e60:	2000      	movs	r0, #0
    8e62:	bd08      	pop	{r3, pc}
    8e64:	20004a64 	.word	0x20004a64

00008e68 <metal_zephyr_log_handler>:
	"metal: debug:     ",
};

void metal_zephyr_log_handler(enum metal_log_level level,
			      const char *format, ...)
{
    8e68:	b40e      	push	{r1, r2, r3}
	va_list args;

	if (level <= METAL_LOG_EMERGENCY || level > METAL_LOG_DEBUG)
    8e6a:	1e43      	subs	r3, r0, #1
		level = METAL_LOG_EMERGENCY;
    8e6c:	2b06      	cmp	r3, #6
{
    8e6e:	b533      	push	{r0, r1, r4, r5, lr}
		level = METAL_LOG_EMERGENCY;
    8e70:	bf88      	it	hi
    8e72:	2000      	movhi	r0, #0
{
    8e74:	ac05      	add	r4, sp, #20
	printk("%s", level_strs[level]);
    8e76:	4b09      	ldr	r3, [pc, #36]	; (8e9c <metal_zephyr_log_handler+0x34>)
{
    8e78:	f854 5b04 	ldr.w	r5, [r4], #4
	printk("%s", level_strs[level]);
    8e7c:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
    8e80:	4807      	ldr	r0, [pc, #28]	; (8ea0 <metal_zephyr_log_handler+0x38>)
    8e82:	f001 feff 	bl	ac84 <printk>

	va_start(args, format);
	vprintk(format, args);
    8e86:	4621      	mov	r1, r4
    8e88:	4628      	mov	r0, r5
	va_start(args, format);
    8e8a:	9401      	str	r4, [sp, #4]
	vprintk(format, args);
    8e8c:	f7f7 fcbc 	bl	808 <vprintk>
	va_end(args);
}
    8e90:	b002      	add	sp, #8
    8e92:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    8e96:	b003      	add	sp, #12
    8e98:	4770      	bx	lr
    8e9a:	bf00      	nop
    8e9c:	0000ee98 	.word	0x0000ee98
    8ea0:	0000fc94 	.word	0x0000fc94

00008ea4 <virtqueue_add_consumed_buffer>:
				  uint32_t len)
{
	struct vring_used_elem *used_desc = NULL;
	uint16_t used_idx;

	if (head_idx > vq->vq_nentries) {
    8ea4:	8943      	ldrh	r3, [r0, #10]
{
    8ea6:	b530      	push	{r4, r5, lr}
	if (head_idx > vq->vq_nentries) {
    8ea8:	428b      	cmp	r3, r1
    8eaa:	d30f      	bcc.n	8ecc <virtqueue_add_consumed_buffer+0x28>
		return ERROR_VRING_NO_BUFF;
	}

	VQUEUE_BUSY(vq);

	used_idx = vq->vq_ring.used->idx & (vq->vq_nentries - 1);
    8eac:	6a44      	ldr	r4, [r0, #36]	; 0x24
    8eae:	3b01      	subs	r3, #1
    8eb0:	8865      	ldrh	r5, [r4, #2]
    8eb2:	402b      	ands	r3, r5
    8eb4:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
	used_desc = &vq->vq_ring.used->ring[used_idx];
	used_desc->id = head_idx;
	used_desc->len = len;
    8eb8:	e9c3 1201 	strd	r1, r2, [r3, #4]

	atomic_thread_fence(memory_order_seq_cst);
    8ebc:	f3bf 8f5b 	dmb	ish

	vq->vq_ring.used->idx++;
    8ec0:	6a42      	ldr	r2, [r0, #36]	; 0x24

	VQUEUE_IDLE(vq);

	return VQUEUE_SUCCESS;
    8ec2:	2000      	movs	r0, #0
	vq->vq_ring.used->idx++;
    8ec4:	8853      	ldrh	r3, [r2, #2]
    8ec6:	3301      	adds	r3, #1
    8ec8:	8053      	strh	r3, [r2, #2]
}
    8eca:	bd30      	pop	{r4, r5, pc}
		return ERROR_VRING_NO_BUFF;
    8ecc:	4800      	ldr	r0, [pc, #0]	; (8ed0 <virtqueue_add_consumed_buffer+0x2c>)
    8ece:	e7fc      	b.n	8eca <virtqueue_add_consumed_buffer+0x26>
    8ed0:	fffff441 	.word	0xfffff441

00008ed4 <rpmsg_send_offchannel_raw>:
 *
 */
int rpmsg_send_offchannel_raw(struct rpmsg_endpoint *ept, uint32_t src,
			      uint32_t dst, const void *data, int size,
			      int wait)
{
    8ed4:	b430      	push	{r4, r5}
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev || !data || dst == RPMSG_ADDR_ANY)
    8ed6:	b148      	cbz	r0, 8eec <rpmsg_send_offchannel_raw+0x18>
    8ed8:	6a00      	ldr	r0, [r0, #32]
    8eda:	b138      	cbz	r0, 8eec <rpmsg_send_offchannel_raw+0x18>
    8edc:	b133      	cbz	r3, 8eec <rpmsg_send_offchannel_raw+0x18>
    8ede:	1c54      	adds	r4, r2, #1
    8ee0:	d004      	beq.n	8eec <rpmsg_send_offchannel_raw+0x18>
		return RPMSG_ERR_PARAM;

	rdev = ept->rdev;

	if (rdev->ops.send_offchannel_raw)
    8ee2:	6f44      	ldr	r4, [r0, #116]	; 0x74
    8ee4:	b114      	cbz	r4, 8eec <rpmsg_send_offchannel_raw+0x18>
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
    8ee6:	46a4      	mov	ip, r4
						      size, wait);

	return RPMSG_ERR_PARAM;
}
    8ee8:	bc30      	pop	{r4, r5}
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
    8eea:	4760      	bx	ip
		return RPMSG_ERR_PARAM;
    8eec:	4801      	ldr	r0, [pc, #4]	; (8ef4 <rpmsg_send_offchannel_raw+0x20>)
}
    8eee:	bc30      	pop	{r4, r5}
    8ef0:	4770      	bx	lr
    8ef2:	bf00      	nop
    8ef4:	fffff82d 	.word	0xfffff82d

00008ef8 <rpmsg_create_ept>:
}

int rpmsg_create_ept(struct rpmsg_endpoint *ept, struct rpmsg_device *rdev,
		     const char *name, uint32_t src, uint32_t dest,
		     rpmsg_ept_cb cb, rpmsg_ns_unbind_cb unbind_cb)
{
    8ef8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8efc:	f8dd 8020 	ldr.w	r8, [sp, #32]
    8f00:	460d      	mov	r5, r1
    8f02:	4691      	mov	r9, r2
    8f04:	461e      	mov	r6, r3
	int status;
	uint32_t addr = src;

	if (!ept)
    8f06:	4604      	mov	r4, r0
    8f08:	2800      	cmp	r0, #0
    8f0a:	d05a      	beq.n	8fc2 <rpmsg_create_ept+0xca>
		return RPMSG_ERR_PARAM;

	metal_mutex_acquire(&rdev->lock);
    8f0c:	f101 0758 	add.w	r7, r1, #88	; 0x58
 * @brief	Acquire a mutex 
 * @param[in]	mutex	Mutex to mutex.
 */
static inline void metal_mutex_acquire(metal_mutex_t *mutex)
{
	__metal_mutex_acquire(mutex);
    8f10:	4638      	mov	r0, r7
    8f12:	f004 fcc4 	bl	d89e <__metal_mutex_acquire>
	if (src != RPMSG_ADDR_ANY) {
    8f16:	1c71      	adds	r1, r6, #1
    8f18:	f105 0248 	add.w	r2, r5, #72	; 0x48
    8f1c:	d03f      	beq.n	8f9e <rpmsg_create_ept+0xa6>
	if (addr < size)
    8f1e:	2e03      	cmp	r6, #3
    8f20:	dc4d      	bgt.n	8fbe <rpmsg_create_ept+0xc6>
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
}

static inline int metal_bitmap_is_bit_set(unsigned long *bitmap, int bit)
{
	return ((bitmap[bit / METAL_BITS_PER_ULONG] &
    8f22:	0971      	lsrs	r1, r6, #5
    8f24:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1))) == 0) ? 0 : 1;
    8f28:	f006 0c1f 	and.w	ip, r6, #31
    8f2c:	fa20 f30c 	lsr.w	r3, r0, ip
		status = rpmsg_is_address_set(rdev->bitmap,
					      RPMSG_ADDR_BMP_SIZE, src);
		if (!status) {
    8f30:	07db      	lsls	r3, r3, #31
    8f32:	d506      	bpl.n	8f42 <rpmsg_create_ept+0x4a>
			/* Mark the address as used in the address bitmap. */
			rpmsg_set_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
					  src);
		} else if (status > 0) {
			status = RPMSG_SUCCESS;
    8f34:	2500      	movs	r5, #0
	z_impl_k_sem_give(sem);
    8f36:	4638      	mov	r0, r7
    8f38:	f000 ffa4 	bl	9e84 <z_impl_k_sem_give>
	}

ret_status:
	metal_mutex_release(&rdev->lock);
	return status;
}
    8f3c:	4628      	mov	r0, r5
    8f3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
    8f42:	2301      	movs	r3, #1
    8f44:	fa03 f30c 	lsl.w	r3, r3, ip
	bitmap[bit / METAL_BITS_PER_ULONG] |=
    8f48:	4303      	orrs	r3, r0
    8f4a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
				  const char *name,
				  uint32_t src, uint32_t dest,
				  rpmsg_ept_cb cb,
				  rpmsg_ns_unbind_cb ns_unbind_cb)
{
	strncpy(ept->name, name, sizeof(ept->name));
    8f4e:	2220      	movs	r2, #32
    8f50:	4649      	mov	r1, r9
    8f52:	4620      	mov	r0, r4
    8f54:	f002 ff50 	bl	bdf8 <strncpy>
	ept->addr = src;
	ept->dest_addr = dest;
	ept->cb = cb;
    8f58:	9b09      	ldr	r3, [sp, #36]	; 0x24
	new_node->prev = node->prev;
    8f5a:	686a      	ldr	r2, [r5, #4]
    8f5c:	62e3      	str	r3, [r4, #44]	; 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
    8f5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	new_node->next = node;
    8f60:	e9c4 520d 	strd	r5, r2, [r4, #52]	; 0x34
    8f64:	6323      	str	r3, [r4, #48]	; 0x30
	metal_list_add_tail(&rdev->endpoints, &ept->node);
    8f66:	f104 0334 	add.w	r3, r4, #52	; 0x34
	ept->dest_addr = dest;
    8f6a:	e9c4 6809 	strd	r6, r8, [r4, #36]	; 0x24
	ept->rdev = rdev;
    8f6e:	6225      	str	r5, [r4, #32]
	new_node->next->prev = new_node;
    8f70:	606b      	str	r3, [r5, #4]
	new_node->prev->next = new_node;
    8f72:	6ba2      	ldr	r2, [r4, #56]	; 0x38
	if (!status  && ept->dest_addr == RPMSG_ADDR_ANY) {
    8f74:	f1b8 3fff 	cmp.w	r8, #4294967295
    8f78:	6013      	str	r3, [r2, #0]
    8f7a:	d1db      	bne.n	8f34 <rpmsg_create_ept+0x3c>
    8f7c:	4638      	mov	r0, r7
    8f7e:	f000 ff81 	bl	9e84 <z_impl_k_sem_give>
		status = rpmsg_send_ns_message(ept, RPMSG_NS_CREATE);
    8f82:	2100      	movs	r1, #0
    8f84:	4620      	mov	r0, r4
    8f86:	f004 fc8e 	bl	d8a6 <rpmsg_send_ns_message>
    8f8a:	4605      	mov	r5, r0
    8f8c:	4638      	mov	r0, r7
    8f8e:	f004 fc86 	bl	d89e <__metal_mutex_acquire>
		if (status)
    8f92:	2d00      	cmp	r5, #0
    8f94:	d0cf      	beq.n	8f36 <rpmsg_create_ept+0x3e>
			rpmsg_unregister_endpoint(ept);
    8f96:	4620      	mov	r0, r4
    8f98:	f004 fc63 	bl	d862 <rpmsg_unregister_endpoint>
    8f9c:	e7cb      	b.n	8f36 <rpmsg_create_ept+0x3e>
static inline unsigned int
metal_bitmap_next_clear_bit(unsigned long *bitmap, unsigned int start,
			    unsigned int max)
{
	unsigned int bit;
	for (bit = start;
    8f9e:	2300      	movs	r3, #0
	return ((bitmap[bit / METAL_BITS_PER_ULONG] &
    8fa0:	6ca9      	ldr	r1, [r5, #72]	; 0x48
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1))) == 0) ? 0 : 1;
    8fa2:	fa21 f203 	lsr.w	r2, r1, r3
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
    8fa6:	07d2      	lsls	r2, r2, #31
    8fa8:	d405      	bmi.n	8fb6 <rpmsg_create_ept+0xbe>
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
    8faa:	2201      	movs	r2, #1
    8fac:	409a      	lsls	r2, r3
	bitmap[bit / METAL_BITS_PER_ULONG] |=
    8fae:	430a      	orrs	r2, r1
    8fb0:	64aa      	str	r2, [r5, #72]	; 0x48
    8fb2:	461e      	mov	r6, r3
    8fb4:	e7cb      	b.n	8f4e <rpmsg_create_ept+0x56>
	     bit ++)
    8fb6:	3301      	adds	r3, #1
	for (bit = start;
    8fb8:	2b04      	cmp	r3, #4
    8fba:	d1f2      	bne.n	8fa2 <rpmsg_create_ept+0xaa>
    8fbc:	e7c7      	b.n	8f4e <rpmsg_create_ept+0x56>
		return RPMSG_ERR_PARAM;
    8fbe:	4d02      	ldr	r5, [pc, #8]	; (8fc8 <rpmsg_create_ept+0xd0>)
    8fc0:	e7b9      	b.n	8f36 <rpmsg_create_ept+0x3e>
		return RPMSG_ERR_PARAM;
    8fc2:	4d01      	ldr	r5, [pc, #4]	; (8fc8 <rpmsg_create_ept+0xd0>)
    8fc4:	e7ba      	b.n	8f3c <rpmsg_create_ept+0x44>
    8fc6:	bf00      	nop
    8fc8:	fffff82d 	.word	0xfffff82d

00008fcc <rpmsg_virtio_send_offchannel_raw>:
 */
static int rpmsg_virtio_send_offchannel_raw(struct rpmsg_device *rdev,
					    uint32_t src, uint32_t dst,
					    const void *data,
					    int size, int wait)
{
    8fcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8fd0:	4604      	mov	r4, r0
	struct metal_io_region *io;

	/* Get the associated remote device for channel. */
	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);

	status = rpmsg_virtio_get_status(rvdev);
    8fd2:	6f80      	ldr	r0, [r0, #120]	; 0x78
{
    8fd4:	469b      	mov	fp, r3
	rvdev->vdev->func->set_status(rvdev->vdev, status);
}

static inline uint8_t rpmsg_virtio_get_status(struct rpmsg_virtio_device *rvdev)
{
	return rvdev->vdev->func->get_status(rvdev->vdev);
    8fd6:	6a03      	ldr	r3, [r0, #32]
    8fd8:	b08d      	sub	sp, #52	; 0x34
    8fda:	681b      	ldr	r3, [r3, #0]
    8fdc:	9103      	str	r1, [sp, #12]
    8fde:	4692      	mov	sl, r2
    8fe0:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
    8fe4:	4798      	blx	r3
	/* Validate device state */
	if (!(status & VIRTIO_CONFIG_STATUS_DRIVER_OK)) {
    8fe6:	0743      	lsls	r3, r0, #29
    8fe8:	f140 8084 	bpl.w	90f4 <rpmsg_virtio_send_offchannel_raw+0x128>
		return RPMSG_ERR_DEV_STATE;
	}

	if (wait)
		tick_count = RPMSG_TICK_COUNT / RPMSG_TICKS_PER_INTERVAL;
    8fec:	f240 53dc 	movw	r3, #1500	; 0x5dc
    8ff0:	2f00      	cmp	r7, #0
    8ff2:	bf18      	it	ne
    8ff4:	461f      	movne	r7, r3

	while (1) {
		int avail_size;

		/* Lock the device to enable exclusive access to virtqueues */
		metal_mutex_acquire(&rdev->lock);
    8ff6:	f104 0858 	add.w	r8, r4, #88	; 0x58
    8ffa:	4640      	mov	r0, r8
    8ffc:	f004 fcd5 	bl	d9aa <__metal_mutex_acquire>
	return rvdev->vdev->role;
    9000:	6fa3      	ldr	r3, [r4, #120]	; 0x78
    9002:	699b      	ldr	r3, [r3, #24]
	if (role == RPMSG_MASTER) {
    9004:	b35b      	cbz	r3, 905e <rpmsg_virtio_send_offchannel_raw+0x92>
	if (role == RPMSG_REMOTE) {
    9006:	2b01      	cmp	r3, #1
    9008:	d12c      	bne.n	9064 <rpmsg_virtio_send_offchannel_raw+0x98>
		    (int)virtqueue_get_desc_size(rvdev->svq) -
    900a:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    900e:	f004 fc10 	bl	d832 <virtqueue_get_desc_size>
    9012:	f1a0 0910 	sub.w	r9, r0, #16
		avail_size = _rpmsg_virtio_get_buffer_size(rvdev);
		if (size <= avail_size)
    9016:	454e      	cmp	r6, r9
    9018:	dc32      	bgt.n	9080 <rpmsg_virtio_send_offchannel_raw+0xb4>
    901a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
    901c:	699b      	ldr	r3, [r3, #24]
	if (role == RPMSG_MASTER) {
    901e:	bb23      	cbnz	r3, 906a <rpmsg_virtio_send_offchannel_raw+0x9e>
		data = virtqueue_get_buffer(rvdev->svq, (uint32_t *)len, idx);
    9020:	f10d 0212 	add.w	r2, sp, #18
    9024:	a905      	add	r1, sp, #20
    9026:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    902a:	f004 fb0c 	bl	d646 <virtqueue_get_buffer>
		if (data == NULL) {
    902e:	4605      	mov	r5, r0
    9030:	b948      	cbnz	r0, 9046 <rpmsg_virtio_send_offchannel_raw+0x7a>
			data = rpmsg_virtio_shm_pool_get_buffer(rvdev->shpool,
    9032:	f44f 7100 	mov.w	r1, #512	; 0x200
    9036:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
    903a:	f004 fd57 	bl	daec <rpmsg_virtio_shm_pool_get_buffer>
			*len = RPMSG_BUFFER_SIZE;
    903e:	f44f 7300 	mov.w	r3, #512	; 0x200
			data = rpmsg_virtio_shm_pool_get_buffer(rvdev->shpool,
    9042:	4605      	mov	r5, r0
			*len = RPMSG_BUFFER_SIZE;
    9044:	9305      	str	r3, [sp, #20]
	k_sem_take(m, K_FOREVER);
}

static inline void __metal_mutex_release(metal_mutex_t *m)
{
	k_sem_give(m);
    9046:	4640      	mov	r0, r8
    9048:	f004 fc99 	bl	d97e <k_sem_give>
			buffer = rpmsg_virtio_get_tx_buffer(rvdev, &buff_len,
							    &idx);
		metal_mutex_release(&rdev->lock);
		if (buffer || !tick_count)
    904c:	2d00      	cmp	r5, #0
    904e:	d157      	bne.n	9100 <rpmsg_virtio_send_offchannel_raw+0x134>
    9050:	2f00      	cmp	r7, #0
    9052:	d051      	beq.n	90f8 <rpmsg_virtio_send_offchannel_raw+0x12c>
			break;
		if (avail_size != 0)
    9054:	f1b9 0f00 	cmp.w	r9, #0
    9058:	d150      	bne.n	90fc <rpmsg_virtio_send_offchannel_raw+0x130>
			return RPMSG_ERR_BUFF_SIZE;
		metal_sleep_usec(RPMSG_TICKS_PER_INTERVAL);
		tick_count--;
    905a:	3f01      	subs	r7, #1
	while (1) {
    905c:	e7cd      	b.n	8ffa <rpmsg_virtio_send_offchannel_raw+0x2e>
		length = RPMSG_BUFFER_SIZE - sizeof(struct rpmsg_hdr);
    905e:	f44f 79f8 	mov.w	r9, #496	; 0x1f0
    9062:	e7d8      	b.n	9016 <rpmsg_virtio_send_offchannel_raw+0x4a>
	int length = 0;
    9064:	f04f 0900 	mov.w	r9, #0
    9068:	e7d5      	b.n	9016 <rpmsg_virtio_send_offchannel_raw+0x4a>
	if (role == RPMSG_REMOTE) {
    906a:	2b01      	cmp	r3, #1
    906c:	d108      	bne.n	9080 <rpmsg_virtio_send_offchannel_raw+0xb4>
		data = virtqueue_get_available_buffer(rvdev->svq, idx,
    906e:	aa05      	add	r2, sp, #20
    9070:	f10d 0112 	add.w	r1, sp, #18
    9074:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    9078:	f004 fb20 	bl	d6bc <virtqueue_get_available_buffer>
    907c:	4605      	mov	r5, r0
    907e:	e7e2      	b.n	9046 <rpmsg_virtio_send_offchannel_raw+0x7a>
	if (role == RPMSG_REMOTE) {
    9080:	2500      	movs	r5, #0
    9082:	e7e0      	b.n	9046 <rpmsg_virtio_send_offchannel_raw+0x7a>
 * @return	METAL_BAD_OFFSET if out of range, or offset.
 */
static inline unsigned long
metal_io_virt_to_offset(struct metal_io_region *io, void *virt)
{
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
    9084:	683b      	ldr	r3, [r7, #0]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
    9086:	68b8      	ldr	r0, [r7, #8]
	io = rvdev->shbuf_io;
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
				      &rp_hdr, sizeof(rp_hdr));
	RPMSG_ASSERT(status == sizeof(rp_hdr), "failed to write header\n");

	status = metal_io_block_write(io,
    9088:	f105 0110 	add.w	r1, r5, #16
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
    908c:	1ac9      	subs	r1, r1, r3
    908e:	4281      	cmp	r1, r0
    9090:	bf28      	it	cs
    9092:	f04f 31ff 	movcs.w	r1, #4294967295
    9096:	4633      	mov	r3, r6
    9098:	465a      	mov	r2, fp
    909a:	4638      	mov	r0, r7
    909c:	f004 f999 	bl	d3d2 <metal_io_block_write>
				      metal_io_virt_to_offset(io,
				      RPMSG_LOCATE_DATA(buffer)),
				      data, size);
	RPMSG_ASSERT(status == size, "failed to write buffer\n");
    90a0:	4286      	cmp	r6, r0
    90a2:	d000      	beq.n	90a6 <rpmsg_virtio_send_offchannel_raw+0xda>
    90a4:	e7fe      	b.n	90a4 <rpmsg_virtio_send_offchannel_raw+0xd8>
    90a6:	4640      	mov	r0, r8
    90a8:	f004 fc7f 	bl	d9aa <__metal_mutex_acquire>
    90ac:	6fa2      	ldr	r2, [r4, #120]	; 0x78
	metal_mutex_acquire(&rdev->lock);

	/* Enqueue buffer on virtqueue. */
	status = rpmsg_virtio_enqueue_buffer(rvdev, buffer, buff_len, idx);
    90ae:	9b05      	ldr	r3, [sp, #20]
    90b0:	6992      	ldr	r2, [r2, #24]
	if (role == RPMSG_MASTER) {
    90b2:	b952      	cbnz	r2, 90ca <rpmsg_virtio_send_offchannel_raw+0xfe>
		vqbuf.len = len;
    90b4:	e9cd 5306 	strd	r5, r3, [sp, #24]
		return virtqueue_add_buffer(rvdev->svq, &vqbuf, 0, 1, buffer);
    90b8:	9500      	str	r5, [sp, #0]
    90ba:	2301      	movs	r3, #1
    90bc:	a906      	add	r1, sp, #24
    90be:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    90c2:	f004 fa64 	bl	d58e <virtqueue_add_buffer>
	RPMSG_ASSERT(status == VQUEUE_SUCCESS, "failed to enqueue buffer\n");
    90c6:	b150      	cbz	r0, 90de <rpmsg_virtio_send_offchannel_raw+0x112>
    90c8:	e7fe      	b.n	90c8 <rpmsg_virtio_send_offchannel_raw+0xfc>
	if (role == RPMSG_REMOTE) {
    90ca:	2a01      	cmp	r2, #1
    90cc:	d107      	bne.n	90de <rpmsg_virtio_send_offchannel_raw+0x112>
		return virtqueue_add_consumed_buffer(rvdev->svq, idx, len);
    90ce:	461a      	mov	r2, r3
    90d0:	f8bd 1012 	ldrh.w	r1, [sp, #18]
    90d4:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    90d8:	f7ff fee4 	bl	8ea4 <virtqueue_add_consumed_buffer>
    90dc:	e7f3      	b.n	90c6 <rpmsg_virtio_send_offchannel_raw+0xfa>
	/* Let the other side know that there is a job to process. */
	virtqueue_kick(rvdev->svq);
    90de:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    90e2:	f004 fb82 	bl	d7ea <virtqueue_kick>
    90e6:	4640      	mov	r0, r8
    90e8:	f004 fc49 	bl	d97e <k_sem_give>

	metal_mutex_release(&rdev->lock);

	return size;
}
    90ec:	4630      	mov	r0, r6
    90ee:	b00d      	add	sp, #52	; 0x34
    90f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return RPMSG_ERR_DEV_STATE;
    90f4:	4e0f      	ldr	r6, [pc, #60]	; (9134 <rpmsg_virtio_send_offchannel_raw+0x168>)
    90f6:	e7f9      	b.n	90ec <rpmsg_virtio_send_offchannel_raw+0x120>
		return RPMSG_ERR_NO_BUFF;
    90f8:	4e0f      	ldr	r6, [pc, #60]	; (9138 <rpmsg_virtio_send_offchannel_raw+0x16c>)
    90fa:	e7f7      	b.n	90ec <rpmsg_virtio_send_offchannel_raw+0x120>
			return RPMSG_ERR_BUFF_SIZE;
    90fc:	4e0f      	ldr	r6, [pc, #60]	; (913c <rpmsg_virtio_send_offchannel_raw+0x170>)
    90fe:	e7f5      	b.n	90ec <rpmsg_virtio_send_offchannel_raw+0x120>
	rp_hdr.src = src;
    9100:	9b03      	ldr	r3, [sp, #12]
	io = rvdev->shbuf_io;
    9102:	f8d4 7084 	ldr.w	r7, [r4, #132]	; 0x84
	rp_hdr.src = src;
    9106:	9308      	str	r3, [sp, #32]
	rp_hdr.reserved = 0;
    9108:	2300      	movs	r3, #0
    910a:	6839      	ldr	r1, [r7, #0]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
    910c:	68b8      	ldr	r0, [r7, #8]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
    910e:	1a69      	subs	r1, r5, r1
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
    9110:	4281      	cmp	r1, r0
    9112:	bf28      	it	cs
    9114:	f04f 31ff 	movcs.w	r1, #4294967295
	rp_hdr.reserved = 0;
    9118:	930a      	str	r3, [sp, #40]	; 0x28
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
    911a:	aa08      	add	r2, sp, #32
    911c:	2310      	movs	r3, #16
    911e:	4638      	mov	r0, r7
	rp_hdr.dst = dst;
    9120:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
	rp_hdr.len = size;
    9124:	f8ad 602c 	strh.w	r6, [sp, #44]	; 0x2c
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
    9128:	f004 f953 	bl	d3d2 <metal_io_block_write>
	RPMSG_ASSERT(status == sizeof(rp_hdr), "failed to write header\n");
    912c:	2810      	cmp	r0, #16
    912e:	d0a9      	beq.n	9084 <rpmsg_virtio_send_offchannel_raw+0xb8>
    9130:	e7fe      	b.n	9130 <rpmsg_virtio_send_offchannel_raw+0x164>
    9132:	bf00      	nop
    9134:	fffff82c 	.word	0xfffff82c
    9138:	fffff82e 	.word	0xfffff82e
    913c:	fffff82b 	.word	0xfffff82b

00009140 <rpmsg_init_vdev>:
int rpmsg_init_vdev(struct rpmsg_virtio_device *rvdev,
		    struct virtio_device *vdev,
		    rpmsg_ns_bind_cb ns_bind_cb,
		    struct metal_io_region *shm_io,
		    struct rpmsg_virtio_shm_pool *shpool)
{
    9140:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9144:	4688      	mov	r8, r1
    9146:	b088      	sub	sp, #32
    9148:	4615      	mov	r5, r2
	unsigned long dev_features;
	int status;
	unsigned int i, role;

	rdev = &rvdev->rdev;
	memset(rdev, 0, sizeof(*rdev));
    914a:	2100      	movs	r1, #0
    914c:	2278      	movs	r2, #120	; 0x78
{
    914e:	4604      	mov	r4, r0
    9150:	461e      	mov	r6, r3
    9152:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
	memset(rdev, 0, sizeof(*rdev));
    9156:	f002 fecc 	bl	bef2 <memset>
	return z_impl_k_sem_init(sem, initial_count, limit);
    915a:	2201      	movs	r2, #1
    915c:	f104 0058 	add.w	r0, r4, #88	; 0x58
    9160:	4611      	mov	r1, r2
    9162:	f004 fefd 	bl	df60 <z_impl_k_sem_init>
	metal_mutex_init(&rdev->lock);
	rvdev->vdev = vdev;
	rdev->ns_bind_cb = ns_bind_cb;
	vdev->priv = rvdev;
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
    9166:	4b56      	ldr	r3, [pc, #344]	; (92c0 <rpmsg_init_vdev+0x180>)
	rvdev->vdev = vdev;
    9168:	f8c4 8078 	str.w	r8, [r4, #120]	; 0x78
	rdev->ns_bind_cb = ns_bind_cb;
    916c:	6725      	str	r5, [r4, #112]	; 0x70
	vdev->priv = rvdev;
    916e:	f8c8 4024 	str.w	r4, [r8, #36]	; 0x24
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
    9172:	6763      	str	r3, [r4, #116]	; 0x74
    9174:	6fa3      	ldr	r3, [r4, #120]	; 0x78
    9176:	699d      	ldr	r5, [r3, #24]
	role = rpmsg_virtio_get_role(rvdev);

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
    9178:	bb5d      	cbnz	r5, 91d2 <rpmsg_init_vdev+0x92>
		/*
		 * Since device is RPMSG Remote so we need to manage the
		 * shared buffers. Create shared memory pool to handle buffers.
		 */
		if (!shpool)
    917a:	f1b9 0f00 	cmp.w	r9, #0
    917e:	f000 809b 	beq.w	92b8 <rpmsg_init_vdev+0x178>
			return RPMSG_ERR_PARAM;
		if (!shpool->size)
    9182:	f8d9 3008 	ldr.w	r3, [r9, #8]
    9186:	2b00      	cmp	r3, #0
    9188:	f000 8098 	beq.w	92bc <rpmsg_init_vdev+0x17c>
			return RPMSG_ERR_NO_BUFF;
		rvdev->shpool = shpool;

		vq_names[0] = "rx_vq";
    918c:	4b4d      	ldr	r3, [pc, #308]	; (92c4 <rpmsg_init_vdev+0x184>)
		rvdev->shpool = shpool;
    918e:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
		vq_names[0] = "rx_vq";
    9192:	9302      	str	r3, [sp, #8]
		vq_names[1] = "tx_vq";
    9194:	4b4c      	ldr	r3, [pc, #304]	; (92c8 <rpmsg_init_vdev+0x188>)
    9196:	9303      	str	r3, [sp, #12]
		callback[0] = rpmsg_virtio_rx_callback;
    9198:	4b4c      	ldr	r3, [pc, #304]	; (92cc <rpmsg_init_vdev+0x18c>)
    919a:	9304      	str	r3, [sp, #16]
		callback[1] = rpmsg_virtio_tx_callback;
    919c:	4b4c      	ldr	r3, [pc, #304]	; (92d0 <rpmsg_init_vdev+0x190>)
    919e:	9305      	str	r3, [sp, #20]
		rvdev->rvq  = vdev->vrings_info[0].vq;
    91a0:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
    91a4:	681a      	ldr	r2, [r3, #0]
		rvdev->svq  = vdev->vrings_info[1].vq;
    91a6:	699b      	ldr	r3, [r3, #24]
		rvdev->rvq  = vdev->vrings_info[0].vq;
    91a8:	67e2      	str	r2, [r4, #124]	; 0x7c
		vq_names[0] = "tx_vq";
		vq_names[1] = "rx_vq";
		callback[0] = rpmsg_virtio_tx_callback;
		callback[1] = rpmsg_virtio_rx_callback;
		rvdev->rvq  = vdev->vrings_info[1].vq;
		rvdev->svq  = vdev->vrings_info[0].vq;
    91aa:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	rvdev->shbuf_io = shm_io;

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
    91ae:	2d01      	cmp	r5, #1
	rvdev->shbuf_io = shm_io;
    91b0:	f8c4 6084 	str.w	r6, [r4, #132]	; 0x84
	if (role == RPMSG_REMOTE) {
    91b4:	d01f      	beq.n	91f6 <rpmsg_init_vdev+0xb6>
	rpmsg_virtio_create_virtqueues(struct rpmsg_virtio_device *rvdev,
				       int flags, unsigned int nvqs,
				       const char *names[],
				       vq_callback * callbacks[])
{
	return virtio_create_virtqueues(rvdev->vdev, flags, nvqs, names,
    91b6:	ab04      	add	r3, sp, #16
    91b8:	9300      	str	r3, [sp, #0]
    91ba:	2202      	movs	r2, #2
    91bc:	ab02      	add	r3, sp, #8
    91be:	2100      	movs	r1, #0
    91c0:	6fa0      	ldr	r0, [r4, #120]	; 0x78
    91c2:	f004 f97c 	bl	d4be <virtio_create_virtqueues>
#endif /*!VIRTIO_MASTER_ONLY*/

	/* Create virtqueues for remote device */
	status = rpmsg_virtio_create_virtqueues(rvdev, 0, RPMSG_NUM_VRINGS,
						vq_names, callback);
	if (status != RPMSG_SUCCESS)
    91c6:	4607      	mov	r7, r0
    91c8:	b308      	cbz	r0, 920e <rpmsg_init_vdev+0xce>
	if (role == RPMSG_MASTER)
		rpmsg_virtio_set_status(rvdev, VIRTIO_CONFIG_STATUS_DRIVER_OK);
#endif /*!VIRTIO_SLAVE_ONLY*/

	return status;
}
    91ca:	4638      	mov	r0, r7
    91cc:	b008      	add	sp, #32
    91ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (role == RPMSG_REMOTE) {
    91d2:	2d01      	cmp	r5, #1
    91d4:	d1eb      	bne.n	91ae <rpmsg_init_vdev+0x6e>
		vq_names[0] = "tx_vq";
    91d6:	4b3c      	ldr	r3, [pc, #240]	; (92c8 <rpmsg_init_vdev+0x188>)
    91d8:	9302      	str	r3, [sp, #8]
		vq_names[1] = "rx_vq";
    91da:	4b3a      	ldr	r3, [pc, #232]	; (92c4 <rpmsg_init_vdev+0x184>)
    91dc:	9303      	str	r3, [sp, #12]
		callback[0] = rpmsg_virtio_tx_callback;
    91de:	4b3c      	ldr	r3, [pc, #240]	; (92d0 <rpmsg_init_vdev+0x190>)
    91e0:	9304      	str	r3, [sp, #16]
		callback[1] = rpmsg_virtio_rx_callback;
    91e2:	4b3a      	ldr	r3, [pc, #232]	; (92cc <rpmsg_init_vdev+0x18c>)
    91e4:	9305      	str	r3, [sp, #20]
		rvdev->rvq  = vdev->vrings_info[1].vq;
    91e6:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
    91ea:	699a      	ldr	r2, [r3, #24]
		rvdev->svq  = vdev->vrings_info[0].vq;
    91ec:	681b      	ldr	r3, [r3, #0]
		rvdev->rvq  = vdev->vrings_info[1].vq;
    91ee:	67e2      	str	r2, [r4, #124]	; 0x7c
		rvdev->svq  = vdev->vrings_info[0].vq;
    91f0:	e7db      	b.n	91aa <rpmsg_init_vdev+0x6a>
		} else if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK) {
    91f2:	0742      	lsls	r2, r0, #29
    91f4:	d4df      	bmi.n	91b6 <rpmsg_init_vdev+0x76>
		status = rpmsg_virtio_get_status(rvdev);
    91f6:	6fa0      	ldr	r0, [r4, #120]	; 0x78
	return rvdev->vdev->func->get_status(rvdev->vdev);
    91f8:	6a03      	ldr	r3, [r0, #32]
    91fa:	681b      	ldr	r3, [r3, #0]
    91fc:	4798      	blx	r3
		if (status & VIRTIO_CONFIG_STATUS_NEEDS_RESET) {
    91fe:	0641      	lsls	r1, r0, #25
    9200:	d5f7      	bpl.n	91f2 <rpmsg_init_vdev+0xb2>
			rpmsg_virtio_set_status(rvdev, 0);
    9202:	6fa0      	ldr	r0, [r4, #120]	; 0x78
	rvdev->vdev->func->set_status(rvdev->vdev, status);
    9204:	2100      	movs	r1, #0
    9206:	6a03      	ldr	r3, [r0, #32]
    9208:	685b      	ldr	r3, [r3, #4]
    920a:	4798      	blx	r3
    920c:	e7f3      	b.n	91f6 <rpmsg_init_vdev+0xb6>
		vq = vdev->vrings_info[i].vq;
    920e:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
		vq->shm_io = shm_io;
    9212:	681a      	ldr	r2, [r3, #0]
    9214:	699b      	ldr	r3, [r3, #24]
    9216:	62d6      	str	r6, [r2, #44]	; 0x2c
    9218:	62de      	str	r6, [r3, #44]	; 0x2c
	if (role == RPMSG_MASTER) {
    921a:	b93d      	cbnz	r5, 922c <rpmsg_init_vdev+0xec>
		vqbuf.len = RPMSG_BUFFER_SIZE;
    921c:	f44f 7300 	mov.w	r3, #512	; 0x200
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
    9220:	46aa      	mov	sl, r5
		vqbuf.len = RPMSG_BUFFER_SIZE;
    9222:	9307      	str	r3, [sp, #28]
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
    9224:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
    9226:	895b      	ldrh	r3, [r3, #10]
    9228:	4553      	cmp	r3, sl
    922a:	d821      	bhi.n	9270 <rpmsg_init_vdev+0x130>
	dev_features = rpmsg_virtio_get_features(rvdev);
    922c:	6fa0      	ldr	r0, [r4, #120]	; 0x78
	list->next = list->prev = list;
    922e:	e9c4 4400 	strd	r4, r4, [r4]
	return rvdev->vdev->func->get_features(rvdev->vdev);
    9232:	6a03      	ldr	r3, [r0, #32]
    9234:	689b      	ldr	r3, [r3, #8]
    9236:	4798      	blx	r3
	if ((dev_features & (1 << VIRTIO_RPMSG_F_NS))) {
    9238:	07c3      	lsls	r3, r0, #31
    923a:	d511      	bpl.n	9260 <rpmsg_init_vdev+0x120>
		rpmsg_init_ept(&rdev->ns_ept, "NS",
    923c:	f104 0608 	add.w	r6, r4, #8
	strncpy(ept->name, name, sizeof(ept->name));
    9240:	4924      	ldr	r1, [pc, #144]	; (92d4 <rpmsg_init_vdev+0x194>)
    9242:	2220      	movs	r2, #32
    9244:	4630      	mov	r0, r6
    9246:	f002 fdd7 	bl	bdf8 <strncpy>
	ept->addr = src;
    924a:	2335      	movs	r3, #53	; 0x35
	ept->dest_addr = dest;
    924c:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
	ept->cb = cb;
    9250:	4b21      	ldr	r3, [pc, #132]	; (92d8 <rpmsg_init_vdev+0x198>)
		(void)rpmsg_register_endpoint(rdev, &rdev->ns_ept);
    9252:	4631      	mov	r1, r6
    9254:	6363      	str	r3, [r4, #52]	; 0x34
	ept->ns_unbind_cb = ns_unbind_cb;
    9256:	2300      	movs	r3, #0
    9258:	4620      	mov	r0, r4
    925a:	63a3      	str	r3, [r4, #56]	; 0x38
    925c:	f004 fb6c 	bl	d938 <rpmsg_register_endpoint>
	if (role == RPMSG_MASTER)
    9260:	2d00      	cmp	r5, #0
    9262:	d1b2      	bne.n	91ca <rpmsg_init_vdev+0x8a>
		rpmsg_virtio_set_status(rvdev, VIRTIO_CONFIG_STATUS_DRIVER_OK);
    9264:	6fa0      	ldr	r0, [r4, #120]	; 0x78
	rvdev->vdev->func->set_status(rvdev->vdev, status);
    9266:	2104      	movs	r1, #4
    9268:	6a03      	ldr	r3, [r0, #32]
    926a:	685b      	ldr	r3, [r3, #4]
    926c:	4798      	blx	r3
    926e:	e7ac      	b.n	91ca <rpmsg_init_vdev+0x8a>
			buffer = rpmsg_virtio_shm_pool_get_buffer(shpool,
    9270:	f44f 7100 	mov.w	r1, #512	; 0x200
    9274:	4648      	mov	r0, r9
    9276:	f004 fc39 	bl	daec <rpmsg_virtio_shm_pool_get_buffer>
			if (!buffer) {
    927a:	4680      	mov	r8, r0
    927c:	b1c8      	cbz	r0, 92b2 <rpmsg_init_vdev+0x172>
    927e:	6831      	ldr	r1, [r6, #0]
			vqbuf.buf = buffer;
    9280:	9006      	str	r0, [sp, #24]
    9282:	1a41      	subs	r1, r0, r1
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
    9284:	68b0      	ldr	r0, [r6, #8]
			metal_io_block_set(shm_io,
    9286:	f44f 7300 	mov.w	r3, #512	; 0x200
    928a:	4281      	cmp	r1, r0
    928c:	bf28      	it	cs
    928e:	f04f 31ff 	movcs.w	r1, #4294967295
    9292:	2200      	movs	r2, #0
    9294:	4630      	mov	r0, r6
    9296:	f004 f8d7 	bl	d448 <metal_io_block_set>
				virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1,
    929a:	f8cd 8000 	str.w	r8, [sp]
    929e:	2301      	movs	r3, #1
    92a0:	2200      	movs	r2, #0
    92a2:	a906      	add	r1, sp, #24
    92a4:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
    92a6:	f004 f972 	bl	d58e <virtqueue_add_buffer>
			if (status != RPMSG_SUCCESS) {
    92aa:	b918      	cbnz	r0, 92b4 <rpmsg_init_vdev+0x174>
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
    92ac:	f10a 0a01 	add.w	sl, sl, #1
    92b0:	e7b8      	b.n	9224 <rpmsg_init_vdev+0xe4>
				return RPMSG_ERR_NO_BUFF;
    92b2:	480a      	ldr	r0, [pc, #40]	; (92dc <rpmsg_init_vdev+0x19c>)
    92b4:	4607      	mov	r7, r0
    92b6:	e788      	b.n	91ca <rpmsg_init_vdev+0x8a>
			return RPMSG_ERR_PARAM;
    92b8:	4f09      	ldr	r7, [pc, #36]	; (92e0 <rpmsg_init_vdev+0x1a0>)
    92ba:	e786      	b.n	91ca <rpmsg_init_vdev+0x8a>
			return RPMSG_ERR_NO_BUFF;
    92bc:	4f07      	ldr	r7, [pc, #28]	; (92dc <rpmsg_init_vdev+0x19c>)
    92be:	e784      	b.n	91ca <rpmsg_init_vdev+0x8a>
    92c0:	00008fcd 	.word	0x00008fcd
    92c4:	00010cc5 	.word	0x00010cc5
    92c8:	00010ccb 	.word	0x00010ccb
    92cc:	0000da47 	.word	0x0000da47
    92d0:	0000d97d 	.word	0x0000d97d
    92d4:	00010cd1 	.word	0x00010cd1
    92d8:	0000d9b3 	.word	0x0000d9b3
    92dc:	fffff82e 	.word	0xfffff82e
    92e0:	fffff82d 	.word	0xfffff82d

000092e4 <z_sys_device_do_config_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_device_do_config_level(s32_t level)
{
    92e4:	b570      	push	{r4, r5, r6, lr}
		retval = device_conf->init(info);
		if (retval != 0) {
			/* Initialization failed. Clear the API struct so that
			 * device_get_binding() will not succeed for it.
			 */
			info->driver_api = NULL;
    92e6:	2600      	movs	r6, #0
	for (info = config_levels[level]; info < config_levels[level+1];
    92e8:	4b08      	ldr	r3, [pc, #32]	; (930c <z_sys_device_do_config_level+0x28>)
    92ea:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    92ee:	3001      	adds	r0, #1
    92f0:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
    92f4:	42a5      	cmp	r5, r4
    92f6:	d800      	bhi.n	92fa <z_sys_device_do_config_level+0x16>
		} else {
			z_object_init(info);
		}
	}
}
    92f8:	bd70      	pop	{r4, r5, r6, pc}
		retval = device_conf->init(info);
    92fa:	6823      	ldr	r3, [r4, #0]
    92fc:	4620      	mov	r0, r4
    92fe:	685b      	ldr	r3, [r3, #4]
    9300:	4798      	blx	r3
		if (retval != 0) {
    9302:	b100      	cbz	r0, 9306 <z_sys_device_do_config_level+0x22>
			info->driver_api = NULL;
    9304:	6066      	str	r6, [r4, #4]
								info++) {
    9306:	340c      	adds	r4, #12
    9308:	e7f4      	b.n	92f4 <z_sys_device_do_config_level+0x10>
    930a:	bf00      	nop
    930c:	0000eeb8 	.word	0x0000eeb8

00009310 <z_impl_device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed.  Reserve string comparisons for a fallback.
	 */
	for (info = __device_init_start; info != __device_init_end; info++) {
    9310:	4b10      	ldr	r3, [pc, #64]	; (9354 <z_impl_device_get_binding+0x44>)
{
    9312:	b570      	push	{r4, r5, r6, lr}
    9314:	4605      	mov	r5, r0
    9316:	461e      	mov	r6, r3
	for (info = __device_init_start; info != __device_init_end; info++) {
    9318:	4c0f      	ldr	r4, [pc, #60]	; (9358 <z_impl_device_get_binding+0x48>)
    931a:	429c      	cmp	r4, r3
    931c:	d104      	bne.n	9328 <z_impl_device_get_binding+0x18>
		    (info->config->name == name)) {
			return info;
		}
	}

	for (info = __device_init_start; info != __device_init_end; info++) {
    931e:	4c0e      	ldr	r4, [pc, #56]	; (9358 <z_impl_device_get_binding+0x48>)
    9320:	42b4      	cmp	r4, r6
    9322:	d109      	bne.n	9338 <z_impl_device_get_binding+0x28>
		if (strcmp(name, info->config->name) == 0) {
			return info;
		}
	}

	return NULL;
    9324:	2400      	movs	r4, #0
    9326:	e012      	b.n	934e <z_impl_device_get_binding+0x3e>
		if ((info->driver_api != NULL) &&
    9328:	6862      	ldr	r2, [r4, #4]
    932a:	b11a      	cbz	r2, 9334 <z_impl_device_get_binding+0x24>
		    (info->config->name == name)) {
    932c:	6822      	ldr	r2, [r4, #0]
		if ((info->driver_api != NULL) &&
    932e:	6812      	ldr	r2, [r2, #0]
    9330:	42aa      	cmp	r2, r5
    9332:	d00c      	beq.n	934e <z_impl_device_get_binding+0x3e>
	for (info = __device_init_start; info != __device_init_end; info++) {
    9334:	340c      	adds	r4, #12
    9336:	e7f0      	b.n	931a <z_impl_device_get_binding+0xa>
		if (info->driver_api == NULL) {
    9338:	6863      	ldr	r3, [r4, #4]
    933a:	b90b      	cbnz	r3, 9340 <z_impl_device_get_binding+0x30>
	for (info = __device_init_start; info != __device_init_end; info++) {
    933c:	340c      	adds	r4, #12
    933e:	e7ef      	b.n	9320 <z_impl_device_get_binding+0x10>
		if (strcmp(name, info->config->name) == 0) {
    9340:	6823      	ldr	r3, [r4, #0]
    9342:	4628      	mov	r0, r5
    9344:	6819      	ldr	r1, [r3, #0]
    9346:	f002 fd7f 	bl	be48 <strcmp>
    934a:	2800      	cmp	r0, #0
    934c:	d1f6      	bne.n	933c <z_impl_device_get_binding+0x2c>
}
    934e:	4620      	mov	r0, r4
    9350:	bd70      	pop	{r4, r5, r6, pc}
    9352:	bf00      	nop
    9354:	20004c2c 	.word	0x20004c2c
    9358:	20004b6c 	.word	0x20004b6c

0000935c <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    935c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    9360:	4605      	mov	r5, r0
    9362:	4688      	mov	r8, r1
	return z_impl_k_current_get();
    9364:	f000 fd88 	bl	9e78 <z_impl_k_current_get>
	struct k_thread *thread = k_current_get();

	/* sanitycheck looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating sanitycheck
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    9368:	2201      	movs	r2, #1
    936a:	f04f 0300 	mov.w	r3, #0
    936e:	4c26      	ldr	r4, [pc, #152]	; (9408 <z_fatal_error+0xac>)
    9370:	f362 0307 	bfi	r3, r2, #0, #8
    9374:	4a25      	ldr	r2, [pc, #148]	; (940c <z_fatal_error+0xb0>)
    9376:	2d04      	cmp	r5, #4
    9378:	eba4 0402 	sub.w	r4, r4, r2
    937c:	f3c4 04c9 	ubfx	r4, r4, #3, #10
    9380:	bf98      	it	ls
    9382:	4a23      	ldrls	r2, [pc, #140]	; (9410 <z_fatal_error+0xb4>)
    9384:	f364 138f 	bfi	r3, r4, #6, #10
    9388:	f8ad 3000 	strh.w	r3, [sp]
    938c:	4606      	mov	r6, r0
    938e:	f04f 0300 	mov.w	r3, #0
    9392:	bf94      	ite	ls
    9394:	f852 2025 	ldrls.w	r2, [r2, r5, lsl #2]
    9398:	4a1e      	ldrhi	r2, [pc, #120]	; (9414 <z_fatal_error+0xb8>)
    939a:	4629      	mov	r1, r5
    939c:	481e      	ldr	r0, [pc, #120]	; (9418 <z_fatal_error+0xbc>)
    939e:	f002 f928 	bl	b5f2 <log_3>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    93a2:	f8d8 301c 	ldr.w	r3, [r8, #28]
    93a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if (arch_is_in_nested_exception(esf)) {
    93aa:	b14b      	cbz	r3, 93c0 <z_fatal_error+0x64>
		LOG_ERR("Fault during interrupt handling\n");
    93ac:	f04f 0100 	mov.w	r1, #0
    93b0:	2301      	movs	r3, #1
    93b2:	f363 0107 	bfi	r1, r3, #0, #8
    93b6:	f364 118f 	bfi	r1, r4, #6, #10
    93ba:	4818      	ldr	r0, [pc, #96]	; (941c <z_fatal_error+0xc0>)
    93bc:	f002 f8e0 	bl	b580 <log_0>
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    93c0:	f04f 0700 	mov.w	r7, #0
    93c4:	2301      	movs	r3, #1
	const char *thread_name = k_thread_name_get(thread);
    93c6:	4630      	mov	r0, r6
	LOG_ERR("Current thread: %p (%s)", thread,
    93c8:	f363 0707 	bfi	r7, r3, #0, #8
    93cc:	f364 178f 	bfi	r7, r4, #6, #10
	const char *thread_name = k_thread_name_get(thread);
    93d0:	f004 fddf 	bl	df92 <k_thread_name_get>
	if (thread_name == NULL || thread_name[0] == '\0') {
    93d4:	b1b0      	cbz	r0, 9404 <z_fatal_error+0xa8>
    93d6:	7802      	ldrb	r2, [r0, #0]
		thread_name = "unknown";
    93d8:	4b11      	ldr	r3, [pc, #68]	; (9420 <z_fatal_error+0xc4>)
    93da:	2a00      	cmp	r2, #0
    93dc:	bf08      	it	eq
    93de:	4618      	moveq	r0, r3
	LOG_ERR("Current thread: %p (%s)", thread,
    93e0:	f7f7 fce6 	bl	db0 <log_strdup>
    93e4:	463b      	mov	r3, r7
    93e6:	4602      	mov	r2, r0
    93e8:	4631      	mov	r1, r6
    93ea:	480e      	ldr	r0, [pc, #56]	; (9424 <z_fatal_error+0xc8>)
    93ec:	f002 f8e9 	bl	b5c2 <log_2>
		log_strdup(thread_name_get(thread)));

	k_sys_fatal_error_handler(reason, esf);
    93f0:	4641      	mov	r1, r8
    93f2:	4628      	mov	r0, r5
    93f4:	f7ff fb6e 	bl	8ad4 <k_sys_fatal_error_handler>
	z_impl_k_thread_abort(thread);
    93f8:	4630      	mov	r0, r6
			}
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	k_thread_abort(thread);
}
    93fa:	b002      	add	sp, #8
    93fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    9400:	f7f9 b960 	b.w	26c4 <z_impl_k_thread_abort>
		thread_name = "unknown";
    9404:	4806      	ldr	r0, [pc, #24]	; (9420 <z_fatal_error+0xc4>)
    9406:	e7eb      	b.n	93e0 <z_fatal_error+0x84>
    9408:	0000e75c 	.word	0x0000e75c
    940c:	0000e6dc 	.word	0x0000e6dc
    9410:	0000eed0 	.word	0x0000eed0
    9414:	00010d1e 	.word	0x00010d1e
    9418:	00010d2c 	.word	0x00010d2c
    941c:	00010d54 	.word	0x00010d54
    9420:	00010493 	.word	0x00010493
    9424:	00010d75 	.word	0x00010d75

00009428 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
    9428:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
    942a:	4d0b      	ldr	r5, [pc, #44]	; (9458 <idle+0x30>)
	__asm__ volatile(
    942c:	f04f 0220 	mov.w	r2, #32
    9430:	f3ef 8311 	mrs	r3, BASEPRI
    9434:	f382 8811 	msr	BASEPRI, r2
    9438:	f3bf 8f6f 	isb	sy
	s32_t ticks = z_get_next_timeout_expiry();
    943c:	f004 fe48 	bl	e0d0 <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
    9440:	2101      	movs	r1, #1
	s32_t ticks = z_get_next_timeout_expiry();
    9442:	4604      	mov	r4, r0
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
    9444:	2802      	cmp	r0, #2
    9446:	bfd8      	it	le
    9448:	4608      	movle	r0, r1
    944a:	f004 fe51 	bl	e0f0 <z_set_timeout_expiry>
	_kernel.idle = ticks;
    944e:	622c      	str	r4, [r5, #32]
 * @return N/A
 * @req K-CPU-IDLE-001
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    9450:	f7f8 fdc6 	bl	1fe0 <arch_cpu_idle>
    9454:	e7ea      	b.n	942c <idle+0x4>
    9456:	bf00      	nop
    9458:	200011d0 	.word	0x200011d0

0000945c <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    945c:	4802      	ldr	r0, [pc, #8]	; (9468 <z_bss_zero+0xc>)
    945e:	4a03      	ldr	r2, [pc, #12]	; (946c <z_bss_zero+0x10>)
    9460:	2100      	movs	r1, #0
    9462:	1a12      	subs	r2, r2, r0
    9464:	f002 bd45 	b.w	bef2 <memset>
    9468:	20000000 	.word	0x20000000
    946c:	20001530 	.word	0x20001530

00009470 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    9470:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
    9472:	4806      	ldr	r0, [pc, #24]	; (948c <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
    9474:	4a06      	ldr	r2, [pc, #24]	; (9490 <z_data_copy+0x20>)
    9476:	4907      	ldr	r1, [pc, #28]	; (9494 <z_data_copy+0x24>)
    9478:	1a12      	subs	r2, r2, r0
    947a:	f002 fd10 	bl	be9e <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    947e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
    9482:	4a05      	ldr	r2, [pc, #20]	; (9498 <z_data_copy+0x28>)
    9484:	4905      	ldr	r1, [pc, #20]	; (949c <z_data_copy+0x2c>)
    9486:	4806      	ldr	r0, [pc, #24]	; (94a0 <z_data_copy+0x30>)
    9488:	f002 bd09 	b.w	be9e <memcpy>
    948c:	20004838 	.word	0x20004838
    9490:	20004e04 	.word	0x20004e04
    9494:	00010de6 	.word	0x00010de6
    9498:	00000000 	.word	0x00000000
    949c:	00010de4 	.word	0x00010de4
    94a0:	20000000 	.word	0x20000000

000094a4 <bg_thread_main>:
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_post_kernel = true;
    94a4:	2201      	movs	r2, #1
{
    94a6:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    94a8:	4b0b      	ldr	r3, [pc, #44]	; (94d8 <bg_thread_main+0x34>)

	z_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
    94aa:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    94ac:	701a      	strb	r2, [r3, #0]
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
    94ae:	f7ff ff19 	bl	92e4 <z_sys_device_do_config_level>
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    94b2:	4a0a      	ldr	r2, [pc, #40]	; (94dc <bg_thread_main+0x38>)
    94b4:	490a      	ldr	r1, [pc, #40]	; (94e0 <bg_thread_main+0x3c>)
    94b6:	480b      	ldr	r0, [pc, #44]	; (94e4 <bg_thread_main+0x40>)
    94b8:	f001 fbe4 	bl	ac84 <printk>
			KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif

	/* Final init level before app starts */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
    94bc:	2003      	movs	r0, #3
    94be:	f7ff ff11 	bl	92e4 <z_sys_device_do_config_level>
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	z_init_static_threads();
    94c2:	f000 fdd3 	bl	a06c <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
    94c6:	f7f7 f8a3 	bl	610 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    94ca:	4a07      	ldr	r2, [pc, #28]	; (94e8 <bg_thread_main+0x44>)
    94cc:	7b13      	ldrb	r3, [r2, #12]
    94ce:	f023 0301 	bic.w	r3, r3, #1
    94d2:	7313      	strb	r3, [r2, #12]

	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    94d4:	bd08      	pop	{r3, pc}
    94d6:	bf00      	nop
    94d8:	2000152f 	.word	0x2000152f
    94dc:	0000f155 	.word	0x0000f155
    94e0:	00010d8d 	.word	0x00010d8d
    94e4:	00010d9a 	.word	0x00010d9a
    94e8:	20000940 	.word	0x20000940

000094ec <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
    94ec:	b580      	push	{r7, lr}
    94ee:	b0a2      	sub	sp, #136	; 0x88
#endif	/* CONFIG_STACK_CANARIES */

	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
    94f0:	f7f7 fbc2 	bl	c78 <log_core_init>
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	u32_t msp = (u32_t)(Z_THREAD_STACK_BUFFER(_interrupt_stack)) +
    94f4:	4b33      	ldr	r3, [pc, #204]	; (95c4 <z_cstart+0xd8>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    94f6:	f383 8808 	msr	MSP, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    94fa:	2400      	movs	r4, #0
    94fc:	23e0      	movs	r3, #224	; 0xe0
    94fe:	4d32      	ldr	r5, [pc, #200]	; (95c8 <z_cstart+0xdc>)

	/* perform any architecture-specific initialization */
	arch_kernel_init();

#ifdef CONFIG_MULTITHREADING
	struct k_thread dummy_thread = {
    9500:	2701      	movs	r7, #1
    9502:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    9506:	77ec      	strb	r4, [r5, #31]
    9508:	762c      	strb	r4, [r5, #24]
    950a:	766c      	strb	r4, [r5, #25]
    950c:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    950e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
# ifdef CONFIG_SCHED_CPU_MASK
		 .base.cpu_mask = -1,
# endif
	};

	_current = &dummy_thread;
    9510:	4e2e      	ldr	r6, [pc, #184]	; (95cc <z_cstart+0xe0>)
    9512:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    9516:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    9518:	f7f9 f8ae 	bl	2678 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    951c:	f7f8 fd5a 	bl	1fd4 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    9520:	f04f 33ff 	mov.w	r3, #4294967295
    9524:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    9526:	62eb      	str	r3, [r5, #44]	; 0x2c
	struct k_thread dummy_thread = {
    9528:	ab07      	add	r3, sp, #28
    952a:	226c      	movs	r2, #108	; 0x6c
    952c:	4621      	mov	r1, r4
    952e:	4618      	mov	r0, r3
    9530:	f002 fcdf 	bl	bef2 <memset>
	_current = &dummy_thread;
    9534:	60b0      	str	r0, [r6, #8]
#ifdef CONFIG_USERSPACE
	z_app_shmem_bss_zero();
#endif

	/* perform basic hardware initialization */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    9536:	4620      	mov	r0, r4
	struct k_thread dummy_thread = {
    9538:	f88d 7029 	strb.w	r7, [sp, #41]	; 0x29
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    953c:	f7ff fed2 	bl	92e4 <z_sys_device_do_config_level>
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    9540:	4638      	mov	r0, r7
    9542:	f7ff fecf 	bl	92e4 <z_sys_device_do_config_level>
	_kernel.ready_q.cache = &z_main_thread;
    9546:	4d22      	ldr	r5, [pc, #136]	; (95d0 <z_cstart+0xe4>)
	z_sched_init();
    9548:	f000 fc16 	bl	9d78 <z_sched_init>
	z_setup_new_thread(&z_main_thread, z_main_stack,
    954c:	4b21      	ldr	r3, [pc, #132]	; (95d4 <z_cstart+0xe8>)
    954e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    9552:	e9cd 7304 	strd	r7, r3, [sp, #16]
    9556:	e9cd 4402 	strd	r4, r4, [sp, #8]
    955a:	4b1f      	ldr	r3, [pc, #124]	; (95d8 <z_cstart+0xec>)
    955c:	e9cd 4400 	strd	r4, r4, [sp]
    9560:	491e      	ldr	r1, [pc, #120]	; (95dc <z_cstart+0xf0>)
    9562:	4628      	mov	r0, r5
	_kernel.ready_q.cache = &z_main_thread;
    9564:	6275      	str	r5, [r6, #36]	; 0x24
	z_setup_new_thread(&z_main_thread, z_main_stack,
    9566:	f000 fd19 	bl	9f9c <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    956a:	7b6b      	ldrb	r3, [r5, #13]
    956c:	f023 0204 	bic.w	r2, r3, #4
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    9570:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
    9574:	736a      	strb	r2, [r5, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    9576:	d104      	bne.n	9582 <z_cstart+0x96>
	return true;
}

static ALWAYS_INLINE void z_ready_thread(struct k_thread *thread)
{
	if (z_is_thread_ready(thread)) {
    9578:	69ab      	ldr	r3, [r5, #24]
    957a:	b913      	cbnz	r3, 9582 <z_cstart+0x96>
		z_add_thread_to_ready_q(thread);
    957c:	4628      	mov	r0, r5
    957e:	f000 fa03 	bl	9988 <z_add_thread_to_ready_q>
	z_setup_new_thread(thread, stack,
    9582:	4b17      	ldr	r3, [pc, #92]	; (95e0 <z_cstart+0xf4>)
    9584:	2201      	movs	r2, #1
    9586:	9305      	str	r3, [sp, #20]
    9588:	230f      	movs	r3, #15
    958a:	e9cd 3203 	strd	r3, r2, [sp, #12]
    958e:	2300      	movs	r3, #0
    9590:	4d14      	ldr	r5, [pc, #80]	; (95e4 <z_cstart+0xf8>)
    9592:	e9cd 3301 	strd	r3, r3, [sp, #4]
    9596:	9300      	str	r3, [sp, #0]
    9598:	f44f 72a0 	mov.w	r2, #320	; 0x140
    959c:	4b12      	ldr	r3, [pc, #72]	; (95e8 <z_cstart+0xfc>)
    959e:	4913      	ldr	r1, [pc, #76]	; (95ec <z_cstart+0x100>)
    95a0:	4628      	mov	r0, r5
    95a2:	f000 fcfb 	bl	9f9c <z_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_PRESTART;
    95a6:	7b6b      	ldrb	r3, [r5, #13]
	arch_switch_to_main_thread(&z_main_thread, z_main_stack,
    95a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
    95ac:	f023 0304 	bic.w	r3, r3, #4
    95b0:	736b      	strb	r3, [r5, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    95b2:	4b0f      	ldr	r3, [pc, #60]	; (95f0 <z_cstart+0x104>)
    95b4:	4909      	ldr	r1, [pc, #36]	; (95dc <z_cstart+0xf0>)
	list->tail = (sys_dnode_t *)list;
    95b6:	e9c6 3306 	strd	r3, r3, [r6, #24]
    95ba:	4805      	ldr	r0, [pc, #20]	; (95d0 <z_cstart+0xe4>)
    95bc:	4b06      	ldr	r3, [pc, #24]	; (95d8 <z_cstart+0xec>)
	_kernel.cpus[0].idle_thread = &z_idle_thread;
    95be:	60f5      	str	r5, [r6, #12]
	arch_switch_to_main_thread(&z_main_thread, z_main_stack,
    95c0:	f7f8 fcea 	bl	1f98 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    95c4:	200032d8 	.word	0x200032d8
    95c8:	e000ed00 	.word	0xe000ed00
    95cc:	200011d0 	.word	0x200011d0
    95d0:	20000940 	.word	0x20000940
    95d4:	00010dc4 	.word	0x00010dc4
    95d8:	000094a5 	.word	0x000094a5
    95dc:	20002598 	.word	0x20002598
    95e0:	00010dc9 	.word	0x00010dc9
    95e4:	200008d4 	.word	0x200008d4
    95e8:	00009429 	.word	0x00009429
    95ec:	20002998 	.word	0x20002998
    95f0:	200011e8 	.word	0x200011e8

000095f4 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(struct device *dev)
{
    95f4:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    95f6:	4b0e      	ldr	r3, [pc, #56]	; (9630 <init_mem_slab_module+0x3c>)
    95f8:	4c0e      	ldr	r4, [pc, #56]	; (9634 <init_mem_slab_module+0x40>)
    95fa:	42a3      	cmp	r3, r4
    95fc:	d301      	bcc.n	9602 <init_mem_slab_module+0xe>
		}
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}

out:
    95fe:	2000      	movs	r0, #0
	return rc;
}
    9600:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    9602:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
    9606:	ea41 0200 	orr.w	r2, r1, r0
    960a:	f012 0203 	ands.w	r2, r2, #3
    960e:	d10b      	bne.n	9628 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
    9610:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
    9612:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    9614:	42aa      	cmp	r2, r5
    9616:	d101      	bne.n	961c <init_mem_slab_module+0x28>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    9618:	331c      	adds	r3, #28
    961a:	e7ee      	b.n	95fa <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
    961c:	695e      	ldr	r6, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    961e:	3201      	adds	r2, #1
		*(char **)p = slab->free_list;
    9620:	600e      	str	r6, [r1, #0]
		slab->free_list = p;
    9622:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
    9624:	4401      	add	r1, r0
    9626:	e7f5      	b.n	9614 <init_mem_slab_module+0x20>
		return -EINVAL;
    9628:	f06f 0015 	mvn.w	r0, #21
	return rc;
    962c:	e7e8      	b.n	9600 <init_mem_slab_module+0xc>
    962e:	bf00      	nop
    9630:	20004c2c 	.word	0x20004c2c
    9634:	20004c64 	.word	0x20004c64

00009638 <k_mem_slab_alloc>:
out:
	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, s32_t timeout)
{
    9638:	b510      	push	{r4, lr}
    963a:	4613      	mov	r3, r2
    963c:	460c      	mov	r4, r1
    963e:	f04f 0220 	mov.w	r2, #32
    9642:	f3ef 8111 	mrs	r1, BASEPRI
    9646:	f382 8811 	msr	BASEPRI, r2
    964a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
    964e:	6942      	ldr	r2, [r0, #20]
    9650:	b15a      	cbz	r2, 966a <k_mem_slab_alloc+0x32>
		/* take a free block */
		*mem = slab->free_list;
    9652:	6022      	str	r2, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
    9654:	6813      	ldr	r3, [r2, #0]
    9656:	6143      	str	r3, [r0, #20]
		slab->num_used++;
    9658:	6983      	ldr	r3, [r0, #24]
    965a:	3301      	adds	r3, #1
    965c:	6183      	str	r3, [r0, #24]
		result = 0;
    965e:	2000      	movs	r0, #0
	__asm__ volatile(
    9660:	f381 8811 	msr	BASEPRI, r1
    9664:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
    9668:	e00d      	b.n	9686 <k_mem_slab_alloc+0x4e>
	} else if (timeout == K_NO_WAIT) {
    966a:	b91b      	cbnz	r3, 9674 <k_mem_slab_alloc+0x3c>
		*mem = NULL;
    966c:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
    966e:	f06f 000b 	mvn.w	r0, #11
    9672:	e7f5      	b.n	9660 <k_mem_slab_alloc+0x28>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
    9674:	4602      	mov	r2, r0
    9676:	4804      	ldr	r0, [pc, #16]	; (9688 <k_mem_slab_alloc+0x50>)
    9678:	f000 fb3c 	bl	9cf4 <z_pend_curr>
		if (result == 0) {
    967c:	b918      	cbnz	r0, 9686 <k_mem_slab_alloc+0x4e>
			*mem = _current->base.swap_data;
    967e:	4b03      	ldr	r3, [pc, #12]	; (968c <k_mem_slab_alloc+0x54>)
    9680:	689b      	ldr	r3, [r3, #8]
    9682:	695b      	ldr	r3, [r3, #20]
    9684:	6023      	str	r3, [r4, #0]
}
    9686:	bd10      	pop	{r4, pc}
    9688:	20001530 	.word	0x20001530
    968c:	200011d0 	.word	0x200011d0

00009690 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    9690:	b570      	push	{r4, r5, r6, lr}
    9692:	4604      	mov	r4, r0
    9694:	460d      	mov	r5, r1
	__asm__ volatile(
    9696:	f04f 0320 	mov.w	r3, #32
    969a:	f3ef 8611 	mrs	r6, BASEPRI
    969e:	f383 8811 	msr	BASEPRI, r3
    96a2:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    96a6:	f004 fc18 	bl	deda <z_unpend_first_thread>

	if (pending_thread != NULL) {
    96aa:	b180      	cbz	r0, 96ce <k_mem_slab_free+0x3e>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    96ac:	2100      	movs	r1, #0
		z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    96ae:	682a      	ldr	r2, [r5, #0]
    96b0:	6681      	str	r1, [r0, #104]	; 0x68
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    96b2:	6142      	str	r2, [r0, #20]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    96b4:	7b42      	ldrb	r2, [r0, #13]
    96b6:	06d2      	lsls	r2, r2, #27
    96b8:	d103      	bne.n	96c2 <k_mem_slab_free+0x32>
	if (z_is_thread_ready(thread)) {
    96ba:	6983      	ldr	r3, [r0, #24]
    96bc:	b90b      	cbnz	r3, 96c2 <k_mem_slab_free+0x32>
		z_add_thread_to_ready_q(thread);
    96be:	f000 f963 	bl	9988 <z_add_thread_to_ready_q>
		z_ready_thread(pending_thread);
		z_reschedule(&lock, key);
    96c2:	4631      	mov	r1, r6
		**(char ***)mem = slab->free_list;
		slab->free_list = *(char **)mem;
		slab->num_used--;
		k_spin_unlock(&lock, key);
	}
}
    96c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
    96c8:	4807      	ldr	r0, [pc, #28]	; (96e8 <k_mem_slab_free+0x58>)
    96ca:	f004 bb90 	b.w	ddee <z_reschedule>
		**(char ***)mem = slab->free_list;
    96ce:	682b      	ldr	r3, [r5, #0]
    96d0:	6962      	ldr	r2, [r4, #20]
    96d2:	601a      	str	r2, [r3, #0]
		slab->free_list = *(char **)mem;
    96d4:	682b      	ldr	r3, [r5, #0]
    96d6:	6163      	str	r3, [r4, #20]
		slab->num_used--;
    96d8:	69a3      	ldr	r3, [r4, #24]
    96da:	3b01      	subs	r3, #1
    96dc:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
    96de:	f386 8811 	msr	BASEPRI, r6
    96e2:	f3bf 8f6f 	isb	sy
}
    96e6:	bd70      	pop	{r4, r5, r6, pc}
    96e8:	20001530 	.word	0x20001530

000096ec <init_static_pools>:
	z_waitq_init(&p->wait_q);
	z_sys_mem_pool_base_init(&p->base);
}

int init_static_pools(struct device *unused)
{
    96ec:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);

	Z_STRUCT_SECTION_FOREACH(k_mem_pool, p) {
    96ee:	4c07      	ldr	r4, [pc, #28]	; (970c <init_static_pools+0x20>)
    96f0:	4d07      	ldr	r5, [pc, #28]	; (9710 <init_static_pools+0x24>)
    96f2:	42ac      	cmp	r4, r5
    96f4:	d301      	bcc.n	96fa <init_static_pools+0xe>
		k_mem_pool_init(p);
	}

	return 0;
}
    96f6:	2000      	movs	r0, #0
    96f8:	bd38      	pop	{r3, r4, r5, pc}
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    96fa:	f104 0314 	add.w	r3, r4, #20
	z_sys_mem_pool_base_init(&p->base);
    96fe:	4620      	mov	r0, r4
    9700:	e9c4 3305 	strd	r3, r3, [r4, #20]
    9704:	f000 ff99 	bl	a63a <z_sys_mem_pool_base_init>
	Z_STRUCT_SECTION_FOREACH(k_mem_pool, p) {
    9708:	341c      	adds	r4, #28
    970a:	e7f2      	b.n	96f2 <init_static_pools+0x6>
    970c:	20004c64 	.word	0x20004c64
    9710:	20004c80 	.word	0x20004c80

00009714 <k_mem_pool_alloc>:

SYS_INIT(init_static_pools, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

int k_mem_pool_alloc(struct k_mem_pool *p, struct k_mem_block *block,
		     size_t size, s32_t timeout)
{
    9714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int ret;
	s64_t end = 0;

	__ASSERT(!(arch_is_in_isr() && timeout != K_NO_WAIT), "");

	if (timeout > 0) {
    9718:	1e1c      	subs	r4, r3, #0
{
    971a:	b085      	sub	sp, #20
    971c:	4607      	mov	r7, r0
    971e:	460d      	mov	r5, r1
    9720:	4692      	mov	sl, r2
	if (timeout > 0) {
    9722:	dd3b      	ble.n	979c <k_mem_pool_alloc+0x88>
	return z_impl_k_uptime_get();
    9724:	f004 fd02 	bl	e12c <z_impl_k_uptime_get>
		end = k_uptime_get() + timeout;
    9728:	eb10 0804 	adds.w	r8, r0, r4
	return pool - &_k_mem_pool_list_start[0];
    972c:	4b1d      	ldr	r3, [pc, #116]	; (97a4 <k_mem_pool_alloc+0x90>)
    972e:	4e1e      	ldr	r6, [pc, #120]	; (97a8 <k_mem_pool_alloc+0x94>)
    9730:	1afb      	subs	r3, r7, r3
    9732:	109b      	asrs	r3, r3, #2
    9734:	435e      	muls	r6, r3
		if (ret == 0 || timeout == K_NO_WAIT ||
		    ret != -ENOMEM) {
			return ret;
		}

		z_pend_curr_unlocked(&p->wait_q, timeout);
    9736:	f107 0b14 	add.w	fp, r7, #20
		block->id.pool = pool_id(p);
    973a:	b2f6      	uxtb	r6, r6
		ret = z_sys_mem_pool_block_alloc(&p->base, size,
    973c:	ab03      	add	r3, sp, #12
    973e:	aa02      	add	r2, sp, #8
    9740:	9500      	str	r5, [sp, #0]
    9742:	4651      	mov	r1, sl
    9744:	4638      	mov	r0, r7
    9746:	f000 ffbe 	bl	a6c6 <z_sys_mem_pool_block_alloc>
		block->id.level = level_num;
    974a:	796b      	ldrb	r3, [r5, #5]
    974c:	9a02      	ldr	r2, [sp, #8]
		block->id.pool = pool_id(p);
    974e:	712e      	strb	r6, [r5, #4]
		block->id.level = level_num;
    9750:	f362 0303 	bfi	r3, r2, #0, #4
    9754:	716b      	strb	r3, [r5, #5]
		block->id.block = block_num;
    9756:	686b      	ldr	r3, [r5, #4]
    9758:	9a03      	ldr	r2, [sp, #12]
    975a:	f362 331f 	bfi	r3, r2, #12, #20
    975e:	606b      	str	r3, [r5, #4]
		if (ret == 0 || timeout == K_NO_WAIT ||
    9760:	b1c8      	cbz	r0, 9796 <k_mem_pool_alloc+0x82>
    9762:	b1c4      	cbz	r4, 9796 <k_mem_pool_alloc+0x82>
    9764:	f110 0f0c 	cmn.w	r0, #12
    9768:	d115      	bne.n	9796 <k_mem_pool_alloc+0x82>
	__asm__ volatile(
    976a:	f04f 0320 	mov.w	r3, #32
    976e:	f3ef 8011 	mrs	r0, BASEPRI
    9772:	f383 8811 	msr	BASEPRI, r3
    9776:	f3bf 8f6f 	isb	sy
	(void) z_pend_curr_irqlock(arch_irq_lock(), wait_q, timeout);
    977a:	4622      	mov	r2, r4
    977c:	4659      	mov	r1, fp
    977e:	f000 fa95 	bl	9cac <z_pend_curr_irqlock>

		if (timeout != K_FOREVER) {
    9782:	1c63      	adds	r3, r4, #1
    9784:	d0da      	beq.n	973c <k_mem_pool_alloc+0x28>
    9786:	f004 fcd1 	bl	e12c <z_impl_k_uptime_get>
			timeout = end - k_uptime_get();
    978a:	eba8 0400 	sub.w	r4, r8, r0
			if (timeout <= 0) {
    978e:	2c00      	cmp	r4, #0
    9790:	dcd4      	bgt.n	973c <k_mem_pool_alloc+0x28>
				break;
			}
		}
	}

	return -EAGAIN;
    9792:	f06f 000a 	mvn.w	r0, #10
}
    9796:	b005      	add	sp, #20
    9798:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	s64_t end = 0;
    979c:	f04f 0800 	mov.w	r8, #0
    97a0:	e7c4      	b.n	972c <k_mem_pool_alloc+0x18>
    97a2:	bf00      	nop
    97a4:	20004c64 	.word	0x20004c64
    97a8:	b6db6db7 	.word	0xb6db6db7

000097ac <k_mem_pool_free_id>:

void k_mem_pool_free_id(struct k_mem_block_id *id)
{
    97ac:	b570      	push	{r4, r5, r6, lr}
    97ae:	7804      	ldrb	r4, [r0, #0]
	int need_sched = 0;
	struct k_mem_pool *p = get_pool(id->pool);

	z_sys_mem_pool_block_free(&p->base, id->level, id->block);
    97b0:	6802      	ldr	r2, [r0, #0]
    97b2:	7841      	ldrb	r1, [r0, #1]
    97b4:	4e11      	ldr	r6, [pc, #68]	; (97fc <k_mem_pool_free_id+0x50>)
    97b6:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    97ba:	00a4      	lsls	r4, r4, #2
    97bc:	0b12      	lsrs	r2, r2, #12
    97be:	f001 010f 	and.w	r1, r1, #15
    97c2:	1930      	adds	r0, r6, r4
    97c4:	f001 f831 	bl	a82a <z_sys_mem_pool_block_free>
    97c8:	f04f 0320 	mov.w	r3, #32
    97cc:	f3ef 8511 	mrs	r5, BASEPRI
    97d0:	f383 8811 	msr	BASEPRI, r3
    97d4:	f3bf 8f6f 	isb	sy
	 * is unsynchronized.  Maybe we want to put the lock into the
	 * wait_q instead and make the API safe?)
	 */
	k_spinlock_key_t key = k_spin_lock(&lock);

	need_sched = z_unpend_all(&p->wait_q);
    97d8:	f104 0014 	add.w	r0, r4, #20
    97dc:	4430      	add	r0, r6
    97de:	f004 fba9 	bl	df34 <z_unpend_all>

	if (need_sched != 0) {
    97e2:	b128      	cbz	r0, 97f0 <k_mem_pool_free_id+0x44>
		z_reschedule(&lock, key);
    97e4:	4629      	mov	r1, r5
	} else {
		k_spin_unlock(&lock, key);
	}
}
    97e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
    97ea:	4805      	ldr	r0, [pc, #20]	; (9800 <k_mem_pool_free_id+0x54>)
    97ec:	f004 baff 	b.w	ddee <z_reschedule>
	__asm__ volatile(
    97f0:	f385 8811 	msr	BASEPRI, r5
    97f4:	f3bf 8f6f 	isb	sy
}
    97f8:	bd70      	pop	{r4, r5, r6, pc}
    97fa:	bf00      	nop
    97fc:	20004c64 	.word	0x20004c64
    9800:	20001530 	.word	0x20001530

00009804 <k_malloc>:
		  CONFIG_HEAP_MEM_POOL_SIZE, 1, 4);
#define _HEAP_MEM_POOL (&_heap_mem_pool)

void *k_malloc(size_t size)
{
	return k_mem_pool_malloc(_HEAP_MEM_POOL, size);
    9804:	4601      	mov	r1, r0
    9806:	4801      	ldr	r0, [pc, #4]	; (980c <k_malloc+0x8>)
    9808:	f004 b9a5 	b.w	db56 <k_mem_pool_malloc>
    980c:	20004c64 	.word	0x20004c64

00009810 <z_thread_malloc>:
#else
#define _HEAP_MEM_POOL	NULL
#endif

void *z_thread_malloc(size_t size)
{
    9810:	b510      	push	{r4, lr}
    9812:	4604      	mov	r4, r0
	void *ret;
	struct k_mem_pool *pool;

	if (k_is_in_isr()) {
    9814:	f004 fbb4 	bl	df80 <k_is_in_isr>
    9818:	b948      	cbnz	r0, 982e <z_thread_malloc+0x1e>
		pool = _HEAP_MEM_POOL;
	} else {
		pool = _current->resource_pool;
    981a:	4b06      	ldr	r3, [pc, #24]	; (9834 <z_thread_malloc+0x24>)
    981c:	689b      	ldr	r3, [r3, #8]
    981e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
	}

	if (pool) {
    9820:	b13b      	cbz	r3, 9832 <z_thread_malloc+0x22>
		ret = k_mem_pool_malloc(pool, size);
    9822:	4621      	mov	r1, r4
	} else {
		ret = NULL;
	}

	return ret;
}
    9824:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ret = k_mem_pool_malloc(pool, size);
    9828:	4618      	mov	r0, r3
    982a:	f004 b994 	b.w	db56 <k_mem_pool_malloc>
		pool = _HEAP_MEM_POOL;
    982e:	4b02      	ldr	r3, [pc, #8]	; (9838 <z_thread_malloc+0x28>)
    9830:	e7f7      	b.n	9822 <z_thread_malloc+0x12>
}
    9832:	bd10      	pop	{r4, pc}
    9834:	200011d0 	.word	0x200011d0
    9838:	20004c64 	.word	0x20004c64

0000983c <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
    983c:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
    983e:	4c08      	ldr	r4, [pc, #32]	; (9860 <z_reset_time_slice+0x24>)
    9840:	6823      	ldr	r3, [r4, #0]
    9842:	b15b      	cbz	r3, 985c <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
    9844:	f7f8 fac8 	bl	1dd8 <z_clock_elapsed>
    9848:	6823      	ldr	r3, [r4, #0]
    984a:	4a06      	ldr	r2, [pc, #24]	; (9864 <z_reset_time_slice+0x28>)
    984c:	4418      	add	r0, r3
    984e:	6110      	str	r0, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
    9850:	2100      	movs	r1, #0
	}
}
    9852:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_set_timeout_expiry(slice_time, false);
    9856:	4618      	mov	r0, r3
    9858:	f004 bc4a 	b.w	e0f0 <z_set_timeout_expiry>
}
    985c:	bd10      	pop	{r4, pc}
    985e:	bf00      	nop
    9860:	20001208 	.word	0x20001208
    9864:	200011d0 	.word	0x200011d0

00009868 <k_sched_time_slice_set>:

void k_sched_time_slice_set(s32_t slice, int prio)
{
    9868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    986a:	460d      	mov	r5, r1
	__asm__ volatile(
    986c:	f04f 0320 	mov.w	r3, #32
    9870:	f3ef 8411 	mrs	r4, BASEPRI
    9874:	f383 8811 	msr	BASEPRI, r3
    9878:	f3bf 8f6f 	isb	sy
			return (u32_t)((t * to_hz + off) / from_hz);
    987c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    9880:	f240 36e7 	movw	r6, #999	; 0x3e7
    9884:	2700      	movs	r7, #0
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
    9886:	2200      	movs	r2, #0
    9888:	fbe1 6700 	umlal	r6, r7, r1, r0
    988c:	4b09      	ldr	r3, [pc, #36]	; (98b4 <k_sched_time_slice_set+0x4c>)
    988e:	4630      	mov	r0, r6
    9890:	611a      	str	r2, [r3, #16]
    9892:	4639      	mov	r1, r7
    9894:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    9898:	2300      	movs	r3, #0
    989a:	f7f6 fc5b 	bl	154 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
    989e:	4b06      	ldr	r3, [pc, #24]	; (98b8 <k_sched_time_slice_set+0x50>)
    98a0:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
    98a2:	4b06      	ldr	r3, [pc, #24]	; (98bc <k_sched_time_slice_set+0x54>)
    98a4:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
    98a6:	f7ff ffc9 	bl	983c <z_reset_time_slice>
	__asm__ volatile(
    98aa:	f384 8811 	msr	BASEPRI, r4
    98ae:	f3bf 8f6f 	isb	sy
	}
}
    98b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    98b4:	200011d0 	.word	0x200011d0
    98b8:	20001208 	.word	0x20001208
    98bc:	20001204 	.word	0x20001204

000098c0 <k_sched_lock>:
	__asm__ volatile(
    98c0:	f04f 0320 	mov.w	r3, #32
    98c4:	f3ef 8111 	mrs	r1, BASEPRI
    98c8:	f383 8811 	msr	BASEPRI, r3
    98cc:	f3bf 8f6f 	isb	sy
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
    98d0:	4b04      	ldr	r3, [pc, #16]	; (98e4 <k_sched_lock+0x24>)
    98d2:	689a      	ldr	r2, [r3, #8]
    98d4:	7bd3      	ldrb	r3, [r2, #15]
    98d6:	3b01      	subs	r3, #1
    98d8:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    98da:	f381 8811 	msr	BASEPRI, r1
    98de:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
    98e2:	4770      	bx	lr
    98e4:	200011d0 	.word	0x200011d0

000098e8 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
    98e8:	4b09      	ldr	r3, [pc, #36]	; (9910 <z_priq_dumb_remove+0x28>)
    98ea:	f103 0228 	add.w	r2, r3, #40	; 0x28
    98ee:	4282      	cmp	r2, r0
    98f0:	d105      	bne.n	98fe <z_priq_dumb_remove+0x16>
    98f2:	689b      	ldr	r3, [r3, #8]
    98f4:	428b      	cmp	r3, r1
    98f6:	d102      	bne.n	98fe <z_priq_dumb_remove+0x16>
    98f8:	7b4b      	ldrb	r3, [r1, #13]
    98fa:	06db      	lsls	r3, r3, #27
    98fc:	d106      	bne.n	990c <z_priq_dumb_remove+0x24>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    98fe:	e9d1 3200 	ldrd	r3, r2, [r1]
    9902:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
    9904:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    9906:	2300      	movs	r3, #0
	node->prev = NULL;
    9908:	e9c1 3300 	strd	r3, r3, [r1]
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
    990c:	4770      	bx	lr
    990e:	bf00      	nop
    9910:	200011d0 	.word	0x200011d0

00009914 <update_cache>:
{
    9914:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
    9916:	4c0d      	ldr	r4, [pc, #52]	; (994c <update_cache+0x38>)
{
    9918:	4602      	mov	r2, r0
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
    991a:	f104 0028 	add.w	r0, r4, #40	; 0x28
    991e:	f004 faa5 	bl	de6c <z_priq_dumb_best>
	return thread ? thread : _current_cpu->idle_thread;
    9922:	4605      	mov	r5, r0
    9924:	b900      	cbnz	r0, 9928 <update_cache+0x14>
    9926:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
    9928:	68a3      	ldr	r3, [r4, #8]
    992a:	b94a      	cbnz	r2, 9940 <update_cache+0x2c>
	if (z_is_thread_prevented_from_running(_current)) {
    992c:	7b5a      	ldrb	r2, [r3, #13]
    992e:	06d2      	lsls	r2, r2, #27
    9930:	d106      	bne.n	9940 <update_cache+0x2c>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    9932:	69aa      	ldr	r2, [r5, #24]
    9934:	b922      	cbnz	r2, 9940 <update_cache+0x2c>
	if (is_preempt(_current) || is_metairq(thread)) {
    9936:	89da      	ldrh	r2, [r3, #14]
    9938:	2a7f      	cmp	r2, #127	; 0x7f
    993a:	d901      	bls.n	9940 <update_cache+0x2c>
		_kernel.ready_q.cache = _current;
    993c:	6263      	str	r3, [r4, #36]	; 0x24
}
    993e:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
    9940:	429d      	cmp	r5, r3
    9942:	d001      	beq.n	9948 <update_cache+0x34>
			z_reset_time_slice();
    9944:	f7ff ff7a 	bl	983c <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    9948:	6265      	str	r5, [r4, #36]	; 0x24
}
    994a:	e7f8      	b.n	993e <update_cache+0x2a>
    994c:	200011d0 	.word	0x200011d0

00009950 <k_sched_unlock>:
{
    9950:	b510      	push	{r4, lr}
	__asm__ volatile(
    9952:	f04f 0320 	mov.w	r3, #32
    9956:	f3ef 8411 	mrs	r4, BASEPRI
    995a:	f383 8811 	msr	BASEPRI, r3
    995e:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    9962:	4b08      	ldr	r3, [pc, #32]	; (9984 <k_sched_unlock+0x34>)
		update_cache(0);
    9964:	2000      	movs	r0, #0
		++_current->base.sched_locked;
    9966:	689a      	ldr	r2, [r3, #8]
    9968:	7bd3      	ldrb	r3, [r2, #15]
    996a:	3301      	adds	r3, #1
    996c:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    996e:	f7ff ffd1 	bl	9914 <update_cache>
	__asm__ volatile(
    9972:	f384 8811 	msr	BASEPRI, r4
    9976:	f3bf 8f6f 	isb	sy
}
    997a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    997e:	f004 ba4d 	b.w	de1c <z_reschedule_unlocked>
    9982:	bf00      	nop
    9984:	200011d0 	.word	0x200011d0

00009988 <z_add_thread_to_ready_q>:
{
    9988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    998a:	f04f 0320 	mov.w	r3, #32
    998e:	f3ef 8411 	mrs	r4, BASEPRI
    9992:	f383 8811 	msr	BASEPRI, r3
    9996:	f3bf 8f6f 	isb	sy
	return list->head == list;
    999a:	4a15      	ldr	r2, [pc, #84]	; (99f0 <z_add_thread_to_ready_q+0x68>)
    999c:	4611      	mov	r1, r2
    999e:	f851 3f28 	ldr.w	r3, [r1, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    99a2:	428b      	cmp	r3, r1
    99a4:	d01d      	beq.n	99e2 <z_add_thread_to_ready_q+0x5a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    99a6:	b1e3      	cbz	r3, 99e2 <z_add_thread_to_ready_q+0x5a>
    99a8:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
	if (thread_1->base.prio < thread_2->base.prio) {
    99aa:	f990 500e 	ldrsb.w	r5, [r0, #14]
    99ae:	f993 700e 	ldrsb.w	r7, [r3, #14]
    99b2:	42af      	cmp	r7, r5
    99b4:	dd10      	ble.n	99d8 <z_add_thread_to_ready_q+0x50>
	node->prev = successor->prev;
    99b6:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    99b8:	e9c0 3200 	strd	r3, r2, [r0]
	successor->prev->next = node;
    99bc:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    99be:	6058      	str	r0, [r3, #4]
	thread->base.thread_state |= states;
    99c0:	7b43      	ldrb	r3, [r0, #13]
    99c2:	f063 037f 	orn	r3, r3, #127	; 0x7f
    99c6:	7343      	strb	r3, [r0, #13]
		update_cache(0);
    99c8:	2000      	movs	r0, #0
    99ca:	f7ff ffa3 	bl	9914 <update_cache>
	__asm__ volatile(
    99ce:	f384 8811 	msr	BASEPRI, r4
    99d2:	f3bf 8f6f 	isb	sy
}
    99d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
    99d8:	42b3      	cmp	r3, r6
    99da:	d002      	beq.n	99e2 <z_add_thread_to_ready_q+0x5a>
    99dc:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    99de:	2b00      	cmp	r3, #0
    99e0:	d1e5      	bne.n	99ae <z_add_thread_to_ready_q+0x26>
	node->prev = list->tail;
    99e2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	node->next = list;
    99e4:	6001      	str	r1, [r0, #0]
	node->prev = list->tail;
    99e6:	6043      	str	r3, [r0, #4]
	list->tail->next = node;
    99e8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    99ea:	6018      	str	r0, [r3, #0]
	list->tail = node;
    99ec:	62d0      	str	r0, [r2, #44]	; 0x2c
    99ee:	e7e7      	b.n	99c0 <z_add_thread_to_ready_q+0x38>
    99f0:	200011d0 	.word	0x200011d0

000099f4 <z_move_thread_to_end_of_prio_q>:
{
    99f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    99f6:	4604      	mov	r4, r0
	__asm__ volatile(
    99f8:	f04f 0320 	mov.w	r3, #32
    99fc:	f3ef 8511 	mrs	r5, BASEPRI
    9a00:	f383 8811 	msr	BASEPRI, r3
    9a04:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    9a08:	f990 300d 	ldrsb.w	r3, [r0, #13]
    9a0c:	2b00      	cmp	r3, #0
    9a0e:	da03      	bge.n	9a18 <z_move_thread_to_end_of_prio_q+0x24>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
    9a10:	4601      	mov	r1, r0
    9a12:	4818      	ldr	r0, [pc, #96]	; (9a74 <z_move_thread_to_end_of_prio_q+0x80>)
    9a14:	f7ff ff68 	bl	98e8 <z_priq_dumb_remove>
	return list->head == list;
    9a18:	4a17      	ldr	r2, [pc, #92]	; (9a78 <z_move_thread_to_end_of_prio_q+0x84>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9a1a:	f102 0128 	add.w	r1, r2, #40	; 0x28
    9a1e:	e9d2 300a 	ldrd	r3, r0, [r2, #40]	; 0x28
    9a22:	428b      	cmp	r3, r1
    9a24:	d01f      	beq.n	9a66 <z_move_thread_to_end_of_prio_q+0x72>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    9a26:	b1f3      	cbz	r3, 9a66 <z_move_thread_to_end_of_prio_q+0x72>
	if (thread_1->base.prio < thread_2->base.prio) {
    9a28:	f994 600e 	ldrsb.w	r6, [r4, #14]
    9a2c:	f993 700e 	ldrsb.w	r7, [r3, #14]
    9a30:	42b7      	cmp	r7, r6
    9a32:	dd13      	ble.n	9a5c <z_move_thread_to_end_of_prio_q+0x68>
	node->prev = successor->prev;
    9a34:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    9a36:	e9c4 3100 	strd	r3, r1, [r4]
	successor->prev->next = node;
    9a3a:	600c      	str	r4, [r1, #0]
	successor->prev = node;
    9a3c:	605c      	str	r4, [r3, #4]
    9a3e:	7b63      	ldrb	r3, [r4, #13]
		update_cache(thread == _current);
    9a40:	6890      	ldr	r0, [r2, #8]
    9a42:	f063 037f 	orn	r3, r3, #127	; 0x7f
    9a46:	7363      	strb	r3, [r4, #13]
    9a48:	1b03      	subs	r3, r0, r4
    9a4a:	4258      	negs	r0, r3
    9a4c:	4158      	adcs	r0, r3
    9a4e:	f7ff ff61 	bl	9914 <update_cache>
	__asm__ volatile(
    9a52:	f385 8811 	msr	BASEPRI, r5
    9a56:	f3bf 8f6f 	isb	sy
}
    9a5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
    9a5c:	4298      	cmp	r0, r3
    9a5e:	d002      	beq.n	9a66 <z_move_thread_to_end_of_prio_q+0x72>
    9a60:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    9a62:	2b00      	cmp	r3, #0
    9a64:	d1e2      	bne.n	9a2c <z_move_thread_to_end_of_prio_q+0x38>
	node->prev = list->tail;
    9a66:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
    9a6a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    9a6c:	601c      	str	r4, [r3, #0]
	list->tail = node;
    9a6e:	62d4      	str	r4, [r2, #44]	; 0x2c
    9a70:	e7e5      	b.n	9a3e <z_move_thread_to_end_of_prio_q+0x4a>
    9a72:	bf00      	nop
    9a74:	200011f8 	.word	0x200011f8
    9a78:	200011d0 	.word	0x200011d0

00009a7c <z_time_slice>:
	if (pending_current == _current) {
    9a7c:	4a15      	ldr	r2, [pc, #84]	; (9ad4 <z_time_slice+0x58>)
    9a7e:	4916      	ldr	r1, [pc, #88]	; (9ad8 <z_time_slice+0x5c>)
{
    9a80:	b538      	push	{r3, r4, r5, lr}
	if (pending_current == _current) {
    9a82:	680c      	ldr	r4, [r1, #0]
    9a84:	6893      	ldr	r3, [r2, #8]
    9a86:	42a3      	cmp	r3, r4
    9a88:	4614      	mov	r4, r2
    9a8a:	d103      	bne.n	9a94 <z_time_slice+0x18>
}
    9a8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			z_reset_time_slice();
    9a90:	f7ff bed4 	b.w	983c <z_reset_time_slice>
	pending_current = NULL;
    9a94:	2500      	movs	r5, #0
    9a96:	600d      	str	r5, [r1, #0]
	if (slice_time && sliceable(_current)) {
    9a98:	4910      	ldr	r1, [pc, #64]	; (9adc <z_time_slice+0x60>)
    9a9a:	6809      	ldr	r1, [r1, #0]
    9a9c:	b1b9      	cbz	r1, 9ace <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(thread);
    9a9e:	89d9      	ldrh	r1, [r3, #14]
    9aa0:	297f      	cmp	r1, #127	; 0x7f
    9aa2:	d814      	bhi.n	9ace <z_time_slice+0x52>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    9aa4:	490e      	ldr	r1, [pc, #56]	; (9ae0 <z_time_slice+0x64>)
    9aa6:	f993 500e 	ldrsb.w	r5, [r3, #14]
    9aaa:	6809      	ldr	r1, [r1, #0]
    9aac:	428d      	cmp	r5, r1
    9aae:	db0e      	blt.n	9ace <z_time_slice+0x52>
		&& !z_is_idle_thread_object(thread)
    9ab0:	490c      	ldr	r1, [pc, #48]	; (9ae4 <z_time_slice+0x68>)
    9ab2:	428b      	cmp	r3, r1
    9ab4:	d00b      	beq.n	9ace <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(thread);
    9ab6:	6999      	ldr	r1, [r3, #24]
    9ab8:	b949      	cbnz	r1, 9ace <z_time_slice+0x52>
		if (ticks >= _current_cpu->slice_ticks) {
    9aba:	6911      	ldr	r1, [r2, #16]
    9abc:	4281      	cmp	r1, r0
    9abe:	dc03      	bgt.n	9ac8 <z_time_slice+0x4c>
			z_move_thread_to_end_of_prio_q(_current);
    9ac0:	4618      	mov	r0, r3
    9ac2:	f7ff ff97 	bl	99f4 <z_move_thread_to_end_of_prio_q>
    9ac6:	e7e1      	b.n	9a8c <z_time_slice+0x10>
			_current_cpu->slice_ticks -= ticks;
    9ac8:	1a09      	subs	r1, r1, r0
    9aca:	6111      	str	r1, [r2, #16]
}
    9acc:	bd38      	pop	{r3, r4, r5, pc}
		_current_cpu->slice_ticks = 0;
    9ace:	2300      	movs	r3, #0
    9ad0:	6123      	str	r3, [r4, #16]
    9ad2:	e7fb      	b.n	9acc <z_time_slice+0x50>
    9ad4:	200011d0 	.word	0x200011d0
    9ad8:	20001200 	.word	0x20001200
    9adc:	20001208 	.word	0x20001208
    9ae0:	20001204 	.word	0x20001204
    9ae4:	200008d4 	.word	0x200008d4

00009ae8 <z_thread_single_suspend>:
{
    9ae8:	b570      	push	{r4, r5, r6, lr}
    9aea:	4604      	mov	r4, r0
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    9aec:	3018      	adds	r0, #24
    9aee:	f004 fad9 	bl	e0a4 <z_abort_timeout>
	__asm__ volatile(
    9af2:	f04f 0320 	mov.w	r3, #32
    9af6:	f3ef 8611 	mrs	r6, BASEPRI
    9afa:	f383 8811 	msr	BASEPRI, r3
    9afe:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    9b02:	f994 300d 	ldrsb.w	r3, [r4, #13]
    9b06:	2b00      	cmp	r3, #0
    9b08:	da07      	bge.n	9b1a <z_thread_single_suspend+0x32>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
    9b0a:	4621      	mov	r1, r4
    9b0c:	480e      	ldr	r0, [pc, #56]	; (9b48 <z_thread_single_suspend+0x60>)
    9b0e:	f7ff feeb 	bl	98e8 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
    9b12:	7b63      	ldrb	r3, [r4, #13]
    9b14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    9b18:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
    9b1a:	4d0c      	ldr	r5, [pc, #48]	; (9b4c <z_thread_single_suspend+0x64>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    9b1c:	7b63      	ldrb	r3, [r4, #13]
    9b1e:	68a8      	ldr	r0, [r5, #8]
    9b20:	f043 0310 	orr.w	r3, r3, #16
    9b24:	7363      	strb	r3, [r4, #13]
    9b26:	1b03      	subs	r3, r0, r4
    9b28:	4258      	negs	r0, r3
    9b2a:	4158      	adcs	r0, r3
    9b2c:	f7ff fef2 	bl	9914 <update_cache>
	__asm__ volatile(
    9b30:	f386 8811 	msr	BASEPRI, r6
    9b34:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    9b38:	68ab      	ldr	r3, [r5, #8]
    9b3a:	42a3      	cmp	r3, r4
    9b3c:	d103      	bne.n	9b46 <z_thread_single_suspend+0x5e>
}
    9b3e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    9b42:	f004 b96b 	b.w	de1c <z_reschedule_unlocked>
}
    9b46:	bd70      	pop	{r4, r5, r6, pc}
    9b48:	200011f8 	.word	0x200011f8
    9b4c:	200011d0 	.word	0x200011d0

00009b50 <z_thread_single_abort>:
	if (thread->fn_abort != NULL) {
    9b50:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
    9b52:	b570      	push	{r4, r5, r6, lr}
    9b54:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
    9b56:	b103      	cbz	r3, 9b5a <z_thread_single_abort+0xa>
		thread->fn_abort();
    9b58:	4798      	blx	r3
    9b5a:	f104 0018 	add.w	r0, r4, #24
    9b5e:	f004 faa1 	bl	e0a4 <z_abort_timeout>
	__asm__ volatile(
    9b62:	f04f 0320 	mov.w	r3, #32
    9b66:	f3ef 8511 	mrs	r5, BASEPRI
    9b6a:	f383 8811 	msr	BASEPRI, r3
    9b6e:	f3bf 8f6f 	isb	sy
		if (z_is_thread_ready(thread)) {
    9b72:	4620      	mov	r0, r4
    9b74:	f004 f900 	bl	dd78 <z_is_thread_ready>
    9b78:	4606      	mov	r6, r0
    9b7a:	b1d8      	cbz	r0, 9bb4 <z_thread_single_abort+0x64>
			if (z_is_thread_queued(thread)) {
    9b7c:	f994 300d 	ldrsb.w	r3, [r4, #13]
    9b80:	2b00      	cmp	r3, #0
    9b82:	da07      	bge.n	9b94 <z_thread_single_abort+0x44>
				_priq_run_remove(&_kernel.ready_q.runq,
    9b84:	4621      	mov	r1, r4
    9b86:	4812      	ldr	r0, [pc, #72]	; (9bd0 <z_thread_single_abort+0x80>)
    9b88:	f7ff feae 	bl	98e8 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
    9b8c:	7b63      	ldrb	r3, [r4, #13]
    9b8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    9b92:	7363      	strb	r3, [r4, #13]
			update_cache(thread == _current);
    9b94:	4b0f      	ldr	r3, [pc, #60]	; (9bd4 <z_thread_single_abort+0x84>)
    9b96:	6898      	ldr	r0, [r3, #8]
    9b98:	1b02      	subs	r2, r0, r4
    9b9a:	4250      	negs	r0, r2
    9b9c:	4150      	adcs	r0, r2
    9b9e:	f7ff feb9 	bl	9914 <update_cache>
		thread->base.thread_state |= mask;
    9ba2:	7b63      	ldrb	r3, [r4, #13]
    9ba4:	f043 0308 	orr.w	r3, r3, #8
    9ba8:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
    9baa:	f385 8811 	msr	BASEPRI, r5
    9bae:	f3bf 8f6f 	isb	sy
}
    9bb2:	bd70      	pop	{r4, r5, r6, pc}
			if (z_is_thread_pending(thread)) {
    9bb4:	7b63      	ldrb	r3, [r4, #13]
    9bb6:	079b      	lsls	r3, r3, #30
    9bb8:	d5f3      	bpl.n	9ba2 <z_thread_single_abort+0x52>
				_priq_wait_remove(&pended_on(thread)->waitq,
    9bba:	4621      	mov	r1, r4
    9bbc:	68a0      	ldr	r0, [r4, #8]
    9bbe:	f7ff fe93 	bl	98e8 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    9bc2:	7b63      	ldrb	r3, [r4, #13]
				thread->base.pended_on = NULL;
    9bc4:	60a6      	str	r6, [r4, #8]
    9bc6:	f023 0302 	bic.w	r3, r3, #2
    9bca:	7363      	strb	r3, [r4, #13]
    9bcc:	e7e9      	b.n	9ba2 <z_thread_single_abort+0x52>
    9bce:	bf00      	nop
    9bd0:	200011f8 	.word	0x200011f8
    9bd4:	200011d0 	.word	0x200011d0

00009bd8 <z_remove_thread_from_ready_q>:
{
    9bd8:	b538      	push	{r3, r4, r5, lr}
    9bda:	4604      	mov	r4, r0
	__asm__ volatile(
    9bdc:	f04f 0320 	mov.w	r3, #32
    9be0:	f3ef 8511 	mrs	r5, BASEPRI
    9be4:	f383 8811 	msr	BASEPRI, r3
    9be8:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    9bec:	f990 300d 	ldrsb.w	r3, [r0, #13]
    9bf0:	2b00      	cmp	r3, #0
    9bf2:	da07      	bge.n	9c04 <z_remove_thread_from_ready_q+0x2c>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
    9bf4:	4601      	mov	r1, r0
    9bf6:	4809      	ldr	r0, [pc, #36]	; (9c1c <z_remove_thread_from_ready_q+0x44>)
    9bf8:	f7ff fe76 	bl	98e8 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
    9bfc:	7b63      	ldrb	r3, [r4, #13]
    9bfe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    9c02:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
    9c04:	4b06      	ldr	r3, [pc, #24]	; (9c20 <z_remove_thread_from_ready_q+0x48>)
    9c06:	6898      	ldr	r0, [r3, #8]
    9c08:	1b03      	subs	r3, r0, r4
    9c0a:	4258      	negs	r0, r3
    9c0c:	4158      	adcs	r0, r3
    9c0e:	f7ff fe81 	bl	9914 <update_cache>
	__asm__ volatile(
    9c12:	f385 8811 	msr	BASEPRI, r5
    9c16:	f3bf 8f6f 	isb	sy
}
    9c1a:	bd38      	pop	{r3, r4, r5, pc}
    9c1c:	200011f8 	.word	0x200011f8
    9c20:	200011d0 	.word	0x200011d0

00009c24 <pend>:
{
    9c24:	b570      	push	{r4, r5, r6, lr}
    9c26:	4604      	mov	r4, r0
    9c28:	460d      	mov	r5, r1
    9c2a:	4616      	mov	r6, r2
	z_remove_thread_from_ready_q(thread);
    9c2c:	f7ff ffd4 	bl	9bd8 <z_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_PENDING;
    9c30:	7b63      	ldrb	r3, [r4, #13]
    9c32:	f043 0302 	orr.w	r3, r3, #2
    9c36:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    9c38:	b17d      	cbz	r5, 9c5a <pend+0x36>
	return list->head == list;
    9c3a:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
    9c3c:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9c3e:	429d      	cmp	r5, r3
    9c40:	d029      	beq.n	9c96 <pend+0x72>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    9c42:	b343      	cbz	r3, 9c96 <pend+0x72>
	if (thread_1->base.prio < thread_2->base.prio) {
    9c44:	f994 200e 	ldrsb.w	r2, [r4, #14]
    9c48:	f993 100e 	ldrsb.w	r1, [r3, #14]
    9c4c:	4291      	cmp	r1, r2
    9c4e:	dd1c      	ble.n	9c8a <pend+0x66>
	node->prev = successor->prev;
    9c50:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    9c52:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
    9c56:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    9c58:	605c      	str	r4, [r3, #4]
	if (timeout != K_FOREVER) {
    9c5a:	1c73      	adds	r3, r6, #1
    9c5c:	d022      	beq.n	9ca4 <pend+0x80>
    9c5e:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    9c62:	f240 30e7 	movw	r0, #999	; 0x3e7
    9c66:	2100      	movs	r1, #0
    9c68:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
    9c6c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    9c70:	fbc5 0106 	smlal	r0, r1, r5, r6
    9c74:	2300      	movs	r3, #0
    9c76:	f7f6 fa6d 	bl	154 <__aeabi_uldivmod>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
    9c7a:	490b      	ldr	r1, [pc, #44]	; (9ca8 <pend+0x84>)
    9c7c:	1c42      	adds	r2, r0, #1
    9c7e:	f104 0018 	add.w	r0, r4, #24
}
    9c82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    9c86:	f000 baed 	b.w	a264 <z_add_timeout>
	return (node == list->tail) ? NULL : node->next;
    9c8a:	6869      	ldr	r1, [r5, #4]
    9c8c:	428b      	cmp	r3, r1
    9c8e:	d002      	beq.n	9c96 <pend+0x72>
    9c90:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    9c92:	2b00      	cmp	r3, #0
    9c94:	d1d8      	bne.n	9c48 <pend+0x24>
	node->prev = list->tail;
    9c96:	686b      	ldr	r3, [r5, #4]
	node->next = list;
    9c98:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
    9c9a:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
    9c9c:	686b      	ldr	r3, [r5, #4]
    9c9e:	601c      	str	r4, [r3, #0]
	list->tail = node;
    9ca0:	606c      	str	r4, [r5, #4]
    9ca2:	e7da      	b.n	9c5a <pend+0x36>
}
    9ca4:	bd70      	pop	{r4, r5, r6, pc}
    9ca6:	bf00      	nop
    9ca8:	0000de79 	.word	0x0000de79

00009cac <z_pend_curr_irqlock>:
{
    9cac:	b570      	push	{r4, r5, r6, lr}
    9cae:	4606      	mov	r6, r0
	pend(_current, wait_q, timeout);
    9cb0:	4d0e      	ldr	r5, [pc, #56]	; (9cec <z_pend_curr_irqlock+0x40>)
	pending_current = _current;
    9cb2:	4c0f      	ldr	r4, [pc, #60]	; (9cf0 <z_pend_curr_irqlock+0x44>)
	pend(_current, wait_q, timeout);
    9cb4:	68a8      	ldr	r0, [r5, #8]
    9cb6:	f7ff ffb5 	bl	9c24 <pend>
	pending_current = _current;
    9cba:	68ab      	ldr	r3, [r5, #8]
    9cbc:	4630      	mov	r0, r6
    9cbe:	6023      	str	r3, [r4, #0]
    9cc0:	f7f8 f8cc 	bl	1e5c <arch_swap>
	__asm__ volatile(
    9cc4:	f04f 0220 	mov.w	r2, #32
    9cc8:	f3ef 8311 	mrs	r3, BASEPRI
    9ccc:	f382 8811 	msr	BASEPRI, r2
    9cd0:	f3bf 8f6f 	isb	sy
		if (pending_current == _current) {
    9cd4:	6822      	ldr	r2, [r4, #0]
    9cd6:	68a9      	ldr	r1, [r5, #8]
    9cd8:	4291      	cmp	r1, r2
			pending_current = NULL;
    9cda:	bf04      	itt	eq
    9cdc:	2200      	moveq	r2, #0
    9cde:	6022      	streq	r2, [r4, #0]
	__asm__ volatile(
    9ce0:	f383 8811 	msr	BASEPRI, r3
    9ce4:	f3bf 8f6f 	isb	sy
}
    9ce8:	bd70      	pop	{r4, r5, r6, pc}
    9cea:	bf00      	nop
    9cec:	200011d0 	.word	0x200011d0
    9cf0:	20001200 	.word	0x20001200

00009cf4 <z_pend_curr>:
{
    9cf4:	b510      	push	{r4, lr}
    9cf6:	460c      	mov	r4, r1
    9cf8:	4611      	mov	r1, r2
	pending_current = _current;
    9cfa:	4a06      	ldr	r2, [pc, #24]	; (9d14 <z_pend_curr+0x20>)
    9cfc:	6890      	ldr	r0, [r2, #8]
    9cfe:	4a06      	ldr	r2, [pc, #24]	; (9d18 <z_pend_curr+0x24>)
    9d00:	6010      	str	r0, [r2, #0]
	pend(_current, wait_q, timeout);
    9d02:	461a      	mov	r2, r3
    9d04:	f7ff ff8e 	bl	9c24 <pend>
    9d08:	4620      	mov	r0, r4
}
    9d0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9d0e:	f7f8 b8a5 	b.w	1e5c <arch_swap>
    9d12:	bf00      	nop
    9d14:	200011d0 	.word	0x200011d0
    9d18:	20001200 	.word	0x20001200

00009d1c <z_tick_sleep.part.19>:
	z_impl_k_yield();
}
#include <syscalls/k_yield_mrsh.c>
#endif

static s32_t z_tick_sleep(s32_t ticks)
    9d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (ticks == 0) {
		k_yield();
		return 0;
	}

	ticks += _TICK_ALIGN;
    9d1e:	1c46      	adds	r6, r0, #1
	expected_wakeup_time = ticks + z_tick_get_32();
    9d20:	f004 fa00 	bl	e124 <z_tick_get_32>
    9d24:	1834      	adds	r4, r6, r0
	__asm__ volatile(
    9d26:	f04f 0320 	mov.w	r3, #32
    9d2a:	f3ef 8711 	mrs	r7, BASEPRI
    9d2e:	f383 8811 	msr	BASEPRI, r3
    9d32:	f3bf 8f6f 	isb	sy
	 */
	struct k_spinlock local_lock = {};
	k_spinlock_key_t key = k_spin_lock(&local_lock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
    9d36:	4d0d      	ldr	r5, [pc, #52]	; (9d6c <z_tick_sleep.part.19+0x50>)
    9d38:	4b0d      	ldr	r3, [pc, #52]	; (9d70 <z_tick_sleep.part.19+0x54>)
    9d3a:	68a8      	ldr	r0, [r5, #8]
    9d3c:	6018      	str	r0, [r3, #0]
#endif
	z_remove_thread_from_ready_q(_current);
    9d3e:	f7ff ff4b 	bl	9bd8 <z_remove_thread_from_ready_q>
    9d42:	68a8      	ldr	r0, [r5, #8]
    9d44:	490b      	ldr	r1, [pc, #44]	; (9d74 <z_tick_sleep.part.19+0x58>)
    9d46:	4632      	mov	r2, r6
    9d48:	3018      	adds	r0, #24
    9d4a:	f000 fa8b 	bl	a264 <z_add_timeout>
	z_add_thread_timeout(_current, ticks);
	z_mark_thread_as_suspended(_current);
    9d4e:	68aa      	ldr	r2, [r5, #8]
    9d50:	4638      	mov	r0, r7
	thread->base.thread_state |= _THREAD_SUSPENDED;
    9d52:	7b53      	ldrb	r3, [r2, #13]
    9d54:	f043 0310 	orr.w	r3, r3, #16
    9d58:	7353      	strb	r3, [r2, #13]
    9d5a:	f7f8 f87f 	bl	1e5c <arch_swap>

	(void)z_swap(&local_lock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = expected_wakeup_time - z_tick_get_32();
    9d5e:	f004 f9e1 	bl	e124 <z_tick_get_32>
    9d62:	1a20      	subs	r0, r4, r0
		return ticks;
	}
#endif

	return 0;
}
    9d64:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    9d68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9d6a:	bf00      	nop
    9d6c:	200011d0 	.word	0x200011d0
    9d70:	20001200 	.word	0x20001200
    9d74:	0000de79 	.word	0x0000de79

00009d78 <z_sched_init>:
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    9d78:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
    9d7a:	4b04      	ldr	r3, [pc, #16]	; (9d8c <z_sched_init+0x14>)
    9d7c:	4608      	mov	r0, r1
    9d7e:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
    9d82:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
    9d86:	f7ff bd6f 	b.w	9868 <k_sched_time_slice_set>
    9d8a:	bf00      	nop
    9d8c:	200011d0 	.word	0x200011d0

00009d90 <z_impl_k_yield>:
{
    9d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!z_is_idle_thread_object(_current)) {
    9d92:	4c23      	ldr	r4, [pc, #140]	; (9e20 <z_impl_k_yield+0x90>)
    9d94:	4b23      	ldr	r3, [pc, #140]	; (9e24 <z_impl_k_yield+0x94>)
    9d96:	68a2      	ldr	r2, [r4, #8]
    9d98:	429a      	cmp	r2, r3
    9d9a:	d029      	beq.n	9df0 <z_impl_k_yield+0x60>
    9d9c:	f04f 0320 	mov.w	r3, #32
    9da0:	f3ef 8611 	mrs	r6, BASEPRI
    9da4:	f383 8811 	msr	BASEPRI, r3
    9da8:	f3bf 8f6f 	isb	sy
				_priq_run_remove(&_kernel.ready_q.runq,
    9dac:	f104 0528 	add.w	r5, r4, #40	; 0x28
    9db0:	68a1      	ldr	r1, [r4, #8]
    9db2:	4628      	mov	r0, r5
    9db4:	f7ff fd98 	bl	98e8 <z_priq_dumb_remove>
	return list->head == list;
    9db8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
			_priq_run_add(&_kernel.ready_q.runq, _current);
    9dba:	68a3      	ldr	r3, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9dbc:	42aa      	cmp	r2, r5
    9dbe:	d028      	beq.n	9e12 <z_impl_k_yield+0x82>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    9dc0:	b33a      	cbz	r2, 9e12 <z_impl_k_yield+0x82>
    9dc2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
	if (thread_1->base.prio < thread_2->base.prio) {
    9dc4:	f993 100e 	ldrsb.w	r1, [r3, #14]
    9dc8:	f992 700e 	ldrsb.w	r7, [r2, #14]
    9dcc:	428f      	cmp	r7, r1
    9dce:	dd1b      	ble.n	9e08 <z_impl_k_yield+0x78>
	node->prev = successor->prev;
    9dd0:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    9dd2:	e9c3 2100 	strd	r2, r1, [r3]
	successor->prev->next = node;
    9dd6:	600b      	str	r3, [r1, #0]
	successor->prev = node;
    9dd8:	6053      	str	r3, [r2, #4]
	thread->base.thread_state |= states;
    9dda:	7b5a      	ldrb	r2, [r3, #13]
			update_cache(1);
    9ddc:	2001      	movs	r0, #1
    9dde:	f062 027f 	orn	r2, r2, #127	; 0x7f
    9de2:	735a      	strb	r2, [r3, #13]
    9de4:	f7ff fd96 	bl	9914 <update_cache>
	__asm__ volatile(
    9de8:	f386 8811 	msr	BASEPRI, r6
    9dec:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
    9df0:	f04f 0320 	mov.w	r3, #32
    9df4:	f3ef 8011 	mrs	r0, BASEPRI
    9df8:	f383 8811 	msr	BASEPRI, r3
    9dfc:	f3bf 8f6f 	isb	sy
}
    9e00:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    9e04:	f7f8 b82a 	b.w	1e5c <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    9e08:	4282      	cmp	r2, r0
    9e0a:	d002      	beq.n	9e12 <z_impl_k_yield+0x82>
    9e0c:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    9e0e:	2a00      	cmp	r2, #0
    9e10:	d1da      	bne.n	9dc8 <z_impl_k_yield+0x38>
	node->prev = list->tail;
    9e12:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
	node->next = list;
    9e14:	601d      	str	r5, [r3, #0]
	node->prev = list->tail;
    9e16:	605a      	str	r2, [r3, #4]
	list->tail->next = node;
    9e18:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    9e1a:	6013      	str	r3, [r2, #0]
	list->tail = node;
    9e1c:	62e3      	str	r3, [r4, #44]	; 0x2c
    9e1e:	e7dc      	b.n	9dda <z_impl_k_yield+0x4a>
    9e20:	200011d0 	.word	0x200011d0
    9e24:	200008d4 	.word	0x200008d4

00009e28 <z_impl_k_sleep>:

s32_t z_impl_k_sleep(int ms)
{
    9e28:	b538      	push	{r3, r4, r5, lr}
	s32_t ticks;

	__ASSERT(!arch_is_in_isr(), "");

	if (ms == K_FOREVER) {
    9e2a:	1c43      	adds	r3, r0, #1
{
    9e2c:	4604      	mov	r4, r0
	if (ms == K_FOREVER) {
    9e2e:	d105      	bne.n	9e3c <z_impl_k_sleep+0x14>
		k_thread_suspend(_current);
    9e30:	4b10      	ldr	r3, [pc, #64]	; (9e74 <z_impl_k_sleep+0x4c>)
    9e32:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    9e34:	f000 f8fa 	bl	a02c <z_impl_k_thread_suspend>
	}

	ticks = k_ms_to_ticks_ceil32(ms);
	ticks = z_tick_sleep(ticks);
	return k_ticks_to_ms_floor64(ticks);
}
    9e38:	4620      	mov	r0, r4
    9e3a:	bd38      	pop	{r3, r4, r5, pc}
    9e3c:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    9e40:	f240 30e7 	movw	r0, #999	; 0x3e7
    9e44:	2100      	movs	r1, #0
    9e46:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    9e4a:	fbe5 0104 	umlal	r0, r1, r5, r4
    9e4e:	2300      	movs	r3, #0
    9e50:	f7f6 f980 	bl	154 <__aeabi_uldivmod>
	if (ticks == 0) {
    9e54:	4604      	mov	r4, r0
    9e56:	b948      	cbnz	r0, 9e6c <z_impl_k_sleep+0x44>
	z_impl_k_yield();
    9e58:	f7ff ff9a 	bl	9d90 <z_impl_k_yield>
			return (t * to_hz + off) / from_hz;
    9e5c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    9e60:	fb84 0100 	smull	r0, r1, r4, r0
    9e64:	0bc4      	lsrs	r4, r0, #15
    9e66:	ea44 4441 	orr.w	r4, r4, r1, lsl #17
	return k_ticks_to_ms_floor64(ticks);
    9e6a:	e7e5      	b.n	9e38 <z_impl_k_sleep+0x10>
    9e6c:	f7ff ff56 	bl	9d1c <z_tick_sleep.part.19>
    9e70:	4604      	mov	r4, r0
    9e72:	e7f3      	b.n	9e5c <z_impl_k_sleep+0x34>
    9e74:	200011d0 	.word	0x200011d0

00009e78 <z_impl_k_current_get>:
#endif

k_tid_t z_impl_k_current_get(void)
{
	return _current;
}
    9e78:	4b01      	ldr	r3, [pc, #4]	; (9e80 <z_impl_k_current_get+0x8>)
    9e7a:	6898      	ldr	r0, [r3, #8]
    9e7c:	4770      	bx	lr
    9e7e:	bf00      	nop
    9e80:	200011d0 	.word	0x200011d0

00009e84 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    9e84:	b570      	push	{r4, r5, r6, lr}
    9e86:	4604      	mov	r4, r0
    9e88:	f04f 0320 	mov.w	r3, #32
    9e8c:	f3ef 8611 	mrs	r6, BASEPRI
    9e90:	f383 8811 	msr	BASEPRI, r3
    9e94:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread = z_unpend_first_thread(&sem->wait_q);
    9e98:	f004 f81f 	bl	deda <z_unpend_first_thread>

	sys_trace_void(SYS_TRACE_ID_SEMA_GIVE);

	if (thread != NULL) {
    9e9c:	4605      	mov	r5, r0
    9e9e:	b170      	cbz	r0, 9ebe <z_impl_k_sem_give+0x3a>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    9ea0:	7b43      	ldrb	r3, [r0, #13]
    9ea2:	06db      	lsls	r3, r3, #27
    9ea4:	d103      	bne.n	9eae <z_impl_k_sem_give+0x2a>
	if (z_is_thread_ready(thread)) {
    9ea6:	6983      	ldr	r3, [r0, #24]
    9ea8:	b90b      	cbnz	r3, 9eae <z_impl_k_sem_give+0x2a>
		z_add_thread_to_ready_q(thread);
    9eaa:	f7ff fd6d 	bl	9988 <z_add_thread_to_ready_q>
    9eae:	2300      	movs	r3, #0
    9eb0:	66ab      	str	r3, [r5, #104]	; 0x68
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
	z_reschedule(&lock, key);
    9eb2:	4631      	mov	r1, r6
}
    9eb4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&lock, key);
    9eb8:	4807      	ldr	r0, [pc, #28]	; (9ed8 <z_impl_k_sem_give+0x54>)
    9eba:	f003 bf98 	b.w	ddee <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    9ebe:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    9ec2:	429a      	cmp	r2, r3
    9ec4:	bf18      	it	ne
    9ec6:	3301      	addne	r3, #1
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
    9ec8:	2102      	movs	r1, #2
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    9eca:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
    9ecc:	f104 0010 	add.w	r0, r4, #16
    9ed0:	f004 fa5f 	bl	e392 <z_handle_obj_poll_events>
    9ed4:	e7ed      	b.n	9eb2 <z_impl_k_sem_give+0x2e>
    9ed6:	bf00      	nop
    9ed8:	20001530 	.word	0x20001530

00009edc <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, s32_t timeout)
{
    9edc:	b410      	push	{r4}
    9ede:	4602      	mov	r2, r0
    9ee0:	460b      	mov	r3, r1
    9ee2:	f04f 0020 	mov.w	r0, #32
    9ee6:	f3ef 8111 	mrs	r1, BASEPRI
    9eea:	f380 8811 	msr	BASEPRI, r0
    9eee:	f3bf 8f6f 	isb	sy
	__ASSERT(((arch_is_in_isr() == false) || (timeout == K_NO_WAIT)), "");

	sys_trace_void(SYS_TRACE_ID_SEMA_TAKE);
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (likely(sem->count > 0U)) {
    9ef2:	6894      	ldr	r4, [r2, #8]
    9ef4:	b144      	cbz	r4, 9f08 <z_impl_k_sem_take+0x2c>
		sem->count--;
    9ef6:	3c01      	subs	r4, #1
    9ef8:	6094      	str	r4, [r2, #8]
	__asm__ volatile(
    9efa:	f381 8811 	msr	BASEPRI, r1
    9efe:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    9f02:	2000      	movs	r0, #0
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
    9f04:	bc10      	pop	{r4}
    9f06:	4770      	bx	lr
	if (timeout == K_NO_WAIT) {
    9f08:	b933      	cbnz	r3, 9f18 <z_impl_k_sem_take+0x3c>
    9f0a:	f381 8811 	msr	BASEPRI, r1
    9f0e:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    9f12:	f06f 000f 	mvn.w	r0, #15
		goto out;
    9f16:	e7f5      	b.n	9f04 <z_impl_k_sem_take+0x28>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    9f18:	4801      	ldr	r0, [pc, #4]	; (9f20 <z_impl_k_sem_take+0x44>)
}
    9f1a:	bc10      	pop	{r4}
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    9f1c:	f7ff beea 	b.w	9cf4 <z_pend_curr>
    9f20:	20001530 	.word	0x20001530

00009f24 <k_sys_work_q_init>:
K_THREAD_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(struct device *dev)
{
    9f24:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
    9f26:	4c08      	ldr	r4, [pc, #32]	; (9f48 <k_sys_work_q_init+0x24>)
    9f28:	f04f 33ff 	mov.w	r3, #4294967295
    9f2c:	f44f 6200 	mov.w	r2, #2048	; 0x800
    9f30:	4906      	ldr	r1, [pc, #24]	; (9f4c <k_sys_work_q_init+0x28>)
    9f32:	4620      	mov	r0, r4
    9f34:	f000 f8f4 	bl	a120 <k_work_q_start>
	return z_impl_k_thread_name_set(thread_id, value);
    9f38:	4905      	ldr	r1, [pc, #20]	; (9f50 <k_sys_work_q_init+0x2c>)
    9f3a:	f104 0010 	add.w	r0, r4, #16
    9f3e:	f004 f825 	bl	df8c <z_impl_k_thread_name_set>
		       K_THREAD_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);
	k_thread_name_set(&k_sys_work_q.thread, "sysworkq");

	return 0;
}
    9f42:	2000      	movs	r0, #0
    9f44:	bd10      	pop	{r4, pc}
    9f46:	bf00      	nop
    9f48:	2000120c 	.word	0x2000120c
    9f4c:	200032d8 	.word	0x200032d8
    9f50:	00010dce 	.word	0x00010dce

00009f54 <z_impl_k_thread_start>:
}
#endif

#ifdef CONFIG_MULTITHREADING
void z_impl_k_thread_start(struct k_thread *thread)
{
    9f54:	b510      	push	{r4, lr}
	__asm__ volatile(
    9f56:	f04f 0220 	mov.w	r2, #32
    9f5a:	f3ef 8411 	mrs	r4, BASEPRI
    9f5e:	f382 8811 	msr	BASEPRI, r2
    9f62:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock); /* protect kernel queues */

	if (z_has_thread_started(thread)) {
    9f66:	7b42      	ldrb	r2, [r0, #13]
    9f68:	0751      	lsls	r1, r2, #29
    9f6a:	d404      	bmi.n	9f76 <z_impl_k_thread_start+0x22>
	__asm__ volatile(
    9f6c:	f384 8811 	msr	BASEPRI, r4
    9f70:	f3bf 8f6f 	isb	sy
	}

	z_mark_thread_as_started(thread);
	z_ready_thread(thread);
	z_reschedule(&lock, key);
}
    9f74:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    9f76:	f022 0104 	bic.w	r1, r2, #4
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    9f7a:	f012 0f1b 	tst.w	r2, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
    9f7e:	7341      	strb	r1, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    9f80:	d103      	bne.n	9f8a <z_impl_k_thread_start+0x36>
	if (z_is_thread_ready(thread)) {
    9f82:	6983      	ldr	r3, [r0, #24]
    9f84:	b90b      	cbnz	r3, 9f8a <z_impl_k_thread_start+0x36>
		z_add_thread_to_ready_q(thread);
    9f86:	f7ff fcff 	bl	9988 <z_add_thread_to_ready_q>
	z_reschedule(&lock, key);
    9f8a:	4621      	mov	r1, r4
}
    9f8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&lock, key);
    9f90:	4801      	ldr	r0, [pc, #4]	; (9f98 <z_impl_k_thread_start+0x44>)
    9f92:	f003 bf2c 	b.w	ddee <z_reschedule>
    9f96:	bf00      	nop
    9f98:	20001530 	.word	0x20001530

00009f9c <z_setup_new_thread>:
void z_setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options, const char *name)
{
    9f9c:	b530      	push	{r4, r5, lr}
    9f9e:	b087      	sub	sp, #28
	stack_size = STACK_ROUND_DOWN(stack_size
			- sizeof(*new_thread->userspace_local_data));
#endif
#endif

	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    9fa0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
{
    9fa2:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    9fa4:	9504      	str	r5, [sp, #16]
    9fa6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    9fa8:	9503      	str	r5, [sp, #12]
    9faa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    9fac:	9502      	str	r5, [sp, #8]
    9fae:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    9fb0:	9501      	str	r5, [sp, #4]
    9fb2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    9fb4:	9500      	str	r5, [sp, #0]
    9fb6:	f7f7 ffcd 	bl	1f54 <arch_new_thread>
#ifdef CONFIG_SCHED_CPU_MASK
	new_thread->base.cpu_mask = -1;
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
    9fba:	4b03      	ldr	r3, [pc, #12]	; (9fc8 <z_setup_new_thread+0x2c>)
    9fbc:	689b      	ldr	r3, [r3, #8]
    9fbe:	b103      	cbz	r3, 9fc2 <z_setup_new_thread+0x26>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
    9fc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    9fc2:	6623      	str	r3, [r4, #96]	; 0x60
	sys_trace_thread_create(new_thread);
}
    9fc4:	b007      	add	sp, #28
    9fc6:	bd30      	pop	{r4, r5, pc}
    9fc8:	200011d0 	.word	0x200011d0

00009fcc <z_impl_k_thread_create>:
k_tid_t z_impl_k_thread_create(struct k_thread *new_thread,
			      k_thread_stack_t *stack,
			      size_t stack_size, k_thread_entry_t entry,
			      void *p1, void *p2, void *p3,
			      int prio, u32_t options, s32_t delay)
{
    9fcc:	b570      	push	{r4, r5, r6, lr}
	__ASSERT((options & K_USER) == 0,
		 "Platform is capable of user mode, and test thread created with K_USER option,"
		 " but neither CONFIG_TEST_USERSPACE nor CONFIG_USERSPACE is set\n");
#endif

	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    9fce:	2600      	movs	r6, #0
{
    9fd0:	b086      	sub	sp, #24
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    9fd2:	9605      	str	r6, [sp, #20]
    9fd4:	9e0e      	ldr	r6, [sp, #56]	; 0x38
{
    9fd6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    9fd8:	9604      	str	r6, [sp, #16]
    9fda:	9e0d      	ldr	r6, [sp, #52]	; 0x34
{
    9fdc:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    9fde:	9603      	str	r6, [sp, #12]
    9fe0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    9fe2:	9602      	str	r6, [sp, #8]
    9fe4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    9fe6:	9601      	str	r6, [sp, #4]
    9fe8:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    9fea:	9600      	str	r6, [sp, #0]
    9fec:	f7ff ffd6 	bl	9f9c <z_setup_new_thread>
			  prio, options, NULL);

	if (delay != K_FOREVER) {
    9ff0:	1c6b      	adds	r3, r5, #1
    9ff2:	d003      	beq.n	9ffc <z_impl_k_thread_create+0x30>
	if (delay == 0) {
    9ff4:	b92d      	cbnz	r5, a002 <z_impl_k_thread_create+0x36>
	z_impl_k_thread_start(thread);
    9ff6:	4620      	mov	r0, r4
    9ff8:	f7ff ffac 	bl	9f54 <z_impl_k_thread_start>
		schedule_new_thread(new_thread, delay);
	}

	return new_thread;
}
    9ffc:	4620      	mov	r0, r4
    9ffe:	b006      	add	sp, #24
    a000:	bd70      	pop	{r4, r5, r6, pc}
			return (u32_t)((t * to_hz + off) / from_hz);
    a002:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    a006:	f240 30e7 	movw	r0, #999	; 0x3e7
    a00a:	2100      	movs	r1, #0
    a00c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    a010:	2300      	movs	r3, #0
    a012:	fbe6 0105 	umlal	r0, r1, r6, r5
    a016:	f7f6 f89d 	bl	154 <__aeabi_uldivmod>
    a01a:	4903      	ldr	r1, [pc, #12]	; (a028 <z_impl_k_thread_create+0x5c>)
    a01c:	1c42      	adds	r2, r0, #1
    a01e:	f104 0018 	add.w	r0, r4, #24
    a022:	f000 f91f 	bl	a264 <z_add_timeout>
    a026:	e7e9      	b.n	9ffc <z_impl_k_thread_create+0x30>
    a028:	0000de79 	.word	0x0000de79

0000a02c <z_impl_k_thread_suspend>:
#endif /* CONFIG_MULTITHREADING */

extern void z_thread_single_suspend(struct k_thread *thread);

void z_impl_k_thread_suspend(struct k_thread *thread)
{
    a02c:	b538      	push	{r3, r4, r5, lr}
    a02e:	4605      	mov	r5, r0
	__asm__ volatile(
    a030:	f04f 0320 	mov.w	r3, #32
    a034:	f3ef 8411 	mrs	r4, BASEPRI
    a038:	f383 8811 	msr	BASEPRI, r3
    a03c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);

	z_thread_single_suspend(thread);
    a040:	f7ff fd52 	bl	9ae8 <z_thread_single_suspend>

	if (thread == _current) {
    a044:	4b07      	ldr	r3, [pc, #28]	; (a064 <z_impl_k_thread_suspend+0x38>)
    a046:	689b      	ldr	r3, [r3, #8]
    a048:	42ab      	cmp	r3, r5
    a04a:	d105      	bne.n	a058 <z_impl_k_thread_suspend+0x2c>
		z_reschedule(&lock, key);
    a04c:	4621      	mov	r1, r4
	} else {
		k_spin_unlock(&lock, key);
	}
}
    a04e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&lock, key);
    a052:	4805      	ldr	r0, [pc, #20]	; (a068 <z_impl_k_thread_suspend+0x3c>)
    a054:	f003 becb 	b.w	ddee <z_reschedule>
	__asm__ volatile(
    a058:	f384 8811 	msr	BASEPRI, r4
    a05c:	f3bf 8f6f 	isb	sy
}
    a060:	bd38      	pop	{r3, r4, r5, pc}
    a062:	bf00      	nop
    a064:	200011d0 	.word	0x200011d0
    a068:	20001530 	.word	0x20001530

0000a06c <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
    a06c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
    a070:	4e28      	ldr	r6, [pc, #160]	; (a114 <z_init_static_threads+0xa8>)
    a072:	4d29      	ldr	r5, [pc, #164]	; (a118 <z_init_static_threads+0xac>)
    a074:	46b0      	mov	r8, r6
{
    a076:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
    a078:	42b5      	cmp	r5, r6
    a07a:	f105 0430 	add.w	r4, r5, #48	; 0x30
    a07e:	d310      	bcc.n	a0a2 <z_init_static_threads+0x36>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
    a080:	f7ff fc1e 	bl	98c0 <k_sched_lock>
    a084:	f44f 4900 	mov.w	r9, #32768	; 0x8000
    a088:	f240 36e7 	movw	r6, #999	; 0x3e7
    a08c:	2700      	movs	r7, #0
	_FOREACH_STATIC_THREAD(thread_data) {
    a08e:	4c22      	ldr	r4, [pc, #136]	; (a118 <z_init_static_threads+0xac>)
    a090:	f8df a088 	ldr.w	sl, [pc, #136]	; a11c <z_init_static_threads+0xb0>
    a094:	4544      	cmp	r4, r8
    a096:	d321      	bcc.n	a0dc <z_init_static_threads+0x70>
			schedule_new_thread(thread_data->init_thread,
					    thread_data->init_delay);
		}
	}
	k_sched_unlock();
}
    a098:	b007      	add	sp, #28
    a09a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	k_sched_unlock();
    a09e:	f7ff bc57 	b.w	9950 <k_sched_unlock>
		z_setup_new_thread(
    a0a2:	f854 3c04 	ldr.w	r3, [r4, #-4]
    a0a6:	9305      	str	r3, [sp, #20]
    a0a8:	f854 3c10 	ldr.w	r3, [r4, #-16]
    a0ac:	9304      	str	r3, [sp, #16]
    a0ae:	f854 3c14 	ldr.w	r3, [r4, #-20]
    a0b2:	9303      	str	r3, [sp, #12]
    a0b4:	f854 3c18 	ldr.w	r3, [r4, #-24]
    a0b8:	9302      	str	r3, [sp, #8]
    a0ba:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    a0be:	9301      	str	r3, [sp, #4]
    a0c0:	f854 3c20 	ldr.w	r3, [r4, #-32]
    a0c4:	9300      	str	r3, [sp, #0]
    a0c6:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    a0ca:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    a0ce:	f7ff ff65 	bl	9f9c <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    a0d2:	f854 3c30 	ldr.w	r3, [r4, #-48]
    a0d6:	64dd      	str	r5, [r3, #76]	; 0x4c
    a0d8:	4625      	mov	r5, r4
    a0da:	e7cd      	b.n	a078 <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_FOREVER) {
    a0dc:	6a61      	ldr	r1, [r4, #36]	; 0x24
    a0de:	1c4b      	adds	r3, r1, #1
    a0e0:	d004      	beq.n	a0ec <z_init_static_threads+0x80>
			schedule_new_thread(thread_data->init_thread,
    a0e2:	6825      	ldr	r5, [r4, #0]
	if (delay == 0) {
    a0e4:	b921      	cbnz	r1, a0f0 <z_init_static_threads+0x84>
    a0e6:	4628      	mov	r0, r5
    a0e8:	f7ff ff34 	bl	9f54 <z_impl_k_thread_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    a0ec:	3430      	adds	r4, #48	; 0x30
    a0ee:	e7d1      	b.n	a094 <z_init_static_threads+0x28>
    a0f0:	46b3      	mov	fp, r6
    a0f2:	46bc      	mov	ip, r7
    a0f4:	fbe9 bc01 	umlal	fp, ip, r9, r1
    a0f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    a0fc:	2300      	movs	r3, #0
    a0fe:	4658      	mov	r0, fp
    a100:	4661      	mov	r1, ip
    a102:	f7f6 f827 	bl	154 <__aeabi_uldivmod>
    a106:	4651      	mov	r1, sl
    a108:	1c42      	adds	r2, r0, #1
    a10a:	f105 0018 	add.w	r0, r5, #24
    a10e:	f000 f8a9 	bl	a264 <z_add_timeout>
    a112:	e7eb      	b.n	a0ec <z_init_static_threads+0x80>
    a114:	20004c2c 	.word	0x20004c2c
    a118:	20004c2c 	.word	0x20004c2c
    a11c:	0000de79 	.word	0x0000de79

0000a120 <k_work_q_start>:

extern void z_work_q_main(void *work_q_ptr, void *p2, void *p3);

void k_work_q_start(struct k_work_q *work_q, k_thread_stack_t *stack,
		    size_t stack_size, int prio)
{
    a120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a124:	4605      	mov	r5, r0
    a126:	b086      	sub	sp, #24
    a128:	460e      	mov	r6, r1
    a12a:	4617      	mov	r7, r2
    a12c:	4698      	mov	r8, r3
	z_impl_k_queue_init(queue);
    a12e:	f003 fd88 	bl	dc42 <z_impl_k_queue_init>
	k_queue_init(&work_q->queue);
	(void)k_thread_create(&work_q->thread, stack, stack_size, z_work_q_main,
    a132:	f105 0410 	add.w	r4, r5, #16
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    a136:	2000      	movs	r0, #0
    a138:	4b09      	ldr	r3, [pc, #36]	; (a160 <k_work_q_start+0x40>)
    a13a:	e9cd 0004 	strd	r0, r0, [sp, #16]
    a13e:	e9cd 0802 	strd	r0, r8, [sp, #8]
    a142:	e9cd 5000 	strd	r5, r0, [sp]
    a146:	463a      	mov	r2, r7
    a148:	4631      	mov	r1, r6
    a14a:	4620      	mov	r0, r4
    a14c:	f7ff ff3e 	bl	9fcc <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
    a150:	4620      	mov	r0, r4
    a152:	4904      	ldr	r1, [pc, #16]	; (a164 <k_work_q_start+0x44>)
			work_q, NULL, NULL, prio, 0, K_NO_WAIT);

	k_thread_name_set(&work_q->thread, WORKQUEUE_THREAD_NAME);
}
    a154:	b006      	add	sp, #24
    a156:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    a15a:	f003 bf17 	b.w	df8c <z_impl_k_thread_name_set>
    a15e:	bf00      	nop
    a160:	0000accd 	.word	0x0000accd
    a164:	00010dd7 	.word	0x00010dd7

0000a168 <k_delayed_work_submit_to_queue>:
}

int k_delayed_work_submit_to_queue(struct k_work_q *work_q,
				   struct k_delayed_work *work,
				   s32_t delay)
{
    a168:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a16c:	4606      	mov	r6, r0
    a16e:	460d      	mov	r5, r1
    a170:	4617      	mov	r7, r2
	__asm__ volatile(
    a172:	f04f 0320 	mov.w	r3, #32
    a176:	f3ef 8811 	mrs	r8, BASEPRI
    a17a:	f383 8811 	msr	BASEPRI, r3
    a17e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int err = 0;

	/* Work cannot be active in multiple queues */
	if (work->work_q != NULL && work->work_q != work_q) {
    a182:	69cc      	ldr	r4, [r1, #28]
    a184:	b15c      	cbz	r4, a19e <k_delayed_work_submit_to_queue+0x36>
    a186:	4284      	cmp	r4, r0
    a188:	d12c      	bne.n	a1e4 <k_delayed_work_submit_to_queue+0x7c>
		goto done;
	}

	/* Cancel if work has been submitted */
	if (work->work_q == work_q) {
		err = work_cancel(work);
    a18a:	4628      	mov	r0, r5
    a18c:	f003 ff2b 	bl	dfe6 <work_cancel>
		if (err < 0) {
    a190:	1e04      	subs	r4, r0, #0
    a192:	da06      	bge.n	a1a2 <k_delayed_work_submit_to_queue+0x3a>
	__asm__ volatile(
    a194:	f388 8811 	msr	BASEPRI, r8
    a198:	f3bf 8f6f 	isb	sy
	z_add_timeout(&work->timeout, work_timeout,
		     _TICK_ALIGN + k_ms_to_ticks_ceil32(delay));

done:
	k_spin_unlock(&lock, key);
	return err;
    a19c:	e00c      	b.n	a1b8 <k_delayed_work_submit_to_queue+0x50>
	if (work->work_q == work_q) {
    a19e:	2800      	cmp	r0, #0
    a1a0:	d0f3      	beq.n	a18a <k_delayed_work_submit_to_queue+0x22>
	work->work_q = work_q;
    a1a2:	61ee      	str	r6, [r5, #28]
	if (delay == 0) {
    a1a4:	b95f      	cbnz	r7, a1be <k_delayed_work_submit_to_queue+0x56>
    a1a6:	f388 8811 	msr	BASEPRI, r8
    a1aa:	f3bf 8f6f 	isb	sy
		k_work_submit_to_queue(work_q, &work->work);
    a1ae:	4629      	mov	r1, r5
    a1b0:	4630      	mov	r0, r6
    a1b2:	f003 feff 	bl	dfb4 <k_work_submit_to_queue>
		return 0;
    a1b6:	463c      	mov	r4, r7
}
    a1b8:	4620      	mov	r0, r4
    a1ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a1be:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    a1c2:	f240 30e7 	movw	r0, #999	; 0x3e7
    a1c6:	2100      	movs	r1, #0
    a1c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    a1cc:	2300      	movs	r3, #0
    a1ce:	fbe6 0107 	umlal	r0, r1, r6, r7
    a1d2:	f7f5 ffbf 	bl	154 <__aeabi_uldivmod>
	z_add_timeout(&work->timeout, work_timeout,
    a1d6:	4905      	ldr	r1, [pc, #20]	; (a1ec <k_delayed_work_submit_to_queue+0x84>)
    a1d8:	1c42      	adds	r2, r0, #1
    a1da:	f105 000c 	add.w	r0, r5, #12
    a1de:	f000 f841 	bl	a264 <z_add_timeout>
    a1e2:	e7d7      	b.n	a194 <k_delayed_work_submit_to_queue+0x2c>
		err = -EADDRINUSE;
    a1e4:	f06f 042f 	mvn.w	r4, #47	; 0x2f
    a1e8:	e7d4      	b.n	a194 <k_delayed_work_submit_to_queue+0x2c>
    a1ea:	bf00      	nop
    a1ec:	0000dfdd 	.word	0x0000dfdd

0000a1f0 <elapsed>:
	sys_dlist_remove(&t->node);
}

static s32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
    a1f0:	4b03      	ldr	r3, [pc, #12]	; (a200 <elapsed+0x10>)
    a1f2:	681b      	ldr	r3, [r3, #0]
    a1f4:	b90b      	cbnz	r3, a1fa <elapsed+0xa>
    a1f6:	f7f7 bdef 	b.w	1dd8 <z_clock_elapsed>
}
    a1fa:	2000      	movs	r0, #0
    a1fc:	4770      	bx	lr
    a1fe:	bf00      	nop
    a200:	20001288 	.word	0x20001288

0000a204 <remove_timeout>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    a204:	6803      	ldr	r3, [r0, #0]
    a206:	b140      	cbz	r0, a21a <remove_timeout+0x16>
    a208:	4a07      	ldr	r2, [pc, #28]	; (a228 <remove_timeout+0x24>)
	return (node == list->tail) ? NULL : node->next;
    a20a:	6852      	ldr	r2, [r2, #4]
    a20c:	4290      	cmp	r0, r2
    a20e:	d004      	beq.n	a21a <remove_timeout+0x16>
	if (next(t) != NULL) {
    a210:	b11b      	cbz	r3, a21a <remove_timeout+0x16>
		next(t)->dticks += t->dticks;
    a212:	689a      	ldr	r2, [r3, #8]
    a214:	6881      	ldr	r1, [r0, #8]
    a216:	440a      	add	r2, r1
    a218:	609a      	str	r2, [r3, #8]
	node->prev->next = node->next;
    a21a:	6842      	ldr	r2, [r0, #4]
    a21c:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
    a21e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    a220:	2300      	movs	r3, #0
	node->prev = NULL;
    a222:	e9c0 3300 	strd	r3, r3, [r0]
}
    a226:	4770      	bx	lr
    a228:	20004a90 	.word	0x20004a90

0000a22c <next_timeout>:
	return list->head == list;
    a22c:	4b0b      	ldr	r3, [pc, #44]	; (a25c <next_timeout+0x30>)

static s32_t next_timeout(void)
{
    a22e:	b510      	push	{r4, lr}
    a230:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a232:	429c      	cmp	r4, r3
    a234:	bf08      	it	eq
    a236:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	s32_t ticks_elapsed = elapsed();
    a238:	f7ff ffda 	bl	a1f0 <elapsed>
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
    a23c:	b154      	cbz	r4, a254 <next_timeout+0x28>
    a23e:	68a3      	ldr	r3, [r4, #8]
    a240:	1a18      	subs	r0, r3, r0
    a242:	ea20 70e0 	bic.w	r0, r0, r0, asr #31

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    a246:	4b06      	ldr	r3, [pc, #24]	; (a260 <next_timeout+0x34>)
    a248:	691b      	ldr	r3, [r3, #16]
    a24a:	b113      	cbz	r3, a252 <next_timeout+0x26>
    a24c:	4298      	cmp	r0, r3
    a24e:	bfa8      	it	ge
    a250:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    a252:	bd10      	pop	{r4, pc}
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
    a254:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    a258:	e7f5      	b.n	a246 <next_timeout+0x1a>
    a25a:	bf00      	nop
    a25c:	20004a90 	.word	0x20004a90
    a260:	200011d0 	.word	0x200011d0

0000a264 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn, s32_t ticks)
{
    a264:	b570      	push	{r4, r5, r6, lr}
    a266:	4604      	mov	r4, r0
    a268:	4616      	mov	r6, r2
	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    a26a:	60c1      	str	r1, [r0, #12]
	__asm__ volatile(
    a26c:	f04f 0320 	mov.w	r3, #32
    a270:	f3ef 8511 	mrs	r5, BASEPRI
    a274:	f383 8811 	msr	BASEPRI, r3
    a278:	f3bf 8f6f 	isb	sy
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
    a27c:	f7ff ffb8 	bl	a1f0 <elapsed>
    a280:	2e01      	cmp	r6, #1
    a282:	bfac      	ite	ge
    a284:	1980      	addge	r0, r0, r6
    a286:	3001      	addlt	r0, #1
	return list->head == list;
    a288:	4b16      	ldr	r3, [pc, #88]	; (a2e4 <z_add_timeout+0x80>)
    a28a:	60a0      	str	r0, [r4, #8]
    a28c:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a28e:	429a      	cmp	r2, r3
    a290:	d001      	beq.n	a296 <z_add_timeout+0x32>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    a292:	685e      	ldr	r6, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
    a294:	b932      	cbnz	r2, a2a4 <z_add_timeout+0x40>
	node->prev = list->tail;
    a296:	685a      	ldr	r2, [r3, #4]
	node->next = list;
    a298:	6023      	str	r3, [r4, #0]
	node->prev = list->tail;
    a29a:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
    a29c:	685a      	ldr	r2, [r3, #4]
    a29e:	6014      	str	r4, [r2, #0]
	list->tail = node;
    a2a0:	605c      	str	r4, [r3, #4]
    a2a2:	e00a      	b.n	a2ba <z_add_timeout+0x56>
			__ASSERT(t->dticks >= 0, "");

			if (t->dticks > to->dticks) {
    a2a4:	6890      	ldr	r0, [r2, #8]
    a2a6:	68a1      	ldr	r1, [r4, #8]
    a2a8:	4288      	cmp	r0, r1
    a2aa:	dd15      	ble.n	a2d8 <z_add_timeout+0x74>
				t->dticks -= to->dticks;
    a2ac:	1a41      	subs	r1, r0, r1
    a2ae:	6091      	str	r1, [r2, #8]
	node->prev = successor->prev;
    a2b0:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    a2b2:	e9c4 2100 	strd	r2, r1, [r4]
	successor->prev->next = node;
    a2b6:	600c      	str	r4, [r1, #0]
	successor->prev = node;
    a2b8:	6054      	str	r4, [r2, #4]
	return list->head == list;
    a2ba:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a2bc:	429a      	cmp	r2, r3
    a2be:	d006      	beq.n	a2ce <z_add_timeout+0x6a>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    a2c0:	4294      	cmp	r4, r2
    a2c2:	d104      	bne.n	a2ce <z_add_timeout+0x6a>
			z_clock_set_timeout(next_timeout(), false);
    a2c4:	f7ff ffb2 	bl	a22c <next_timeout>
    a2c8:	2100      	movs	r1, #0
    a2ca:	f7f7 fd2f 	bl	1d2c <z_clock_set_timeout>
	__asm__ volatile(
    a2ce:	f385 8811 	msr	BASEPRI, r5
    a2d2:	f3bf 8f6f 	isb	sy
		}
	}
}
    a2d6:	bd70      	pop	{r4, r5, r6, pc}
			to->dticks -= t->dticks;
    a2d8:	1a09      	subs	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
    a2da:	4296      	cmp	r6, r2
    a2dc:	60a1      	str	r1, [r4, #8]
    a2de:	d0da      	beq.n	a296 <z_add_timeout+0x32>
    a2e0:	6812      	ldr	r2, [r2, #0]
    a2e2:	e7d7      	b.n	a294 <z_add_timeout+0x30>
    a2e4:	20004a90 	.word	0x20004a90

0000a2e8 <z_timeout_remaining>:

	return ret;
}

s32_t z_timeout_remaining(struct _timeout *timeout)
{
    a2e8:	b538      	push	{r3, r4, r5, lr}
	s32_t ticks = 0;

	if (z_is_inactive_timeout(timeout)) {
    a2ea:	6804      	ldr	r4, [r0, #0]
    a2ec:	b314      	cbz	r4, a334 <z_timeout_remaining+0x4c>
	__asm__ volatile(
    a2ee:	f04f 0320 	mov.w	r3, #32
    a2f2:	f3ef 8111 	mrs	r1, BASEPRI
    a2f6:	f383 8811 	msr	BASEPRI, r3
    a2fa:	f3bf 8f6f 	isb	sy
	return list->head == list;
    a2fe:	4a0e      	ldr	r2, [pc, #56]	; (a338 <z_timeout_remaining+0x50>)
    a300:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a302:	4293      	cmp	r3, r2
    a304:	d014      	beq.n	a330 <z_timeout_remaining+0x48>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    a306:	2400      	movs	r4, #0
    a308:	6852      	ldr	r2, [r2, #4]
		return 0;
	}

	LOCKED(&timeout_lock) {
		for (struct _timeout *t = first(); t != NULL; t = next(t)) {
    a30a:	b93b      	cbnz	r3, a31c <z_timeout_remaining+0x34>
	__asm__ volatile(
    a30c:	f381 8811 	msr	BASEPRI, r1
    a310:	f3bf 8f6f 	isb	sy
				break;
			}
		}
	}

	return ticks - elapsed();
    a314:	f7ff ff6c 	bl	a1f0 <elapsed>
    a318:	1a20      	subs	r0, r4, r0
}
    a31a:	bd38      	pop	{r3, r4, r5, pc}
			ticks += t->dticks;
    a31c:	689d      	ldr	r5, [r3, #8]
			if (timeout == t) {
    a31e:	4283      	cmp	r3, r0
			ticks += t->dticks;
    a320:	442c      	add	r4, r5
			if (timeout == t) {
    a322:	d0f3      	beq.n	a30c <z_timeout_remaining+0x24>
    a324:	2b00      	cmp	r3, #0
    a326:	d0f1      	beq.n	a30c <z_timeout_remaining+0x24>
	return (node == list->tail) ? NULL : node->next;
    a328:	4293      	cmp	r3, r2
    a32a:	d0ef      	beq.n	a30c <z_timeout_remaining+0x24>
    a32c:	681b      	ldr	r3, [r3, #0]
    a32e:	e7ec      	b.n	a30a <z_timeout_remaining+0x22>
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a330:	2400      	movs	r4, #0
    a332:	e7eb      	b.n	a30c <z_timeout_remaining+0x24>
		return 0;
    a334:	4620      	mov	r0, r4
    a336:	e7f0      	b.n	a31a <z_timeout_remaining+0x32>
    a338:	20004a90 	.word	0x20004a90

0000a33c <z_clock_announce>:
		}
	}
}

void z_clock_announce(s32_t ticks)
{
    a33c:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
    a340:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    a342:	f7ff fb9b 	bl	9a7c <z_time_slice>
	__asm__ volatile(
    a346:	f04f 0320 	mov.w	r3, #32
    a34a:	f3ef 8511 	mrs	r5, BASEPRI
    a34e:	f383 8811 	msr	BASEPRI, r3
    a352:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    a356:	4f21      	ldr	r7, [pc, #132]	; (a3dc <z_clock_announce+0xa0>)
    a358:	4e21      	ldr	r6, [pc, #132]	; (a3e0 <z_clock_announce+0xa4>)
    a35a:	46b8      	mov	r8, r7
	return list->head == list;
    a35c:	f8df 9084 	ldr.w	r9, [pc, #132]	; a3e4 <z_clock_announce+0xa8>
    a360:	6034      	str	r4, [r6, #0]
    a362:	f8d9 4000 	ldr.w	r4, [r9]
    a366:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a368:	454c      	cmp	r4, r9
    a36a:	e9d7 bc00 	ldrd	fp, ip, [r7]
    a36e:	d005      	beq.n	a37c <z_clock_announce+0x40>

	while (first() != NULL && first()->dticks <= announce_remaining) {
    a370:	b124      	cbz	r4, a37c <z_clock_announce+0x40>
    a372:	68a3      	ldr	r3, [r4, #8]
    a374:	4293      	cmp	r3, r2
    a376:	dd14      	ble.n	a3a2 <z_clock_announce+0x66>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    a378:	1a9b      	subs	r3, r3, r2
    a37a:	60a3      	str	r3, [r4, #8]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
    a37c:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
    a37e:	eb1b 0002 	adds.w	r0, fp, r2
    a382:	eb4c 71e2 	adc.w	r1, ip, r2, asr #31
    a386:	e9c8 0100 	strd	r0, r1, [r8]
	announce_remaining = 0;
    a38a:	6034      	str	r4, [r6, #0]

	z_clock_set_timeout(next_timeout(), false);
    a38c:	f7ff ff4e 	bl	a22c <next_timeout>
    a390:	4621      	mov	r1, r4
    a392:	f7f7 fccb 	bl	1d2c <z_clock_set_timeout>
	__asm__ volatile(
    a396:	f385 8811 	msr	BASEPRI, r5
    a39a:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    a39e:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
		curr_tick += dt;
    a3a2:	eb1b 0003 	adds.w	r0, fp, r3
    a3a6:	eb4c 71e3 	adc.w	r1, ip, r3, asr #31
		announce_remaining -= dt;
    a3aa:	1ad3      	subs	r3, r2, r3
    a3ac:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
    a3ae:	2300      	movs	r3, #0
		curr_tick += dt;
    a3b0:	e9c7 0100 	strd	r0, r1, [r7]
		t->dticks = 0;
    a3b4:	60a3      	str	r3, [r4, #8]
		remove_timeout(t);
    a3b6:	4620      	mov	r0, r4
    a3b8:	f7ff ff24 	bl	a204 <remove_timeout>
    a3bc:	f385 8811 	msr	BASEPRI, r5
    a3c0:	f3bf 8f6f 	isb	sy
		t->fn(t);
    a3c4:	68e3      	ldr	r3, [r4, #12]
    a3c6:	4798      	blx	r3
	__asm__ volatile(
    a3c8:	f04f 0320 	mov.w	r3, #32
    a3cc:	f3ef 8511 	mrs	r5, BASEPRI
    a3d0:	f383 8811 	msr	BASEPRI, r3
    a3d4:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    a3d8:	e7c3      	b.n	a362 <z_clock_announce+0x26>
    a3da:	bf00      	nop
    a3dc:	20000168 	.word	0x20000168
    a3e0:	20001288 	.word	0x20001288
    a3e4:	20004a90 	.word	0x20004a90

0000a3e8 <z_tick_get>:

s64_t z_tick_get(void)
{
    a3e8:	e92d 4818 	stmdb	sp!, {r3, r4, fp, lr}
    a3ec:	f04f 0320 	mov.w	r3, #32
    a3f0:	f3ef 8411 	mrs	r4, BASEPRI
    a3f4:	f383 8811 	msr	BASEPRI, r3
    a3f8:	f3bf 8f6f 	isb	sy
	u64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
    a3fc:	f7f7 fcec 	bl	1dd8 <z_clock_elapsed>
    a400:	4b07      	ldr	r3, [pc, #28]	; (a420 <z_tick_get+0x38>)
    a402:	e9d3 2300 	ldrd	r2, r3, [r3]
    a406:	eb12 0b00 	adds.w	fp, r2, r0
    a40a:	f143 0c00 	adc.w	ip, r3, #0
    a40e:	4658      	mov	r0, fp
    a410:	4661      	mov	r1, ip
	__asm__ volatile(
    a412:	f384 8811 	msr	BASEPRI, r4
    a416:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    a41a:	e8bd 8818 	ldmia.w	sp!, {r3, r4, fp, pc}
    a41e:	bf00      	nop
    a420:	20000168 	.word	0x20000168

0000a424 <z_timer_expiration_handler>:

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (timer->period > 0) {
    a424:	6a02      	ldr	r2, [r0, #32]
{
    a426:	b538      	push	{r3, r4, r5, lr}
	if (timer->period > 0) {
    a428:	2a00      	cmp	r2, #0
{
    a42a:	4604      	mov	r4, r0
	if (timer->period > 0) {
    a42c:	dd02      	ble.n	a434 <z_timer_expiration_handler+0x10>
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    a42e:	490e      	ldr	r1, [pc, #56]	; (a468 <z_timer_expiration_handler+0x44>)
    a430:	f7ff ff18 	bl	a264 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
    a434:	6a63      	ldr	r3, [r4, #36]	; 0x24
    a436:	3301      	adds	r3, #1
    a438:	6263      	str	r3, [r4, #36]	; 0x24

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
    a43a:	69a3      	ldr	r3, [r4, #24]
    a43c:	b10b      	cbz	r3, a442 <z_timer_expiration_handler+0x1e>
		timer->expiry_fn(timer);
    a43e:	4620      	mov	r0, r4
    a440:	4798      	blx	r3
	return list->head == list;
    a442:	f854 5f10 	ldr.w	r5, [r4, #16]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a446:	42a5      	cmp	r5, r4
    a448:	d00d      	beq.n	a466 <z_timer_expiration_handler+0x42>
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
    a44a:	b165      	cbz	r5, a466 <z_timer_expiration_handler+0x42>
	 * place a thread can be taken off this pend queue, and b) the
	 * only place a thread can be put on the pend queue is at
	 * thread level, which of course cannot interrupt the current
	 * context.
	 */
	z_unpend_thread_no_timeout(thread);
    a44c:	4628      	mov	r0, r5
    a44e:	f003 fcb5 	bl	ddbc <z_unpend_thread_no_timeout>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    a452:	7b6b      	ldrb	r3, [r5, #13]
    a454:	06db      	lsls	r3, r3, #27
    a456:	d104      	bne.n	a462 <z_timer_expiration_handler+0x3e>
	if (z_is_thread_ready(thread)) {
    a458:	69ab      	ldr	r3, [r5, #24]
    a45a:	b913      	cbnz	r3, a462 <z_timer_expiration_handler+0x3e>
		z_add_thread_to_ready_q(thread);
    a45c:	4628      	mov	r0, r5
    a45e:	f7ff fa93 	bl	9988 <z_add_thread_to_ready_q>
    a462:	2300      	movs	r3, #0
    a464:	66ab      	str	r3, [r5, #104]	; 0x68

	z_ready_thread(thread);

	arch_thread_return_value_set(thread, 0);
}
    a466:	bd38      	pop	{r3, r4, r5, pc}
    a468:	0000a425 	.word	0x0000a425

0000a46c <z_impl_k_timer_start>:
	z_object_init(timer);
}


void z_impl_k_timer_start(struct k_timer *timer, s32_t duration, s32_t period)
{
    a46c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    a470:	f240 36e7 	movw	r6, #999	; 0x3e7
    a474:	2700      	movs	r7, #0
    a476:	4604      	mov	r4, r0
    a478:	4688      	mov	r8, r1
    a47a:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    a47e:	4630      	mov	r0, r6
    a480:	4639      	mov	r1, r7
    a482:	2300      	movs	r3, #0
    a484:	fbe5 0102 	umlal	r0, r1, r5, r2
    a488:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    a48c:	f7f5 fe62 	bl	154 <__aeabi_uldivmod>
    a490:	4639      	mov	r1, r7
	__ASSERT(duration >= 0 && period >= 0 &&
		 (duration != 0 || period != 0), "invalid parameters\n");

	volatile s32_t period_in_ticks, duration_in_ticks;

	period_in_ticks = k_ms_to_ticks_ceil32(period);
    a492:	9000      	str	r0, [sp, #0]
    a494:	4630      	mov	r0, r6
    a496:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    a49a:	2300      	movs	r3, #0
    a49c:	fbe5 0108 	umlal	r0, r1, r5, r8
    a4a0:	f7f5 fe58 	bl	154 <__aeabi_uldivmod>
	duration_in_ticks = k_ms_to_ticks_ceil32(duration);
    a4a4:	9001      	str	r0, [sp, #4]

	(void)z_abort_timeout(&timer->timeout);
    a4a6:	4620      	mov	r0, r4
    a4a8:	f003 fdfc 	bl	e0a4 <z_abort_timeout>
	timer->period = period_in_ticks;
    a4ac:	9b00      	ldr	r3, [sp, #0]
	timer->status = 0U;
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    a4ae:	4620      	mov	r0, r4
	timer->period = period_in_ticks;
    a4b0:	6223      	str	r3, [r4, #32]
	timer->status = 0U;
    a4b2:	2300      	movs	r3, #0
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    a4b4:	9a01      	ldr	r2, [sp, #4]
    a4b6:	4903      	ldr	r1, [pc, #12]	; (a4c4 <z_impl_k_timer_start+0x58>)
	timer->status = 0U;
    a4b8:	6263      	str	r3, [r4, #36]	; 0x24
		     duration_in_ticks);
}
    a4ba:	b002      	add	sp, #8
    a4bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    a4c0:	f7ff bed0 	b.w	a264 <z_add_timeout>
    a4c4:	0000a425 	.word	0x0000a425

0000a4c8 <k_poll_event_init>:
 */
static struct k_spinlock lock;

void k_poll_event_init(struct k_poll_event *event, u32_t type,
		       int mode, void *obj)
{
    a4c8:	b510      	push	{r4, lr}
	__ASSERT(type < (BIT(_POLL_NUM_TYPES)), "invalid type\n");
	__ASSERT(obj != NULL, "must provide an object\n");

	event->poller = NULL;
	/* event->tag is left uninitialized: the user will set it if needed */
	event->type = type;
    a4ca:	7b44      	ldrb	r4, [r0, #13]
    a4cc:	f361 0403 	bfi	r4, r1, #0, #4
	event->state = K_POLL_STATE_NOT_READY;
	event->mode = mode;
    a4d0:	7b81      	ldrb	r1, [r0, #14]
	event->type = type;
    a4d2:	7344      	strb	r4, [r0, #13]
	event->mode = mode;
    a4d4:	f362 0141 	bfi	r1, r2, #1, #1
	event->poller = NULL;
    a4d8:	2200      	movs	r2, #0
	event->mode = mode;
    a4da:	7381      	strb	r1, [r0, #14]
	event->state = K_POLL_STATE_NOT_READY;
    a4dc:	68c1      	ldr	r1, [r0, #12]
	event->poller = NULL;
    a4de:	6082      	str	r2, [r0, #8]
	event->state = K_POLL_STATE_NOT_READY;
    a4e0:	4a02      	ldr	r2, [pc, #8]	; (a4ec <k_poll_event_init+0x24>)
    a4e2:	400a      	ands	r2, r1
	event->unused = 0U;
	event->obj = obj;
    a4e4:	e9c0 2303 	strd	r2, r3, [r0, #12]
}
    a4e8:	bd10      	pop	{r4, pc}
    a4ea:	bf00      	nop
    a4ec:	00020fff 	.word	0x00020fff

0000a4f0 <z_impl_k_poll>:

int z_impl_k_poll(struct k_poll_event *events, int num_events, s32_t timeout)
{
	int events_registered;
	k_spinlock_key_t key;
	struct _poller poller = { .is_polling = true,
    a4f0:	2301      	movs	r3, #1
{
    a4f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a4f6:	b086      	sub	sp, #24
	struct _poller poller = { .is_polling = true,
    a4f8:	f88d 300c 	strb.w	r3, [sp, #12]
				  .thread     = _current,
    a4fc:	4b23      	ldr	r3, [pc, #140]	; (a58c <z_impl_k_poll+0x9c>)

	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	events_registered = register_events(events, num_events, &poller,
    a4fe:	4690      	mov	r8, r2
	struct _poller poller = { .is_polling = true,
    a500:	689b      	ldr	r3, [r3, #8]
{
    a502:	4606      	mov	r6, r0
	struct _poller poller = { .is_polling = true,
    a504:	9304      	str	r3, [sp, #16]
    a506:	4b22      	ldr	r3, [pc, #136]	; (a590 <z_impl_k_poll+0xa0>)
    a508:	9305      	str	r3, [sp, #20]
	events_registered = register_events(events, num_events, &poller,
    a50a:	fab2 f382 	clz	r3, r2
    a50e:	aa03      	add	r2, sp, #12
    a510:	095b      	lsrs	r3, r3, #5
    a512:	f003 fee4 	bl	e2de <register_events>
    a516:	4607      	mov	r7, r0
	__asm__ volatile(
    a518:	f04f 0320 	mov.w	r3, #32
    a51c:	f3ef 8511 	mrs	r5, BASEPRI
    a520:	f383 8811 	msr	BASEPRI, r3
    a524:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller.is_polling) {
    a528:	f89d 300c 	ldrb.w	r3, [sp, #12]
    a52c:	f003 04ff 	and.w	r4, r3, #255	; 0xff
    a530:	b94b      	cbnz	r3, a546 <z_impl_k_poll+0x56>
	 * we've already know the return code (-EAGAIN), and even if they are
	 * added to the list of events that occurred, the user has to check the
	 * return code first, which invalidates the whole list of event states.
	 */
	key = k_spin_lock(&lock);
	clear_event_registrations(events, events_registered, key);
    a532:	462a      	mov	r2, r5
    a534:	4639      	mov	r1, r7
    a536:	4630      	mov	r0, r6
    a538:	f003 fe39 	bl	e1ae <clear_event_registrations>
	__asm__ volatile(
    a53c:	f385 8811 	msr	BASEPRI, r5
    a540:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	return swap_rc;
    a544:	e00b      	b.n	a55e <z_impl_k_poll+0x6e>
	poller.is_polling = false;
    a546:	2300      	movs	r3, #0
    a548:	f88d 300c 	strb.w	r3, [sp, #12]
	if (timeout == K_NO_WAIT) {
    a54c:	f1b8 0f00 	cmp.w	r8, #0
    a550:	d109      	bne.n	a566 <z_impl_k_poll+0x76>
    a552:	f385 8811 	msr	BASEPRI, r5
    a556:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
    a55a:	f06f 040a 	mvn.w	r4, #10
}
    a55e:	4620      	mov	r0, r4
    a560:	b006      	add	sp, #24
    a562:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
    a566:	aa01      	add	r2, sp, #4
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
    a568:	4643      	mov	r3, r8
    a56a:	4629      	mov	r1, r5
    a56c:	4809      	ldr	r0, [pc, #36]	; (a594 <z_impl_k_poll+0xa4>)
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
    a56e:	e9cd 2201 	strd	r2, r2, [sp, #4]
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
    a572:	f7ff fbbf 	bl	9cf4 <z_pend_curr>
    a576:	4604      	mov	r4, r0
	__asm__ volatile(
    a578:	f04f 0320 	mov.w	r3, #32
    a57c:	f3ef 8511 	mrs	r5, BASEPRI
    a580:	f383 8811 	msr	BASEPRI, r3
    a584:	f3bf 8f6f 	isb	sy
    a588:	e7d3      	b.n	a532 <z_impl_k_poll+0x42>
    a58a:	bf00      	nop
    a58c:	200011d0 	.word	0x200011d0
    a590:	0000e23f 	.word	0x0000e23f
    a594:	20001530 	.word	0x20001530

0000a598 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *signal, int result)
{
    a598:	b538      	push	{r3, r4, r5, lr}
    a59a:	f04f 0320 	mov.w	r3, #32
    a59e:	f3ef 8511 	mrs	r5, BASEPRI
    a5a2:	f383 8811 	msr	BASEPRI, r3
    a5a6:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	signal->result = result;
    a5aa:	60c1      	str	r1, [r0, #12]
	signal->signaled = 1U;
    a5ac:	2101      	movs	r1, #1
	return list->head == list;
    a5ae:	6803      	ldr	r3, [r0, #0]
    a5b0:	6081      	str	r1, [r0, #8]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
    a5b2:	4298      	cmp	r0, r3
    a5b4:	d106      	bne.n	a5c4 <z_impl_k_poll_signal_raise+0x2c>
	__asm__ volatile(
    a5b6:	f385 8811 	msr	BASEPRI, r5
    a5ba:	f3bf 8f6f 	isb	sy

	poll_event = (struct k_poll_event *)sys_dlist_get(&signal->poll_events);
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);
		return 0;
    a5be:	2400      	movs	r4, #0

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);

	z_reschedule(&lock, key);
	return rc;
}
    a5c0:	4620      	mov	r0, r4
    a5c2:	bd38      	pop	{r3, r4, r5, pc}
	node->prev->next = node->next;
    a5c4:	e9d3 2000 	ldrd	r2, r0, [r3]
    a5c8:	6002      	str	r2, [r0, #0]
	node->next->prev = node->prev;
    a5ca:	6050      	str	r0, [r2, #4]
	node->next = NULL;
    a5cc:	2200      	movs	r2, #0
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
    a5ce:	4618      	mov	r0, r3
	node->prev = NULL;
    a5d0:	e9c3 2200 	strd	r2, r2, [r3]
    a5d4:	f003 fe18 	bl	e208 <signal_poll_event>
	z_reschedule(&lock, key);
    a5d8:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
    a5da:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
    a5dc:	4801      	ldr	r0, [pc, #4]	; (a5e4 <z_impl_k_poll_signal_raise+0x4c>)
    a5de:	f003 fc06 	bl	ddee <z_reschedule>
	return rc;
    a5e2:	e7ed      	b.n	a5c0 <z_impl_k_poll_signal_raise+0x28>
    a5e4:	20001530 	.word	0x20001530

0000a5e8 <le_param_req>:
}
    a5e8:	2001      	movs	r0, #1
    a5ea:	4770      	bx	lr

0000a5ec <get_bit_ptr>:
/* Places a 32 bit output pointer in word, and an integer bit index
 * within that word as the return value
 */
static int get_bit_ptr(struct sys_mem_pool_base *p, int level, int bn,
		       u32_t **word)
{
    a5ec:	b570      	push	{r4, r5, r6, lr}
    a5ee:	250c      	movs	r5, #12
    a5f0:	68c6      	ldr	r6, [r0, #12]
	u32_t *bitarray = level <= p->max_inline_level ?
    a5f2:	f990 000b 	ldrsb.w	r0, [r0, #11]
    a5f6:	434d      	muls	r5, r1
		p->levels[level].bits : p->levels[level].bits_p;
    a5f8:	4288      	cmp	r0, r1

	*word = &bitarray[bn / 32];
    a5fa:	4610      	mov	r0, r2
    a5fc:	eb06 0405 	add.w	r4, r6, r5
		p->levels[level].bits : p->levels[level].bits_p;
    a600:	bfb8      	it	lt
    a602:	5974      	ldrlt	r4, [r6, r5]
	*word = &bitarray[bn / 32];
    a604:	2a00      	cmp	r2, #0
    a606:	bfb8      	it	lt
    a608:	f102 001f 	addlt.w	r0, r2, #31
    a60c:	1140      	asrs	r0, r0, #5
    a60e:	eb04 0180 	add.w	r1, r4, r0, lsl #2
    a612:	6019      	str	r1, [r3, #0]

	return bn & 0x1f;
}
    a614:	f002 001f 	and.w	r0, r2, #31
    a618:	bd70      	pop	{r4, r5, r6, pc}

0000a61a <pool_irq_lock.isra.2.part.3>:
	__asm__ volatile(
    a61a:	f04f 0320 	mov.w	r3, #32
    a61e:	f3ef 8011 	mrs	r0, BASEPRI
    a622:	f383 8811 	msr	BASEPRI, r3
    a626:	f3bf 8f6f 	isb	sy
	if (p->flags & SYS_MEM_POOL_KERNEL) {
		return irq_lock();
	} else {
		return 0;
	}
}
    a62a:	4770      	bx	lr

0000a62c <pool_irq_unlock.isra.4>:

static inline void pool_irq_unlock(struct sys_mem_pool_base *p, int key)
{
	if (p->flags & SYS_MEM_POOL_KERNEL) {
    a62c:	07c3      	lsls	r3, r0, #31
    a62e:	d503      	bpl.n	a638 <pool_irq_unlock.isra.4+0xc>
	__asm__ volatile(
    a630:	f381 8811 	msr	BASEPRI, r1
    a634:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}
}
    a638:	4770      	bx	lr

0000a63a <z_sys_mem_pool_base_init>:
	p->max_inline_level = -1;
    a63a:	23ff      	movs	r3, #255	; 0xff
{
    a63c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
    a640:	6846      	ldr	r6, [r0, #4]
	p->max_inline_level = -1;
    a642:	72c3      	strb	r3, [r0, #11]
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
    a644:	4632      	mov	r2, r6
	for (i = 0; i < p->n_levels; i++) {
    a646:	2300      	movs	r3, #0
		sys_dlist_init(&p->levels[i].free_list);
    a648:	f04f 090c 	mov.w	r9, #12
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
    a64c:	8907      	ldrh	r7, [r0, #8]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
    a64e:	6801      	ldr	r1, [r0, #0]
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
    a650:	fb06 fc07 	mul.w	ip, r6, r7
	for (i = 0; i < p->n_levels; i++) {
    a654:	f890 800a 	ldrb.w	r8, [r0, #10]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
    a658:	4461      	add	r1, ip
	for (i = 0; i < p->n_levels; i++) {
    a65a:	4598      	cmp	r8, r3
    a65c:	dc05      	bgt.n	a66a <z_sys_mem_pool_base_init+0x30>
    a65e:	2300      	movs	r3, #0
	for (i = 0; i < p->n_max; i++) {
    a660:	4619      	mov	r1, r3
    a662:	428f      	cmp	r7, r1
    a664:	dc20      	bgt.n	a6a8 <z_sys_mem_pool_base_init+0x6e>
}
    a666:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		int nblocks = buflen / sz;
    a66a:	fbbc f5f2 	udiv	r5, ip, r2
		sys_dlist_init(&p->levels[i].free_list);
    a66e:	fb09 fe03 	mul.w	lr, r9, r3
    a672:	f8d0 a00c 	ldr.w	sl, [r0, #12]
		if (nblocks <= sizeof(p->levels[i].bits)*8) {
    a676:	2d20      	cmp	r5, #32
		sys_dlist_init(&p->levels[i].free_list);
    a678:	eb0a 040e 	add.w	r4, sl, lr
    a67c:	f104 0b04 	add.w	fp, r4, #4
	list->tail = (sys_dnode_t *)list;
    a680:	e9c4 bb01 	strd	fp, fp, [r4, #4]
		if (nblocks <= sizeof(p->levels[i].bits)*8) {
    a684:	d805      	bhi.n	a692 <z_sys_mem_pool_base_init+0x58>
			p->max_inline_level = i;
    a686:	72c3      	strb	r3, [r0, #11]
		sz = WB_DN(sz / 4);
    a688:	0892      	lsrs	r2, r2, #2
    a68a:	f022 0203 	bic.w	r2, r2, #3
	for (i = 0; i < p->n_levels; i++) {
    a68e:	3301      	adds	r3, #1
    a690:	e7e3      	b.n	a65a <z_sys_mem_pool_base_init+0x20>
			bits += (nblocks + 31)/32;
    a692:	f115 041f 	adds.w	r4, r5, #31
    a696:	bf48      	it	mi
    a698:	f105 043e 	addmi.w	r4, r5, #62	; 0x3e
    a69c:	1164      	asrs	r4, r4, #5
			p->levels[i].bits_p = bits;
    a69e:	f84a 100e 	str.w	r1, [sl, lr]
			bits += (nblocks + 31)/32;
    a6a2:	eb01 0184 	add.w	r1, r1, r4, lsl #2
    a6a6:	e7ef      	b.n	a688 <z_sys_mem_pool_base_init+0x4e>
		sys_dlist_append(&p->levels[0].free_list, block);
    a6a8:	68c2      	ldr	r2, [r0, #12]
	return (u8_t *)p->buf + lsz * block;
    a6aa:	6805      	ldr	r5, [r0, #0]
		sys_dlist_append(&p->levels[0].free_list, block);
    a6ac:	f102 0c04 	add.w	ip, r2, #4
	return (u8_t *)p->buf + lsz * block;
    a6b0:	18ec      	adds	r4, r5, r3
	node->next = list;
    a6b2:	f845 c003 	str.w	ip, [r5, r3]
	node->prev = list->tail;
    a6b6:	6895      	ldr	r5, [r2, #8]
	for (i = 0; i < p->n_max; i++) {
    a6b8:	3101      	adds	r1, #1
    a6ba:	6065      	str	r5, [r4, #4]
	list->tail->next = node;
    a6bc:	6895      	ldr	r5, [r2, #8]
    a6be:	4433      	add	r3, r6
    a6c0:	602c      	str	r4, [r5, #0]
	list->tail = node;
    a6c2:	6094      	str	r4, [r2, #8]
    a6c4:	e7cd      	b.n	a662 <z_sys_mem_pool_base_init+0x28>

0000a6c6 <z_sys_mem_pool_block_alloc>:
	return block;
}

int z_sys_mem_pool_block_alloc(struct sys_mem_pool_base *p, size_t size,
			      u32_t *level_p, u32_t *block_p, void **data_p)
{
    a6c6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a6ca:	b087      	sub	sp, #28
	int i, from_l, alloc_l = -1;
	unsigned int key;
	void *data = NULL;
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
    a6cc:	7a84      	ldrb	r4, [r0, #10]
{
    a6ce:	af00      	add	r7, sp, #0
    a6d0:	e9c7 3201 	strd	r3, r2, [r7, #4]
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
    a6d4:	00a3      	lsls	r3, r4, #2
    a6d6:	3307      	adds	r3, #7
    a6d8:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
    a6dc:	ebad 0d03 	sub.w	sp, sp, r3
    a6e0:	46ea      	mov	sl, sp
	 * want to allocate and the smallest one with a free entry
	 * from which we can split an allocation if needed.  Along the
	 * way, we populate an array of sizes for each level so we
	 * don't need to waste RAM storing it.
	 */
	lsizes[0] = p->max_sz;
    a6e2:	4653      	mov	r3, sl
    a6e4:	6842      	ldr	r2, [r0, #4]
{
    a6e6:	4605      	mov	r5, r0
	lsizes[0] = p->max_sz;
    a6e8:	f843 2904 	str.w	r2, [r3], #-4
	for (i = 0; i < p->n_levels; i++) {
    a6ec:	2200      	movs	r2, #0
    a6ee:	4294      	cmp	r4, r2
    a6f0:	f102 39ff 	add.w	r9, r2, #4294967295
    a6f4:	dd09      	ble.n	a70a <z_sys_mem_pool_block_alloc+0x44>
		if (i > 0) {
    a6f6:	b122      	cbz	r2, a702 <z_sys_mem_pool_block_alloc+0x3c>
			lsizes[i] = WB_DN(lsizes[i-1] / 4);
    a6f8:	6818      	ldr	r0, [r3, #0]
    a6fa:	0880      	lsrs	r0, r0, #2
    a6fc:	f020 0003 	bic.w	r0, r0, #3
    a700:	6058      	str	r0, [r3, #4]
		}

		if (lsizes[i] < size) {
    a702:	f853 0f04 	ldr.w	r0, [r3, #4]!
    a706:	4288      	cmp	r0, r1
    a708:	d208      	bcs.n	a71c <z_sys_mem_pool_block_alloc+0x56>
		}

		alloc_l = i;
	}

	if (alloc_l < 0) {
    a70a:	f1b9 3fff 	cmp.w	r9, #4294967295
    a70e:	d107      	bne.n	a720 <z_sys_mem_pool_block_alloc+0x5a>
		*data_p = NULL;
    a710:	2300      	movs	r3, #0
    a712:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    a714:	6013      	str	r3, [r2, #0]
	pool_irq_unlock(p, key);

	*data_p = data;

	if (data == NULL) {
		return -ENOMEM;
    a716:	f06f 000b 	mvn.w	r0, #11
    a71a:	e02c      	b.n	a776 <z_sys_mem_pool_block_alloc+0xb0>
	for (i = 0; i < p->n_levels; i++) {
    a71c:	3201      	adds	r2, #1
    a71e:	e7e6      	b.n	a6ee <z_sys_mem_pool_block_alloc+0x28>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
    a720:	7c28      	ldrb	r0, [r5, #16]
    a722:	f010 0001 	ands.w	r0, r0, #1
    a726:	d001      	beq.n	a72c <z_sys_mem_pool_block_alloc+0x66>
    a728:	f7ff ff77 	bl	a61a <pool_irq_lock.isra.2.part.3>
    a72c:	230c      	movs	r3, #12
	key = pool_irq_lock(p);
    a72e:	4680      	mov	r8, r0
	block = sys_dlist_get(&p->levels[l].free_list);
    a730:	464e      	mov	r6, r9
    a732:	68ea      	ldr	r2, [r5, #12]
    a734:	fb03 2309 	mla	r3, r3, r9, r2
	return list->head == list;
    a738:	461a      	mov	r2, r3
    a73a:	f852 4f04 	ldr.w	r4, [r2, #4]!
	if (!sys_dlist_is_empty(list)) {
    a73e:	4294      	cmp	r4, r2
    a740:	d11d      	bne.n	a77e <z_sys_mem_pool_block_alloc+0xb8>
	for (i = alloc_l; i >= 0; i--) {
    a742:	3e01      	subs	r6, #1
    a744:	1c72      	adds	r2, r6, #1
    a746:	f1a3 030c 	sub.w	r3, r3, #12
    a74a:	d1f5      	bne.n	a738 <z_sys_mem_pool_block_alloc+0x72>
    a74c:	2400      	movs	r4, #0
	pool_irq_unlock(p, key);
    a74e:	4641      	mov	r1, r8
    a750:	7c28      	ldrb	r0, [r5, #16]
    a752:	f7ff ff6b 	bl	a62c <pool_irq_unlock.isra.4>
	*data_p = data;
    a756:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    a758:	601c      	str	r4, [r3, #0]
	if (data == NULL) {
    a75a:	2c00      	cmp	r4, #0
    a75c:	d0db      	beq.n	a716 <z_sys_mem_pool_block_alloc+0x50>
	}

	*level_p = alloc_l;
    a75e:	68bb      	ldr	r3, [r7, #8]
	*block_p = block_num(p, data, lsizes[alloc_l]);

	return 0;
    a760:	2000      	movs	r0, #0
	*level_p = alloc_l;
    a762:	f8c3 9000 	str.w	r9, [r3]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
    a766:	682b      	ldr	r3, [r5, #0]
    a768:	1ae4      	subs	r4, r4, r3
    a76a:	f85a 3029 	ldr.w	r3, [sl, r9, lsl #2]
    a76e:	fb94 f4f3 	sdiv	r4, r4, r3
	*block_p = block_num(p, data, lsizes[alloc_l]);
    a772:	687b      	ldr	r3, [r7, #4]
    a774:	601c      	str	r4, [r3, #0]
}
    a776:	371c      	adds	r7, #28
    a778:	46bd      	mov	sp, r7
    a77a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	node->prev->next = node->next;
    a77e:	e9d4 3200 	ldrd	r3, r2, [r4]
    a782:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
    a784:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    a786:	2300      	movs	r3, #0
	node->prev = NULL;
    a788:	e9c4 3300 	strd	r3, r3, [r4]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
    a78c:	682b      	ldr	r3, [r5, #0]
		data = block_alloc(p, i, lsizes[i]);
    a78e:	f85a 1026 	ldr.w	r1, [sl, r6, lsl #2]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
    a792:	1ae2      	subs	r2, r4, r3
	int bit = get_bit_ptr(p, level, bn, &word);
    a794:	f107 0b14 	add.w	fp, r7, #20
    a798:	fb92 f2f1 	sdiv	r2, r2, r1
    a79c:	465b      	mov	r3, fp
    a79e:	4631      	mov	r1, r6
    a7a0:	4628      	mov	r0, r5
    a7a2:	f7ff ff23 	bl	a5ec <get_bit_ptr>
	*word |= (1<<bit);
    a7a6:	2201      	movs	r2, #1
    a7a8:	6979      	ldr	r1, [r7, #20]
    a7aa:	fa02 f000 	lsl.w	r0, r2, r0
    a7ae:	680b      	ldr	r3, [r1, #0]
    a7b0:	603a      	str	r2, [r7, #0]
    a7b2:	4303      	orrs	r3, r0
    a7b4:	600b      	str	r3, [r1, #0]
			for (from_l = i; from_l < alloc_l; from_l++) {
    a7b6:	454e      	cmp	r6, r9
    a7b8:	dac9      	bge.n	a74e <z_sys_mem_pool_block_alloc+0x88>
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
    a7ba:	682a      	ldr	r2, [r5, #0]
    a7bc:	f85a 3026 	ldr.w	r3, [sl, r6, lsl #2]
    a7c0:	1aa2      	subs	r2, r4, r2
    a7c2:	fb92 f2f3 	sdiv	r2, r2, r3
	set_alloc_bit(p, l + 1, 4*bn);
    a7c6:	3601      	adds	r6, #1
	int bit = get_bit_ptr(p, level, bn, &word);
    a7c8:	465b      	mov	r3, fp
    a7ca:	0092      	lsls	r2, r2, #2
    a7cc:	4631      	mov	r1, r6
    a7ce:	4628      	mov	r0, r5
    a7d0:	f7ff ff0c 	bl	a5ec <get_bit_ptr>
	*word |= (1<<bit);
    a7d4:	697a      	ldr	r2, [r7, #20]
    a7d6:	683b      	ldr	r3, [r7, #0]
		sys_dlist_append(&p->levels[l + 1].free_list, block2);
    a7d8:	68e9      	ldr	r1, [r5, #12]
	*word |= (1<<bit);
    a7da:	fa03 f000 	lsl.w	r0, r3, r0
    a7de:	6813      	ldr	r3, [r2, #0]
    a7e0:	4303      	orrs	r3, r0
    a7e2:	6013      	str	r3, [r2, #0]
		sys_dlist_append(&p->levels[l + 1].free_list, block2);
    a7e4:	230c      	movs	r3, #12
    a7e6:	2203      	movs	r2, #3
    a7e8:	fb03 1106 	mla	r1, r3, r6, r1
		int lsz = lsizes[l + 1];
    a7ec:	f85a 0026 	ldr.w	r0, [sl, r6, lsl #2]
		sys_dlist_append(&p->levels[l + 1].free_list, block2);
    a7f0:	f101 0e04 	add.w	lr, r1, #4
    a7f4:	1823      	adds	r3, r4, r0
    a7f6:	60fa      	str	r2, [r7, #12]
	node->prev = list->tail;
    a7f8:	688a      	ldr	r2, [r1, #8]
	node->next = list;
    a7fa:	f8c3 e000 	str.w	lr, [r3]
	node->prev = list->tail;
    a7fe:	605a      	str	r2, [r3, #4]
	list->tail->next = node;
    a800:	688a      	ldr	r2, [r1, #8]
    a802:	6013      	str	r3, [r2, #0]
	for (i = 1; i < 4; i++) {
    a804:	68fa      	ldr	r2, [r7, #12]
	list->tail = node;
    a806:	608b      	str	r3, [r1, #8]
    a808:	3a01      	subs	r2, #1
    a80a:	4403      	add	r3, r0
    a80c:	60fa      	str	r2, [r7, #12]
    a80e:	d1f3      	bne.n	a7f8 <z_sys_mem_pool_block_alloc+0x132>
				pool_irq_unlock(p, key);
    a810:	4641      	mov	r1, r8
    a812:	7c28      	ldrb	r0, [r5, #16]
    a814:	f7ff ff0a 	bl	a62c <pool_irq_unlock.isra.4>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
    a818:	7c2b      	ldrb	r3, [r5, #16]
    a81a:	07db      	lsls	r3, r3, #31
    a81c:	d503      	bpl.n	a826 <z_sys_mem_pool_block_alloc+0x160>
    a81e:	f7ff fefc 	bl	a61a <pool_irq_lock.isra.2.part.3>
				key = pool_irq_lock(p);
    a822:	4680      	mov	r8, r0
    a824:	e7c7      	b.n	a7b6 <z_sys_mem_pool_block_alloc+0xf0>
		return 0;
    a826:	68f8      	ldr	r0, [r7, #12]
    a828:	e7fb      	b.n	a822 <z_sys_mem_pool_block_alloc+0x15c>

0000a82a <z_sys_mem_pool_block_free>:

void z_sys_mem_pool_block_free(struct sys_mem_pool_base *p, u32_t level,
			      u32_t block)
{
    a82a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a82e:	b085      	sub	sp, #20
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
    a830:	7a83      	ldrb	r3, [r0, #10]
{
    a832:	af00      	add	r7, sp, #0
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
    a834:	009b      	lsls	r3, r3, #2
    a836:	3307      	adds	r3, #7
    a838:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
    a83c:	ebad 0d03 	sub.w	sp, sp, r3
    a840:	46eb      	mov	fp, sp
	 * to avoid having to store it in precious RAM bytes.
	 * Overhead here is somewhat higher because block_free()
	 * doesn't inherently need to traverse all the larger
	 * sublevels.
	 */
	lsizes[0] = p->max_sz;
    a842:	6843      	ldr	r3, [r0, #4]
{
    a844:	4606      	mov	r6, r0
	lsizes[0] = p->max_sz;
    a846:	465c      	mov	r4, fp
	for (i = 1; i <= level; i++) {
    a848:	2001      	movs	r0, #1
	lsizes[0] = p->max_sz;
    a84a:	f8cb 3000 	str.w	r3, [fp]
	for (i = 1; i <= level; i++) {
    a84e:	4281      	cmp	r1, r0
    a850:	d215      	bcs.n	a87e <z_sys_mem_pool_block_free+0x54>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
    a852:	7c30      	ldrb	r0, [r6, #16]
		lsizes[i] = WB_DN(lsizes[i-1] / 4);
	}

	block_free(p, level, lsizes, block);
    a854:	4688      	mov	r8, r1
	if (p->flags & SYS_MEM_POOL_KERNEL) {
    a856:	f010 0001 	ands.w	r0, r0, #1
	block_free(p, level, lsizes, block);
    a85a:	4615      	mov	r5, r2
	if (p->flags & SYS_MEM_POOL_KERNEL) {
    a85c:	d001      	beq.n	a862 <z_sys_mem_pool_block_free+0x38>
    a85e:	f7ff fedc 	bl	a61a <pool_irq_lock.isra.2.part.3>
	unsigned int key = pool_irq_lock(p);
    a862:	4604      	mov	r4, r0
	while (level >= 0) {
    a864:	f1b8 0f00 	cmp.w	r8, #0
    a868:	da11      	bge.n	a88e <z_sys_mem_pool_block_free+0x64>
	return -1;
    a86a:	f04f 34ff 	mov.w	r4, #4294967295
	pool_irq_unlock(p, key);
    a86e:	4621      	mov	r1, r4
    a870:	7c30      	ldrb	r0, [r6, #16]
    a872:	f7ff fedb 	bl	a62c <pool_irq_unlock.isra.4>
}
    a876:	3714      	adds	r7, #20
    a878:	46bd      	mov	sp, r7
    a87a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		lsizes[i] = WB_DN(lsizes[i-1] / 4);
    a87e:	6823      	ldr	r3, [r4, #0]
	for (i = 1; i <= level; i++) {
    a880:	3001      	adds	r0, #1
		lsizes[i] = WB_DN(lsizes[i-1] / 4);
    a882:	089b      	lsrs	r3, r3, #2
    a884:	f023 0303 	bic.w	r3, r3, #3
    a888:	f844 3f04 	str.w	r3, [r4, #4]!
    a88c:	e7df      	b.n	a84e <z_sys_mem_pool_block_free+0x24>
		int i, lsz = lsizes[level];
    a88e:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
	int bit = get_bit_ptr(p, level, bn, &word);
    a892:	462a      	mov	r2, r5
	return (u8_t *)p->buf + lsz * block;
    a894:	fb03 fa05 	mul.w	sl, r3, r5
		int i, lsz = lsizes[level];
    a898:	607b      	str	r3, [r7, #4]
	return (u8_t *)p->buf + lsz * block;
    a89a:	6833      	ldr	r3, [r6, #0]
	int bit = get_bit_ptr(p, level, bn, &word);
    a89c:	4641      	mov	r1, r8
	return (u8_t *)p->buf + lsz * block;
    a89e:	eb03 090a 	add.w	r9, r3, sl
    a8a2:	603b      	str	r3, [r7, #0]
	int bit = get_bit_ptr(p, level, bn, &word);
    a8a4:	4630      	mov	r0, r6
    a8a6:	f107 030c 	add.w	r3, r7, #12
    a8aa:	f7ff fe9f 	bl	a5ec <get_bit_ptr>
	*word &= ~(1<<bit);
    a8ae:	2301      	movs	r3, #1
    a8b0:	68fa      	ldr	r2, [r7, #12]
    a8b2:	fa03 f000 	lsl.w	r0, r3, r0
    a8b6:	6813      	ldr	r3, [r2, #0]
	node->next = list;
    a8b8:	6839      	ldr	r1, [r7, #0]
    a8ba:	ea23 0300 	bic.w	r3, r3, r0
    a8be:	6013      	str	r3, [r2, #0]
		sys_dlist_append(&p->levels[level].free_list, block);
    a8c0:	220c      	movs	r2, #12
    a8c2:	68f3      	ldr	r3, [r6, #12]
    a8c4:	fb02 3308 	mla	r3, r2, r8, r3
    a8c8:	1d1a      	adds	r2, r3, #4
    a8ca:	f841 200a 	str.w	r2, [r1, sl]
	node->prev = list->tail;
    a8ce:	689a      	ldr	r2, [r3, #8]
		pool_irq_unlock(p, key);
    a8d0:	4621      	mov	r1, r4
    a8d2:	f8c9 2004 	str.w	r2, [r9, #4]
	list->tail->next = node;
    a8d6:	689a      	ldr	r2, [r3, #8]
    a8d8:	f8c2 9000 	str.w	r9, [r2]
	list->tail = node;
    a8dc:	f8c3 9008 	str.w	r9, [r3, #8]
    a8e0:	7c30      	ldrb	r0, [r6, #16]
    a8e2:	f7ff fea3 	bl	a62c <pool_irq_unlock.isra.4>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
    a8e6:	7c30      	ldrb	r0, [r6, #16]
    a8e8:	f010 0001 	ands.w	r0, r0, #1
    a8ec:	d001      	beq.n	a8f2 <z_sys_mem_pool_block_free+0xc8>
    a8ee:	f7ff fe94 	bl	a61a <pool_irq_lock.isra.2.part.3>
		key = pool_irq_lock(p);
    a8f2:	4604      	mov	r4, r0
		if (level == 0 || partner_alloc_bits(p, level, bn) != 0) {
    a8f4:	f1b8 0f00 	cmp.w	r8, #0
    a8f8:	d0b9      	beq.n	a86e <z_sys_mem_pool_block_free+0x44>
	int bit = get_bit_ptr(p, level, bn, &word);
    a8fa:	f107 030c 	add.w	r3, r7, #12
    a8fe:	462a      	mov	r2, r5
    a900:	4641      	mov	r1, r8
    a902:	4630      	mov	r0, r6
    a904:	f7ff fe72 	bl	a5ec <get_bit_ptr>
	return (*word >> (4*(bit / 4))) & 0xf;
    a908:	68fb      	ldr	r3, [r7, #12]
    a90a:	2800      	cmp	r0, #0
    a90c:	bfb8      	it	lt
    a90e:	3003      	addlt	r0, #3
    a910:	681b      	ldr	r3, [r3, #0]
    a912:	f020 0003 	bic.w	r0, r0, #3
    a916:	fa23 f000 	lsr.w	r0, r3, r0
		if (level == 0 || partner_alloc_bits(p, level, bn) != 0) {
    a91a:	f010 000f 	ands.w	r0, r0, #15
    a91e:	d1a6      	bne.n	a86e <z_sys_mem_pool_block_free+0x44>
	node->next = NULL;
    a920:	4684      	mov	ip, r0
			int b = (bn & ~3) + i;
    a922:	f025 0a03 	bic.w	sl, r5, #3
	return (u8_t *)p->buf + lsz * block;
    a926:	687a      	ldr	r2, [r7, #4]
			int b = (bn & ~3) + i;
    a928:	eb0a 0300 	add.w	r3, sl, r0
	return (u8_t *)p->buf + lsz * block;
    a92c:	4353      	muls	r3, r2
    a92e:	6832      	ldr	r2, [r6, #0]
		for (i = 0; i < 4; i++) {
    a930:	3001      	adds	r0, #1
	return (u8_t *)p->buf + lsz * block;
    a932:	18d1      	adds	r1, r2, r3
	node->prev->next = node->next;
    a934:	f8d1 9004 	ldr.w	r9, [r1, #4]
    a938:	f852 e003 	ldr.w	lr, [r2, r3]
		for (i = 0; i < 4; i++) {
    a93c:	2804      	cmp	r0, #4
    a93e:	f8c9 e000 	str.w	lr, [r9]
	node->next->prev = node->prev;
    a942:	f8ce 9004 	str.w	r9, [lr, #4]
	node->next = NULL;
    a946:	f842 c003 	str.w	ip, [r2, r3]
	node->prev = NULL;
    a94a:	f8c1 c004 	str.w	ip, [r1, #4]
    a94e:	d1ea      	bne.n	a926 <z_sys_mem_pool_block_free+0xfc>
		bn = bn / 4;
    a950:	2d00      	cmp	r5, #0
    a952:	bfb8      	it	lt
    a954:	3503      	addlt	r5, #3
		level = level - 1;
    a956:	f108 38ff 	add.w	r8, r8, #4294967295
		bn = bn / 4;
    a95a:	10ad      	asrs	r5, r5, #2
    a95c:	e782      	b.n	a864 <z_sys_mem_pool_block_free+0x3a>

0000a95e <arch_printk_char_out>:
}
    a95e:	2000      	movs	r0, #0
    a960:	4770      	bx	lr

0000a962 <print_err>:
{
    a962:	b570      	push	{r4, r5, r6, lr}
    a964:	460d      	mov	r5, r1
    a966:	4604      	mov	r4, r0
	out('E', ctx);
    a968:	2045      	movs	r0, #69	; 0x45
    a96a:	47a0      	blx	r4
	out('R', ctx);
    a96c:	4629      	mov	r1, r5
    a96e:	2052      	movs	r0, #82	; 0x52
    a970:	47a0      	blx	r4
	out('R', ctx);
    a972:	4629      	mov	r1, r5
    a974:	4623      	mov	r3, r4
}
    a976:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	out('R', ctx);
    a97a:	2052      	movs	r0, #82	; 0x52
    a97c:	4718      	bx	r3

0000a97e <str_out>:
{
    a97e:	b530      	push	{r4, r5, lr}
    a980:	688a      	ldr	r2, [r1, #8]
	if (ctx->str == NULL || ctx->count >= ctx->max) {
    a982:	680c      	ldr	r4, [r1, #0]
    a984:	1c55      	adds	r5, r2, #1
    a986:	b114      	cbz	r4, a98e <str_out+0x10>
    a988:	684b      	ldr	r3, [r1, #4]
    a98a:	4293      	cmp	r3, r2
    a98c:	dc01      	bgt.n	a992 <str_out+0x14>
		ctx->count++;
    a98e:	608d      	str	r5, [r1, #8]
}
    a990:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
    a992:	3b01      	subs	r3, #1
    a994:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
    a996:	bf08      	it	eq
    a998:	2200      	moveq	r2, #0
    a99a:	608d      	str	r5, [r1, #8]
    a99c:	bf0c      	ite	eq
    a99e:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
    a9a0:	54a0      	strbne	r0, [r4, r2]
    a9a2:	e7f5      	b.n	a990 <str_out+0x12>

0000a9a4 <z_vprintk>:
{
    a9a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char length_mod = 0;
    a9a8:	f04f 0800 	mov.w	r8, #0
{
    a9ac:	4606      	mov	r6, r0
    a9ae:	460f      	mov	r7, r1
    a9b0:	461c      	mov	r4, r3
	int min_width = -1;
    a9b2:	f04f 3aff 	mov.w	sl, #4294967295
	enum pad_type padding = PAD_NONE;
    a9b6:	46c1      	mov	r9, r8
	int might_format = 0; /* 1 if encountered a '%' */
    a9b8:	4645      	mov	r5, r8
{
    a9ba:	b08b      	sub	sp, #44	; 0x2c
    a9bc:	9202      	str	r2, [sp, #8]
	while (*fmt) {
    a9be:	9b02      	ldr	r3, [sp, #8]
    a9c0:	7818      	ldrb	r0, [r3, #0]
    a9c2:	b910      	cbnz	r0, a9ca <z_vprintk+0x26>
}
    a9c4:	b00b      	add	sp, #44	; 0x2c
    a9c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!might_format) {
    a9ca:	b945      	cbnz	r5, a9de <z_vprintk+0x3a>
			if (*fmt != '%') {
    a9cc:	2825      	cmp	r0, #37	; 0x25
    a9ce:	f000 814b 	beq.w	ac68 <z_vprintk+0x2c4>
				out((int)*fmt, ctx);
    a9d2:	4639      	mov	r1, r7
    a9d4:	47b0      	blx	r6
		++fmt;
    a9d6:	9b02      	ldr	r3, [sp, #8]
    a9d8:	3301      	adds	r3, #1
    a9da:	9302      	str	r3, [sp, #8]
    a9dc:	e7ef      	b.n	a9be <z_vprintk+0x1a>
			switch (*fmt) {
    a9de:	2864      	cmp	r0, #100	; 0x64
    a9e0:	d06d      	beq.n	aabe <z_vprintk+0x11a>
    a9e2:	d819      	bhi.n	aa18 <z_vprintk+0x74>
    a9e4:	2839      	cmp	r0, #57	; 0x39
    a9e6:	d80a      	bhi.n	a9fe <z_vprintk+0x5a>
    a9e8:	2831      	cmp	r0, #49	; 0x31
    a9ea:	d25f      	bcs.n	aaac <z_vprintk+0x108>
    a9ec:	282d      	cmp	r0, #45	; 0x2d
    a9ee:	f000 8141 	beq.w	ac74 <z_vprintk+0x2d0>
    a9f2:	2830      	cmp	r0, #48	; 0x30
    a9f4:	d04b      	beq.n	aa8e <z_vprintk+0xea>
    a9f6:	2825      	cmp	r0, #37	; 0x25
    a9f8:	d107      	bne.n	aa0a <z_vprintk+0x66>
				out((int)'%', ctx);
    a9fa:	4639      	mov	r1, r7
    a9fc:	e132      	b.n	ac64 <z_vprintk+0x2c0>
			switch (*fmt) {
    a9fe:	2858      	cmp	r0, #88	; 0x58
    aa00:	f000 80bb 	beq.w	ab7a <z_vprintk+0x1d6>
    aa04:	2863      	cmp	r0, #99	; 0x63
    aa06:	f000 812a 	beq.w	ac5e <z_vprintk+0x2ba>
				out((int)'%', ctx);
    aa0a:	4639      	mov	r1, r7
    aa0c:	2025      	movs	r0, #37	; 0x25
    aa0e:	47b0      	blx	r6
				out((int)*fmt, ctx);
    aa10:	9b02      	ldr	r3, [sp, #8]
    aa12:	4639      	mov	r1, r7
    aa14:	7818      	ldrb	r0, [r3, #0]
    aa16:	e125      	b.n	ac64 <z_vprintk+0x2c0>
			switch (*fmt) {
    aa18:	2870      	cmp	r0, #112	; 0x70
    aa1a:	f000 80a4 	beq.w	ab66 <z_vprintk+0x1c2>
    aa1e:	d811      	bhi.n	aa44 <z_vprintk+0xa0>
    aa20:	2869      	cmp	r0, #105	; 0x69
    aa22:	d04c      	beq.n	aabe <z_vprintk+0x11a>
    aa24:	286c      	cmp	r0, #108	; 0x6c
    aa26:	d105      	bne.n	aa34 <z_vprintk+0x90>
				} else if (*fmt == 'l' && length_mod == 'l') {
    aa28:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
    aa2c:	d12a      	bne.n	aa84 <z_vprintk+0xe0>
					length_mod = 'L';
    aa2e:	f04f 084c 	mov.w	r8, #76	; 0x4c
    aa32:	e7d0      	b.n	a9d6 <z_vprintk+0x32>
			switch (*fmt) {
    aa34:	2868      	cmp	r0, #104	; 0x68
    aa36:	d1e8      	bne.n	aa0a <z_vprintk+0x66>
				if (*fmt == 'h' && length_mod == 'h') {
    aa38:	f1b8 0f68 	cmp.w	r8, #104	; 0x68
    aa3c:	d122      	bne.n	aa84 <z_vprintk+0xe0>
					length_mod = 'H';
    aa3e:	f04f 0848 	mov.w	r8, #72	; 0x48
    aa42:	e7c8      	b.n	a9d6 <z_vprintk+0x32>
			switch (*fmt) {
    aa44:	2875      	cmp	r0, #117	; 0x75
    aa46:	d072      	beq.n	ab2e <z_vprintk+0x18a>
    aa48:	d818      	bhi.n	aa7c <z_vprintk+0xd8>
    aa4a:	2873      	cmp	r0, #115	; 0x73
    aa4c:	d1dd      	bne.n	aa0a <z_vprintk+0x66>
				char *s = va_arg(ap, char *);
    aa4e:	f854 5b04 	ldr.w	r5, [r4], #4
				while (*s) {
    aa52:	46ab      	mov	fp, r5
    aa54:	465b      	mov	r3, fp
    aa56:	f81b 0b01 	ldrb.w	r0, [fp], #1
    aa5a:	2800      	cmp	r0, #0
    aa5c:	f040 80fc 	bne.w	ac58 <z_vprintk+0x2b4>
				if (padding == PAD_SPACE_AFTER) {
    aa60:	f1b9 0f03 	cmp.w	r9, #3
    aa64:	f040 810c 	bne.w	ac80 <z_vprintk+0x2dc>
					int remaining = min_width - (s - start);
    aa68:	1b5d      	subs	r5, r3, r5
    aa6a:	ebaa 0505 	sub.w	r5, sl, r5
					while (remaining-- > 0) {
    aa6e:	2d00      	cmp	r5, #0
    aa70:	dd49      	ble.n	ab06 <z_vprintk+0x162>
						out(' ', ctx);
    aa72:	4639      	mov	r1, r7
    aa74:	2020      	movs	r0, #32
    aa76:	47b0      	blx	r6
    aa78:	3d01      	subs	r5, #1
    aa7a:	e7f8      	b.n	aa6e <z_vprintk+0xca>
			switch (*fmt) {
    aa7c:	2878      	cmp	r0, #120	; 0x78
    aa7e:	d07c      	beq.n	ab7a <z_vprintk+0x1d6>
    aa80:	287a      	cmp	r0, #122	; 0x7a
    aa82:	d1c2      	bne.n	aa0a <z_vprintk+0x66>
				} else if (length_mod == 0) {
    aa84:	f1b8 0f00 	cmp.w	r8, #0
    aa88:	d1bf      	bne.n	aa0a <z_vprintk+0x66>
    aa8a:	4680      	mov	r8, r0
    aa8c:	e7a3      	b.n	a9d6 <z_vprintk+0x32>
				if (min_width < 0 && padding == PAD_NONE) {
    aa8e:	f1ba 0f00 	cmp.w	sl, #0
    aa92:	da0e      	bge.n	aab2 <z_vprintk+0x10e>
    aa94:	f1b9 0f00 	cmp.w	r9, #0
    aa98:	f000 80ef 	beq.w	ac7a <z_vprintk+0x2d6>
					min_width = *fmt - '0';
    aa9c:	f1a0 0a30 	sub.w	sl, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
    aaa0:	f1b9 0f00 	cmp.w	r9, #0
    aaa4:	bf08      	it	eq
    aaa6:	f04f 0902 	moveq.w	r9, #2
    aaaa:	e794      	b.n	a9d6 <z_vprintk+0x32>
				if (min_width < 0) {
    aaac:	f1ba 0f00 	cmp.w	sl, #0
    aab0:	dbf4      	blt.n	aa9c <z_vprintk+0xf8>
					min_width = 10 * min_width + *fmt - '0';
    aab2:	230a      	movs	r3, #10
    aab4:	fb03 0a0a 	mla	sl, r3, sl, r0
    aab8:	f1aa 0a30 	sub.w	sl, sl, #48	; 0x30
    aabc:	e7f0      	b.n	aaa0 <z_vprintk+0xfc>
				if (length_mod == 'z') {
    aabe:	f1b8 0f7a 	cmp.w	r8, #122	; 0x7a
    aac2:	d102      	bne.n	aaca <z_vprintk+0x126>
					d = va_arg(ap, int);
    aac4:	f854 5b04 	ldr.w	r5, [r4], #4
    aac8:	e020      	b.n	ab0c <z_vprintk+0x168>
				} else if (length_mod == 'l') {
    aaca:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
    aace:	d0f9      	beq.n	aac4 <z_vprintk+0x120>
				} else if (length_mod == 'L') {
    aad0:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
    aad4:	d1f6      	bne.n	aac4 <z_vprintk+0x120>
					long long lld = va_arg(ap, long long);
    aad6:	3407      	adds	r4, #7
    aad8:	f024 0407 	bic.w	r4, r4, #7
    aadc:	e8f4 2302 	ldrd	r2, r3, [r4], #8
					if (lld > __LONG_MAX__ ||
    aae0:	f112 4100 	adds.w	r1, r2, #2147483648	; 0x80000000
    aae4:	9106      	str	r1, [sp, #24]
    aae6:	f143 0100 	adc.w	r1, r3, #0
    aaea:	9107      	str	r1, [sp, #28]
    aaec:	2100      	movs	r1, #0
    aaee:	e9dd bc06 	ldrd	fp, ip, [sp, #24]
    aaf2:	f04f 30ff 	mov.w	r0, #4294967295
    aaf6:	4561      	cmp	r1, ip
    aaf8:	bf08      	it	eq
    aafa:	4558      	cmpeq	r0, fp
    aafc:	d205      	bcs.n	ab0a <z_vprintk+0x166>
						print_err(out, ctx);
    aafe:	4639      	mov	r1, r7
    ab00:	4630      	mov	r0, r6
    ab02:	f7ff ff2e 	bl	a962 <print_err>
			might_format = 0;
    ab06:	2500      	movs	r5, #0
				break;
    ab08:	e765      	b.n	a9d6 <z_vprintk+0x32>
					d = lld;
    ab0a:	4615      	mov	r5, r2
				if (d < 0) {
    ab0c:	2d00      	cmp	r5, #0
    ab0e:	da05      	bge.n	ab1c <z_vprintk+0x178>
					out((int)'-', ctx);
    ab10:	4639      	mov	r1, r7
    ab12:	202d      	movs	r0, #45	; 0x2d
    ab14:	47b0      	blx	r6
					d = -d;
    ab16:	426d      	negs	r5, r5
					min_width--;
    ab18:	f10a 3aff 	add.w	sl, sl, #4294967295
				_printk_dec_ulong(out, ctx, d, padding,
    ab1c:	464b      	mov	r3, r9
    ab1e:	462a      	mov	r2, r5
    ab20:	f8cd a000 	str.w	sl, [sp]
				_printk_dec_ulong(out, ctx, u, padding,
    ab24:	4639      	mov	r1, r7
    ab26:	4630      	mov	r0, r6
    ab28:	f7f5 fe1c 	bl	764 <_printk_dec_ulong>
				break;
    ab2c:	e7eb      	b.n	ab06 <z_vprintk+0x162>
				if (length_mod == 'z') {
    ab2e:	f1b8 0f7a 	cmp.w	r8, #122	; 0x7a
    ab32:	d102      	bne.n	ab3a <z_vprintk+0x196>
					u = va_arg(ap, unsigned int);
    ab34:	f854 2b04 	ldr.w	r2, [r4], #4
    ab38:	e011      	b.n	ab5e <z_vprintk+0x1ba>
				} else if (length_mod == 'l') {
    ab3a:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
    ab3e:	d0f9      	beq.n	ab34 <z_vprintk+0x190>
				} else if (length_mod == 'L') {
    ab40:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
    ab44:	d1f6      	bne.n	ab34 <z_vprintk+0x190>
					if (llu > ~0UL) {
    ab46:	2100      	movs	r1, #0
    ab48:	f04f 30ff 	mov.w	r0, #4294967295
					unsigned long long llu =
    ab4c:	3407      	adds	r4, #7
    ab4e:	f024 0407 	bic.w	r4, r4, #7
    ab52:	e8f4 2302 	ldrd	r2, r3, [r4], #8
					if (llu > ~0UL) {
    ab56:	4299      	cmp	r1, r3
    ab58:	bf08      	it	eq
    ab5a:	4290      	cmpeq	r0, r2
    ab5c:	d3cf      	bcc.n	aafe <z_vprintk+0x15a>
				_printk_dec_ulong(out, ctx, u, padding,
    ab5e:	f8cd a000 	str.w	sl, [sp]
    ab62:	464b      	mov	r3, r9
    ab64:	e7de      	b.n	ab24 <z_vprintk+0x180>
				out('0', ctx);
    ab66:	4639      	mov	r1, r7
    ab68:	2030      	movs	r0, #48	; 0x30
    ab6a:	47b0      	blx	r6
				out('x', ctx);
    ab6c:	4639      	mov	r1, r7
    ab6e:	2078      	movs	r0, #120	; 0x78
    ab70:	47b0      	blx	r6
					min_width = 8;
    ab72:	f04f 0a08 	mov.w	sl, #8
				padding = PAD_ZERO_BEFORE;
    ab76:	f04f 0901 	mov.w	r9, #1
				if (*fmt == 'p') {
    ab7a:	9b02      	ldr	r3, [sp, #8]
    ab7c:	781b      	ldrb	r3, [r3, #0]
    ab7e:	2b70      	cmp	r3, #112	; 0x70
    ab80:	d104      	bne.n	ab8c <z_vprintk+0x1e8>
					x = va_arg(ap, unsigned int);
    ab82:	f854 3b04 	ldr.w	r3, [r4], #4
    ab86:	9304      	str	r3, [sp, #16]
    ab88:	2300      	movs	r3, #0
    ab8a:	e00d      	b.n	aba8 <z_vprintk+0x204>
				} else if (length_mod == 'l') {
    ab8c:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
    ab90:	d0f7      	beq.n	ab82 <z_vprintk+0x1de>
				} else if (length_mod == 'L') {
    ab92:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
    ab96:	d1f4      	bne.n	ab82 <z_vprintk+0x1de>
					x = va_arg(ap, unsigned long long);
    ab98:	3407      	adds	r4, #7
    ab9a:	f024 0307 	bic.w	r3, r4, #7
    ab9e:	461c      	mov	r4, r3
    aba0:	f854 2b08 	ldr.w	r2, [r4], #8
    aba4:	685b      	ldr	r3, [r3, #4]
    aba6:	9204      	str	r2, [sp, #16]
	int digits = 0;
    aba8:	2100      	movs	r1, #0
	int remaining = 16; /* 16 digits max */
    abaa:	2210      	movs	r2, #16
	int shift = sizeof(num) * 8;
    abac:	f04f 0b40 	mov.w	fp, #64	; 0x40
	int digits = 0;
    abb0:	9103      	str	r1, [sp, #12]
	int found_largest_digit = 0;
    abb2:	9105      	str	r1, [sp, #20]
		shift -= 4;
    abb4:	f1ab 0b04 	sub.w	fp, fp, #4
		nibble = (num >> shift) & 0xf;
    abb8:	9804      	ldr	r0, [sp, #16]
    abba:	f1cb 0c20 	rsb	ip, fp, #32
    abbe:	f1ab 0120 	sub.w	r1, fp, #32
    abc2:	fa20 f00b 	lsr.w	r0, r0, fp
    abc6:	fa03 fc0c 	lsl.w	ip, r3, ip
    abca:	ea40 000c 	orr.w	r0, r0, ip
    abce:	fa23 f101 	lsr.w	r1, r3, r1
    abd2:	4308      	orrs	r0, r1
		if (nibble != 0 || found_largest_digit != 0 || shift == 0) {
    abd4:	f010 000f 	ands.w	r0, r0, #15
    abd8:	d106      	bne.n	abe8 <z_vprintk+0x244>
    abda:	9905      	ldr	r1, [sp, #20]
    abdc:	b911      	cbnz	r1, abe4 <z_vprintk+0x240>
    abde:	f1bb 0f00 	cmp.w	fp, #0
    abe2:	d122      	bne.n	ac2a <z_vprintk+0x286>
			nibble += nibble > 9 ? 87 : 48;
    abe4:	2130      	movs	r1, #48	; 0x30
    abe6:	e003      	b.n	abf0 <z_vprintk+0x24c>
    abe8:	2809      	cmp	r0, #9
    abea:	bf8c      	ite	hi
    abec:	2157      	movhi	r1, #87	; 0x57
    abee:	2130      	movls	r1, #48	; 0x30
    abf0:	4408      	add	r0, r1
			out((int)nibble, ctx);
    abf2:	b240      	sxtb	r0, r0
    abf4:	4639      	mov	r1, r7
    abf6:	9308      	str	r3, [sp, #32]
    abf8:	9205      	str	r2, [sp, #20]
    abfa:	47b0      	blx	r6
			digits++;
    abfc:	9b03      	ldr	r3, [sp, #12]
	while (shift >= 4) {
    abfe:	9a05      	ldr	r2, [sp, #20]
			digits++;
    ac00:	3301      	adds	r3, #1
    ac02:	9303      	str	r3, [sp, #12]
	while (shift >= 4) {
    ac04:	9b08      	ldr	r3, [sp, #32]
    ac06:	f1bb 0f00 	cmp.w	fp, #0
    ac0a:	d123      	bne.n	ac54 <z_vprintk+0x2b0>
	if (padding == PAD_SPACE_AFTER) {
    ac0c:	f1b9 0f03 	cmp.w	r9, #3
    ac10:	f47f af79 	bne.w	ab06 <z_vprintk+0x162>
		remaining = min_width * 2 - digits;
    ac14:	9b03      	ldr	r3, [sp, #12]
    ac16:	ebc3 054a 	rsb	r5, r3, sl, lsl #1
		while (remaining-- > 0) {
    ac1a:	2d00      	cmp	r5, #0
    ac1c:	f77f af73 	ble.w	ab06 <z_vprintk+0x162>
			out(' ', ctx);
    ac20:	4639      	mov	r1, r7
    ac22:	2020      	movs	r0, #32
    ac24:	47b0      	blx	r6
    ac26:	3d01      	subs	r5, #1
    ac28:	e7f7      	b.n	ac1a <z_vprintk+0x276>
		if (remaining-- <= min_width) {
    ac2a:	1e51      	subs	r1, r2, #1
    ac2c:	4592      	cmp	sl, r2
    ac2e:	9108      	str	r1, [sp, #32]
    ac30:	db07      	blt.n	ac42 <z_vprintk+0x29e>
			if (padding == PAD_ZERO_BEFORE) {
    ac32:	f1b9 0f01 	cmp.w	r9, #1
    ac36:	d106      	bne.n	ac46 <z_vprintk+0x2a2>
				out('0', ctx);
    ac38:	4639      	mov	r1, r7
    ac3a:	2030      	movs	r0, #48	; 0x30
    ac3c:	9309      	str	r3, [sp, #36]	; 0x24
				out(' ', ctx);
    ac3e:	47b0      	blx	r6
    ac40:	9b09      	ldr	r3, [sp, #36]	; 0x24
			nibble += nibble > 9 ? 87 : 48;
    ac42:	9a08      	ldr	r2, [sp, #32]
    ac44:	e7b6      	b.n	abb4 <z_vprintk+0x210>
			} else if (padding == PAD_SPACE_BEFORE) {
    ac46:	f1b9 0f02 	cmp.w	r9, #2
    ac4a:	d1fa      	bne.n	ac42 <z_vprintk+0x29e>
    ac4c:	9309      	str	r3, [sp, #36]	; 0x24
				out(' ', ctx);
    ac4e:	4639      	mov	r1, r7
    ac50:	2020      	movs	r0, #32
    ac52:	e7f4      	b.n	ac3e <z_vprintk+0x29a>
			found_largest_digit = 1;
    ac54:	9505      	str	r5, [sp, #20]
    ac56:	e7ad      	b.n	abb4 <z_vprintk+0x210>
					out((int)(*s++), ctx);
    ac58:	4639      	mov	r1, r7
    ac5a:	47b0      	blx	r6
    ac5c:	e6fa      	b.n	aa54 <z_vprintk+0xb0>
				out(c, ctx);
    ac5e:	4639      	mov	r1, r7
    ac60:	f854 0b04 	ldr.w	r0, [r4], #4
				out((int)'%', ctx);
    ac64:	47b0      	blx	r6
    ac66:	e74e      	b.n	ab06 <z_vprintk+0x162>
				length_mod = 0;
    ac68:	46a8      	mov	r8, r5
				padding = PAD_NONE;
    ac6a:	46a9      	mov	r9, r5
				min_width = -1;
    ac6c:	f04f 3aff 	mov.w	sl, #4294967295
				might_format = 1;
    ac70:	2501      	movs	r5, #1
    ac72:	e6b0      	b.n	a9d6 <z_vprintk+0x32>
				padding = PAD_SPACE_AFTER;
    ac74:	f04f 0903 	mov.w	r9, #3
    ac78:	e6ad      	b.n	a9d6 <z_vprintk+0x32>
					padding = PAD_ZERO_BEFORE;
    ac7a:	f04f 0901 	mov.w	r9, #1
    ac7e:	e6aa      	b.n	a9d6 <z_vprintk+0x32>
			might_format = 0;
    ac80:	4605      	mov	r5, r0
    ac82:	e6a8      	b.n	a9d6 <z_vprintk+0x32>

0000ac84 <printk>:
{
    ac84:	b40f      	push	{r0, r1, r2, r3}
    ac86:	b507      	push	{r0, r1, r2, lr}
    ac88:	a904      	add	r1, sp, #16
    ac8a:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
    ac8e:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
    ac90:	f7f5 fdba 	bl	808 <vprintk>
}
    ac94:	b003      	add	sp, #12
    ac96:	f85d eb04 	ldr.w	lr, [sp], #4
    ac9a:	b004      	add	sp, #16
    ac9c:	4770      	bx	lr

0000ac9e <snprintk>:
{
    ac9e:	b40c      	push	{r2, r3}
    aca0:	b507      	push	{r0, r1, r2, lr}
    aca2:	ab04      	add	r3, sp, #16
    aca4:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
    aca8:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
    acaa:	f7f5 fdbb 	bl	824 <vsnprintk>
}
    acae:	b003      	add	sp, #12
    acb0:	f85d eb04 	ldr.w	lr, [sp], #4
    acb4:	b002      	add	sp, #8
    acb6:	4770      	bx	lr

0000acb8 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    acb8:	4604      	mov	r4, r0
    acba:	b508      	push	{r3, lr}
    acbc:	4608      	mov	r0, r1
    acbe:	4611      	mov	r1, r2
	entry(p1, p2, p3);
    acc0:	461a      	mov	r2, r3
    acc2:	47a0      	blx	r4
	return z_impl_k_current_get();
    acc4:	f7ff f8d8 	bl	9e78 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
    acc8:	f7f7 fcfc 	bl	26c4 <z_impl_k_thread_abort>

0000accc <z_work_q_main>:

#include <kernel.h>
#define WORKQUEUE_THREAD_NAME	"workqueue"

void z_work_q_main(void *work_q_ptr, void *p2, void *p3)
{
    accc:	b510      	push	{r4, lr}
    acce:	4604      	mov	r4, r0
	return z_impl_k_queue_get(queue, timeout);
    acd0:	f04f 31ff 	mov.w	r1, #4294967295
    acd4:	4620      	mov	r0, r4
    acd6:	f002 ffea 	bl	dcae <z_impl_k_queue_get>
	while (true) {
		struct k_work *work;
		k_work_handler_t handler;

		work = k_queue_get(&work_q->queue, K_FOREVER);
		if (work == NULL) {
    acda:	4603      	mov	r3, r0
    acdc:	2800      	cmp	r0, #0
    acde:	d0f7      	beq.n	acd0 <z_work_q_main+0x4>
			continue;
		}

		handler = work->handler;
    ace0:	6842      	ldr	r2, [r0, #4]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    ace2:	3308      	adds	r3, #8
    ace4:	e8d3 1fef 	ldaex	r1, [r3]
    ace8:	f021 0c01 	bic.w	ip, r1, #1
    acec:	e8c3 cfee 	stlex	lr, ip, [r3]
    acf0:	f1be 0f00 	cmp.w	lr, #0
    acf4:	d1f6      	bne.n	ace4 <z_work_q_main+0x18>

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
    acf6:	07cb      	lsls	r3, r1, #31
    acf8:	d500      	bpl.n	acfc <z_work_q_main+0x30>
					      K_WORK_STATE_PENDING)) {
			handler(work);
    acfa:	4790      	blx	r2
	z_impl_k_yield();
    acfc:	f7ff f848 	bl	9d90 <z_impl_k_yield>
    ad00:	e7e6      	b.n	acd0 <z_work_q_main+0x4>

0000ad02 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    ad02:	4770      	bx	lr

0000ad04 <z_platform_init>:
	nrfx_coredep_delay_us(time_us);
}

void z_platform_init(void)
{
	SystemInit();
    ad04:	f7fd bf1e 	b.w	8b44 <SystemInit>

0000ad08 <_copy>:
#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
	if (from_len <= to_len) {
    ad08:	428b      	cmp	r3, r1
{
    ad0a:	b538      	push	{r3, r4, r5, lr}
    ad0c:	4615      	mov	r5, r2
    ad0e:	461c      	mov	r4, r3
	if (from_len <= to_len) {
    ad10:	d805      	bhi.n	ad1e <_copy+0x16>
		(void)memcpy(to, from, from_len);
    ad12:	461a      	mov	r2, r3
    ad14:	4629      	mov	r1, r5
    ad16:	f001 f8c2 	bl	be9e <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
    ad1a:	4620      	mov	r0, r4
    ad1c:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
    ad1e:	2400      	movs	r4, #0
    ad20:	e7fb      	b.n	ad1a <_copy+0x12>

0000ad22 <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
    ad22:	f001 b8e6 	b.w	bef2 <memset>

0000ad26 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
    ad26:	09c3      	lsrs	r3, r0, #7
    ad28:	005a      	lsls	r2, r3, #1
    ad2a:	4413      	add	r3, r2
    ad2c:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
    ad30:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
    ad34:	b2c0      	uxtb	r0, r0
    ad36:	4770      	bx	lr

0000ad38 <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
    ad38:	78cb      	ldrb	r3, [r1, #3]
    ad3a:	7802      	ldrb	r2, [r0, #0]
    ad3c:	4053      	eors	r3, r2
    ad3e:	7003      	strb	r3, [r0, #0]
    ad40:	884b      	ldrh	r3, [r1, #2]
    ad42:	7842      	ldrb	r2, [r0, #1]
    ad44:	4053      	eors	r3, r2
    ad46:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
    ad48:	680a      	ldr	r2, [r1, #0]
    ad4a:	7883      	ldrb	r3, [r0, #2]
    ad4c:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
    ad50:	7083      	strb	r3, [r0, #2]
    ad52:	680a      	ldr	r2, [r1, #0]
    ad54:	78c3      	ldrb	r3, [r0, #3]
    ad56:	4053      	eors	r3, r2
    ad58:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
    ad5a:	79cb      	ldrb	r3, [r1, #7]
    ad5c:	7902      	ldrb	r2, [r0, #4]
    ad5e:	4053      	eors	r3, r2
    ad60:	7103      	strb	r3, [r0, #4]
    ad62:	88cb      	ldrh	r3, [r1, #6]
    ad64:	7942      	ldrb	r2, [r0, #5]
    ad66:	4053      	eors	r3, r2
    ad68:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
    ad6a:	684a      	ldr	r2, [r1, #4]
    ad6c:	7983      	ldrb	r3, [r0, #6]
    ad6e:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
    ad72:	7183      	strb	r3, [r0, #6]
    ad74:	684a      	ldr	r2, [r1, #4]
    ad76:	79c3      	ldrb	r3, [r0, #7]
    ad78:	4053      	eors	r3, r2
    ad7a:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
    ad7c:	7acb      	ldrb	r3, [r1, #11]
    ad7e:	7a02      	ldrb	r2, [r0, #8]
    ad80:	4053      	eors	r3, r2
    ad82:	7203      	strb	r3, [r0, #8]
    ad84:	7a42      	ldrb	r2, [r0, #9]
    ad86:	894b      	ldrh	r3, [r1, #10]
    ad88:	4053      	eors	r3, r2
    ad8a:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
    ad8c:	688a      	ldr	r2, [r1, #8]
    ad8e:	7a83      	ldrb	r3, [r0, #10]
    ad90:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
    ad94:	7283      	strb	r3, [r0, #10]
    ad96:	688a      	ldr	r2, [r1, #8]
    ad98:	7ac3      	ldrb	r3, [r0, #11]
    ad9a:	4053      	eors	r3, r2
    ad9c:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
    ad9e:	7bcb      	ldrb	r3, [r1, #15]
    ada0:	7b02      	ldrb	r2, [r0, #12]
    ada2:	4053      	eors	r3, r2
    ada4:	7303      	strb	r3, [r0, #12]
    ada6:	89cb      	ldrh	r3, [r1, #14]
    ada8:	7b42      	ldrb	r2, [r0, #13]
    adaa:	4053      	eors	r3, r2
    adac:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
    adae:	68ca      	ldr	r2, [r1, #12]
    adb0:	7b83      	ldrb	r3, [r0, #14]
    adb2:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
    adb6:	7383      	strb	r3, [r0, #14]
    adb8:	68ca      	ldr	r2, [r1, #12]
    adba:	7bc3      	ldrb	r3, [r0, #15]
    adbc:	4053      	eors	r3, r2
    adbe:	73c3      	strb	r3, [r0, #15]
}
    adc0:	4770      	bx	lr

0000adc2 <shift_rows>:
{
    adc2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
    adc4:	7802      	ldrb	r2, [r0, #0]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
    adc6:	7ac3      	ldrb	r3, [r0, #11]
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
    adc8:	f88d 2000 	strb.w	r2, [sp]
    adcc:	7942      	ldrb	r2, [r0, #5]
    adce:	f88d 2001 	strb.w	r2, [sp, #1]
    add2:	7a82      	ldrb	r2, [r0, #10]
    add4:	f88d 2002 	strb.w	r2, [sp, #2]
    add8:	7bc2      	ldrb	r2, [r0, #15]
    adda:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
    adde:	7902      	ldrb	r2, [r0, #4]
    ade0:	f88d 2004 	strb.w	r2, [sp, #4]
    ade4:	7a42      	ldrb	r2, [r0, #9]
    ade6:	f88d 2005 	strb.w	r2, [sp, #5]
    adea:	7b82      	ldrb	r2, [r0, #14]
    adec:	f88d 2006 	strb.w	r2, [sp, #6]
    adf0:	78c2      	ldrb	r2, [r0, #3]
    adf2:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
    adf6:	7a02      	ldrb	r2, [r0, #8]
    adf8:	f88d 2008 	strb.w	r2, [sp, #8]
    adfc:	7b42      	ldrb	r2, [r0, #13]
    adfe:	f88d 2009 	strb.w	r2, [sp, #9]
    ae02:	7882      	ldrb	r2, [r0, #2]
    ae04:	f88d 200a 	strb.w	r2, [sp, #10]
    ae08:	79c2      	ldrb	r2, [r0, #7]
    ae0a:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
    ae0e:	7b02      	ldrb	r2, [r0, #12]
    ae10:	f88d 200c 	strb.w	r2, [sp, #12]
    ae14:	7842      	ldrb	r2, [r0, #1]
    ae16:	f88d 200d 	strb.w	r2, [sp, #13]
    ae1a:	7982      	ldrb	r2, [r0, #6]
    ae1c:	f88d 200e 	strb.w	r2, [sp, #14]
    ae20:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
    ae24:	2310      	movs	r3, #16
    ae26:	466a      	mov	r2, sp
    ae28:	4619      	mov	r1, r3
    ae2a:	f7ff ff6d 	bl	ad08 <_copy>
}
    ae2e:	b005      	add	sp, #20
    ae30:	f85d fb04 	ldr.w	pc, [sp], #4

0000ae34 <mult_row_column>:
{
    ae34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ae36:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
    ae38:	7808      	ldrb	r0, [r1, #0]
{
    ae3a:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
    ae3c:	f7ff ff73 	bl	ad26 <_double_byte>
    ae40:	4605      	mov	r5, r0
    ae42:	7860      	ldrb	r0, [r4, #1]
    ae44:	f7ff ff6f 	bl	ad26 <_double_byte>
    ae48:	78a2      	ldrb	r2, [r4, #2]
    ae4a:	7863      	ldrb	r3, [r4, #1]
    ae4c:	4053      	eors	r3, r2
    ae4e:	78e2      	ldrb	r2, [r4, #3]
    ae50:	4053      	eors	r3, r2
    ae52:	405d      	eors	r5, r3
    ae54:	4045      	eors	r5, r0
    ae56:	7035      	strb	r5, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
    ae58:	7860      	ldrb	r0, [r4, #1]
    ae5a:	7827      	ldrb	r7, [r4, #0]
    ae5c:	f7ff ff63 	bl	ad26 <_double_byte>
    ae60:	4605      	mov	r5, r0
    ae62:	78a0      	ldrb	r0, [r4, #2]
    ae64:	f7ff ff5f 	bl	ad26 <_double_byte>
    ae68:	78a3      	ldrb	r3, [r4, #2]
    ae6a:	405f      	eors	r7, r3
    ae6c:	78e3      	ldrb	r3, [r4, #3]
    ae6e:	405f      	eors	r7, r3
    ae70:	407d      	eors	r5, r7
    ae72:	4045      	eors	r5, r0
    ae74:	7075      	strb	r5, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
    ae76:	78a0      	ldrb	r0, [r4, #2]
    ae78:	7865      	ldrb	r5, [r4, #1]
    ae7a:	7827      	ldrb	r7, [r4, #0]
    ae7c:	f7ff ff53 	bl	ad26 <_double_byte>
    ae80:	406f      	eors	r7, r5
    ae82:	4605      	mov	r5, r0
    ae84:	78e0      	ldrb	r0, [r4, #3]
    ae86:	f7ff ff4e 	bl	ad26 <_double_byte>
    ae8a:	78e3      	ldrb	r3, [r4, #3]
    ae8c:	405f      	eors	r7, r3
    ae8e:	407d      	eors	r5, r7
    ae90:	4045      	eors	r5, r0
    ae92:	70b5      	strb	r5, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
    ae94:	7820      	ldrb	r0, [r4, #0]
    ae96:	f7ff ff46 	bl	ad26 <_double_byte>
    ae9a:	7863      	ldrb	r3, [r4, #1]
    ae9c:	7825      	ldrb	r5, [r4, #0]
    ae9e:	405d      	eors	r5, r3
    aea0:	78a3      	ldrb	r3, [r4, #2]
    aea2:	405d      	eors	r5, r3
    aea4:	4045      	eors	r5, r0
    aea6:	78e0      	ldrb	r0, [r4, #3]
    aea8:	f7ff ff3d 	bl	ad26 <_double_byte>
    aeac:	b2ed      	uxtb	r5, r5
    aeae:	4068      	eors	r0, r5
    aeb0:	70f0      	strb	r0, [r6, #3]
}
    aeb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000aeb4 <gf_double>:

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
    aeb4:	460a      	mov	r2, r1
{
    aeb6:	b510      	push	{r4, lr}
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
    aeb8:	f912 3b10 	ldrsb.w	r3, [r2], #16

	out += (TC_AES_BLOCK_SIZE - 1);
    aebc:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
    aebe:	2b00      	cmp	r3, #0
    aec0:	bfb4      	ite	lt
    aec2:	2387      	movlt	r3, #135	; 0x87
    aec4:	2300      	movge	r3, #0
	for (;;) {
		*out-- = (*x << 1) ^ carry;
    aec6:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
    aeca:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
    aece:	4291      	cmp	r1, r2
		*out-- = (*x << 1) ^ carry;
    aed0:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
    aed4:	d002      	beq.n	aedc <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
    aed6:	7813      	ldrb	r3, [r2, #0]
    aed8:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
    aeda:	e7f4      	b.n	aec6 <gf_double+0x12>
	}
}
    aedc:	bd10      	pop	{r4, pc}

0000aede <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
    aede:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
    aee0:	b120      	cbz	r0, aeec <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
    aee2:	2258      	movs	r2, #88	; 0x58
    aee4:	2100      	movs	r1, #0
    aee6:	f7ff ff1c 	bl	ad22 <_set>
    aeea:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
    aeec:	bd08      	pop	{r3, pc}

0000aeee <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
    aeee:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
    aef0:	4604      	mov	r4, r0
    aef2:	b188      	cbz	r0, af18 <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
    aef4:	2210      	movs	r2, #16
    aef6:	2100      	movs	r1, #0
    aef8:	f7ff ff13 	bl	ad22 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
    aefc:	2210      	movs	r2, #16
    aefe:	f104 0030 	add.w	r0, r4, #48	; 0x30
    af02:	2100      	movs	r1, #0
    af04:	f7ff ff0d 	bl	ad22 <_set>
	s->leftover_offset = 0;
    af08:	2300      	movs	r3, #0

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
    af0a:	2200      	movs	r2, #0
	s->leftover_offset = 0;
    af0c:	6463      	str	r3, [r4, #68]	; 0x44
	s->countdown = MAX_CALLS;
    af0e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    af12:	2001      	movs	r0, #1
    af14:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50

	return TC_CRYPTO_SUCCESS;
}
    af18:	bd10      	pop	{r4, pc}

0000af1a <tc_cmac_setup>:
{
    af1a:	b570      	push	{r4, r5, r6, lr}
    af1c:	460d      	mov	r5, r1
    af1e:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
    af20:	4604      	mov	r4, r0
    af22:	b310      	cbz	r0, af6a <tc_cmac_setup+0x50>
    af24:	b311      	cbz	r1, af6c <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
    af26:	2258      	movs	r2, #88	; 0x58
    af28:	2100      	movs	r1, #0
    af2a:	f7ff fefa 	bl	ad22 <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
    af2e:	4629      	mov	r1, r5
	s->sched = sched;
    af30:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
    af32:	4630      	mov	r0, r6
    af34:	f7f5 fca8 	bl	888 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
    af38:	2210      	movs	r2, #16
    af3a:	2100      	movs	r1, #0
    af3c:	4620      	mov	r0, r4
    af3e:	f7ff fef0 	bl	ad22 <_set>
	gf_double (s->K1, s->iv);
    af42:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
    af46:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    af48:	4621      	mov	r1, r4
    af4a:	4620      	mov	r0, r4
    af4c:	f7f5 fcf2 	bl	934 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
    af50:	4621      	mov	r1, r4
    af52:	4628      	mov	r0, r5
    af54:	f7ff ffae 	bl	aeb4 <gf_double>
	gf_double (s->K2, s->K1);
    af58:	4629      	mov	r1, r5
    af5a:	f104 0020 	add.w	r0, r4, #32
    af5e:	f7ff ffa9 	bl	aeb4 <gf_double>
	tc_cmac_init(s);
    af62:	4620      	mov	r0, r4
    af64:	f7ff ffc3 	bl	aeee <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
    af68:	2001      	movs	r0, #1
}
    af6a:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
    af6c:	4608      	mov	r0, r1
    af6e:	e7fc      	b.n	af6a <tc_cmac_setup+0x50>

0000af70 <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
    af70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    af74:	460d      	mov	r5, r1
    af76:	4616      	mov	r6, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
    af78:	4604      	mov	r4, r0
    af7a:	2800      	cmp	r0, #0
    af7c:	d060      	beq.n	b040 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
    af7e:	b912      	cbnz	r2, af86 <tc_cmac_update+0x16>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
    af80:	2001      	movs	r0, #1
}
    af82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (data == (const uint8_t *) 0) {
    af86:	2900      	cmp	r1, #0
    af88:	d05a      	beq.n	b040 <tc_cmac_update+0xd0>
	if (s->countdown == 0) {
    af8a:	e9d0 0114 	ldrd	r0, r1, [r0, #80]	; 0x50
    af8e:	ea50 0301 	orrs.w	r3, r0, r1
    af92:	d055      	beq.n	b040 <tc_cmac_update+0xd0>
	s->countdown--;
    af94:	f110 32ff 	adds.w	r2, r0, #4294967295
	if (s->leftover_offset > 0) {
    af98:	f8d4 8044 	ldr.w	r8, [r4, #68]	; 0x44
	s->countdown--;
    af9c:	f141 33ff 	adc.w	r3, r1, #4294967295
    afa0:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
	if (s->leftover_offset > 0) {
    afa4:	f1b8 0f00 	cmp.w	r8, #0
    afa8:	d029      	beq.n	affe <tc_cmac_update+0x8e>
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
    afaa:	f1c8 0710 	rsb	r7, r8, #16
		if (data_length < remaining_space) {
    afae:	f108 0030 	add.w	r0, r8, #48	; 0x30
    afb2:	42be      	cmp	r6, r7
    afb4:	4420      	add	r0, r4
    afb6:	d208      	bcs.n	afca <tc_cmac_update+0x5a>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
    afb8:	4633      	mov	r3, r6
    afba:	4631      	mov	r1, r6
    afbc:	462a      	mov	r2, r5
    afbe:	f7ff fea3 	bl	ad08 <_copy>
			s->leftover_offset += data_length;
    afc2:	6c63      	ldr	r3, [r4, #68]	; 0x44
    afc4:	441e      	add	r6, r3
		s->leftover_offset = data_length;
    afc6:	6466      	str	r6, [r4, #68]	; 0x44
    afc8:	e7da      	b.n	af80 <tc_cmac_update+0x10>
		_copy(&s->leftover[s->leftover_offset],
    afca:	463b      	mov	r3, r7
    afcc:	462a      	mov	r2, r5
    afce:	4639      	mov	r1, r7
    afd0:	f7ff fe9a 	bl	ad08 <_copy>
		s->leftover_offset = 0;
    afd4:	2300      	movs	r3, #0
    afd6:	3e10      	subs	r6, #16
    afd8:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
    afda:	4446      	add	r6, r8
		data += remaining_space;
    afdc:	443d      	add	r5, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
    afde:	1e63      	subs	r3, r4, #1
    afe0:	f104 000f 	add.w	r0, r4, #15
			s->iv[i] ^= s->leftover[i];
    afe4:	785a      	ldrb	r2, [r3, #1]
    afe6:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
    afea:	404a      	eors	r2, r1
    afec:	f803 2f01 	strb.w	r2, [r3, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
    aff0:	4283      	cmp	r3, r0
    aff2:	d1f7      	bne.n	afe4 <tc_cmac_update+0x74>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
    aff4:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    aff6:	4621      	mov	r1, r4
    aff8:	4620      	mov	r0, r4
    affa:	f7f5 fc9b 	bl	934 <tc_aes_encrypt>
    affe:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
    b002:	2e10      	cmp	r6, #16
    b004:	d809      	bhi.n	b01a <tc_cmac_update+0xaa>
	if (data_length > 0) {
    b006:	2e00      	cmp	r6, #0
    b008:	d0ba      	beq.n	af80 <tc_cmac_update+0x10>
		_copy(s->leftover, data_length, data, data_length);
    b00a:	4633      	mov	r3, r6
    b00c:	462a      	mov	r2, r5
    b00e:	4631      	mov	r1, r6
    b010:	f104 0030 	add.w	r0, r4, #48	; 0x30
    b014:	f7ff fe78 	bl	ad08 <_copy>
    b018:	e7d5      	b.n	afc6 <tc_cmac_update+0x56>
    b01a:	1e63      	subs	r3, r4, #1
    b01c:	1e69      	subs	r1, r5, #1
			s->iv[i] ^= data[i];
    b01e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    b022:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
    b026:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
    b028:	ea82 0200 	eor.w	r2, r2, r0
    b02c:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
    b02e:	d1f6      	bne.n	b01e <tc_cmac_update+0xae>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
    b030:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    b032:	4621      	mov	r1, r4
    b034:	4620      	mov	r0, r4
    b036:	f7f5 fc7d 	bl	934 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
    b03a:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
    b03c:	3e10      	subs	r6, #16
    b03e:	e7e0      	b.n	b002 <tc_cmac_update+0x92>
		return TC_CRYPTO_FAIL;
    b040:	2000      	movs	r0, #0
    b042:	e79e      	b.n	af82 <tc_cmac_update+0x12>

0000b044 <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
    b044:	b570      	push	{r4, r5, r6, lr}
    b046:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
    b048:	4605      	mov	r5, r0
    b04a:	b1e8      	cbz	r0, b088 <tc_cmac_final+0x44>
    b04c:	b369      	cbz	r1, b0aa <tc_cmac_final+0x66>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
    b04e:	6c4a      	ldr	r2, [r1, #68]	; 0x44
    b050:	2a10      	cmp	r2, #16
    b052:	d11a      	bne.n	b08a <tc_cmac_final+0x46>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
    b054:	f101 0210 	add.w	r2, r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
    b058:	1e61      	subs	r1, r4, #1
    b05a:	3a01      	subs	r2, #1
    b05c:	f104 060f 	add.w	r6, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
    b060:	f891 0031 	ldrb.w	r0, [r1, #49]	; 0x31
    b064:	784b      	ldrb	r3, [r1, #1]
    b066:	4043      	eors	r3, r0
    b068:	f812 0f01 	ldrb.w	r0, [r2, #1]!
    b06c:	4043      	eors	r3, r0
    b06e:	f801 3f01 	strb.w	r3, [r1, #1]!
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
    b072:	428e      	cmp	r6, r1
    b074:	d1f4      	bne.n	b060 <tc_cmac_final+0x1c>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
    b076:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    b078:	4621      	mov	r1, r4
    b07a:	4628      	mov	r0, r5
    b07c:	f7f5 fc5a 	bl	934 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
    b080:	4620      	mov	r0, r4
    b082:	f7ff ff2c 	bl	aede <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
    b086:	2001      	movs	r0, #1
}
    b088:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
    b08a:	f102 0030 	add.w	r0, r2, #48	; 0x30
    b08e:	2100      	movs	r1, #0
    b090:	f1c2 0210 	rsb	r2, r2, #16
    b094:	4420      	add	r0, r4
    b096:	f7ff fe44 	bl	ad22 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
    b09a:	2280      	movs	r2, #128	; 0x80
    b09c:	6c63      	ldr	r3, [r4, #68]	; 0x44
    b09e:	4423      	add	r3, r4
    b0a0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
    b0a4:	f104 0220 	add.w	r2, r4, #32
    b0a8:	e7d6      	b.n	b058 <tc_cmac_final+0x14>
		return TC_CRYPTO_FAIL;
    b0aa:	4608      	mov	r0, r1
    b0ac:	e7ec      	b.n	b088 <tc_cmac_final+0x44>

0000b0ae <tc_sha256_update>:
{
    b0ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b0b2:	460d      	mov	r5, r1
	if (s == (TCSha256State_t) 0 ||
    b0b4:	4604      	mov	r4, r0
    b0b6:	b110      	cbz	r0, b0be <tc_sha256_update+0x10>
    b0b8:	b319      	cbz	r1, b102 <tc_sha256_update+0x54>
	} else if (datalen == 0) {
    b0ba:	b912      	cbnz	r2, b0c2 <tc_sha256_update+0x14>
		return TC_CRYPTO_SUCCESS;
    b0bc:	2001      	movs	r0, #1
}
    b0be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			s->leftover_offset = 0;
    b0c2:	f04f 0800 	mov.w	r8, #0
    b0c6:	188e      	adds	r6, r1, r2
			compress(s->iv, s->leftover);
    b0c8:	f100 0728 	add.w	r7, r0, #40	; 0x28
	while (datalen-- > 0) {
    b0cc:	42ae      	cmp	r6, r5
    b0ce:	d0f5      	beq.n	b0bc <tc_sha256_update+0xe>
		s->leftover[s->leftover_offset++] = *(data++);
    b0d0:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    b0d2:	1c5a      	adds	r2, r3, #1
    b0d4:	66a2      	str	r2, [r4, #104]	; 0x68
    b0d6:	f815 1b01 	ldrb.w	r1, [r5], #1
    b0da:	4423      	add	r3, r4
		if (s->leftover_offset >= TC_SHA256_BLOCK_SIZE) {
    b0dc:	2a3f      	cmp	r2, #63	; 0x3f
		s->leftover[s->leftover_offset++] = *(data++);
    b0de:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
		if (s->leftover_offset >= TC_SHA256_BLOCK_SIZE) {
    b0e2:	d9f3      	bls.n	b0cc <tc_sha256_update+0x1e>
			compress(s->iv, s->leftover);
    b0e4:	4639      	mov	r1, r7
    b0e6:	4620      	mov	r0, r4
    b0e8:	f7f5 fc8e 	bl	a08 <compress>
			s->bits_hashed += (TC_SHA256_BLOCK_SIZE << 3);
    b0ec:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
    b0f0:	f513 7300 	adds.w	r3, r3, #512	; 0x200
    b0f4:	f142 0200 	adc.w	r2, r2, #0
			s->leftover_offset = 0;
    b0f8:	f8c4 8068 	str.w	r8, [r4, #104]	; 0x68
			s->bits_hashed += (TC_SHA256_BLOCK_SIZE << 3);
    b0fc:	e9c4 3208 	strd	r3, r2, [r4, #32]
    b100:	e7e4      	b.n	b0cc <tc_sha256_update+0x1e>
		return TC_CRYPTO_FAIL;
    b102:	4608      	mov	r0, r1
    b104:	e7db      	b.n	b0be <tc_sha256_update+0x10>

0000b106 <tc_sha256_final>:
{
    b106:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b108:	460c      	mov	r4, r1
	if (digest == (uint8_t *) 0 ||
    b10a:	4605      	mov	r5, r0
    b10c:	2800      	cmp	r0, #0
    b10e:	d054      	beq.n	b1ba <tc_sha256_final+0xb4>
    b110:	2900      	cmp	r1, #0
    b112:	d053      	beq.n	b1bc <tc_sha256_final+0xb6>
	s->bits_hashed += (s->leftover_offset << 3);
    b114:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
    b118:	6e89      	ldr	r1, [r1, #104]	; 0x68
    b11a:	00c8      	lsls	r0, r1, #3
    b11c:	1816      	adds	r6, r2, r0
    b11e:	f143 0700 	adc.w	r7, r3, #0
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
    b122:	2380      	movs	r3, #128	; 0x80
    b124:	1c48      	adds	r0, r1, #1
	if (s->leftover_offset > (sizeof(s->leftover) - 8)) {
    b126:	2838      	cmp	r0, #56	; 0x38
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
    b128:	4421      	add	r1, r4
	s->bits_hashed += (s->leftover_offset << 3);
    b12a:	e9c4 6708 	strd	r6, r7, [r4, #32]
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
    b12e:	66a0      	str	r0, [r4, #104]	; 0x68
    b130:	f104 0628 	add.w	r6, r4, #40	; 0x28
    b134:	f881 3028 	strb.w	r3, [r1, #40]	; 0x28
	if (s->leftover_offset > (sizeof(s->leftover) - 8)) {
    b138:	d90b      	bls.n	b152 <tc_sha256_final+0x4c>
		_set(s->leftover + s->leftover_offset, 0x00,
    b13a:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
    b13e:	2100      	movs	r1, #0
    b140:	4430      	add	r0, r6
    b142:	f7ff fdee 	bl	ad22 <_set>
		compress(s->iv, s->leftover);
    b146:	4631      	mov	r1, r6
    b148:	4620      	mov	r0, r4
    b14a:	f7f5 fc5d 	bl	a08 <compress>
		s->leftover_offset = 0;
    b14e:	2300      	movs	r3, #0
    b150:	66a3      	str	r3, [r4, #104]	; 0x68
	_set(s->leftover + s->leftover_offset, 0x00,
    b152:	6ea0      	ldr	r0, [r4, #104]	; 0x68
    b154:	2100      	movs	r1, #0
    b156:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
    b15a:	4430      	add	r0, r6
    b15c:	f7ff fde1 	bl	ad22 <_set>
	s->leftover[sizeof(s->leftover) - 1] = (uint8_t)(s->bits_hashed);
    b160:	6a23      	ldr	r3, [r4, #32]
	compress(s->iv, s->leftover);
    b162:	4631      	mov	r1, r6
    b164:	ba1a      	rev	r2, r3
	s->leftover[sizeof(s->leftover) - 1] = (uint8_t)(s->bits_hashed);
    b166:	6a63      	ldr	r3, [r4, #36]	; 0x24
	s->leftover[sizeof(s->leftover) - 4] = (uint8_t)(s->bits_hashed >> 24);
    b168:	6662      	str	r2, [r4, #100]	; 0x64
	s->leftover[sizeof(s->leftover) - 6] = (uint8_t)(s->bits_hashed >> 40);
    b16a:	0a1a      	lsrs	r2, r3, #8
	s->leftover[sizeof(s->leftover) - 5] = (uint8_t)(s->bits_hashed >> 32);
    b16c:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63
	s->leftover[sizeof(s->leftover) - 6] = (uint8_t)(s->bits_hashed >> 40);
    b170:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
	s->leftover[sizeof(s->leftover) - 7] = (uint8_t)(s->bits_hashed >> 48);
    b174:	0c1a      	lsrs	r2, r3, #16
	s->leftover[sizeof(s->leftover) - 8] = (uint8_t)(s->bits_hashed >> 56);
    b176:	0e1b      	lsrs	r3, r3, #24
    b178:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
	compress(s->iv, s->leftover);
    b17c:	4620      	mov	r0, r4
	s->leftover[sizeof(s->leftover) - 7] = (uint8_t)(s->bits_hashed >> 48);
    b17e:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
	compress(s->iv, s->leftover);
    b182:	f7f5 fc41 	bl	a08 <compress>
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
    b186:	1d2b      	adds	r3, r5, #4
    b188:	1f21      	subs	r1, r4, #4
    b18a:	f105 0024 	add.w	r0, r5, #36	; 0x24
		unsigned int t = *((unsigned int *) &s->iv[i]);
    b18e:	f851 2f04 	ldr.w	r2, [r1, #4]!
		*digest++ = (uint8_t)(t >> 24);
    b192:	3304      	adds	r3, #4
    b194:	0e15      	lsrs	r5, r2, #24
    b196:	f803 5c08 	strb.w	r5, [r3, #-8]
		*digest++ = (uint8_t)(t >> 16);
    b19a:	0c15      	lsrs	r5, r2, #16
    b19c:	f803 5c07 	strb.w	r5, [r3, #-7]
		*digest++ = (uint8_t)(t >> 8);
    b1a0:	0a15      	lsrs	r5, r2, #8
    b1a2:	f803 5c06 	strb.w	r5, [r3, #-6]
		*digest++ = (uint8_t)(t);
    b1a6:	f803 2c05 	strb.w	r2, [r3, #-5]
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
    b1aa:	4283      	cmp	r3, r0
    b1ac:	d1ef      	bne.n	b18e <tc_sha256_final+0x88>
	_set(s, 0, sizeof(*s));
    b1ae:	4620      	mov	r0, r4
    b1b0:	2270      	movs	r2, #112	; 0x70
    b1b2:	2100      	movs	r1, #0
    b1b4:	f7ff fdb5 	bl	ad22 <_set>
	return TC_CRYPTO_SUCCESS;
    b1b8:	2001      	movs	r0, #1
}
    b1ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
    b1bc:	4608      	mov	r0, r1
    b1be:	e7fc      	b.n	b1ba <tc_sha256_final+0xb4>

0000b1c0 <rekey>:
#include <tinycrypt/hmac.h>
#include <tinycrypt/constants.h>
#include <tinycrypt/utils.h>

static void rekey(uint8_t *key, const uint8_t *new_key, unsigned int key_size)
{
    b1c0:	b530      	push	{r4, r5, lr}
    b1c2:	1e43      	subs	r3, r0, #1
    b1c4:	188d      	adds	r5, r1, r2
	const uint8_t inner_pad = (uint8_t) 0x36;
	const uint8_t outer_pad = (uint8_t) 0x5c;
	unsigned int i;

	for (i = 0; i < key_size; ++i) {
    b1c6:	42a9      	cmp	r1, r5
    b1c8:	d106      	bne.n	b1d8 <rekey+0x18>
		key[i] = inner_pad ^ new_key[i];
		key[i + TC_SHA256_BLOCK_SIZE] = outer_pad ^ new_key[i];
	}
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
		key[i] = inner_pad; key[i + TC_SHA256_BLOCK_SIZE] = outer_pad;
    b1ca:	2136      	movs	r1, #54	; 0x36
    b1cc:	245c      	movs	r4, #92	; 0x5c
    b1ce:	4402      	add	r2, r0
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
    b1d0:	1a13      	subs	r3, r2, r0
    b1d2:	2b3f      	cmp	r3, #63	; 0x3f
    b1d4:	d90c      	bls.n	b1f0 <rekey+0x30>
	}
}
    b1d6:	bd30      	pop	{r4, r5, pc}
		key[i] = inner_pad ^ new_key[i];
    b1d8:	780c      	ldrb	r4, [r1, #0]
    b1da:	f084 0436 	eor.w	r4, r4, #54	; 0x36
    b1de:	f803 4f01 	strb.w	r4, [r3, #1]!
		key[i + TC_SHA256_BLOCK_SIZE] = outer_pad ^ new_key[i];
    b1e2:	f811 4b01 	ldrb.w	r4, [r1], #1
    b1e6:	f084 045c 	eor.w	r4, r4, #92	; 0x5c
    b1ea:	f883 4040 	strb.w	r4, [r3, #64]	; 0x40
    b1ee:	e7ea      	b.n	b1c6 <rekey+0x6>
		key[i] = inner_pad; key[i + TC_SHA256_BLOCK_SIZE] = outer_pad;
    b1f0:	f802 1b01 	strb.w	r1, [r2], #1
    b1f4:	f882 403f 	strb.w	r4, [r2, #63]	; 0x3f
    b1f8:	e7ea      	b.n	b1d0 <rekey+0x10>

0000b1fa <tc_hmac_set_key>:

int tc_hmac_set_key(TCHmacState_t ctx, const uint8_t *key,
		    unsigned int key_size)
{
    b1fa:	b5f0      	push	{r4, r5, r6, r7, lr}
    b1fc:	460e      	mov	r6, r1
    b1fe:	b0cd      	sub	sp, #308	; 0x134
    b200:	4614      	mov	r4, r2
	/* Input sanity check */
	if (ctx == (TCHmacState_t) 0 ||
    b202:	4605      	mov	r5, r0
    b204:	b1b8      	cbz	r0, b236 <tc_hmac_set_key+0x3c>
    b206:	b341      	cbz	r1, b25a <tc_hmac_set_key+0x60>
	    key == (const uint8_t *) 0 ||
    b208:	b34a      	cbz	r2, b25e <tc_hmac_set_key+0x64>
	}

	const uint8_t dummy_key[TC_SHA256_BLOCK_SIZE];
	struct tc_hmac_state_struct dummy_state;

	if (key_size <= TC_SHA256_BLOCK_SIZE) {
    b20a:	2a40      	cmp	r2, #64	; 0x40
    b20c:	f100 0770 	add.w	r7, r0, #112	; 0x70
    b210:	d813      	bhi.n	b23a <tc_hmac_set_key+0x40>
		 * certain timing attacks. Without these dummy calls,
		 * adversaries would be able to learn whether the key_size is
		 * greater than TC_SHA256_BLOCK_SIZE by measuring the time
		 * consumed in this process.
		 */
		(void)tc_sha256_init(&dummy_state.hash_state);
    b212:	a810      	add	r0, sp, #64	; 0x40
    b214:	f7f5 fcd4 	bl	bc0 <tc_sha256_init>
		(void)tc_sha256_update(&dummy_state.hash_state,
    b218:	4622      	mov	r2, r4
    b21a:	4669      	mov	r1, sp
    b21c:	a810      	add	r0, sp, #64	; 0x40
    b21e:	f7ff ff46 	bl	b0ae <tc_sha256_update>
				       dummy_key,
				       key_size);
		(void)tc_sha256_final(&dummy_state.key[TC_SHA256_DIGEST_SIZE],
    b222:	a910      	add	r1, sp, #64	; 0x40
    b224:	a834      	add	r0, sp, #208	; 0xd0
    b226:	f7ff ff6e 	bl	b106 <tc_sha256_final>
				      &dummy_state.hash_state);

		/* Actual code for when key_size <= TC_SHA256_BLOCK_SIZE: */
		rekey(ctx->key, key, key_size);
    b22a:	4622      	mov	r2, r4
    b22c:	4631      	mov	r1, r6
	} else {
		(void)tc_sha256_init(&ctx->hash_state);
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
				      &ctx->hash_state);
		rekey(ctx->key,
    b22e:	4638      	mov	r0, r7
    b230:	f7ff ffc6 	bl	b1c0 <rekey>
		      &ctx->key[TC_SHA256_DIGEST_SIZE],
		      TC_SHA256_DIGEST_SIZE);
	}

	return TC_CRYPTO_SUCCESS;
    b234:	2001      	movs	r0, #1
}
    b236:	b04d      	add	sp, #308	; 0x134
    b238:	bdf0      	pop	{r4, r5, r6, r7, pc}
		(void)tc_sha256_init(&ctx->hash_state);
    b23a:	f7f5 fcc1 	bl	bc0 <tc_sha256_init>
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
    b23e:	4622      	mov	r2, r4
    b240:	4631      	mov	r1, r6
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
    b242:	f105 0490 	add.w	r4, r5, #144	; 0x90
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
    b246:	4628      	mov	r0, r5
    b248:	f7ff ff31 	bl	b0ae <tc_sha256_update>
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
    b24c:	4629      	mov	r1, r5
    b24e:	4620      	mov	r0, r4
    b250:	f7ff ff59 	bl	b106 <tc_sha256_final>
		rekey(ctx->key,
    b254:	2220      	movs	r2, #32
    b256:	4621      	mov	r1, r4
    b258:	e7e9      	b.n	b22e <tc_hmac_set_key+0x34>
		return TC_CRYPTO_FAIL;
    b25a:	4608      	mov	r0, r1
    b25c:	e7eb      	b.n	b236 <tc_hmac_set_key+0x3c>
    b25e:	4610      	mov	r0, r2
    b260:	e7e9      	b.n	b236 <tc_hmac_set_key+0x3c>

0000b262 <tc_hmac_init>:

int tc_hmac_init(TCHmacState_t ctx)
{
    b262:	b510      	push	{r4, lr}

	/* input sanity check: */
	if (ctx == (TCHmacState_t) 0) {
    b264:	4604      	mov	r4, r0
    b266:	b140      	cbz	r0, b27a <tc_hmac_init+0x18>
		return TC_CRYPTO_FAIL;
	}

  (void) tc_sha256_init(&ctx->hash_state);
    b268:	f7f5 fcaa 	bl	bc0 <tc_sha256_init>
  (void) tc_sha256_update(&ctx->hash_state, ctx->key, TC_SHA256_BLOCK_SIZE);
    b26c:	2240      	movs	r2, #64	; 0x40
    b26e:	f104 0170 	add.w	r1, r4, #112	; 0x70
    b272:	4620      	mov	r0, r4
    b274:	f7ff ff1b 	bl	b0ae <tc_sha256_update>

	return TC_CRYPTO_SUCCESS;
    b278:	2001      	movs	r0, #1
}
    b27a:	bd10      	pop	{r4, pc}

0000b27c <tc_hmac_update>:

int tc_hmac_update(TCHmacState_t ctx,
		   const void *data,
		   unsigned int data_length)
{
    b27c:	b508      	push	{r3, lr}

	/* input sanity check: */
	if (ctx == (TCHmacState_t) 0) {
    b27e:	b110      	cbz	r0, b286 <tc_hmac_update+0xa>
		return TC_CRYPTO_FAIL;
	}

	(void)tc_sha256_update(&ctx->hash_state, data, data_length);
    b280:	f7ff ff15 	bl	b0ae <tc_sha256_update>

	return TC_CRYPTO_SUCCESS;
    b284:	2001      	movs	r0, #1
}
    b286:	bd08      	pop	{r3, pc}

0000b288 <tc_hmac_final>:

int tc_hmac_final(uint8_t *tag, unsigned int taglen, TCHmacState_t ctx)
{
    b288:	b570      	push	{r4, r5, r6, lr}
    b28a:	460e      	mov	r6, r1
    b28c:	4614      	mov	r4, r2

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
    b28e:	4605      	mov	r5, r0
    b290:	b1f0      	cbz	r0, b2d0 <tc_hmac_final+0x48>
    b292:	2920      	cmp	r1, #32
    b294:	d11c      	bne.n	b2d0 <tc_hmac_final+0x48>
	    taglen != TC_SHA256_DIGEST_SIZE ||
    b296:	b1ea      	cbz	r2, b2d4 <tc_hmac_final+0x4c>
	    ctx == (TCHmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	(void) tc_sha256_final(tag, &ctx->hash_state);
    b298:	4611      	mov	r1, r2
    b29a:	f7ff ff34 	bl	b106 <tc_sha256_final>

	(void)tc_sha256_init(&ctx->hash_state);
    b29e:	4620      	mov	r0, r4
    b2a0:	f7f5 fc8e 	bl	bc0 <tc_sha256_init>
	(void)tc_sha256_update(&ctx->hash_state,
    b2a4:	2240      	movs	r2, #64	; 0x40
    b2a6:	f104 01b0 	add.w	r1, r4, #176	; 0xb0
    b2aa:	4620      	mov	r0, r4
    b2ac:	f7ff feff 	bl	b0ae <tc_sha256_update>
			       &ctx->key[TC_SHA256_BLOCK_SIZE],
				TC_SHA256_BLOCK_SIZE);
	(void)tc_sha256_update(&ctx->hash_state, tag, TC_SHA256_DIGEST_SIZE);
    b2b0:	4632      	mov	r2, r6
    b2b2:	4629      	mov	r1, r5
    b2b4:	4620      	mov	r0, r4
    b2b6:	f7ff fefa 	bl	b0ae <tc_sha256_update>
	(void)tc_sha256_final(tag, &ctx->hash_state);
    b2ba:	4621      	mov	r1, r4
    b2bc:	4628      	mov	r0, r5
    b2be:	f7ff ff22 	bl	b106 <tc_sha256_final>

	/* destroy the current state */
	_set(ctx, 0, sizeof(*ctx));
    b2c2:	4620      	mov	r0, r4
    b2c4:	22f0      	movs	r2, #240	; 0xf0
    b2c6:	2100      	movs	r1, #0
    b2c8:	f7ff fd2b 	bl	ad22 <_set>

	return TC_CRYPTO_SUCCESS;
    b2cc:	2001      	movs	r0, #1
}
    b2ce:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
    b2d0:	2000      	movs	r0, #0
    b2d2:	e7fc      	b.n	b2ce <tc_hmac_final+0x46>
    b2d4:	4610      	mov	r0, r2
    b2d6:	e7fa      	b.n	b2ce <tc_hmac_final+0x46>

0000b2d8 <update>:

/*
 * Assumes: prng != NULL
 */
static void update(TCHmacPrng_t prng, const uint8_t *data, unsigned int datalen, const uint8_t *additional_data, unsigned int additional_datalen)
{
    b2d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b2dc:	4604      	mov	r4, r0
	const uint8_t separator0 = 0x00;
	const uint8_t separator1 = 0x01;
    b2de:	f04f 0b01 	mov.w	fp, #1
{
    b2e2:	461f      	mov	r7, r3
	const uint8_t separator0 = 0x00;
    b2e4:	2300      	movs	r3, #0
{
    b2e6:	4689      	mov	r9, r1

	/* configure the new prng key into the prng's instance of hmac */
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
    b2e8:	f100 06f0 	add.w	r6, r0, #240	; 0xf0
    b2ec:	4631      	mov	r1, r6
{
    b2ee:	4692      	mov	sl, r2
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
    b2f0:	2220      	movs	r2, #32
	const uint8_t separator0 = 0x00;
    b2f2:	f88d 3006 	strb.w	r3, [sp, #6]
{
    b2f6:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	const uint8_t separator1 = 0x01;
    b2fa:	f88d b007 	strb.w	fp, [sp, #7]

	/* use current state, e and separator 0 to compute a new prng key: */
	(void)tc_hmac_init(&prng->h);
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
    b2fe:	f504 7588 	add.w	r5, r4, #272	; 0x110
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
    b302:	f7ff ff7a 	bl	b1fa <tc_hmac_set_key>
	(void)tc_hmac_init(&prng->h);
    b306:	4620      	mov	r0, r4
    b308:	f7ff ffab 	bl	b262 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
    b30c:	2220      	movs	r2, #32
    b30e:	4629      	mov	r1, r5
    b310:	4620      	mov	r0, r4
    b312:	f7ff ffb3 	bl	b27c <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, &separator0, sizeof(separator0));
    b316:	465a      	mov	r2, fp
    b318:	f10d 0106 	add.w	r1, sp, #6
    b31c:	4620      	mov	r0, r4
    b31e:	f7ff ffad 	bl	b27c <tc_hmac_update>

	if (data && datalen)
    b322:	f1b9 0f00 	cmp.w	r9, #0
    b326:	d007      	beq.n	b338 <update+0x60>
    b328:	f1ba 0f00 	cmp.w	sl, #0
    b32c:	d004      	beq.n	b338 <update+0x60>
		(void)tc_hmac_update(&prng->h, data, datalen);
    b32e:	4652      	mov	r2, sl
    b330:	4649      	mov	r1, r9
    b332:	4620      	mov	r0, r4
    b334:	f7ff ffa2 	bl	b27c <tc_hmac_update>
	if (additional_data && additional_datalen)
    b338:	b13f      	cbz	r7, b34a <update+0x72>
    b33a:	f1b8 0f00 	cmp.w	r8, #0
    b33e:	d004      	beq.n	b34a <update+0x72>
		(void)tc_hmac_update(&prng->h, additional_data, additional_datalen);
    b340:	4642      	mov	r2, r8
    b342:	4639      	mov	r1, r7
    b344:	4620      	mov	r0, r4
    b346:	f7ff ff99 	bl	b27c <tc_hmac_update>

	(void)tc_hmac_final(prng->key, sizeof(prng->key), &prng->h);
    b34a:	4622      	mov	r2, r4
    b34c:	2120      	movs	r1, #32
    b34e:	4630      	mov	r0, r6
    b350:	f7ff ff9a 	bl	b288 <tc_hmac_final>

	/* configure the new prng key into the prng's instance of hmac */
	(void)tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
    b354:	2220      	movs	r2, #32
    b356:	4631      	mov	r1, r6
    b358:	4620      	mov	r0, r4
    b35a:	f7ff ff4e 	bl	b1fa <tc_hmac_set_key>

	/* use the new key to compute a new state variable v */
	(void)tc_hmac_init(&prng->h);
    b35e:	4620      	mov	r0, r4
    b360:	f7ff ff7f 	bl	b262 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
    b364:	2220      	movs	r2, #32
    b366:	4629      	mov	r1, r5
    b368:	4620      	mov	r0, r4
    b36a:	f7ff ff87 	bl	b27c <tc_hmac_update>
	(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
    b36e:	4622      	mov	r2, r4
    b370:	2120      	movs	r1, #32
    b372:	4628      	mov	r0, r5
    b374:	f7ff ff88 	bl	b288 <tc_hmac_final>

	if (data == 0 || datalen == 0)
    b378:	f1b9 0f00 	cmp.w	r9, #0
    b37c:	d03a      	beq.n	b3f4 <update+0x11c>
    b37e:	f1ba 0f00 	cmp.w	sl, #0
    b382:	d037      	beq.n	b3f4 <update+0x11c>
		return;

	/* configure the new prng key into the prng's instance of hmac */
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
    b384:	2220      	movs	r2, #32
    b386:	4631      	mov	r1, r6
    b388:	4620      	mov	r0, r4
    b38a:	f7ff ff36 	bl	b1fa <tc_hmac_set_key>

	/* use current state, e and separator 1 to compute a new prng key: */
	(void)tc_hmac_init(&prng->h);
    b38e:	4620      	mov	r0, r4
    b390:	f7ff ff67 	bl	b262 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
    b394:	2220      	movs	r2, #32
    b396:	4629      	mov	r1, r5
    b398:	4620      	mov	r0, r4
    b39a:	f7ff ff6f 	bl	b27c <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, &separator1, sizeof(separator1));
    b39e:	2201      	movs	r2, #1
    b3a0:	f10d 0107 	add.w	r1, sp, #7
    b3a4:	4620      	mov	r0, r4
    b3a6:	f7ff ff69 	bl	b27c <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, data, datalen);
    b3aa:	4652      	mov	r2, sl
    b3ac:	4649      	mov	r1, r9
    b3ae:	4620      	mov	r0, r4
    b3b0:	f7ff ff64 	bl	b27c <tc_hmac_update>
	if (additional_data && additional_datalen)
    b3b4:	b13f      	cbz	r7, b3c6 <update+0xee>
    b3b6:	f1b8 0f00 	cmp.w	r8, #0
    b3ba:	d004      	beq.n	b3c6 <update+0xee>
		(void)tc_hmac_update(&prng->h, additional_data, additional_datalen);
    b3bc:	4642      	mov	r2, r8
    b3be:	4639      	mov	r1, r7
    b3c0:	4620      	mov	r0, r4
    b3c2:	f7ff ff5b 	bl	b27c <tc_hmac_update>
	(void)tc_hmac_final(prng->key, sizeof(prng->key), &prng->h);
    b3c6:	4622      	mov	r2, r4
    b3c8:	2120      	movs	r1, #32
    b3ca:	4630      	mov	r0, r6
    b3cc:	f7ff ff5c 	bl	b288 <tc_hmac_final>

	/* configure the new prng key into the prng's instance of hmac */
	(void)tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
    b3d0:	2220      	movs	r2, #32
    b3d2:	4631      	mov	r1, r6
    b3d4:	4620      	mov	r0, r4
    b3d6:	f7ff ff10 	bl	b1fa <tc_hmac_set_key>

	/* use the new key to compute a new state variable v */
	(void)tc_hmac_init(&prng->h);
    b3da:	4620      	mov	r0, r4
    b3dc:	f7ff ff41 	bl	b262 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
    b3e0:	2220      	movs	r2, #32
    b3e2:	4629      	mov	r1, r5
    b3e4:	4620      	mov	r0, r4
    b3e6:	f7ff ff49 	bl	b27c <tc_hmac_update>
	(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
    b3ea:	4622      	mov	r2, r4
    b3ec:	2120      	movs	r1, #32
    b3ee:	4628      	mov	r0, r5
    b3f0:	f7ff ff4a 	bl	b288 <tc_hmac_final>
}
    b3f4:	b003      	add	sp, #12
    b3f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000b3fa <tc_hmac_prng_init>:

int tc_hmac_prng_init(TCHmacPrng_t prng,
		      const uint8_t *personalization,
		      unsigned int plen)
{
    b3fa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    b3fc:	460c      	mov	r4, r1
    b3fe:	4617      	mov	r7, r2

	/* input sanity check: */
	if (prng == (TCHmacPrng_t) 0 ||
    b400:	4605      	mov	r5, r0
    b402:	b1b0      	cbz	r0, b432 <tc_hmac_prng_init+0x38>
	    personalization == (uint8_t *) 0 ||
    b404:	b1b9      	cbz	r1, b436 <tc_hmac_prng_init+0x3c>

	/* put the generator into a known state: */
	_set(prng->key, 0x00, sizeof(prng->key));
	_set(prng->v, 0x01, sizeof(prng->v));

	update(prng, personalization, plen, 0, 0);
    b406:	2600      	movs	r6, #0
	_set(prng->key, 0x00, sizeof(prng->key));
    b408:	2220      	movs	r2, #32
    b40a:	2100      	movs	r1, #0
    b40c:	30f0      	adds	r0, #240	; 0xf0
    b40e:	f7ff fc88 	bl	ad22 <_set>
	_set(prng->v, 0x01, sizeof(prng->v));
    b412:	2220      	movs	r2, #32
    b414:	2101      	movs	r1, #1
    b416:	f505 7088 	add.w	r0, r5, #272	; 0x110
    b41a:	f7ff fc82 	bl	ad22 <_set>
	update(prng, personalization, plen, 0, 0);
    b41e:	4628      	mov	r0, r5
    b420:	9600      	str	r6, [sp, #0]
    b422:	4633      	mov	r3, r6
    b424:	463a      	mov	r2, r7
    b426:	4621      	mov	r1, r4
    b428:	f7ff ff56 	bl	b2d8 <update>

	/* force a reseed before allowing tc_hmac_prng_generate to succeed: */
	prng->countdown = 0;

	return TC_CRYPTO_SUCCESS;
    b42c:	2001      	movs	r0, #1
	prng->countdown = 0;
    b42e:	f8c5 6130 	str.w	r6, [r5, #304]	; 0x130
}
    b432:	b003      	add	sp, #12
    b434:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
    b436:	4608      	mov	r0, r1
    b438:	e7fb      	b.n	b432 <tc_hmac_prng_init+0x38>

0000b43a <tc_hmac_prng_reseed>:
int tc_hmac_prng_reseed(TCHmacPrng_t prng,
			const uint8_t *seed,
			unsigned int seedlen,
			const uint8_t *additional_input,
			unsigned int additionallen)
{
    b43a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    b43c:	9c08      	ldr	r4, [sp, #32]

	/* input sanity check: */
	if (prng == (TCHmacPrng_t) 0 ||
    b43e:	4606      	mov	r6, r0
    b440:	b180      	cbz	r0, b464 <tc_hmac_prng_reseed+0x2a>
    b442:	b179      	cbz	r1, b464 <tc_hmac_prng_reseed+0x2a>
	    seed == (const uint8_t *) 0 ||
	    seedlen < MIN_SLEN ||
    b444:	2a1f      	cmp	r2, #31
    b446:	d90d      	bls.n	b464 <tc_hmac_prng_reseed+0x2a>
	    seedlen > MAX_SLEN) {
		return TC_CRYPTO_FAIL;
	}

	if (additional_input != (const uint8_t *) 0) {
    b448:	b153      	cbz	r3, b460 <tc_hmac_prng_reseed+0x26>
		/*
		 * Abort if additional_input is provided but has inappropriate
		 * length
		 */
		if (additionallen == 0 ||
    b44a:	b16c      	cbz	r4, b468 <tc_hmac_prng_reseed+0x2e>
		    additionallen > MAX_ALEN) {
			return TC_CRYPTO_FAIL;
		} else {
			/* call update for the seed and additional_input */
			update(prng, seed, seedlen, additional_input, additionallen);
    b44c:	9400      	str	r4, [sp, #0]
		}
	} else {
		/* call update only for the seed */
		update(prng, seed, seedlen, 0, 0);
    b44e:	f7ff ff43 	bl	b2d8 <update>
	}

	/* ... and enable hmac_prng_generate */
	prng->countdown = MAX_GENS;
    b452:	f04f 33ff 	mov.w	r3, #4294967295

	return TC_CRYPTO_SUCCESS;
    b456:	2001      	movs	r0, #1
	prng->countdown = MAX_GENS;
    b458:	f8c6 3130 	str.w	r3, [r6, #304]	; 0x130
}
    b45c:	b003      	add	sp, #12
    b45e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		update(prng, seed, seedlen, 0, 0);
    b460:	9300      	str	r3, [sp, #0]
    b462:	e7f4      	b.n	b44e <tc_hmac_prng_reseed+0x14>
		return TC_CRYPTO_FAIL;
    b464:	2000      	movs	r0, #0
    b466:	e7f9      	b.n	b45c <tc_hmac_prng_reseed+0x22>
    b468:	4620      	mov	r0, r4
    b46a:	e7f7      	b.n	b45c <tc_hmac_prng_reseed+0x22>

0000b46c <tc_hmac_prng_generate>:

int tc_hmac_prng_generate(uint8_t *out, unsigned int outlen, TCHmacPrng_t prng)
{
    b46c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    b470:	460d      	mov	r5, r1
    b472:	4614      	mov	r4, r2
	unsigned int bufferlen;

	/* input sanity check: */
	if (out == (uint8_t *) 0 ||
    b474:	4680      	mov	r8, r0
    b476:	b3d8      	cbz	r0, b4f0 <tc_hmac_prng_generate+0x84>
    b478:	b3d2      	cbz	r2, b4f0 <tc_hmac_prng_generate+0x84>
	    prng == (TCHmacPrng_t) 0 ||
    b47a:	1e4b      	subs	r3, r1, #1
    b47c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
    b480:	d236      	bcs.n	b4f0 <tc_hmac_prng_generate+0x84>
	    outlen == 0 ||
	    outlen > MAX_OUT) {
		return TC_CRYPTO_FAIL;
	} else if (prng->countdown == 0) {
    b482:	f8d2 3130 	ldr.w	r3, [r2, #304]	; 0x130
    b486:	b3ab      	cbz	r3, b4f4 <tc_hmac_prng_generate+0x88>
		return TC_HMAC_PRNG_RESEED_REQ;
	}

	prng->countdown--;
    b488:	3b01      	subs	r3, #1
    b48a:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

	while (outlen != 0) {
		/* configure the new prng key into the prng's instance of hmac */
		tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
    b48e:	f102 09f0 	add.w	r9, r2, #240	; 0xf0

		/* operate HMAC in OFB mode to create "random" outputs */
		(void)tc_hmac_init(&prng->h);
		(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
    b492:	f502 7788 	add.w	r7, r2, #272	; 0x110
		tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
    b496:	2220      	movs	r2, #32
    b498:	4649      	mov	r1, r9
    b49a:	4620      	mov	r0, r4
    b49c:	f7ff fead 	bl	b1fa <tc_hmac_set_key>
		(void)tc_hmac_init(&prng->h);
    b4a0:	4620      	mov	r0, r4
    b4a2:	f7ff fede 	bl	b262 <tc_hmac_init>
		(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
    b4a6:	2220      	movs	r2, #32
    b4a8:	4639      	mov	r1, r7
    b4aa:	4620      	mov	r0, r4
    b4ac:	f7ff fee6 	bl	b27c <tc_hmac_update>
		(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
    b4b0:	4622      	mov	r2, r4
    b4b2:	2120      	movs	r1, #32
    b4b4:	4638      	mov	r0, r7
    b4b6:	f7ff fee7 	bl	b288 <tc_hmac_final>

		bufferlen = (TC_SHA256_DIGEST_SIZE > outlen) ?
    b4ba:	2d20      	cmp	r5, #32
    b4bc:	462e      	mov	r6, r5
    b4be:	bf28      	it	cs
    b4c0:	2620      	movcs	r6, #32
			outlen : TC_SHA256_DIGEST_SIZE;
		(void)_copy(out, bufferlen, prng->v, bufferlen);
    b4c2:	4640      	mov	r0, r8
    b4c4:	4633      	mov	r3, r6
    b4c6:	463a      	mov	r2, r7
    b4c8:	4631      	mov	r1, r6
    b4ca:	f7ff fc1d 	bl	ad08 <_copy>

		out += bufferlen;
		outlen = (outlen > TC_SHA256_DIGEST_SIZE) ?
			(outlen - TC_SHA256_DIGEST_SIZE) : 0;
    b4ce:	2d20      	cmp	r5, #32
    b4d0:	bf38      	it	cc
    b4d2:	2520      	movcc	r5, #32
	while (outlen != 0) {
    b4d4:	3d20      	subs	r5, #32
		out += bufferlen;
    b4d6:	44b0      	add	r8, r6
	while (outlen != 0) {
    b4d8:	d1dd      	bne.n	b496 <tc_hmac_prng_generate+0x2a>
	}

	/* block future PRNG compromises from revealing past state */
	update(prng, 0, 0, 0, 0);
    b4da:	4620      	mov	r0, r4
    b4dc:	9500      	str	r5, [sp, #0]
    b4de:	462b      	mov	r3, r5
    b4e0:	462a      	mov	r2, r5
    b4e2:	4629      	mov	r1, r5
    b4e4:	f7ff fef8 	bl	b2d8 <update>

	return TC_CRYPTO_SUCCESS;
    b4e8:	2001      	movs	r0, #1
}
    b4ea:	b003      	add	sp, #12
    b4ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return TC_CRYPTO_FAIL;
    b4f0:	2000      	movs	r0, #0
    b4f2:	e7fa      	b.n	b4ea <tc_hmac_prng_generate+0x7e>
		return TC_HMAC_PRNG_RESEED_REQ;
    b4f4:	f04f 30ff 	mov.w	r0, #4294967295
    b4f8:	e7f7      	b.n	b4ea <tc_hmac_prng_generate+0x7e>

0000b4fa <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
    b4fa:	2300      	movs	r3, #0
	list->head = NULL;
    b4fc:	e9c0 3300 	strd	r3, r3, [r0]
}
    b500:	4770      	bx	lr

0000b502 <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
    b502:	6803      	ldr	r3, [r0, #0]
    b504:	b923      	cbnz	r3, b510 <log_list_add_tail+0xe>
		list->head = msg;
    b506:	6001      	str	r1, [r0, #0]
	} else {
		list->tail->next = msg;
	}

	list->tail = msg;
	msg->next = NULL;
    b508:	2300      	movs	r3, #0
	list->tail = msg;
    b50a:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
    b50c:	600b      	str	r3, [r1, #0]
}
    b50e:	4770      	bx	lr
		list->tail->next = msg;
    b510:	6843      	ldr	r3, [r0, #4]
    b512:	6019      	str	r1, [r3, #0]
    b514:	e7f8      	b.n	b508 <log_list_add_tail+0x6>

0000b516 <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
    b516:	6800      	ldr	r0, [r0, #0]
    b518:	4770      	bx	lr

0000b51a <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
	struct log_msg *msg = list->head;
    b51a:	6803      	ldr	r3, [r0, #0]

	if (list->head != NULL) {
    b51c:	b10b      	cbz	r3, b522 <log_list_head_get+0x8>
		list->head = list->head->next;
    b51e:	681a      	ldr	r2, [r3, #0]
    b520:	6002      	str	r2, [r0, #0]
	}

	return msg;
}
    b522:	4618      	mov	r0, r3
    b524:	4770      	bx	lr

0000b526 <z_log_msg_std_alloc>:
/** @brief Allocate chunk for standard log message.
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
    b526:	b508      	push	{r3, lr}
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
    b528:	f7f5 fdfe 	bl	1128 <log_msg_chunk_alloc>

	if (msg != NULL) {
    b52c:	b118      	cbz	r0, b536 <z_log_msg_std_alloc+0x10>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
    b52e:	2301      	movs	r3, #1
    b530:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
    b532:	2300      	movs	r3, #0
    b534:	8103      	strh	r3, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
	}

	return msg;
}
    b536:	bd08      	pop	{r3, pc}

0000b538 <k_cycle_get_32_wrapper>:
#ifndef _ASMLANGUAGE
extern u32_t z_timer_cycle_get_32(void);

static inline u32_t arch_k_cycle_get_32(void)
{
	return z_timer_cycle_get_32();
    b538:	f7f6 bc68 	b.w	1e0c <z_timer_cycle_get_32>

0000b53c <dummy_timestamp>:
    b53c:	2000      	movs	r0, #0
    b53e:	4770      	bx	lr

0000b540 <z_log_get_s_mask>:
	u32_t mask = 0;
    b540:	2300      	movs	r3, #0
{
    b542:	b5f0      	push	{r4, r5, r6, r7, lr}
	u32_t arg = 0;
    b544:	461a      	mov	r2, r3
	bool arm = false;
    b546:	461c      	mov	r4, r3
				mask |= BIT(arg);
    b548:	2701      	movs	r7, #1
	while ((curr = *str++) && arg < nargs) {
    b54a:	f810 5b01 	ldrb.w	r5, [r0], #1
    b54e:	b10d      	cbz	r5, b554 <z_log_get_s_mask+0x14>
    b550:	428a      	cmp	r2, r1
    b552:	d301      	bcc.n	b558 <z_log_get_s_mask+0x18>
}
    b554:	4618      	mov	r0, r3
    b556:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (curr == '%') {
    b558:	2d25      	cmp	r5, #37	; 0x25
    b55a:	d102      	bne.n	b562 <z_log_get_s_mask+0x22>
			arm = !arm;
    b55c:	f084 0401 	eor.w	r4, r4, #1
    b560:	e7f3      	b.n	b54a <z_log_get_s_mask+0xa>
		} else if (arm && isalpha((int)curr)) {
    b562:	2c00      	cmp	r4, #0
    b564:	d0f1      	beq.n	b54a <z_log_get_s_mask+0xa>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
    b566:	f045 0620 	orr.w	r6, r5, #32
    b56a:	3e61      	subs	r6, #97	; 0x61
    b56c:	2e19      	cmp	r6, #25
    b56e:	d8ec      	bhi.n	b54a <z_log_get_s_mask+0xa>
			if (curr == 's') {
    b570:	2d73      	cmp	r5, #115	; 0x73
				mask |= BIT(arg);
    b572:	bf04      	itt	eq
    b574:	fa07 f402 	lsleq.w	r4, r7, r2
    b578:	4323      	orreq	r3, r4
			arg++;
    b57a:	3201      	adds	r2, #1
			arm = false;
    b57c:	2400      	movs	r4, #0
    b57e:	e7e4      	b.n	b54a <z_log_get_s_mask+0xa>

0000b580 <log_0>:
{
    b580:	b538      	push	{r3, r4, r5, lr}
    b582:	4605      	mov	r5, r0
    b584:	460c      	mov	r4, r1
 *
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_0(const char *str)
{
	struct log_msg *msg = z_log_msg_std_alloc();
    b586:	f7ff ffce 	bl	b526 <z_log_msg_std_alloc>

	if (msg != NULL) {
    b58a:	b128      	cbz	r0, b598 <log_0+0x18>
		msg->str = str;
    b58c:	6105      	str	r5, [r0, #16]
		msg_finalize(msg, src_level);
    b58e:	4621      	mov	r1, r4
}
    b590:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		msg_finalize(msg, src_level);
    b594:	f7f5 bcf2 	b.w	f7c <msg_finalize>
}
    b598:	bd38      	pop	{r3, r4, r5, pc}

0000b59a <log_1>:
{
    b59a:	b570      	push	{r4, r5, r6, lr}
    b59c:	4604      	mov	r4, r0
    b59e:	460e      	mov	r6, r1
    b5a0:	4615      	mov	r5, r2
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_1(const char *str,
					       log_arg_t arg1)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
    b5a2:	f7ff ffc0 	bl	b526 <z_log_msg_std_alloc>

	if (msg != NULL) {
    b5a6:	b158      	cbz	r0, b5c0 <log_1+0x26>
		msg->str = str;
		msg->hdr.params.std.nargs = 1U;
    b5a8:	2201      	movs	r2, #1
		msg->str = str;
    b5aa:	6104      	str	r4, [r0, #16]
		msg->hdr.params.std.nargs = 1U;
    b5ac:	7a44      	ldrb	r4, [r0, #9]
		msg->payload.single.args[0] = arg1;
    b5ae:	6146      	str	r6, [r0, #20]
		msg->hdr.params.std.nargs = 1U;
    b5b0:	f362 1407 	bfi	r4, r2, #4, #4
    b5b4:	7244      	strb	r4, [r0, #9]
		msg_finalize(msg, src_level);
    b5b6:	4629      	mov	r1, r5
}
    b5b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		msg_finalize(msg, src_level);
    b5bc:	f7f5 bcde 	b.w	f7c <msg_finalize>
}
    b5c0:	bd70      	pop	{r4, r5, r6, pc}

0000b5c2 <log_2>:
{
    b5c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b5c6:	4605      	mov	r5, r0
    b5c8:	4688      	mov	r8, r1
    b5ca:	4617      	mov	r7, r2
    b5cc:	461e      	mov	r6, r3
 */
static inline struct log_msg *log_msg_create_2(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
    b5ce:	f7ff ffaa 	bl	b526 <z_log_msg_std_alloc>

	if (msg != NULL) {
    b5d2:	b160      	cbz	r0, b5ee <log_2+0x2c>
		msg->str = str;
		msg->hdr.params.std.nargs = 2U;
    b5d4:	2302      	movs	r3, #2
		msg->str = str;
    b5d6:	6105      	str	r5, [r0, #16]
		msg->hdr.params.std.nargs = 2U;
    b5d8:	7a45      	ldrb	r5, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
    b5da:	e9c0 8705 	strd	r8, r7, [r0, #20]
		msg->hdr.params.std.nargs = 2U;
    b5de:	f363 1507 	bfi	r5, r3, #4, #4
    b5e2:	7245      	strb	r5, [r0, #9]
		msg_finalize(msg, src_level);
    b5e4:	4631      	mov	r1, r6
}
    b5e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		msg_finalize(msg, src_level);
    b5ea:	f7f5 bcc7 	b.w	f7c <msg_finalize>
}
    b5ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000b5f2 <log_3>:
{
    b5f2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    b5f6:	4605      	mov	r5, r0
    b5f8:	4689      	mov	r9, r1
    b5fa:	4690      	mov	r8, r2
    b5fc:	461f      	mov	r7, r3
    b5fe:	f8bd 6020 	ldrh.w	r6, [sp, #32]
static inline struct log_msg *log_msg_create_3(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
    b602:	f7ff ff90 	bl	b526 <z_log_msg_std_alloc>

	if (msg != NULL) {
    b606:	b168      	cbz	r0, b624 <log_3+0x32>
		msg->str = str;
		msg->hdr.params.std.nargs = 3U;
    b608:	2303      	movs	r3, #3
		msg->str = str;
    b60a:	6105      	str	r5, [r0, #16]
		msg->hdr.params.std.nargs = 3U;
    b60c:	7a45      	ldrb	r5, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
    b60e:	e9c0 9805 	strd	r9, r8, [r0, #20]
		msg->hdr.params.std.nargs = 3U;
    b612:	f363 1507 	bfi	r5, r3, #4, #4
    b616:	7245      	strb	r5, [r0, #9]
		msg->payload.single.args[2] = arg3;
    b618:	61c7      	str	r7, [r0, #28]
		msg_finalize(msg, src_level);
    b61a:	4631      	mov	r1, r6
}
    b61c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		msg_finalize(msg, src_level);
    b620:	f7f5 bcac 	b.w	f7c <msg_finalize>
}
    b624:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000b628 <log_n>:
{
    b628:	b510      	push	{r4, lr}
    b62a:	461c      	mov	r4, r3
		struct log_msg *msg = log_msg_create_n(str, args, narg);
    b62c:	f000 f893 	bl	b756 <log_msg_create_n>
		if (msg == NULL) {
    b630:	b120      	cbz	r0, b63c <log_n+0x14>
		msg_finalize(msg, src_level);
    b632:	4621      	mov	r1, r4
}
    b634:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_finalize(msg, src_level);
    b638:	f7f5 bca0 	b.w	f7c <msg_finalize>
}
    b63c:	bd10      	pop	{r4, pc}

0000b63e <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    u8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
    b63e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    b642:	461c      	mov	r4, r3
	u32_t available_len = msg->hdr.params.hexdump.length;
    b644:	8903      	ldrh	r3, [r0, #8]
{
    b646:	460e      	mov	r6, r1
	u32_t available_len = msg->hdr.params.hexdump.length;
    b648:	089b      	lsrs	r3, r3, #2
	u8_t *head_data;
	u32_t chunk_len;
	u32_t req_len;
	u32_t cpy_len;

	if (offset >= available_len) {
    b64a:	42a3      	cmp	r3, r4
{
    b64c:	f89d 7020 	ldrb.w	r7, [sp, #32]
	if (offset >= available_len) {
    b650:	d803      	bhi.n	b65a <log_msg_hexdump_data_op+0x1c>
		*length = 0;
    b652:	2300      	movs	r3, #0
    b654:	6013      	str	r3, [r2, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
    b656:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ((offset + *length) > available_len) {
    b65a:	6811      	ldr	r1, [r2, #0]
    b65c:	4421      	add	r1, r4
    b65e:	4299      	cmp	r1, r3
		*length = available_len - offset;
    b660:	bf84      	itt	hi
    b662:	1b19      	subhi	r1, r3, r4
    b664:	6011      	strhi	r1, [r2, #0]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
    b666:	2b0c      	cmp	r3, #12
	req_len = *length;
    b668:	f8d2 9000 	ldr.w	r9, [r2]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
    b66c:	d928      	bls.n	b6c0 <log_msg_hexdump_data_op+0x82>
	if (offset < chunk_len) {
    b66e:	2c07      	cmp	r4, #7
		cont = msg->payload.ext.next;
    b670:	f8d0 8014 	ldr.w	r8, [r0, #20]
	if (offset < chunk_len) {
    b674:	d82b      	bhi.n	b6ce <log_msg_hexdump_data_op+0x90>
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
    b676:	2308      	movs	r3, #8
		head_data = msg->payload.ext.data.bytes;
    b678:	3018      	adds	r0, #24
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
    b67a:	454b      	cmp	r3, r9
    b67c:	bf28      	it	cs
    b67e:	464b      	movcs	r3, r9
    b680:	4420      	add	r0, r4
    b682:	461d      	mov	r5, r3
			(void)memcpy(&head_data[offset], data, cpy_len);
    b684:	461a      	mov	r2, r3
		if (put_op) {
    b686:	b1ff      	cbz	r7, b6c8 <log_msg_hexdump_data_op+0x8a>
			(void)memcpy(&head_data[offset], data, cpy_len);
    b688:	4631      	mov	r1, r6
			(void)memcpy(data, &head_data[offset], cpy_len);
    b68a:	f000 fc08 	bl	be9e <memcpy>
		req_len -= cpy_len;
    b68e:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
    b692:	442e      	add	r6, r5
	while (req_len > 0) {
    b694:	f1b9 0f00 	cmp.w	r9, #0
    b698:	d0dd      	beq.n	b656 <log_msg_hexdump_data_op+0x18>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
    b69a:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
    b69e:	454d      	cmp	r5, r9
    b6a0:	bf28      	it	cs
    b6a2:	464d      	movcs	r5, r9
		if (put_op) {
    b6a4:	1d20      	adds	r0, r4, #4
    b6a6:	4440      	add	r0, r8
			(void)memcpy(&cont->payload.bytes[offset],
    b6a8:	462a      	mov	r2, r5
		if (put_op) {
    b6aa:	b1bf      	cbz	r7, b6dc <log_msg_hexdump_data_op+0x9e>
			(void)memcpy(&cont->payload.bytes[offset],
    b6ac:	4631      	mov	r1, r6
			(void)memcpy(data, &cont->payload.bytes[offset],
    b6ae:	f000 fbf6 	bl	be9e <memcpy>
		req_len -= cpy_len;
    b6b2:	eba9 0905 	sub.w	r9, r9, r5
		cont = cont->next;
    b6b6:	f8d8 8000 	ldr.w	r8, [r8]
		data += cpy_len;
    b6ba:	442e      	add	r6, r5
		offset = 0;
    b6bc:	2400      	movs	r4, #0
    b6be:	e7e9      	b.n	b694 <log_msg_hexdump_data_op+0x56>
		head_data = msg->payload.single.bytes;
    b6c0:	3014      	adds	r0, #20
	struct log_msg_cont *cont = NULL;
    b6c2:	f04f 0800 	mov.w	r8, #0
    b6c6:	e7d8      	b.n	b67a <log_msg_hexdump_data_op+0x3c>
			(void)memcpy(data, &head_data[offset], cpy_len);
    b6c8:	4601      	mov	r1, r0
    b6ca:	4630      	mov	r0, r6
    b6cc:	e7dd      	b.n	b68a <log_msg_hexdump_data_op+0x4c>
		offset -= chunk_len;
    b6ce:	3c08      	subs	r4, #8
		while (offset >= chunk_len) {
    b6d0:	2c1b      	cmp	r4, #27
    b6d2:	d9df      	bls.n	b694 <log_msg_hexdump_data_op+0x56>
			cont = cont->next;
    b6d4:	f8d8 8000 	ldr.w	r8, [r8]
			offset -= chunk_len;
    b6d8:	3c1c      	subs	r4, #28
    b6da:	e7f9      	b.n	b6d0 <log_msg_hexdump_data_op+0x92>
			(void)memcpy(data, &cont->payload.bytes[offset],
    b6dc:	4601      	mov	r1, r0
    b6de:	4630      	mov	r0, r6
    b6e0:	e7e5      	b.n	b6ae <log_msg_hexdump_data_op+0x70>

0000b6e2 <log_msg_get>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    b6e2:	3004      	adds	r0, #4
    b6e4:	e8d0 3fef 	ldaex	r3, [r0]
    b6e8:	3301      	adds	r3, #1
    b6ea:	e8c0 3fe2 	stlex	r2, r3, [r0]
    b6ee:	2a00      	cmp	r2, #0
    b6f0:	d1f8      	bne.n	b6e4 <log_msg_get+0x2>
}
    b6f2:	4770      	bx	lr

0000b6f4 <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
    b6f4:	7a40      	ldrb	r0, [r0, #9]
}
    b6f6:	0900      	lsrs	r0, r0, #4
    b6f8:	4770      	bx	lr

0000b6fa <log_msg_arg_get>:
	if (arg_idx >= msg->hdr.params.std.nargs) {
    b6fa:	7a43      	ldrb	r3, [r0, #9]
    b6fc:	091b      	lsrs	r3, r3, #4
    b6fe:	428b      	cmp	r3, r1
    b700:	d916      	bls.n	b730 <log_msg_arg_get+0x36>
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
    b702:	2b03      	cmp	r3, #3
    b704:	d803      	bhi.n	b70e <log_msg_arg_get+0x14>
		arg = msg->payload.single.args[arg_idx];
    b706:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    b70a:	6948      	ldr	r0, [r1, #20]
    b70c:	4770      	bx	lr
	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
    b70e:	2901      	cmp	r1, #1
    b710:	d803      	bhi.n	b71a <log_msg_arg_get+0x20>
		return msg->payload.ext.data.args[arg_idx];
    b712:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    b716:	6988      	ldr	r0, [r1, #24]
    b718:	4770      	bx	lr
	cont = msg->payload.ext.next;
    b71a:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
    b71c:	3902      	subs	r1, #2
	while (arg_idx >= ARGS_CONT_MSG) {
    b71e:	2906      	cmp	r1, #6
    b720:	d803      	bhi.n	b72a <log_msg_arg_get+0x30>
	return cont->payload.args[arg_idx];
    b722:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    b726:	6848      	ldr	r0, [r1, #4]
    b728:	4770      	bx	lr
		arg_idx -= ARGS_CONT_MSG;
    b72a:	3907      	subs	r1, #7
		cont = cont->next;
    b72c:	681b      	ldr	r3, [r3, #0]
    b72e:	e7f6      	b.n	b71e <log_msg_arg_get+0x24>
		return 0;
    b730:	2000      	movs	r0, #0
}
    b732:	4770      	bx	lr

0000b734 <log_msg_put>:
{
    b734:	4603      	mov	r3, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    b736:	1d02      	adds	r2, r0, #4
    b738:	e8d2 1fef 	ldaex	r1, [r2]
    b73c:	3901      	subs	r1, #1
    b73e:	e8c2 1fec 	stlex	ip, r1, [r2]
    b742:	f1bc 0f00 	cmp.w	ip, #0
    b746:	d1f7      	bne.n	b738 <log_msg_put+0x4>
	if (msg->hdr.ref_cnt == 0) {
    b748:	685b      	ldr	r3, [r3, #4]
    b74a:	b90b      	cbnz	r3, b750 <log_msg_put+0x1c>
		msg_free(msg);
    b74c:	f7f5 bcfe 	b.w	114c <msg_free>
}
    b750:	4770      	bx	lr

0000b752 <log_msg_str_get>:
}
    b752:	6900      	ldr	r0, [r0, #16]
    b754:	4770      	bx	lr

0000b756 <log_msg_create_n>:
{
    b756:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b75a:	4682      	mov	sl, r0
    b75c:	4688      	mov	r8, r1
    b75e:	4615      	mov	r5, r2
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
    b760:	f7f5 fce2 	bl	1128 <log_msg_chunk_alloc>
	if (msg != NULL) {
    b764:	4604      	mov	r4, r0
    b766:	b330      	cbz	r0, b7b6 <log_msg_create_n+0x60>
		msg->hdr.ref_cnt = 1;
    b768:	2301      	movs	r3, #1
		msg->hdr.params.raw = 0U;
    b76a:	2600      	movs	r6, #0
	if ((msg == NULL) || nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
    b76c:	2d03      	cmp	r5, #3
		msg->hdr.ref_cnt = 1;
    b76e:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
    b770:	8106      	strh	r6, [r0, #8]
    b772:	d909      	bls.n	b788 <log_msg_create_n+0x32>
	msg->hdr.params.generic.ext = 1;
    b774:	2202      	movs	r2, #2
	n -= LOG_MSG_NARGS_HEAD_CHUNK;
    b776:	f1a5 0902 	sub.w	r9, r5, #2
	msg->hdr.params.generic.ext = 1;
    b77a:	8102      	strh	r2, [r0, #8]
	next = &msg->payload.ext.next;
    b77c:	f100 0b14 	add.w	fp, r0, #20
	*next = NULL;
    b780:	6146      	str	r6, [r0, #20]
	while (n > 0) {
    b782:	f1b9 0f00 	cmp.w	r9, #0
    b786:	dc0e      	bgt.n	b7a6 <log_msg_create_n+0x50>
		msg->hdr.params.std.nargs = nargs;
    b788:	7a63      	ldrb	r3, [r4, #9]
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
    b78a:	2d03      	cmp	r5, #3
		msg->hdr.params.std.nargs = nargs;
    b78c:	f365 1307 	bfi	r3, r5, #4, #4
		msg->str = str;
    b790:	f8c4 a010 	str.w	sl, [r4, #16]
		msg->hdr.params.std.nargs = nargs;
    b794:	7263      	strb	r3, [r4, #9]
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
    b796:	d818      	bhi.n	b7ca <log_msg_create_n+0x74>
		(void)memcpy(msg->payload.single.args, args,
    b798:	00aa      	lsls	r2, r5, #2
    b79a:	4641      	mov	r1, r8
    b79c:	f104 0014 	add.w	r0, r4, #20
    b7a0:	f000 fb7d 	bl	be9e <memcpy>
		nargs  = 0U;
    b7a4:	e007      	b.n	b7b6 <log_msg_create_n+0x60>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
    b7a6:	f7f5 fcbf 	bl	1128 <log_msg_chunk_alloc>
		if (cont == NULL) {
    b7aa:	4607      	mov	r7, r0
    b7ac:	b930      	cbnz	r0, b7bc <log_msg_create_n+0x66>
			msg_free(msg);
    b7ae:	4620      	mov	r0, r4
    b7b0:	f7f5 fccc 	bl	114c <msg_free>
			return NULL;
    b7b4:	463c      	mov	r4, r7
}
    b7b6:	4620      	mov	r0, r4
    b7b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		*next = cont;
    b7bc:	f8cb 0000 	str.w	r0, [fp]
		cont->next = NULL;
    b7c0:	f1a9 0907 	sub.w	r9, r9, #7
    b7c4:	6006      	str	r6, [r0, #0]
		next = &cont->next;
    b7c6:	4683      	mov	fp, r0
		n -= ARGS_CONT_MSG;
    b7c8:	e7db      	b.n	b782 <log_msg_create_n+0x2c>
		(void)memcpy(msg->payload.ext.data.args, args,
    b7ca:	4641      	mov	r1, r8
    b7cc:	2208      	movs	r2, #8
    b7ce:	f104 0018 	add.w	r0, r4, #24
	struct log_msg_cont *cont = msg->payload.ext.next;
    b7d2:	6967      	ldr	r7, [r4, #20]
		(void)memcpy(msg->payload.ext.data.args, args,
    b7d4:	f000 fb63 	bl	be9e <memcpy>
		nargs -= LOG_MSG_NARGS_HEAD_CHUNK;
    b7d8:	3d02      	subs	r5, #2
		args += LOG_MSG_NARGS_HEAD_CHUNK;
    b7da:	f108 0808 	add.w	r8, r8, #8
		u32_t cpy_args = MIN(nargs, ARGS_CONT_MSG);
    b7de:	2d07      	cmp	r5, #7
    b7e0:	462e      	mov	r6, r5
    b7e2:	bf28      	it	cs
    b7e4:	2607      	movcs	r6, #7
		(void)memcpy(cont->payload.args, args,
    b7e6:	ea4f 0986 	mov.w	r9, r6, lsl #2
    b7ea:	4641      	mov	r1, r8
    b7ec:	1d38      	adds	r0, r7, #4
    b7ee:	464a      	mov	r2, r9
    b7f0:	f000 fb55 	bl	be9e <memcpy>
	while (nargs != 0U) {
    b7f4:	1bad      	subs	r5, r5, r6
		args += cpy_args;
    b7f6:	44c8      	add	r8, r9
		cont = cont->next;
    b7f8:	683f      	ldr	r7, [r7, #0]
	while (nargs != 0U) {
    b7fa:	d1f0      	bne.n	b7de <log_msg_create_n+0x88>
    b7fc:	e7db      	b.n	b7b6 <log_msg_create_n+0x60>

0000b7fe <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      u8_t *data,
			      size_t *length,
			      size_t offset)
{
    b7fe:	b513      	push	{r0, r1, r4, lr}
	log_msg_hexdump_data_op(msg, data, length, offset, false);
    b800:	2400      	movs	r4, #0
    b802:	9400      	str	r4, [sp, #0]
    b804:	f7ff ff1b 	bl	b63e <log_msg_hexdump_data_op>
}
    b808:	b002      	add	sp, #8
    b80a:	bd10      	pop	{r4, pc}

0000b80c <buffer_write>:
{
    b80c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b80e:	4606      	mov	r6, r0
    b810:	460d      	mov	r5, r1
    b812:	4614      	mov	r4, r2
    b814:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
    b816:	4621      	mov	r1, r4
    b818:	4628      	mov	r0, r5
    b81a:	463a      	mov	r2, r7
    b81c:	47b0      	blx	r6
	} while (len != 0);
    b81e:	1a24      	subs	r4, r4, r0
		buf += processed;
    b820:	4405      	add	r5, r0
	} while (len != 0);
    b822:	d1f8      	bne.n	b816 <buffer_write+0xa>
}
    b824:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000b826 <std_print>:
{
    b826:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b82a:	b08e      	sub	sp, #56	; 0x38
    b82c:	af0e      	add	r7, sp, #56	; 0x38
    b82e:	4681      	mov	r9, r0
    b830:	460d      	mov	r5, r1
	const char *str = log_msg_str_get(msg);
    b832:	f7ff ff8e 	bl	b752 <log_msg_str_get>
    b836:	4606      	mov	r6, r0
	u32_t nargs = log_msg_nargs_get(msg);
    b838:	4648      	mov	r0, r9
    b83a:	f7ff ff5b 	bl	b6f4 <log_msg_nargs_get>
	for (i = 0; i < nargs; i++) {
    b83e:	f04f 0800 	mov.w	r8, #0
	u32_t nargs = log_msg_nargs_get(msg);
    b842:	4682      	mov	sl, r0
	u32_t *args = alloca(sizeof(u32_t)*nargs);
    b844:	0083      	lsls	r3, r0, #2
    b846:	3307      	adds	r3, #7
    b848:	f023 0307 	bic.w	r3, r3, #7
    b84c:	ebad 0d03 	sub.w	sp, sp, r3
    b850:	ac0e      	add	r4, sp, #56	; 0x38
	for (i = 0; i < nargs; i++) {
    b852:	45d0      	cmp	r8, sl
    b854:	d116      	bne.n	b884 <std_print+0x5e>
	switch (log_msg_nargs_get(msg)) {
    b856:	4648      	mov	r0, r9
    b858:	f7ff ff4c 	bl	b6f4 <log_msg_nargs_get>
    b85c:	280f      	cmp	r0, #15
    b85e:	d81e      	bhi.n	b89e <std_print+0x78>
    b860:	e8df f010 	tbh	[pc, r0, lsl #1]
    b864:	00200019 	.word	0x00200019
    b868:	002d0026 	.word	0x002d0026
    b86c:	00410036 	.word	0x00410036
    b870:	005d004e 	.word	0x005d004e
    b874:	0081006e 	.word	0x0081006e
    b878:	00ad0096 	.word	0x00ad0096
    b87c:	00e100c6 	.word	0x00e100c6
    b880:	011d00fe 	.word	0x011d00fe
		args[i] = log_msg_arg_get(msg, i);
    b884:	4641      	mov	r1, r8
    b886:	4648      	mov	r0, r9
    b888:	f7ff ff37 	bl	b6fa <log_msg_arg_get>
    b88c:	f844 0028 	str.w	r0, [r4, r8, lsl #2]
	for (i = 0; i < nargs; i++) {
    b890:	f108 0801 	add.w	r8, r8, #1
    b894:	e7dd      	b.n	b852 <std_print+0x2c>
		print_formatted(log_output, str);
    b896:	4631      	mov	r1, r6
    b898:	4628      	mov	r0, r5
    b89a:	f7f5 fc99 	bl	11d0 <print_formatted>
}
    b89e:	46bd      	mov	sp, r7
    b8a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, str, args[0]);
    b8a4:	6822      	ldr	r2, [r4, #0]
    b8a6:	4631      	mov	r1, r6
    b8a8:	4628      	mov	r0, r5
    b8aa:	f7f5 fc91 	bl	11d0 <print_formatted>
		break;
    b8ae:	e7f6      	b.n	b89e <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1]);
    b8b0:	e9d4 2300 	ldrd	r2, r3, [r4]
    b8b4:	4631      	mov	r1, r6
    b8b6:	4628      	mov	r0, r5
    b8b8:	f7f5 fc8a 	bl	11d0 <print_formatted>
		break;
    b8bc:	e7ef      	b.n	b89e <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2]);
    b8be:	68a3      	ldr	r3, [r4, #8]
    b8c0:	4631      	mov	r1, r6
    b8c2:	9300      	str	r3, [sp, #0]
    b8c4:	e9d4 2300 	ldrd	r2, r3, [r4]
    b8c8:	4628      	mov	r0, r5
    b8ca:	f7f5 fc81 	bl	11d0 <print_formatted>
		break;
    b8ce:	e7e6      	b.n	b89e <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
    b8d0:	68e3      	ldr	r3, [r4, #12]
    b8d2:	4631      	mov	r1, r6
    b8d4:	9301      	str	r3, [sp, #4]
    b8d6:	68a3      	ldr	r3, [r4, #8]
    b8d8:	4628      	mov	r0, r5
    b8da:	9300      	str	r3, [sp, #0]
    b8dc:	e9d4 2300 	ldrd	r2, r3, [r4]
    b8e0:	f7f5 fc76 	bl	11d0 <print_formatted>
		break;
    b8e4:	e7db      	b.n	b89e <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
    b8e6:	6923      	ldr	r3, [r4, #16]
    b8e8:	4631      	mov	r1, r6
    b8ea:	9302      	str	r3, [sp, #8]
    b8ec:	68e3      	ldr	r3, [r4, #12]
    b8ee:	4628      	mov	r0, r5
    b8f0:	9301      	str	r3, [sp, #4]
    b8f2:	68a3      	ldr	r3, [r4, #8]
    b8f4:	9300      	str	r3, [sp, #0]
    b8f6:	e9d4 2300 	ldrd	r2, r3, [r4]
    b8fa:	f7f5 fc69 	bl	11d0 <print_formatted>
		break;
    b8fe:	e7ce      	b.n	b89e <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
    b900:	6963      	ldr	r3, [r4, #20]
    b902:	4631      	mov	r1, r6
    b904:	9303      	str	r3, [sp, #12]
    b906:	6923      	ldr	r3, [r4, #16]
    b908:	4628      	mov	r0, r5
    b90a:	9302      	str	r3, [sp, #8]
    b90c:	68e3      	ldr	r3, [r4, #12]
    b90e:	9301      	str	r3, [sp, #4]
    b910:	68a3      	ldr	r3, [r4, #8]
    b912:	9300      	str	r3, [sp, #0]
    b914:	e9d4 2300 	ldrd	r2, r3, [r4]
    b918:	f7f5 fc5a 	bl	11d0 <print_formatted>
		break;
    b91c:	e7bf      	b.n	b89e <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
    b91e:	69a3      	ldr	r3, [r4, #24]
    b920:	4631      	mov	r1, r6
    b922:	9304      	str	r3, [sp, #16]
    b924:	6963      	ldr	r3, [r4, #20]
    b926:	4628      	mov	r0, r5
    b928:	9303      	str	r3, [sp, #12]
    b92a:	6923      	ldr	r3, [r4, #16]
    b92c:	9302      	str	r3, [sp, #8]
    b92e:	68e3      	ldr	r3, [r4, #12]
    b930:	9301      	str	r3, [sp, #4]
    b932:	68a3      	ldr	r3, [r4, #8]
    b934:	9300      	str	r3, [sp, #0]
    b936:	e9d4 2300 	ldrd	r2, r3, [r4]
    b93a:	f7f5 fc49 	bl	11d0 <print_formatted>
		break;
    b93e:	e7ae      	b.n	b89e <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
    b940:	69e3      	ldr	r3, [r4, #28]
    b942:	4631      	mov	r1, r6
    b944:	9305      	str	r3, [sp, #20]
    b946:	69a3      	ldr	r3, [r4, #24]
    b948:	4628      	mov	r0, r5
    b94a:	9304      	str	r3, [sp, #16]
    b94c:	6963      	ldr	r3, [r4, #20]
    b94e:	9303      	str	r3, [sp, #12]
    b950:	6923      	ldr	r3, [r4, #16]
    b952:	9302      	str	r3, [sp, #8]
    b954:	68e3      	ldr	r3, [r4, #12]
    b956:	9301      	str	r3, [sp, #4]
    b958:	68a3      	ldr	r3, [r4, #8]
    b95a:	9300      	str	r3, [sp, #0]
    b95c:	e9d4 2300 	ldrd	r2, r3, [r4]
    b960:	f7f5 fc36 	bl	11d0 <print_formatted>
		break;
    b964:	e79b      	b.n	b89e <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
    b966:	6a23      	ldr	r3, [r4, #32]
    b968:	4631      	mov	r1, r6
    b96a:	9306      	str	r3, [sp, #24]
    b96c:	69e3      	ldr	r3, [r4, #28]
    b96e:	4628      	mov	r0, r5
    b970:	9305      	str	r3, [sp, #20]
    b972:	69a3      	ldr	r3, [r4, #24]
    b974:	9304      	str	r3, [sp, #16]
    b976:	6963      	ldr	r3, [r4, #20]
    b978:	9303      	str	r3, [sp, #12]
    b97a:	6923      	ldr	r3, [r4, #16]
    b97c:	9302      	str	r3, [sp, #8]
    b97e:	68e3      	ldr	r3, [r4, #12]
    b980:	9301      	str	r3, [sp, #4]
    b982:	68a3      	ldr	r3, [r4, #8]
    b984:	9300      	str	r3, [sp, #0]
    b986:	e9d4 2300 	ldrd	r2, r3, [r4]
    b98a:	f7f5 fc21 	bl	11d0 <print_formatted>
		break;
    b98e:	e786      	b.n	b89e <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
    b990:	6a63      	ldr	r3, [r4, #36]	; 0x24
    b992:	4631      	mov	r1, r6
    b994:	9307      	str	r3, [sp, #28]
    b996:	6a23      	ldr	r3, [r4, #32]
    b998:	4628      	mov	r0, r5
    b99a:	9306      	str	r3, [sp, #24]
    b99c:	69e3      	ldr	r3, [r4, #28]
    b99e:	9305      	str	r3, [sp, #20]
    b9a0:	69a3      	ldr	r3, [r4, #24]
    b9a2:	9304      	str	r3, [sp, #16]
    b9a4:	6963      	ldr	r3, [r4, #20]
    b9a6:	9303      	str	r3, [sp, #12]
    b9a8:	6923      	ldr	r3, [r4, #16]
    b9aa:	9302      	str	r3, [sp, #8]
    b9ac:	68e3      	ldr	r3, [r4, #12]
    b9ae:	9301      	str	r3, [sp, #4]
    b9b0:	68a3      	ldr	r3, [r4, #8]
    b9b2:	9300      	str	r3, [sp, #0]
    b9b4:	e9d4 2300 	ldrd	r2, r3, [r4]
    b9b8:	f7f5 fc0a 	bl	11d0 <print_formatted>
		break;
    b9bc:	e76f      	b.n	b89e <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
    b9be:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    b9c0:	4631      	mov	r1, r6
    b9c2:	9308      	str	r3, [sp, #32]
    b9c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    b9c6:	4628      	mov	r0, r5
    b9c8:	9307      	str	r3, [sp, #28]
    b9ca:	6a23      	ldr	r3, [r4, #32]
    b9cc:	9306      	str	r3, [sp, #24]
    b9ce:	69e3      	ldr	r3, [r4, #28]
    b9d0:	9305      	str	r3, [sp, #20]
    b9d2:	69a3      	ldr	r3, [r4, #24]
    b9d4:	9304      	str	r3, [sp, #16]
    b9d6:	6963      	ldr	r3, [r4, #20]
    b9d8:	9303      	str	r3, [sp, #12]
    b9da:	6923      	ldr	r3, [r4, #16]
    b9dc:	9302      	str	r3, [sp, #8]
    b9de:	68e3      	ldr	r3, [r4, #12]
    b9e0:	9301      	str	r3, [sp, #4]
    b9e2:	68a3      	ldr	r3, [r4, #8]
    b9e4:	9300      	str	r3, [sp, #0]
    b9e6:	e9d4 2300 	ldrd	r2, r3, [r4]
    b9ea:	f7f5 fbf1 	bl	11d0 <print_formatted>
		break;
    b9ee:	e756      	b.n	b89e <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
    b9f0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    b9f2:	4631      	mov	r1, r6
    b9f4:	9309      	str	r3, [sp, #36]	; 0x24
    b9f6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    b9f8:	4628      	mov	r0, r5
    b9fa:	9308      	str	r3, [sp, #32]
    b9fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
    b9fe:	9307      	str	r3, [sp, #28]
    ba00:	6a23      	ldr	r3, [r4, #32]
    ba02:	9306      	str	r3, [sp, #24]
    ba04:	69e3      	ldr	r3, [r4, #28]
    ba06:	9305      	str	r3, [sp, #20]
    ba08:	69a3      	ldr	r3, [r4, #24]
    ba0a:	9304      	str	r3, [sp, #16]
    ba0c:	6963      	ldr	r3, [r4, #20]
    ba0e:	9303      	str	r3, [sp, #12]
    ba10:	6923      	ldr	r3, [r4, #16]
    ba12:	9302      	str	r3, [sp, #8]
    ba14:	68e3      	ldr	r3, [r4, #12]
    ba16:	9301      	str	r3, [sp, #4]
    ba18:	68a3      	ldr	r3, [r4, #8]
    ba1a:	9300      	str	r3, [sp, #0]
    ba1c:	e9d4 2300 	ldrd	r2, r3, [r4]
    ba20:	f7f5 fbd6 	bl	11d0 <print_formatted>
		break;
    ba24:	e73b      	b.n	b89e <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
    ba26:	6b23      	ldr	r3, [r4, #48]	; 0x30
    ba28:	4631      	mov	r1, r6
    ba2a:	930a      	str	r3, [sp, #40]	; 0x28
    ba2c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    ba2e:	4628      	mov	r0, r5
    ba30:	9309      	str	r3, [sp, #36]	; 0x24
    ba32:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    ba34:	9308      	str	r3, [sp, #32]
    ba36:	6a63      	ldr	r3, [r4, #36]	; 0x24
    ba38:	9307      	str	r3, [sp, #28]
    ba3a:	6a23      	ldr	r3, [r4, #32]
    ba3c:	9306      	str	r3, [sp, #24]
    ba3e:	69e3      	ldr	r3, [r4, #28]
    ba40:	9305      	str	r3, [sp, #20]
    ba42:	69a3      	ldr	r3, [r4, #24]
    ba44:	9304      	str	r3, [sp, #16]
    ba46:	6963      	ldr	r3, [r4, #20]
    ba48:	9303      	str	r3, [sp, #12]
    ba4a:	6923      	ldr	r3, [r4, #16]
    ba4c:	9302      	str	r3, [sp, #8]
    ba4e:	68e3      	ldr	r3, [r4, #12]
    ba50:	9301      	str	r3, [sp, #4]
    ba52:	68a3      	ldr	r3, [r4, #8]
    ba54:	9300      	str	r3, [sp, #0]
    ba56:	e9d4 2300 	ldrd	r2, r3, [r4]
    ba5a:	f7f5 fbb9 	bl	11d0 <print_formatted>
		break;
    ba5e:	e71e      	b.n	b89e <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
    ba60:	6b63      	ldr	r3, [r4, #52]	; 0x34
    ba62:	4631      	mov	r1, r6
    ba64:	930b      	str	r3, [sp, #44]	; 0x2c
    ba66:	6b23      	ldr	r3, [r4, #48]	; 0x30
    ba68:	4628      	mov	r0, r5
    ba6a:	930a      	str	r3, [sp, #40]	; 0x28
    ba6c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    ba6e:	9309      	str	r3, [sp, #36]	; 0x24
    ba70:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    ba72:	9308      	str	r3, [sp, #32]
    ba74:	6a63      	ldr	r3, [r4, #36]	; 0x24
    ba76:	9307      	str	r3, [sp, #28]
    ba78:	6a23      	ldr	r3, [r4, #32]
    ba7a:	9306      	str	r3, [sp, #24]
    ba7c:	69e3      	ldr	r3, [r4, #28]
    ba7e:	9305      	str	r3, [sp, #20]
    ba80:	69a3      	ldr	r3, [r4, #24]
    ba82:	9304      	str	r3, [sp, #16]
    ba84:	6963      	ldr	r3, [r4, #20]
    ba86:	9303      	str	r3, [sp, #12]
    ba88:	6923      	ldr	r3, [r4, #16]
    ba8a:	9302      	str	r3, [sp, #8]
    ba8c:	68e3      	ldr	r3, [r4, #12]
    ba8e:	9301      	str	r3, [sp, #4]
    ba90:	68a3      	ldr	r3, [r4, #8]
    ba92:	9300      	str	r3, [sp, #0]
    ba94:	e9d4 2300 	ldrd	r2, r3, [r4]
    ba98:	f7f5 fb9a 	bl	11d0 <print_formatted>
		break;
    ba9c:	e6ff      	b.n	b89e <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
    ba9e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    baa0:	4631      	mov	r1, r6
    baa2:	930c      	str	r3, [sp, #48]	; 0x30
    baa4:	6b63      	ldr	r3, [r4, #52]	; 0x34
    baa6:	4628      	mov	r0, r5
    baa8:	930b      	str	r3, [sp, #44]	; 0x2c
    baaa:	6b23      	ldr	r3, [r4, #48]	; 0x30
    baac:	930a      	str	r3, [sp, #40]	; 0x28
    baae:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    bab0:	9309      	str	r3, [sp, #36]	; 0x24
    bab2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    bab4:	9308      	str	r3, [sp, #32]
    bab6:	6a63      	ldr	r3, [r4, #36]	; 0x24
    bab8:	9307      	str	r3, [sp, #28]
    baba:	6a23      	ldr	r3, [r4, #32]
    babc:	9306      	str	r3, [sp, #24]
    babe:	69e3      	ldr	r3, [r4, #28]
    bac0:	9305      	str	r3, [sp, #20]
    bac2:	69a3      	ldr	r3, [r4, #24]
    bac4:	9304      	str	r3, [sp, #16]
    bac6:	6963      	ldr	r3, [r4, #20]
    bac8:	9303      	str	r3, [sp, #12]
    baca:	6923      	ldr	r3, [r4, #16]
    bacc:	9302      	str	r3, [sp, #8]
    bace:	68e3      	ldr	r3, [r4, #12]
    bad0:	9301      	str	r3, [sp, #4]
    bad2:	68a3      	ldr	r3, [r4, #8]
    bad4:	9300      	str	r3, [sp, #0]
    bad6:	e9d4 2300 	ldrd	r2, r3, [r4]
    bada:	f7f5 fb79 	bl	11d0 <print_formatted>
}
    bade:	e6de      	b.n	b89e <std_print+0x78>

0000bae0 <log_output_flush>:
		     log_output->control_block->offset,
    bae0:	6842      	ldr	r2, [r0, #4]
{
    bae2:	b510      	push	{r4, lr}
	buffer_write(log_output->func, log_output->buf,
    bae4:	e9d2 2300 	ldrd	r2, r3, [r2]
{
    bae8:	4604      	mov	r4, r0
	buffer_write(log_output->func, log_output->buf,
    baea:	6881      	ldr	r1, [r0, #8]
    baec:	6800      	ldr	r0, [r0, #0]
    baee:	f7ff fe8d 	bl	b80c <buffer_write>
	log_output->control_block->offset = 0;
    baf2:	2200      	movs	r2, #0
    baf4:	6863      	ldr	r3, [r4, #4]
    baf6:	601a      	str	r2, [r3, #0]
}
    baf8:	bd10      	pop	{r4, pc}

0000bafa <out_func>:
{
    bafa:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
    bafc:	684b      	ldr	r3, [r1, #4]
{
    bafe:	4605      	mov	r5, r0
	if (out_ctx->control_block->offset == out_ctx->size) {
    bb00:	681a      	ldr	r2, [r3, #0]
    bb02:	68cb      	ldr	r3, [r1, #12]
{
    bb04:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
    bb06:	429a      	cmp	r2, r3
    bb08:	d102      	bne.n	bb10 <out_func+0x16>
		log_output_flush(out_ctx);
    bb0a:	4608      	mov	r0, r1
    bb0c:	f7ff ffe8 	bl	bae0 <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    bb10:	6863      	ldr	r3, [r4, #4]
    bb12:	e8d3 2fef 	ldaex	r2, [r3]
    bb16:	1c51      	adds	r1, r2, #1
    bb18:	e8c3 1fe0 	stlex	r0, r1, [r3]
    bb1c:	2800      	cmp	r0, #0
    bb1e:	d1f8      	bne.n	bb12 <out_func+0x18>
	out_ctx->buf[idx] = (u8_t)c;
    bb20:	68a3      	ldr	r3, [r4, #8]
}
    bb22:	2000      	movs	r0, #0
	out_ctx->buf[idx] = (u8_t)c;
    bb24:	549d      	strb	r5, [r3, r2]
}
    bb26:	bd38      	pop	{r3, r4, r5, pc}

0000bb28 <char_out>:
{
    bb28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bb2a:	460d      	mov	r5, r1
    bb2c:	4616      	mov	r6, r2
	for (size_t i = 0; i < length; i++) {
    bb2e:	4604      	mov	r4, r0
    bb30:	1847      	adds	r7, r0, r1
    bb32:	42bc      	cmp	r4, r7
    bb34:	d101      	bne.n	bb3a <char_out+0x12>
}
    bb36:	4628      	mov	r0, r5
    bb38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uart_poll_out(dev, data[i]);
    bb3a:	f814 1b01 	ldrb.w	r1, [r4], #1
    bb3e:	6873      	ldr	r3, [r6, #4]
    bb40:	4630      	mov	r0, r6
    bb42:	685b      	ldr	r3, [r3, #4]
    bb44:	4798      	blx	r3
    bb46:	e7f4      	b.n	bb32 <char_out+0xa>

0000bb48 <get_status>:
	if (data->started) {
    bb48:	220c      	movs	r2, #12
	data = get_sub_data(dev, type);
    bb4a:	6883      	ldr	r3, [r0, #8]
	return &data->subsys[type];
    bb4c:	b2c9      	uxtb	r1, r1
	if (data->started) {
    bb4e:	fb02 3101 	mla	r1, r2, r1, r3
    bb52:	7a4b      	ldrb	r3, [r1, #9]
    bb54:	b923      	cbnz	r3, bb60 <get_status+0x18>
	if (data->ref > 0) {
    bb56:	7a08      	ldrb	r0, [r1, #8]
		return CLOCK_CONTROL_STATUS_ON;
    bb58:	fab0 f080 	clz	r0, r0
    bb5c:	0940      	lsrs	r0, r0, #5
    bb5e:	4770      	bx	lr
    bb60:	2002      	movs	r0, #2
}
    bb62:	4770      	bx	lr

0000bb64 <clock_stop>:
	const struct nrf_clock_control_config *config =
    bb64:	6802      	ldr	r2, [r0, #0]
{
    bb66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct nrf_clock_control_config *config =
    bb6a:	f8d2 8008 	ldr.w	r8, [r2, #8]
	return &config->subsys[type];
    bb6e:	b2cc      	uxtb	r4, r1
	data = get_sub_data(dev, type);
    bb70:	6887      	ldr	r7, [r0, #8]
	__asm__ volatile(
    bb72:	f04f 0320 	mov.w	r3, #32
    bb76:	f3ef 8611 	mrs	r6, BASEPRI
    bb7a:	f383 8811 	msr	BASEPRI, r3
    bb7e:	f3bf 8f6f 	isb	sy
	if (data->ref == 0) {
    bb82:	220c      	movs	r2, #12
    bb84:	4362      	muls	r2, r4
    bb86:	18b9      	adds	r1, r7, r2
    bb88:	7a0b      	ldrb	r3, [r1, #8]
    bb8a:	b323      	cbz	r3, bbd6 <clock_stop+0x72>
	data->ref--;
    bb8c:	3b01      	subs	r3, #1
    bb8e:	b2db      	uxtb	r3, r3
    bb90:	720b      	strb	r3, [r1, #8]
	if (data->ref == 0) {
    bb92:	bb1b      	cbnz	r3, bbdc <clock_stop+0x78>
		do_stop =  (config->stop_handler) ?
    bb94:	0125      	lsls	r5, r4, #4
	list->head = NULL;
    bb96:	50bb      	str	r3, [r7, r2]
	list->tail = NULL;
    bb98:	604b      	str	r3, [r1, #4]
    bb9a:	eb08 0305 	add.w	r3, r8, r5
    bb9e:	685b      	ldr	r3, [r3, #4]
				config->stop_handler(dev) : true;
    bba0:	b9ab      	cbnz	r3, bbce <clock_stop+0x6a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    bba2:	2201      	movs	r2, #1
			nrf_clock_task_trigger(NRF_CLOCK, config->stop_tsk);
    bba4:	4445      	add	r5, r8
    bba6:	7aeb      	ldrb	r3, [r5, #11]
    bba8:	f103 2350 	add.w	r3, r3, #1342197760	; 0x50005000
    bbac:	601a      	str	r2, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    bbae:	2200      	movs	r2, #0
    bbb0:	892b      	ldrh	r3, [r5, #8]
    bbb2:	f103 2350 	add.w	r3, r3, #1342197760	; 0x50005000
    bbb6:	601a      	str	r2, [r3, #0]
		data->started = false;
    bbb8:	210c      	movs	r1, #12
    bbba:	2000      	movs	r0, #0
    bbbc:	fb01 7404 	mla	r4, r1, r4, r7
    bbc0:	7260      	strb	r0, [r4, #9]
	__asm__ volatile(
    bbc2:	f386 8811 	msr	BASEPRI, r6
    bbc6:	f3bf 8f6f 	isb	sy
}
    bbca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				config->stop_handler(dev) : true;
    bbce:	4798      	blx	r3
    bbd0:	2800      	cmp	r0, #0
    bbd2:	d1e6      	bne.n	bba2 <clock_stop+0x3e>
    bbd4:	e7f0      	b.n	bbb8 <clock_stop+0x54>
		err = -EALREADY;
    bbd6:	f06f 0044 	mvn.w	r0, #68	; 0x44
    bbda:	e7f2      	b.n	bbc2 <clock_stop+0x5e>
	int err = 0;
    bbdc:	2000      	movs	r0, #0
    bbde:	e7f0      	b.n	bbc2 <clock_stop+0x5e>

0000bbe0 <clkstarted_handle>:
{
    bbe0:	b538      	push	{r3, r4, r5, lr}
	sub_data->started = true;
    bbe2:	240c      	movs	r4, #12
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
    bbe4:	6883      	ldr	r3, [r0, #8]
{
    bbe6:	4605      	mov	r5, r0
	sub_data->started = true;
    bbe8:	fb04 3401 	mla	r4, r4, r1, r3
    bbec:	2301      	movs	r3, #1
    bbee:	7263      	strb	r3, [r4, #9]
	__asm__ volatile(
    bbf0:	f04f 0320 	mov.w	r3, #32
    bbf4:	f3ef 8111 	mrs	r1, BASEPRI
    bbf8:	f383 8811 	msr	BASEPRI, r3
    bbfc:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
    bc00:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_GET(slist, snode)
    bc02:	b12b      	cbz	r3, bc10 <clkstarted_handle+0x30>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    bc04:	6860      	ldr	r0, [r4, #4]
    bc06:	681a      	ldr	r2, [r3, #0]
    bc08:	4283      	cmp	r3, r0
	list->head = node;
    bc0a:	6022      	str	r2, [r4, #0]
	list->tail = node;
    bc0c:	bf08      	it	eq
    bc0e:	6062      	streq	r2, [r4, #4]
	__asm__ volatile(
    bc10:	f381 8811 	msr	BASEPRI, r1
    bc14:	f3bf 8f6f 	isb	sy
	while ((async_data = list_get(&sub_data->list)) != NULL) {
    bc18:	b903      	cbnz	r3, bc1c <clkstarted_handle+0x3c>
}
    bc1a:	bd38      	pop	{r3, r4, r5, pc}
		async_data->cb(dev, async_data->user_data);
    bc1c:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
    bc20:	4628      	mov	r0, r5
    bc22:	4790      	blx	r2
    bc24:	e7e4      	b.n	bbf0 <clkstarted_handle+0x10>

0000bc26 <clock_async_start>:
	const struct nrf_clock_control_config *config =
    bc26:	6803      	ldr	r3, [r0, #0]
{
    bc28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	clk_data = get_sub_data(dev, type);
    bc2c:	f8d0 c008 	ldr.w	ip, [r0, #8]
{
    bc30:	4605      	mov	r5, r0
	const struct nrf_clock_control_config *config =
    bc32:	689f      	ldr	r7, [r3, #8]
	return &config->subsys[type];
    bc34:	b2ce      	uxtb	r6, r1
	if ((data != NULL)
    bc36:	b14a      	cbz	r2, bc4c <clock_async_start+0x26>
	sys_snode_t *item = sys_slist_peek_head(list);
    bc38:	230c      	movs	r3, #12
    bc3a:	4373      	muls	r3, r6
    bc3c:	f85c 3003 	ldr.w	r3, [ip, r3]
		if (item == node) {
    bc40:	429a      	cmp	r2, r3
    bc42:	d05b      	beq.n	bcfc <clock_async_start+0xd6>
Z_GENLIST_PEEK_NEXT(slist, snode)
    bc44:	b113      	cbz	r3, bc4c <clock_async_start+0x26>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    bc46:	681b      	ldr	r3, [r3, #0]
	} while (item);
    bc48:	2b00      	cmp	r3, #0
    bc4a:	d1f9      	bne.n	bc40 <clock_async_start+0x1a>
	__asm__ volatile(
    bc4c:	f04f 0320 	mov.w	r3, #32
    bc50:	f3ef 8011 	mrs	r0, BASEPRI
    bc54:	f383 8811 	msr	BASEPRI, r3
    bc58:	f3bf 8f6f 	isb	sy
	ref = ++clk_data->ref;
    bc5c:	210c      	movs	r1, #12
    bc5e:	4371      	muls	r1, r6
    bc60:	eb0c 0301 	add.w	r3, ip, r1
    bc64:	7a1c      	ldrb	r4, [r3, #8]
    bc66:	3401      	adds	r4, #1
    bc68:	b2e4      	uxtb	r4, r4
    bc6a:	721c      	strb	r4, [r3, #8]
	__asm__ volatile(
    bc6c:	f380 8811 	msr	BASEPRI, r0
    bc70:	f3bf 8f6f 	isb	sy
	if (data) {
    bc74:	b332      	cbz	r2, bcc4 <clock_async_start+0x9e>
    p_reg->INTENCLR = mask;
    bc76:	f04f 2050 	mov.w	r0, #1342197760	; 0x50005000
    bc7a:	f04f 0e03 	mov.w	lr, #3
    bc7e:	f8c0 e308 	str.w	lr, [r0, #776]	; 0x308
		already_started = clk_data->started;
    bc82:	7a58      	ldrb	r0, [r3, #9]
		if (!already_started) {
    bc84:	b9a0      	cbnz	r0, bcb0 <clock_async_start+0x8a>
	__asm__ volatile(
    bc86:	f04f 0e20 	mov.w	lr, #32
    bc8a:	f3ef 8811 	mrs	r8, BASEPRI
    bc8e:	f38e 8811 	msr	BASEPRI, lr
    bc92:	f3bf 8f6f 	isb	sy
	parent->next = child;
    bc96:	6010      	str	r0, [r2, #0]
Z_GENLIST_APPEND(slist, snode)
    bc98:	f8d3 e004 	ldr.w	lr, [r3, #4]
    bc9c:	f1be 0f00 	cmp.w	lr, #0
    bca0:	d11f      	bne.n	bce2 <clock_async_start+0xbc>
	list->tail = node;
    bca2:	605a      	str	r2, [r3, #4]
	list->head = node;
    bca4:	f84c 2001 	str.w	r2, [ip, r1]
	__asm__ volatile(
    bca8:	f388 8811 	msr	BASEPRI, r8
    bcac:	f3bf 8f6f 	isb	sy
    p_reg->INTENSET = mask;
    bcb0:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    bcb4:	2103      	movs	r1, #3
    bcb6:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
		if (already_started) {
    bcba:	b118      	cbz	r0, bcc4 <clock_async_start+0x9e>
			data->cb(dev, data->user_data);
    bcbc:	e9d2 3101 	ldrd	r3, r1, [r2, #4]
    bcc0:	4628      	mov	r0, r5
    bcc2:	4798      	blx	r3
	if (ref == 1) {
    bcc4:	2c01      	cmp	r4, #1
    bcc6:	d10a      	bne.n	bcde <clock_async_start+0xb8>
		do_start =  (config->start_handler) ?
    bcc8:	ea4f 1806 	mov.w	r8, r6, lsl #4
    bccc:	f857 3008 	ldr.w	r3, [r7, r8]
				config->start_handler(dev) : true;
    bcd0:	b95b      	cbnz	r3, bcea <clock_async_start+0xc4>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    bcd2:	2201      	movs	r2, #1
			nrf_clock_task_trigger(NRF_CLOCK,
    bcd4:	4447      	add	r7, r8
    bcd6:	7abb      	ldrb	r3, [r7, #10]
    bcd8:	f103 2350 	add.w	r3, r3, #1342197760	; 0x50005000
    bcdc:	601a      	str	r2, [r3, #0]
	return 0;
    bcde:	2000      	movs	r0, #0
    bce0:	e00e      	b.n	bd00 <clock_async_start+0xda>
	parent->next = child;
    bce2:	f8ce 2000 	str.w	r2, [lr]
	list->tail = node;
    bce6:	605a      	str	r2, [r3, #4]
    bce8:	e7de      	b.n	bca8 <clock_async_start+0x82>
				config->start_handler(dev) : true;
    bcea:	4628      	mov	r0, r5
    bcec:	4798      	blx	r3
    bcee:	2800      	cmp	r0, #0
    bcf0:	d1ef      	bne.n	bcd2 <clock_async_start+0xac>
			clkstarted_handle(dev, type);
    bcf2:	4631      	mov	r1, r6
    bcf4:	4628      	mov	r0, r5
    bcf6:	f7ff ff73 	bl	bbe0 <clkstarted_handle>
    bcfa:	e7f0      	b.n	bcde <clock_async_start+0xb8>
		return -EBUSY;
    bcfc:	f06f 000f 	mvn.w	r0, #15
}
    bd00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000bd04 <clock_start>:
	return clock_async_start(dev, sub_system, NULL);
    bd04:	2200      	movs	r2, #0
    bd06:	f7ff bf8e 	b.w	bc26 <clock_async_start>

0000bd0a <clk_init>:
{
    bd0a:	b510      	push	{r4, lr}
	IRQ_CONNECT(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0,
    bd0c:	2200      	movs	r2, #0
{
    bd0e:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0,
    bd10:	2101      	movs	r1, #1
    bd12:	2005      	movs	r0, #5
    bd14:	f7f6 f906 	bl	1f24 <z_arm_irq_priority_set>
	irq_enable(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0);
    bd18:	2005      	movs	r0, #5
    bd1a:	f7f6 f8f3 	bl	1f04 <arch_irq_enable>
    return false;
}

NRF_STATIC_INLINE void nrf_clock_lf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_lfclk_t source)
{
    p_reg->LFCLKSRC = (uint32_t)(source);
    bd1e:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    bd22:	2202      	movs	r2, #2
    bd24:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    p_reg->INTENSET = mask;
    bd28:	2203      	movs	r2, #3
	list->head = NULL;
    bd2a:	2000      	movs	r0, #0
    bd2c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		sys_slist_init(&(get_sub_data(dev, i)->list));
    bd30:	68a3      	ldr	r3, [r4, #8]
	list->tail = NULL;
    bd32:	e9c3 0000 	strd	r0, r0, [r3]
    bd36:	68a3      	ldr	r3, [r4, #8]
    bd38:	e9c3 0003 	strd	r0, r0, [r3, #12]
}
    bd3c:	bd10      	pop	{r4, pc}

0000bd3e <bt_rpmsg_open>:
	return bt_rpmsg_platform_init();
    bd3e:	f7f5 be39 	b.w	19b4 <bt_rpmsg_platform_init>

0000bd42 <virtio_get_status>:
}
    bd42:	2004      	movs	r0, #4
    bd44:	4770      	bx	lr

0000bd46 <virtio_get_features>:
}
    bd46:	2001      	movs	r0, #1
    bd48:	4770      	bx	lr

0000bd4a <virtio_set_features>:
}
    bd4a:	4770      	bx	lr

0000bd4c <rpmsg_service_unbind>:
	rpmsg_destroy_ept(ep);
    bd4c:	f001 bdff 	b.w	d94e <rpmsg_destroy_ept>

0000bd50 <endpoint_cb>:
{
    bd50:	b508      	push	{r3, lr}
    bd52:	4608      	mov	r0, r1
	bt_rpmsg_rx(data, len);
    bd54:	4611      	mov	r1, r2
    bd56:	f7f5 fcdd 	bl	1714 <bt_rpmsg_rx>
}
    bd5a:	2000      	movs	r0, #0
    bd5c:	bd08      	pop	{r3, pc}

0000bd5e <z_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
    bd5e:	4770      	bx	lr

0000bd60 <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
    bd60:	4770      	bx	lr

0000bd62 <z_irq_spurious>:
 * @return N/A
 */
void z_irq_spurious(void *unused)
{
	ARG_UNUSED(unused);
	z_arm_reserved();
    bd62:	f7f6 b943 	b.w	1fec <z_arm_bus_fault>

0000bd66 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    bd66:	4601      	mov	r1, r0
			reason = K_ERR_KERNEL_OOPS;
		}
	}

#endif /* CONFIG_USERSPACE */
	z_arm_fatal_error(reason, esf);
    bd68:	6800      	ldr	r0, [r0, #0]
    bd6a:	f7f6 b949 	b.w	2000 <z_arm_fatal_error>

0000bd6e <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
    bd6e:	b508      	push	{r3, lr}
	handler();
    bd70:	f7f6 f998 	bl	20a4 <z_SysNmiOnReset>
	z_arm_exc_exit();
}
    bd74:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_exc_exit();
    bd78:	f7f6 b862 	b.w	1e40 <z_arm_exc_exit>

0000bd7c <z_arm_configure_dynamic_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
    bd7c:	b507      	push	{r0, r1, r2, lr}

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(
    bd7e:	2100      	movs	r1, #0
    bd80:	a801      	add	r0, sp, #4
    bd82:	f7f6 fe85 	bl	2a90 <arm_core_mpu_configure_dynamic_mpu_regions>
		(const struct k_mem_partition **)dynamic_regions,
		region_num);
}
    bd86:	b003      	add	sp, #12
    bd88:	f85d fb04 	ldr.w	pc, [sp], #4

0000bd8c <mpu_configure_region>:
{
    bd8c:	b530      	push	{r4, r5, lr}
	get_region_attr_from_k_mem_partition_info(&region_conf.attr,
    bd8e:	684b      	ldr	r3, [r1, #4]
{
    bd90:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
    bd92:	680c      	ldr	r4, [r1, #0]
	p_attr->rbar = attr->rbar &
    bd94:	f89d 2008 	ldrb.w	r2, [sp, #8]
    bd98:	890d      	ldrh	r5, [r1, #8]
    bd9a:	9400      	str	r4, [sp, #0]
	p_attr->mair_idx = attr->mair_idx;
    bd9c:	8949      	ldrh	r1, [r1, #10]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    bd9e:	f024 041f 	bic.w	r4, r4, #31
    bda2:	3b01      	subs	r3, #1
    bda4:	4423      	add	r3, r4
	p_attr->rbar = attr->rbar &
    bda6:	f365 0204 	bfi	r2, r5, #0, #5
	p_attr->mair_idx = attr->mair_idx;
    bdaa:	f361 1247 	bfi	r2, r1, #5, #3
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    bdae:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1)) {
    bdb2:	280f      	cmp	r0, #15
	p_attr->mair_idx = attr->mair_idx;
    bdb4:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    bdb8:	9303      	str	r3, [sp, #12]
    bdba:	4604      	mov	r4, r0
    bdbc:	d905      	bls.n	bdca <mpu_configure_region+0x3e>
    bdbe:	f7f6 fce9 	bl	2794 <region_allocate_and_init.part.0>
    bdc2:	4604      	mov	r4, r0
}
    bdc4:	4620      	mov	r0, r4
    bdc6:	b005      	add	sp, #20
    bdc8:	bd30      	pop	{r4, r5, pc}
	region_init(index, region_conf);
    bdca:	4669      	mov	r1, sp
    bdcc:	f7f6 fcca 	bl	2764 <region_init>
	return region_allocate_and_init(index,
    bdd0:	e7f8      	b.n	bdc4 <mpu_configure_region+0x38>

0000bdd2 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
    bdd2:	e840 f300 	tt	r3, r0

int arm_cmse_mpu_region_get(u32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
    bdd6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    bdda:	b2d8      	uxtb	r0, r3
		return addr_info.flags.mpu_region;
	}

	return -EINVAL;
}
    bddc:	bf08      	it	eq
    bdde:	f06f 0015 	mvneq.w	r0, #21
    bde2:	4770      	bx	lr

0000bde4 <strcpy>:

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
    bde4:	4603      	mov	r3, r0
    bde6:	3901      	subs	r1, #1
    bde8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    bdec:	b90a      	cbnz	r2, bdf2 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
    bdee:	701a      	strb	r2, [r3, #0]

	return dest;
}
    bdf0:	4770      	bx	lr
		*d = *s;
    bdf2:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
    bdf6:	e7f7      	b.n	bde8 <strcpy+0x4>

0000bdf8 <strncpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strncpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s, size_t n)
{
    bdf8:	b570      	push	{r4, r5, r6, lr}
    bdfa:	4605      	mov	r5, r0
    bdfc:	3901      	subs	r1, #1
    bdfe:	462c      	mov	r4, r5
	char *dest = d;

	while ((n > 0) && *s != '\0') {
    be00:	b142      	cbz	r2, be14 <strncpy+0x1c>
    be02:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    be06:	1e56      	subs	r6, r2, #1
    be08:	b92b      	cbnz	r3, be16 <strncpy+0x1e>
    be0a:	442a      	add	r2, r5
		d++;
		n--;
	}

	while (n > 0) {
		*d = '\0';
    be0c:	f804 3b01 	strb.w	r3, [r4], #1
	while (n > 0) {
    be10:	42a2      	cmp	r2, r4
    be12:	d1fb      	bne.n	be0c <strncpy+0x14>
		d++;
		n--;
	}

	return dest;
}
    be14:	bd70      	pop	{r4, r5, r6, pc}
		*d = *s;
    be16:	f805 3b01 	strb.w	r3, [r5], #1
		n--;
    be1a:	4632      	mov	r2, r6
    be1c:	e7ef      	b.n	bdfe <strncpy+0x6>

0000be1e <strchr>:
 * @return pointer to 1st instance of found byte, or NULL if not found
 */

char *strchr(const char *s, int c)
{
	char tmp = (char) c;
    be1e:	b2c9      	uxtb	r1, r1

	while ((*s != tmp) && (*s != '\0')) {
    be20:	7802      	ldrb	r2, [r0, #0]
    be22:	4603      	mov	r3, r0
    be24:	428a      	cmp	r2, r1
    be26:	f100 0001 	add.w	r0, r0, #1
    be2a:	d004      	beq.n	be36 <strchr+0x18>
    be2c:	2a00      	cmp	r2, #0
    be2e:	d1f7      	bne.n	be20 <strchr+0x2>
		s++;
	}

	return (*s == tmp) ? (char *) s : NULL;
    be30:	2900      	cmp	r1, #0
    be32:	bf18      	it	ne
    be34:	2300      	movne	r3, #0
}
    be36:	4618      	mov	r0, r3
    be38:	4770      	bx	lr

0000be3a <strlen>:
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
	size_t n = 0;
    be3a:	2300      	movs	r3, #0

	while (*s != '\0') {
    be3c:	5cc2      	ldrb	r2, [r0, r3]
    be3e:	b90a      	cbnz	r2, be44 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    be40:	4618      	mov	r0, r3
    be42:	4770      	bx	lr
		n++;
    be44:	3301      	adds	r3, #1
    be46:	e7f9      	b.n	be3c <strlen+0x2>

0000be48 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    be48:	3801      	subs	r0, #1
    be4a:	3901      	subs	r1, #1
    be4c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    be50:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    be54:	4293      	cmp	r3, r2
    be56:	d101      	bne.n	be5c <strcmp+0x14>
    be58:	2b00      	cmp	r3, #0
    be5a:	d1f7      	bne.n	be4c <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    be5c:	1a98      	subs	r0, r3, r2
    be5e:	4770      	bx	lr

0000be60 <strncmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
    be60:	b530      	push	{r4, r5, lr}
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
    be62:	2400      	movs	r4, #0
    be64:	42a2      	cmp	r2, r4
    be66:	d008      	beq.n	be7a <strncmp+0x1a>
    be68:	5d03      	ldrb	r3, [r0, r4]
    be6a:	5d0d      	ldrb	r5, [r1, r4]
    be6c:	42ab      	cmp	r3, r5
    be6e:	d102      	bne.n	be76 <strncmp+0x16>
    be70:	3401      	adds	r4, #1
    be72:	2b00      	cmp	r3, #0
    be74:	d1f6      	bne.n	be64 <strncmp+0x4>
		s1++;
		s2++;
		n--;
	}

	return (n == 0) ? 0 : (*s1 - *s2);
    be76:	1b58      	subs	r0, r3, r5
    be78:	e000      	b.n	be7c <strncmp+0x1c>
    be7a:	2000      	movs	r0, #0
}
    be7c:	bd30      	pop	{r4, r5, pc}

0000be7e <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
    be7e:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
    be80:	b15a      	cbz	r2, be9a <memcmp+0x1c>
    be82:	3901      	subs	r1, #1
    be84:	1884      	adds	r4, r0, r2
    be86:	f810 2b01 	ldrb.w	r2, [r0], #1
    be8a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
    be8e:	42a0      	cmp	r0, r4
    be90:	d001      	beq.n	be96 <memcmp+0x18>
    be92:	429a      	cmp	r2, r3
    be94:	d0f7      	beq.n	be86 <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
    be96:	1ad0      	subs	r0, r2, r3
}
    be98:	bd10      	pop	{r4, pc}
		return 0;
    be9a:	4610      	mov	r0, r2
    be9c:	e7fc      	b.n	be98 <memcmp+0x1a>

0000be9e <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
    be9e:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
    bea0:	ea81 0400 	eor.w	r4, r1, r0
    bea4:	07a5      	lsls	r5, r4, #30
    bea6:	4603      	mov	r3, r0
    bea8:	d00b      	beq.n	bec2 <memcpy+0x24>
    beaa:	3b01      	subs	r3, #1
    beac:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
    beae:	4291      	cmp	r1, r2
    beb0:	d11a      	bne.n	bee8 <memcpy+0x4a>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    beb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
    beb4:	2a00      	cmp	r2, #0
    beb6:	d0fc      	beq.n	beb2 <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
    beb8:	f811 4b01 	ldrb.w	r4, [r1], #1
			n--;
    bebc:	3a01      	subs	r2, #1
			*(d_byte++) = *(s_byte++);
    bebe:	f803 4b01 	strb.w	r4, [r3], #1
		while (((uintptr_t)d_byte) & mask) {
    bec2:	079c      	lsls	r4, r3, #30
    bec4:	d1f6      	bne.n	beb4 <memcpy+0x16>
    bec6:	0895      	lsrs	r5, r2, #2
    bec8:	00ac      	lsls	r4, r5, #2
    beca:	1f1e      	subs	r6, r3, #4
    becc:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
    bece:	42b9      	cmp	r1, r7
    bed0:	d105      	bne.n	bede <memcpy+0x40>
    bed2:	f06f 0603 	mvn.w	r6, #3
    bed6:	4423      	add	r3, r4
    bed8:	fb06 2205 	mla	r2, r6, r5, r2
    bedc:	e7e5      	b.n	beaa <memcpy+0xc>
			*(d_word++) = *(s_word++);
    bede:	f851 cb04 	ldr.w	ip, [r1], #4
    bee2:	f846 cf04 	str.w	ip, [r6, #4]!
			n -= sizeof(mem_word_t);
    bee6:	e7f2      	b.n	bece <memcpy+0x30>
		*(d_byte++) = *(s_byte++);
    bee8:	f811 4b01 	ldrb.w	r4, [r1], #1
    beec:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    bef0:	e7dd      	b.n	beae <memcpy+0x10>

0000bef2 <memset>:

void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
    bef2:	4603      	mov	r3, r0
{
    bef4:	b570      	push	{r4, r5, r6, lr}
	unsigned char c_byte = (unsigned char)c;
    bef6:	b2c9      	uxtb	r1, r1

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    bef8:	079c      	lsls	r4, r3, #30
    befa:	d110      	bne.n	bf1e <memset+0x2c>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
    befc:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
    bf00:	ea44 4504 	orr.w	r5, r4, r4, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
    bf04:	0894      	lsrs	r4, r2, #2
    bf06:	eb03 0684 	add.w	r6, r3, r4, lsl #2
    bf0a:	42b3      	cmp	r3, r6
    bf0c:	d10d      	bne.n	bf2a <memset+0x38>
    bf0e:	f06f 0503 	mvn.w	r5, #3
    bf12:	fb05 2404 	mla	r4, r5, r4, r2
    bf16:	441c      	add	r4, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
    bf18:	42a3      	cmp	r3, r4
    bf1a:	d109      	bne.n	bf30 <memset+0x3e>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    bf1c:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
    bf1e:	2a00      	cmp	r2, #0
    bf20:	d0fc      	beq.n	bf1c <memset+0x2a>
		*(d_byte++) = c_byte;
    bf22:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    bf26:	3a01      	subs	r2, #1
    bf28:	e7e6      	b.n	bef8 <memset+0x6>
		*(d_word++) = c_word;
    bf2a:	f843 5b04 	str.w	r5, [r3], #4
		n -= sizeof(mem_word_t);
    bf2e:	e7ec      	b.n	bf0a <memset+0x18>
		*(d_byte++) = c_byte;
    bf30:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    bf34:	e7f0      	b.n	bf18 <memset+0x26>

0000bf36 <_to_x>:
{
    bf36:	4603      	mov	r3, r0
    bf38:	b5f0      	push	{r4, r5, r6, r7, lr}
		unsigned int d = n % base;
    bf3a:	fbb1 f7f2 	udiv	r7, r1, r2
    bf3e:	fb02 1517 	mls	r5, r2, r7, r1
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
    bf42:	2d09      	cmp	r5, #9
    bf44:	bf8c      	ite	hi
    bf46:	2627      	movhi	r6, #39	; 0x27
    bf48:	2600      	movls	r6, #0
    bf4a:	461c      	mov	r4, r3
    bf4c:	3530      	adds	r5, #48	; 0x30
    bf4e:	4435      	add	r5, r6
	} while (n);
    bf50:	4291      	cmp	r1, r2
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
    bf52:	f804 5b01 	strb.w	r5, [r4], #1
	} while (n);
    bf56:	d206      	bcs.n	bf66 <_to_x+0x30>
	*buf = 0;
    bf58:	2200      	movs	r2, #0
    bf5a:	7022      	strb	r2, [r4, #0]
	len = buf - start;
    bf5c:	1a24      	subs	r4, r4, r0
	for (buf--; buf > start; buf--, start++) {
    bf5e:	4283      	cmp	r3, r0
    bf60:	d804      	bhi.n	bf6c <_to_x+0x36>
}
    bf62:	4620      	mov	r0, r4
    bf64:	bdf0      	pop	{r4, r5, r6, r7, pc}
		n /= base;
    bf66:	4639      	mov	r1, r7
    bf68:	4623      	mov	r3, r4
    bf6a:	e7e6      	b.n	bf3a <_to_x+0x4>
		char tmp = *buf;
    bf6c:	781a      	ldrb	r2, [r3, #0]
		*buf = *start;
    bf6e:	7801      	ldrb	r1, [r0, #0]
    bf70:	f803 1901 	strb.w	r1, [r3], #-1
		*start = tmp;
    bf74:	f800 2b01 	strb.w	r2, [r0], #1
    bf78:	e7f1      	b.n	bf5e <_to_x+0x28>

0000bf7a <_rlrshift>:
	*v = (*v & 1) + (*v >> 1);
    bf7a:	2100      	movs	r1, #0
{
    bf7c:	b570      	push	{r4, r5, r6, lr}
	*v = (*v & 1) + (*v >> 1);
    bf7e:	e9d0 6500 	ldrd	r6, r5, [r0]
    bf82:	0872      	lsrs	r2, r6, #1
    bf84:	f006 0301 	and.w	r3, r6, #1
    bf88:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
    bf8c:	189b      	adds	r3, r3, r2
    bf8e:	ea4f 0455 	mov.w	r4, r5, lsr #1
    bf92:	eb44 0101 	adc.w	r1, r4, r1
    bf96:	e9c0 3100 	strd	r3, r1, [r0]
}
    bf9a:	bd70      	pop	{r4, r5, r6, pc}

0000bf9c <_ldiv5>:
{
    bf9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint64_t rem = *v, quot = 0U, q;
    bfa0:	e9d0 3200 	ldrd	r3, r2, [r0]
		q = (uint64_t)(hi / 5U) << shifts[i];
    bfa4:	2705      	movs	r7, #5
	rem += 2U;
    bfa6:	3302      	adds	r3, #2
    bfa8:	f142 0200 	adc.w	r2, r2, #0
		q = (uint64_t)(hi / 5U) << shifts[i];
    bfac:	fbb2 fef7 	udiv	lr, r2, r7
    bfb0:	f04f 0c00 	mov.w	ip, #0
		rem -= q * 5U;
    bfb4:	fb07 f10e 	mul.w	r1, r7, lr
    bfb8:	ebb3 060c 	subs.w	r6, r3, ip
    bfbc:	eb62 0101 	sbc.w	r1, r2, r1
		hi = rem >> shifts[i];
    bfc0:	08f2      	lsrs	r2, r6, #3
    bfc2:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
		q = (uint64_t)(hi / 5U) << shifts[i];
    bfc6:	fbb2 f1f7 	udiv	r1, r2, r7
    bfca:	00ca      	lsls	r2, r1, #3
		quot += q;
    bfcc:	eb1c 0802 	adds.w	r8, ip, r2
		q = (uint64_t)(hi / 5U) << shifts[i];
    bfd0:	ea4f 7351 	mov.w	r3, r1, lsr #29
		quot += q;
    bfd4:	eb4e 0903 	adc.w	r9, lr, r3
		rem -= q * 5U;
    bfd8:	fba2 2307 	umull	r2, r3, r2, r7
    bfdc:	1ab3      	subs	r3, r6, r2
		q = (uint64_t)(hi / 5U) << shifts[i];
    bfde:	fbb3 f3f7 	udiv	r3, r3, r7
		quot += q;
    bfe2:	eb18 0403 	adds.w	r4, r8, r3
    bfe6:	f149 0500 	adc.w	r5, r9, #0
	*v = quot;
    bfea:	e9c0 4500 	strd	r4, r5, [r0]
}
    bfee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0000bff2 <_get_digit>:
	if (*digit_count > 0) {
    bff2:	680b      	ldr	r3, [r1, #0]
{
    bff4:	b570      	push	{r4, r5, r6, lr}
	if (*digit_count > 0) {
    bff6:	2b00      	cmp	r3, #0
    bff8:	dd10      	ble.n	c01c <_get_digit+0x2a>
		*digit_count -= 1;
    bffa:	3b01      	subs	r3, #1
    bffc:	600b      	str	r3, [r1, #0]
		*fr = *fr * 10U;
    bffe:	210a      	movs	r1, #10
    c000:	6802      	ldr	r2, [r0, #0]
    c002:	6844      	ldr	r4, [r0, #4]
    c004:	fba2 5601 	umull	r5, r6, r2, r1
    c008:	fb01 6604 	mla	r6, r1, r4, r6
		*fr &= 0x0FFFFFFFFFFFFFFFull;
    c00c:	f026 4370 	bic.w	r3, r6, #4026531840	; 0xf0000000
    c010:	e9c0 5300 	strd	r5, r3, [r0]
		rval = ((*fr >> 60) & 0xF) + '0';
    c014:	0f31      	lsrs	r1, r6, #28
    c016:	3130      	adds	r1, #48	; 0x30
}
    c018:	4608      	mov	r0, r1
    c01a:	bd70      	pop	{r4, r5, r6, pc}
		rval = '0';
    c01c:	2130      	movs	r1, #48	; 0x30
    c01e:	e7fb      	b.n	c018 <_get_digit+0x26>

0000c020 <_stdout_hook_default>:
}
    c020:	f04f 30ff 	mov.w	r0, #4294967295
    c024:	4770      	bx	lr

0000c026 <sprintf_out>:
	if (p->len > 1) { /* need to reserve a byte for EOS */
    c026:	684b      	ldr	r3, [r1, #4]
    c028:	2b01      	cmp	r3, #1
    c02a:	dd07      	ble.n	c03c <sprintf_out+0x16>
		*(p->ptr) = c;
    c02c:	680b      	ldr	r3, [r1, #0]
    c02e:	7018      	strb	r0, [r3, #0]
		p->ptr += 1;
    c030:	680b      	ldr	r3, [r1, #0]
    c032:	3301      	adds	r3, #1
    c034:	600b      	str	r3, [r1, #0]
		p->len -= 1;
    c036:	684b      	ldr	r3, [r1, #4]
    c038:	3b01      	subs	r3, #1
    c03a:	604b      	str	r3, [r1, #4]
}
    c03c:	2000      	movs	r0, #0
    c03e:	4770      	bx	lr

0000c040 <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
    c040:	b510      	push	{r4, lr}
    c042:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
    c044:	7801      	ldrb	r1, [r0, #0]
    c046:	7822      	ldrb	r2, [r4, #0]
{
    c048:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
    c04a:	428a      	cmp	r2, r1
    c04c:	d00e      	beq.n	c06c <bt_uuid_cmp+0x2c>
	uuid_to_uuid128(u1, &uuid1);
    c04e:	4669      	mov	r1, sp
    c050:	f7f7 fa98 	bl	3584 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
    c054:	a905      	add	r1, sp, #20
    c056:	4620      	mov	r0, r4
    c058:	f7f7 fa94 	bl	3584 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
    c05c:	2210      	movs	r2, #16
    c05e:	f10d 0115 	add.w	r1, sp, #21
    c062:	f10d 0001 	add.w	r0, sp, #1
	case BT_UUID_TYPE_16:
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
	case BT_UUID_TYPE_32:
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
    c066:	f7ff ff0a 	bl	be7e <memcmp>
    c06a:	e006      	b.n	c07a <bt_uuid_cmp+0x3a>
	switch (u1->type) {
    c06c:	2a01      	cmp	r2, #1
    c06e:	d00a      	beq.n	c086 <bt_uuid_cmp+0x46>
    c070:	b12a      	cbz	r2, c07e <bt_uuid_cmp+0x3e>
    c072:	2a02      	cmp	r2, #2
    c074:	d00a      	beq.n	c08c <bt_uuid_cmp+0x4c>
	}

	return -EINVAL;
    c076:	f06f 0015 	mvn.w	r0, #21
}
    c07a:	b00a      	add	sp, #40	; 0x28
    c07c:	bd10      	pop	{r4, pc}
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
    c07e:	8840      	ldrh	r0, [r0, #2]
    c080:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
    c082:	1ac0      	subs	r0, r0, r3
    c084:	e7f9      	b.n	c07a <bt_uuid_cmp+0x3a>
    c086:	6840      	ldr	r0, [r0, #4]
    c088:	6863      	ldr	r3, [r4, #4]
    c08a:	e7fa      	b.n	c082 <bt_uuid_cmp+0x42>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
    c08c:	2210      	movs	r2, #16
    c08e:	1c61      	adds	r1, r4, #1
    c090:	3001      	adds	r0, #1
    c092:	e7e8      	b.n	c066 <bt_uuid_cmp+0x26>

0000c094 <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const u8_t *data, u8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
    c094:	2a04      	cmp	r2, #4
{
    c096:	b538      	push	{r3, r4, r5, lr}
    c098:	460c      	mov	r4, r1
	switch (data_len) {
    c09a:	d00d      	beq.n	c0b8 <bt_uuid_create+0x24>
    c09c:	2a10      	cmp	r2, #16
    c09e:	d019      	beq.n	c0d4 <bt_uuid_create+0x40>
    c0a0:	2a02      	cmp	r2, #2
    c0a2:	f04f 0300 	mov.w	r3, #0
    c0a6:	d11b      	bne.n	c0e0 <bt_uuid_create+0x4c>
	case 2:
		uuid->type = BT_UUID_TYPE_16;
    c0a8:	7003      	strb	r3, [r0, #0]
	return ((u16_t)src[1] << 8) | src[0];
    c0aa:	784a      	ldrb	r2, [r1, #1]
    c0ac:	780b      	ldrb	r3, [r1, #0]
    c0ae:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		BT_UUID_16(uuid)->val = sys_get_le16(data);
    c0b2:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
    c0b4:	2001      	movs	r0, #1
}
    c0b6:	bd38      	pop	{r3, r4, r5, pc}
		uuid->type = BT_UUID_TYPE_32;
    c0b8:	2301      	movs	r3, #1
    c0ba:	7003      	strb	r3, [r0, #0]
    c0bc:	78a2      	ldrb	r2, [r4, #2]
    c0be:	78c9      	ldrb	r1, [r1, #3]
    c0c0:	7865      	ldrb	r5, [r4, #1]
	return ((u32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
    c0c2:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
	return ((u16_t)src[1] << 8) | src[0];
    c0c6:	7822      	ldrb	r2, [r4, #0]
	return ((u32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
    c0c8:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
    c0cc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
		BT_UUID_32(uuid)->val = sys_get_le32(data);
    c0d0:	6042      	str	r2, [r0, #4]
		break;
    c0d2:	e7ef      	b.n	c0b4 <bt_uuid_create+0x20>
		uuid->type = BT_UUID_TYPE_128;
    c0d4:	2302      	movs	r3, #2
    c0d6:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
    c0da:	f7ff fee0 	bl	be9e <memcpy>
		break;
    c0de:	e7e9      	b.n	c0b4 <bt_uuid_create+0x20>
		return false;
    c0e0:	4618      	mov	r0, r3
    c0e2:	e7e8      	b.n	c0b6 <bt_uuid_create+0x22>

0000c0e4 <bt_addr_le_copy>:
    c0e4:	2207      	movs	r2, #7
    c0e6:	f7ff beda 	b.w	be9e <memcpy>

0000c0ea <atomic_and>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    c0ea:	e8d0 3fef 	ldaex	r3, [r0]
    c0ee:	ea03 0201 	and.w	r2, r3, r1
    c0f2:	e8c0 2fec 	stlex	ip, r2, [r0]
    c0f6:	f1bc 0f00 	cmp.w	ip, #0
    c0fa:	d1f6      	bne.n	c0ea <atomic_and>
}
    c0fc:	4618      	mov	r0, r3
    c0fe:	4770      	bx	lr

0000c100 <atomic_set_bit_to>:
 *
 * @return N/A
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    c100:	2301      	movs	r3, #1
{
    c102:	b410      	push	{r4}
	atomic_val_t mask = ATOMIC_MASK(bit);
    c104:	f001 041f 	and.w	r4, r1, #31
    c108:	0949      	lsrs	r1, r1, #5
    c10a:	40a3      	lsls	r3, r4

	if (val) {
    c10c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    c110:	b142      	cbz	r2, c124 <atomic_set_bit_to+0x24>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c112:	e8d0 2fef 	ldaex	r2, [r0]
    c116:	431a      	orrs	r2, r3
    c118:	e8c0 2fe1 	stlex	r1, r2, [r0]
    c11c:	2900      	cmp	r1, #0
    c11e:	d1f8      	bne.n	c112 <atomic_set_bit_to+0x12>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
	}
}
    c120:	bc10      	pop	{r4}
    c122:	4770      	bx	lr
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    c124:	43d9      	mvns	r1, r3
}
    c126:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    c128:	f7ff bfdf 	b.w	c0ea <atomic_and>

0000c12c <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c12c:	e8d0 0faf 	lda	r0, [r0]
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    c130:	4108      	asrs	r0, r1
}
    c132:	f000 0001 	and.w	r0, r0, #1
    c136:	4770      	bx	lr

0000c138 <le_set_private_addr.isra.21>:
static int le_set_private_addr(u8_t id)
    c138:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
    c13a:	2106      	movs	r1, #6
    c13c:	4668      	mov	r0, sp
    c13e:	f7f9 fc29 	bl	5994 <bt_rand>
	if (err) {
    c142:	b940      	cbnz	r0, c156 <le_set_private_addr.isra.21+0x1e>
	nrpa.val[5] &= 0x3f;
    c144:	f89d 3005 	ldrb.w	r3, [sp, #5]
	return set_random_address(&nrpa);
    c148:	4668      	mov	r0, sp
	nrpa.val[5] &= 0x3f;
    c14a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    c14e:	f88d 3005 	strb.w	r3, [sp, #5]
	return set_random_address(&nrpa);
    c152:	f7f7 fe3f 	bl	3dd4 <set_random_address>
}
    c156:	b003      	add	sp, #12
    c158:	f85d fb04 	ldr.w	pc, [sp], #4

0000c15c <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
    c15c:	8802      	ldrh	r2, [r0, #0]
    c15e:	8843      	ldrh	r3, [r0, #2]
{
    c160:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
    c162:	429a      	cmp	r2, r3
    c164:	d818      	bhi.n	c198 <bt_le_conn_params_valid+0x3c>
    c166:	2a05      	cmp	r2, #5
    c168:	d916      	bls.n	c198 <bt_le_conn_params_valid+0x3c>
	    param->interval_min < 6 || param->interval_max > 3200) {
    c16a:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
    c16e:	d813      	bhi.n	c198 <bt_le_conn_params_valid+0x3c>
	if (param->latency > 499) {
    c170:	8884      	ldrh	r4, [r0, #4]
    c172:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
    c176:	d20f      	bcs.n	c198 <bt_le_conn_params_valid+0x3c>
	if (param->timeout < 10 || param->timeout > 3200 ||
    c178:	88c1      	ldrh	r1, [r0, #6]
    c17a:	f640 4076 	movw	r0, #3190	; 0xc76
    c17e:	f1a1 020a 	sub.w	r2, r1, #10
    c182:	b292      	uxth	r2, r2
    c184:	4282      	cmp	r2, r0
    c186:	d807      	bhi.n	c198 <bt_le_conn_params_valid+0x3c>
	     ((1 + param->latency) * param->interval_max))) {
    c188:	fb04 3303 	mla	r3, r4, r3, r3
	if (param->timeout < 10 || param->timeout > 3200 ||
    c18c:	ebb3 0f81 	cmp.w	r3, r1, lsl #2
    c190:	bf34      	ite	cc
    c192:	2001      	movcc	r0, #1
    c194:	2000      	movcs	r0, #0
}
    c196:	bd10      	pop	{r4, pc}
		return false;
    c198:	2000      	movs	r0, #0
    c19a:	e7fc      	b.n	c196 <bt_le_conn_params_valid+0x3a>

0000c19c <bt_addr_le_create_static>:
	addr->type = BT_ADDR_LE_RANDOM;
    c19c:	2301      	movs	r3, #1
{
    c19e:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
    c1a0:	2106      	movs	r1, #6
{
    c1a2:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
    c1a4:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
    c1a8:	f7f9 fbf4 	bl	5994 <bt_rand>
	if (err) {
    c1ac:	b918      	cbnz	r0, c1b6 <bt_addr_le_create_static+0x1a>
	BT_ADDR_SET_STATIC(&addr->a);
    c1ae:	79a3      	ldrb	r3, [r4, #6]
    c1b0:	f063 033f 	orn	r3, r3, #63	; 0x3f
    c1b4:	71a3      	strb	r3, [r4, #6]
}
    c1b6:	bd10      	pop	{r4, pc}

0000c1b8 <bt_hci_disconnect>:
{
    c1b8:	b570      	push	{r4, r5, r6, lr}
    c1ba:	4606      	mov	r6, r0
    c1bc:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
    c1be:	f240 4006 	movw	r0, #1030	; 0x406
    c1c2:	2103      	movs	r1, #3
    c1c4:	f7f7 fd8a 	bl	3cdc <bt_hci_cmd_create>
	if (!buf) {
    c1c8:	4604      	mov	r4, r0
    c1ca:	b160      	cbz	r0, c1e6 <bt_hci_disconnect+0x2e>
	disconn = net_buf_add(buf, sizeof(*disconn));
    c1cc:	2103      	movs	r1, #3
    c1ce:	3008      	adds	r0, #8
    c1d0:	f000 fef4 	bl	cfbc <net_buf_simple_add>
	disconn->reason = reason;
    c1d4:	7085      	strb	r5, [r0, #2]
	disconn->handle = sys_cpu_to_le16(handle);
    c1d6:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send(BT_HCI_OP_DISCONNECT, buf);
    c1d8:	4621      	mov	r1, r4
}
    c1da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send(BT_HCI_OP_DISCONNECT, buf);
    c1de:	f240 4006 	movw	r0, #1030	; 0x406
    c1e2:	f7f7 bf43 	b.w	406c <bt_hci_cmd_send>
}
    c1e6:	f06f 0036 	mvn.w	r0, #54	; 0x36
    c1ea:	bd70      	pop	{r4, r5, r6, pc}

0000c1ec <bt_addr_le_is_bonded>:
}
    c1ec:	2000      	movs	r0, #0
    c1ee:	4770      	bx	lr

0000c1f0 <bt_le_adv_start>:
{
    c1f0:	b513      	push	{r0, r1, r4, lr}
	if (param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) {
    c1f2:	7844      	ldrb	r4, [r0, #1]
    c1f4:	f014 0410 	ands.w	r4, r4, #16
    c1f8:	d106      	bne.n	c208 <bt_le_adv_start+0x18>
	return bt_le_adv_start_internal(param, ad, ad_len, sd, sd_len, NULL);
    c1fa:	9401      	str	r4, [sp, #4]
    c1fc:	9c04      	ldr	r4, [sp, #16]
    c1fe:	9400      	str	r4, [sp, #0]
    c200:	f7f9 f83c 	bl	527c <bt_le_adv_start_internal>
}
    c204:	b002      	add	sp, #8
    c206:	bd10      	pop	{r4, pc}
		return -EINVAL;
    c208:	f06f 0015 	mvn.w	r0, #21
    c20c:	e7fa      	b.n	c204 <bt_le_adv_start+0x14>

0000c20e <le_enh_conn_complete>:
	enh_conn_complete((void *)buf->data);
    c20e:	6880      	ldr	r0, [r0, #8]
    c210:	f7f9 ba1c 	b.w	564c <enh_conn_complete>

0000c214 <le_legacy_conn_complete>:
{
    c214:	b510      	push	{r4, lr}
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
    c216:	2400      	movs	r4, #0
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
    c218:	6881      	ldr	r1, [r0, #8]
{
    c21a:	b08c      	sub	sp, #48	; 0x30
	enh.status         = evt->status;
    c21c:	780b      	ldrb	r3, [r1, #0]
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
    c21e:	a805      	add	r0, sp, #20
	enh.status         = evt->status;
    c220:	f88d 3010 	strb.w	r3, [sp, #16]
	enh.handle         = evt->handle;
    c224:	f8b1 3001 	ldrh.w	r3, [r1, #1]
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
    c228:	3104      	adds	r1, #4
	enh.handle         = evt->handle;
    c22a:	f8ad 3011 	strh.w	r3, [sp, #17]
	enh.role           = evt->role;
    c22e:	f811 3c01 	ldrb.w	r3, [r1, #-1]
    c232:	f88d 3013 	strb.w	r3, [sp, #19]
	enh.interval       = evt->interval;
    c236:	f8b1 3007 	ldrh.w	r3, [r1, #7]
    c23a:	f8ad 3027 	strh.w	r3, [sp, #39]	; 0x27
	enh.latency        = evt->latency;
    c23e:	f8b1 3009 	ldrh.w	r3, [r1, #9]
    c242:	f8ad 3029 	strh.w	r3, [sp, #41]	; 0x29
	enh.supv_timeout   = evt->supv_timeout;
    c246:	f8b1 300b 	ldrh.w	r3, [r1, #11]
    c24a:	f8ad 302b 	strh.w	r3, [sp, #43]	; 0x2b
	enh.clock_accuracy = evt->clock_accuracy;
    c24e:	7b4b      	ldrb	r3, [r1, #13]
    c250:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
    c254:	f7ff ff46 	bl	c0e4 <bt_addr_le_copy>
	memcpy(dst, src, sizeof(*dst));
    c258:	4669      	mov	r1, sp
    c25a:	2206      	movs	r2, #6
    c25c:	f10d 001b 	add.w	r0, sp, #27
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
    c260:	9400      	str	r4, [sp, #0]
    c262:	f8ad 4004 	strh.w	r4, [sp, #4]
    c266:	f7ff fe1a 	bl	be9e <memcpy>
    c26a:	2206      	movs	r2, #6
    c26c:	a902      	add	r1, sp, #8
    c26e:	f10d 0021 	add.w	r0, sp, #33	; 0x21
		bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
    c272:	9402      	str	r4, [sp, #8]
    c274:	f8ad 400c 	strh.w	r4, [sp, #12]
    c278:	f7ff fe11 	bl	be9e <memcpy>
	enh_conn_complete(&enh);
    c27c:	a804      	add	r0, sp, #16
    c27e:	f7f9 f9e5 	bl	564c <enh_conn_complete>
}
    c282:	b00c      	add	sp, #48	; 0x30
    c284:	bd10      	pop	{r4, pc}

0000c286 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c286:	e8d0 0faf 	lda	r0, [r0]
}
    c28a:	4770      	bx	lr

0000c28c <atomic_test_bit>:
{
    c28c:	b508      	push	{r3, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    c28e:	f7ff fffa 	bl	c286 <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    c292:	4108      	asrs	r0, r1
}
    c294:	f000 0001 	and.w	r0, r0, #1
    c298:	bd08      	pop	{r3, pc}

0000c29a <bt_conn_reset_rx_state>:
	if (!conn->rx_len) {
    c29a:	8983      	ldrh	r3, [r0, #12]
{
    c29c:	b510      	push	{r4, lr}
    c29e:	4604      	mov	r4, r0
	if (!conn->rx_len) {
    c2a0:	b12b      	cbz	r3, c2ae <bt_conn_reset_rx_state+0x14>
	net_buf_unref(conn->rx);
    c2a2:	6900      	ldr	r0, [r0, #16]
    c2a4:	f7fc f878 	bl	8398 <net_buf_unref>
	conn->rx = NULL;
    c2a8:	2300      	movs	r3, #0
    c2aa:	6123      	str	r3, [r4, #16]
	conn->rx_len = 0U;
    c2ac:	81a3      	strh	r3, [r4, #12]
}
    c2ae:	bd10      	pop	{r4, pc}

0000c2b0 <atomic_dec>:
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    c2b0:	e8d0 3fef 	ldaex	r3, [r0]
    c2b4:	1e5a      	subs	r2, r3, #1
    c2b6:	e8c0 2fe1 	stlex	r1, r2, [r0]
    c2ba:	2900      	cmp	r1, #0
    c2bc:	d1f8      	bne.n	c2b0 <atomic_dec>
}
    c2be:	4618      	mov	r0, r3
    c2c0:	4770      	bx	lr

0000c2c2 <atomic_inc>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    c2c2:	e8d0 3fef 	ldaex	r3, [r0]
    c2c6:	1c5a      	adds	r2, r3, #1
    c2c8:	e8c0 2fe1 	stlex	r1, r2, [r0]
    c2cc:	2900      	cmp	r1, #0
    c2ce:	d1f8      	bne.n	c2c2 <atomic_inc>
}
    c2d0:	4618      	mov	r0, r3
    c2d2:	4770      	bx	lr

0000c2d4 <tx_notify>:
{
    c2d4:	b570      	push	{r4, r5, r6, lr}
    c2d6:	4604      	mov	r4, r0
	__asm__ volatile(
    c2d8:	f04f 0220 	mov.w	r2, #32
    c2dc:	f3ef 8311 	mrs	r3, BASEPRI
    c2e0:	f382 8811 	msr	BASEPRI, r2
    c2e4:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
    c2e8:	6a20      	ldr	r0, [r4, #32]
		if (sys_slist_is_empty(&conn->tx_complete)) {
    c2ea:	b920      	cbnz	r0, c2f6 <tx_notify+0x22>
	__asm__ volatile(
    c2ec:	f383 8811 	msr	BASEPRI, r3
    c2f0:	f3bf 8f6f 	isb	sy
}
    c2f4:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    c2f6:	6a61      	ldr	r1, [r4, #36]	; 0x24
    c2f8:	6802      	ldr	r2, [r0, #0]
    c2fa:	4288      	cmp	r0, r1
	list->tail = node;
    c2fc:	bf08      	it	eq
    c2fe:	6262      	streq	r2, [r4, #36]	; 0x24
	list->head = node;
    c300:	6222      	str	r2, [r4, #32]
    c302:	f383 8811 	msr	BASEPRI, r3
    c306:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
    c30a:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
		tx_free(tx);
    c30e:	f7f9 fb59 	bl	59c4 <tx_free>
		cb(conn, user_data);
    c312:	4631      	mov	r1, r6
    c314:	4620      	mov	r0, r4
    c316:	47a8      	blx	r5
	while (1) {
    c318:	e7de      	b.n	c2d8 <tx_notify+0x4>

0000c31a <tx_complete_work>:
	tx_notify(conn);
    c31a:	3828      	subs	r0, #40	; 0x28
    c31c:	f7ff bfda 	b.w	c2d4 <tx_notify>

0000c320 <bt_conn_get_security>:
}
    c320:	2001      	movs	r0, #1
    c322:	4770      	bx	lr

0000c324 <bt_conn_addr_le_cmp>:
{
    c324:	b538      	push	{r3, r4, r5, lr}
    c326:	460d      	mov	r5, r1
    c328:	4604      	mov	r4, r0
	return memcmp(a, b, sizeof(*a));
    c32a:	f100 0170 	add.w	r1, r0, #112	; 0x70
    c32e:	2207      	movs	r2, #7
    c330:	4628      	mov	r0, r5
    c332:	f7ff fda4 	bl	be7e <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
    c336:	b160      	cbz	r0, c352 <bt_conn_addr_le_cmp+0x2e>
	if (conn->role == BT_HCI_ROLE_MASTER) {
    c338:	78e3      	ldrb	r3, [r4, #3]
    c33a:	2207      	movs	r2, #7
    c33c:	b933      	cbnz	r3, c34c <bt_conn_addr_le_cmp+0x28>
    c33e:	f104 017e 	add.w	r1, r4, #126	; 0x7e
    c342:	4628      	mov	r0, r5
}
    c344:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    c348:	f7ff bd99 	b.w	be7e <memcmp>
    c34c:	f104 0177 	add.w	r1, r4, #119	; 0x77
    c350:	e7f7      	b.n	c342 <bt_conn_addr_le_cmp+0x1e>
    c352:	bd38      	pop	{r3, r4, r5, pc}

0000c354 <bt_conn_unref>:
	atomic_dec(&conn->ref);
    c354:	304c      	adds	r0, #76	; 0x4c
    c356:	f7ff bfab 	b.w	c2b0 <atomic_dec>

0000c35a <bt_conn_get_dst>:
}
    c35a:	3070      	adds	r0, #112	; 0x70
    c35c:	4770      	bx	lr

0000c35e <bt_conn_le_conn_update>:
{
    c35e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c360:	4607      	mov	r7, r0
    c362:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
    c364:	f242 0013 	movw	r0, #8211	; 0x2013
    c368:	210e      	movs	r1, #14
    c36a:	f7f7 fcb7 	bl	3cdc <bt_hci_cmd_create>
	if (!buf) {
    c36e:	4606      	mov	r6, r0
    c370:	b1d0      	cbz	r0, c3a8 <bt_conn_le_conn_update+0x4a>
	conn_update = net_buf_add(buf, sizeof(*conn_update));
    c372:	210e      	movs	r1, #14
    c374:	3008      	adds	r0, #8
    c376:	f000 fe21 	bl	cfbc <net_buf_simple_add>
    c37a:	4604      	mov	r4, r0
	(void)memset(conn_update, 0, sizeof(*conn_update));
    c37c:	220e      	movs	r2, #14
    c37e:	2100      	movs	r1, #0
    c380:	f7ff fdb7 	bl	bef2 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
    c384:	883b      	ldrh	r3, [r7, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
    c386:	4631      	mov	r1, r6
	conn_update->handle = sys_cpu_to_le16(conn->handle);
    c388:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
    c38a:	882b      	ldrh	r3, [r5, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
    c38c:	2200      	movs	r2, #0
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
    c38e:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
    c390:	886b      	ldrh	r3, [r5, #2]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
    c392:	f242 0013 	movw	r0, #8211	; 0x2013
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
    c396:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
    c398:	88ab      	ldrh	r3, [r5, #4]
    c39a:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
    c39c:	88eb      	ldrh	r3, [r5, #6]
    c39e:	8123      	strh	r3, [r4, #8]
}
    c3a0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
    c3a4:	f7f7 bcd0 	b.w	3d48 <bt_hci_cmd_send_sync>
}
    c3a8:	f06f 0036 	mvn.w	r0, #54	; 0x36
    c3ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000c3ae <l2cap_connected>:
}
    c3ae:	4770      	bx	lr

0000c3b0 <l2cap_disconnected>:
    c3b0:	4770      	bx	lr

0000c3b2 <bt_l2cap_chan_remove>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    c3b2:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
    c3b4:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    c3b6:	b17b      	cbz	r3, c3d8 <bt_l2cap_chan_remove+0x26>
    c3b8:	2200      	movs	r2, #0
    c3ba:	3b08      	subs	r3, #8
    c3bc:	b163      	cbz	r3, c3d8 <bt_l2cap_chan_remove+0x26>
		if (chan == ch) {
    c3be:	428b      	cmp	r3, r1
    c3c0:	f103 0408 	add.w	r4, r3, #8
    c3c4:	d10f      	bne.n	c3e6 <bt_l2cap_chan_remove+0x34>
Z_GENLIST_REMOVE(slist, snode)
    c3c6:	688b      	ldr	r3, [r1, #8]
    c3c8:	b93a      	cbnz	r2, c3da <bt_l2cap_chan_remove+0x28>
    c3ca:	6c82      	ldr	r2, [r0, #72]	; 0x48
	list->head = node;
    c3cc:	6443      	str	r3, [r0, #68]	; 0x44
Z_GENLIST_REMOVE(slist, snode)
    c3ce:	4294      	cmp	r4, r2
    c3d0:	d100      	bne.n	c3d4 <bt_l2cap_chan_remove+0x22>
	list->tail = node;
    c3d2:	6483      	str	r3, [r0, #72]	; 0x48
	parent->next = child;
    c3d4:	2300      	movs	r3, #0
    c3d6:	608b      	str	r3, [r1, #8]
}
    c3d8:	bd10      	pop	{r4, pc}
    c3da:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    c3dc:	6c83      	ldr	r3, [r0, #72]	; 0x48
    c3de:	429c      	cmp	r4, r3
	list->tail = node;
    c3e0:	bf08      	it	eq
    c3e2:	6482      	streq	r2, [r0, #72]	; 0x48
    c3e4:	e7f6      	b.n	c3d4 <bt_l2cap_chan_remove+0x22>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    c3e6:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    c3e8:	2b00      	cmp	r3, #0
    c3ea:	d0f5      	beq.n	c3d8 <bt_l2cap_chan_remove+0x26>
    c3ec:	3b08      	subs	r3, #8
    c3ee:	4622      	mov	r2, r4
    c3f0:	e7e4      	b.n	c3bc <bt_l2cap_chan_remove+0xa>

0000c3f2 <bt_l2cap_chan_del>:
	if (!chan->conn) {
    c3f2:	6803      	ldr	r3, [r0, #0]
{
    c3f4:	b510      	push	{r4, lr}
    c3f6:	4604      	mov	r4, r0
	if (!chan->conn) {
    c3f8:	b12b      	cbz	r3, c406 <bt_l2cap_chan_del+0x14>
	if (chan->ops->disconnected) {
    c3fa:	6843      	ldr	r3, [r0, #4]
    c3fc:	685b      	ldr	r3, [r3, #4]
    c3fe:	b103      	cbz	r3, c402 <bt_l2cap_chan_del+0x10>
		chan->ops->disconnected(chan);
    c400:	4798      	blx	r3
	chan->conn = NULL;
    c402:	2300      	movs	r3, #0
    c404:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
    c406:	68e3      	ldr	r3, [r4, #12]
    c408:	b11b      	cbz	r3, c412 <bt_l2cap_chan_del+0x20>
		chan->destroy(chan);
    c40a:	4620      	mov	r0, r4
}
    c40c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		chan->destroy(chan);
    c410:	4718      	bx	r3
}
    c412:	bd10      	pop	{r4, pc}

0000c414 <bt_l2cap_disconnected>:
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
    c414:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
    c416:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
    c418:	b173      	cbz	r3, c438 <bt_l2cap_disconnected+0x24>
    c41a:	f1b3 0008 	subs.w	r0, r3, #8
    c41e:	d00b      	beq.n	c438 <bt_l2cap_disconnected+0x24>
    c420:	681c      	ldr	r4, [r3, #0]
    c422:	b104      	cbz	r4, c426 <bt_l2cap_disconnected+0x12>
    c424:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
    c426:	f7ff ffe4 	bl	c3f2 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
    c42a:	b12c      	cbz	r4, c438 <bt_l2cap_disconnected+0x24>
    c42c:	68a3      	ldr	r3, [r4, #8]
    c42e:	b103      	cbz	r3, c432 <bt_l2cap_disconnected+0x1e>
    c430:	3b08      	subs	r3, #8
{
    c432:	4620      	mov	r0, r4
    c434:	461c      	mov	r4, r3
    c436:	e7f6      	b.n	c426 <bt_l2cap_disconnected+0x12>
}
    c438:	bd10      	pop	{r4, pc}

0000c43a <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
    c43a:	3104      	adds	r1, #4
    c43c:	f7f9 bf60 	b.w	6300 <bt_conn_create_pdu_timeout>

0000c440 <bt_l2cap_send_cb>:
{
    c440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c444:	4614      	mov	r4, r2
    c446:	4605      	mov	r5, r0
    c448:	4688      	mov	r8, r1
	hdr = net_buf_push(buf, sizeof(*hdr));
    c44a:	f102 0008 	add.w	r0, r2, #8
    c44e:	2104      	movs	r1, #4
{
    c450:	461e      	mov	r6, r3
    c452:	9f06      	ldr	r7, [sp, #24]
	hdr = net_buf_push(buf, sizeof(*hdr));
    c454:	f000 fdc9 	bl	cfea <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    c458:	89a1      	ldrh	r1, [r4, #12]
	return bt_conn_send_cb(conn, buf, cb, user_data);
    c45a:	463b      	mov	r3, r7
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    c45c:	3904      	subs	r1, #4
    c45e:	8001      	strh	r1, [r0, #0]
	hdr->cid = sys_cpu_to_le16(cid);
    c460:	f8a0 8002 	strh.w	r8, [r0, #2]
	return bt_conn_send_cb(conn, buf, cb, user_data);
    c464:	4632      	mov	r2, r6
    c466:	4621      	mov	r1, r4
    c468:	4628      	mov	r0, r5
}
    c46a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
    c46e:	f7f9 bc91 	b.w	5d94 <bt_conn_send_cb>

0000c472 <bt_l2cap_le_lookup_tx_cid>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    c472:	6c40      	ldr	r0, [r0, #68]	; 0x44
    c474:	b108      	cbz	r0, c47a <bt_l2cap_le_lookup_tx_cid+0x8>
    c476:	3808      	subs	r0, #8
    c478:	b900      	cbnz	r0, c47c <bt_l2cap_le_lookup_tx_cid+0xa>
}
    c47a:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
    c47c:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
    c480:	428b      	cmp	r3, r1
    c482:	d0fa      	beq.n	c47a <bt_l2cap_le_lookup_tx_cid+0x8>
    c484:	6880      	ldr	r0, [r0, #8]
    c486:	e7f5      	b.n	c474 <bt_l2cap_le_lookup_tx_cid+0x2>

0000c488 <bt_l2cap_le_lookup_rx_cid>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    c488:	6c40      	ldr	r0, [r0, #68]	; 0x44
    c48a:	b108      	cbz	r0, c490 <bt_l2cap_le_lookup_rx_cid+0x8>
    c48c:	3808      	subs	r0, #8
    c48e:	b900      	cbnz	r0, c492 <bt_l2cap_le_lookup_rx_cid+0xa>
}
    c490:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
    c492:	8e83      	ldrh	r3, [r0, #52]	; 0x34
    c494:	428b      	cmp	r3, r1
    c496:	d0fb      	beq.n	c490 <bt_l2cap_le_lookup_rx_cid+0x8>
    c498:	6880      	ldr	r0, [r0, #8]
    c49a:	e7f6      	b.n	c48a <bt_l2cap_le_lookup_rx_cid+0x2>

0000c49c <bt_l2cap_init>:
void bt_l2cap_init(void)
{
	if (IS_ENABLED(CONFIG_BT_BREDR)) {
		bt_l2cap_br_init();
	}
}
    c49c:	4770      	bx	lr

0000c49e <att_prepare_write_req>:
}
    c49e:	2006      	movs	r0, #6
    c4a0:	4770      	bx	lr

0000c4a2 <att_op_get_type>:
	switch (op) {
    c4a2:	280e      	cmp	r0, #14
    c4a4:	d00a      	beq.n	c4bc <att_op_get_type+0x1a>
    c4a6:	d81e      	bhi.n	c4e6 <att_op_get_type+0x44>
    c4a8:	2807      	cmp	r0, #7
    c4aa:	d015      	beq.n	c4d8 <att_op_get_type+0x36>
    c4ac:	d80d      	bhi.n	c4ca <att_op_get_type+0x28>
    c4ae:	2803      	cmp	r0, #3
    c4b0:	d012      	beq.n	c4d8 <att_op_get_type+0x36>
    c4b2:	d805      	bhi.n	c4c0 <att_op_get_type+0x1e>
    c4b4:	2801      	cmp	r0, #1
    c4b6:	d00f      	beq.n	c4d8 <att_op_get_type+0x36>
    c4b8:	2802      	cmp	r0, #2
    c4ba:	d12b      	bne.n	c514 <att_op_get_type+0x72>
		return ATT_REQUEST;
    c4bc:	2001      	movs	r0, #1
    c4be:	4770      	bx	lr
	switch (op) {
    c4c0:	2805      	cmp	r0, #5
		return ATT_REQUEST;
    c4c2:	bf0c      	ite	eq
    c4c4:	2002      	moveq	r0, #2
    c4c6:	2001      	movne	r0, #1
    c4c8:	4770      	bx	lr
	switch (op) {
    c4ca:	280a      	cmp	r0, #10
    c4cc:	d0f6      	beq.n	c4bc <att_op_get_type+0x1a>
    c4ce:	d805      	bhi.n	c4dc <att_op_get_type+0x3a>
    c4d0:	2808      	cmp	r0, #8
    c4d2:	d0f3      	beq.n	c4bc <att_op_get_type+0x1a>
    c4d4:	2809      	cmp	r0, #9
    c4d6:	d11d      	bne.n	c514 <att_op_get_type+0x72>
		return ATT_RESPONSE;
    c4d8:	2002      	movs	r0, #2
    c4da:	4770      	bx	lr
	switch (op) {
    c4dc:	280c      	cmp	r0, #12
		return ATT_RESPONSE;
    c4de:	bf0c      	ite	eq
    c4e0:	2001      	moveq	r0, #1
    c4e2:	2002      	movne	r0, #2
    c4e4:	4770      	bx	lr
	switch (op) {
    c4e6:	2817      	cmp	r0, #23
    c4e8:	d0f6      	beq.n	c4d8 <att_op_get_type+0x36>
    c4ea:	d80b      	bhi.n	c504 <att_op_get_type+0x62>
    c4ec:	2811      	cmp	r0, #17
    c4ee:	d0f3      	beq.n	c4d8 <att_op_get_type+0x36>
    c4f0:	d803      	bhi.n	c4fa <att_op_get_type+0x58>
    c4f2:	280f      	cmp	r0, #15
    c4f4:	d0f0      	beq.n	c4d8 <att_op_get_type+0x36>
    c4f6:	2810      	cmp	r0, #16
    c4f8:	e7df      	b.n	c4ba <att_op_get_type+0x18>
    c4fa:	2813      	cmp	r0, #19
    c4fc:	d0ec      	beq.n	c4d8 <att_op_get_type+0x36>
    c4fe:	d3dd      	bcc.n	c4bc <att_op_get_type+0x1a>
    c500:	2816      	cmp	r0, #22
    c502:	e7da      	b.n	c4ba <att_op_get_type+0x18>
    c504:	281d      	cmp	r0, #29
    c506:	d013      	beq.n	c530 <att_op_get_type+0x8e>
    c508:	d80a      	bhi.n	c520 <att_op_get_type+0x7e>
    c50a:	2819      	cmp	r0, #25
    c50c:	d0e4      	beq.n	c4d8 <att_op_get_type+0x36>
    c50e:	d3d5      	bcc.n	c4bc <att_op_get_type+0x1a>
    c510:	281b      	cmp	r0, #27
    c512:	d00f      	beq.n	c534 <att_op_get_type+0x92>
	if (op & ATT_CMD_MASK) {
    c514:	f010 0f40 	tst.w	r0, #64	; 0x40
		return ATT_COMMAND;
    c518:	bf0c      	ite	eq
    c51a:	2006      	moveq	r0, #6
    c51c:	2000      	movne	r0, #0
    c51e:	4770      	bx	lr
	switch (op) {
    c520:	2852      	cmp	r0, #82	; 0x52
    c522:	d009      	beq.n	c538 <att_op_get_type+0x96>
    c524:	28d2      	cmp	r0, #210	; 0xd2
    c526:	d007      	beq.n	c538 <att_op_get_type+0x96>
    c528:	281e      	cmp	r0, #30
    c52a:	d1f3      	bne.n	c514 <att_op_get_type+0x72>
		return ATT_CONFIRMATION;
    c52c:	2004      	movs	r0, #4
}
    c52e:	4770      	bx	lr
		return ATT_INDICATION;
    c530:	2005      	movs	r0, #5
    c532:	4770      	bx	lr
		return ATT_NOTIFICATION;
    c534:	2003      	movs	r0, #3
    c536:	4770      	bx	lr
		return ATT_COMMAND;
    c538:	2000      	movs	r0, #0
    c53a:	4770      	bx	lr

0000c53c <bt_gatt_foreach_attr>:
 *  @param user_data Data to pass to the callback.
 */
static inline void bt_gatt_foreach_attr(u16_t start_handle, u16_t end_handle,
					bt_gatt_attr_func_t func,
					void *user_data)
{
    c53c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
    c53e:	e9cd 2301 	strd	r2, r3, [sp, #4]
    c542:	2300      	movs	r3, #0
    c544:	9300      	str	r3, [sp, #0]
    c546:	461a      	mov	r2, r3
    c548:	f7fb fb84 	bl	7c54 <bt_gatt_foreach_attr_type>
				  user_data);
}
    c54c:	b005      	add	sp, #20
    c54e:	f85d fb04 	ldr.w	pc, [sp], #4

0000c552 <read_group_cb>:
{
    c552:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    c556:	f04f 0800 	mov.w	r8, #0
    c55a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
	struct bt_att *att = data->att;
    c55e:	680c      	ldr	r4, [r1, #0]
{
    c560:	4606      	mov	r6, r0
    c562:	460d      	mov	r5, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    c564:	6800      	ldr	r0, [r0, #0]
    c566:	a902      	add	r1, sp, #8
	struct bt_conn *conn = att->chan.chan.conn;
    c568:	6827      	ldr	r7, [r4, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    c56a:	f88d 8008 	strb.w	r8, [sp, #8]
    c56e:	f8ad 300a 	strh.w	r3, [sp, #10]
    c572:	f7ff fd65 	bl	c040 <bt_uuid_cmp>
    c576:	b198      	cbz	r0, c5a0 <read_group_cb+0x4e>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    c578:	f642 0301 	movw	r3, #10241	; 0x2801
    c57c:	a903      	add	r1, sp, #12
    c57e:	6830      	ldr	r0, [r6, #0]
    c580:	f88d 800c 	strb.w	r8, [sp, #12]
    c584:	f8ad 300e 	strh.w	r3, [sp, #14]
    c588:	f7ff fd5a 	bl	c040 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    c58c:	b140      	cbz	r0, c5a0 <read_group_cb+0x4e>
		if (data->group &&
    c58e:	692b      	ldr	r3, [r5, #16]
    c590:	b123      	cbz	r3, c59c <read_group_cb+0x4a>
		    attr->handle > sys_le16_to_cpu(data->group->end_handle)) {
    c592:	8a32      	ldrh	r2, [r6, #16]
		if (data->group &&
    c594:	8859      	ldrh	r1, [r3, #2]
    c596:	4291      	cmp	r1, r2
    c598:	d200      	bcs.n	c59c <read_group_cb+0x4a>
			data->group->end_handle = sys_cpu_to_le16(attr->handle);
    c59a:	805a      	strh	r2, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
    c59c:	2001      	movs	r0, #1
    c59e:	e012      	b.n	c5c6 <read_group_cb+0x74>
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    c5a0:	6869      	ldr	r1, [r5, #4]
    c5a2:	6830      	ldr	r0, [r6, #0]
    c5a4:	f7ff fd4c 	bl	c040 <bt_uuid_cmp>
    c5a8:	b110      	cbz	r0, c5b0 <read_group_cb+0x5e>
		data->group = NULL;
    c5aa:	2300      	movs	r3, #0
    c5ac:	612b      	str	r3, [r5, #16]
		return BT_GATT_ITER_CONTINUE;
    c5ae:	e7f5      	b.n	c59c <read_group_cb+0x4a>
	if (data->rsp->len &&
    c5b0:	68eb      	ldr	r3, [r5, #12]
    c5b2:	68a8      	ldr	r0, [r5, #8]
    c5b4:	781a      	ldrb	r2, [r3, #0]
    c5b6:	b14a      	cbz	r2, c5cc <read_group_cb+0x7a>
	    att->chan.tx.mtu - data->buf->len < data->rsp->len) {
    c5b8:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
    c5bc:	8981      	ldrh	r1, [r0, #12]
    c5be:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
    c5c0:	4293      	cmp	r3, r2
    c5c2:	da03      	bge.n	c5cc <read_group_cb+0x7a>
		return BT_GATT_ITER_STOP;
    c5c4:	2000      	movs	r0, #0
}
    c5c6:	b004      	add	sp, #16
    c5c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    c5cc:	2104      	movs	r1, #4
    c5ce:	3008      	adds	r0, #8
    c5d0:	f000 fcf4 	bl	cfbc <net_buf_simple_add>
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    c5d4:	8a33      	ldrh	r3, [r6, #16]
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    c5d6:	6128      	str	r0, [r5, #16]
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    c5d8:	8003      	strh	r3, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(attr->handle);
    c5da:	8043      	strh	r3, [r0, #2]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    c5dc:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
    c5e0:	2400      	movs	r4, #0
    c5e2:	68a9      	ldr	r1, [r5, #8]
    c5e4:	4638      	mov	r0, r7
    c5e6:	898a      	ldrh	r2, [r1, #12]
    c5e8:	6889      	ldr	r1, [r1, #8]
    c5ea:	1a9b      	subs	r3, r3, r2
    c5ec:	9400      	str	r4, [sp, #0]
    c5ee:	440a      	add	r2, r1
    c5f0:	f8d6 8004 	ldr.w	r8, [r6, #4]
    c5f4:	4631      	mov	r1, r6
    c5f6:	b29b      	uxth	r3, r3
    c5f8:	47c0      	blx	r8
	if (read < 0) {
    c5fa:	1e01      	subs	r1, r0, #0
    c5fc:	dbe2      	blt.n	c5c4 <read_group_cb+0x72>
	if (!data->rsp->len) {
    c5fe:	68ee      	ldr	r6, [r5, #12]
    c600:	68ab      	ldr	r3, [r5, #8]
    c602:	7830      	ldrb	r0, [r6, #0]
    c604:	1d0a      	adds	r2, r1, #4
    c606:	b928      	cbnz	r0, c614 <read_group_cb+0xc2>
		data->rsp->len = read + sizeof(*data->group);
    c608:	7032      	strb	r2, [r6, #0]
	net_buf_add(data->buf, read);
    c60a:	f103 0008 	add.w	r0, r3, #8
    c60e:	f000 fcd5 	bl	cfbc <net_buf_simple_add>
	return BT_GATT_ITER_CONTINUE;
    c612:	e7c3      	b.n	c59c <read_group_cb+0x4a>
	} else if (data->rsp->len != read + sizeof(*data->group)) {
    c614:	4290      	cmp	r0, r2
    c616:	d0f8      	beq.n	c60a <read_group_cb+0xb8>
		data->buf->len -= sizeof(*data->group);
    c618:	899a      	ldrh	r2, [r3, #12]
    c61a:	3a04      	subs	r2, #4
    c61c:	819a      	strh	r2, [r3, #12]
		return false;
    c61e:	e7d1      	b.n	c5c4 <read_group_cb+0x72>

0000c620 <read_type_cb>:
{
    c620:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att *att = data->att;
    c624:	680f      	ldr	r7, [r1, #0]
{
    c626:	4605      	mov	r5, r0
    c628:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    c62a:	6800      	ldr	r0, [r0, #0]
    c62c:	6849      	ldr	r1, [r1, #4]
	struct bt_conn *conn = att->chan.chan.conn;
    c62e:	f8d7 9000 	ldr.w	r9, [r7]
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    c632:	f7ff fd05 	bl	c040 <bt_uuid_cmp>
    c636:	4680      	mov	r8, r0
    c638:	2800      	cmp	r0, #0
    c63a:	d14c      	bne.n	c6d6 <read_type_cb+0xb6>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
    c63c:	2215      	movs	r2, #21
    c63e:	4629      	mov	r1, r5
    c640:	4648      	mov	r0, r9
    c642:	f000 fbc4 	bl	cdce <bt_gatt_check_perm>
    c646:	4604      	mov	r4, r0
    c648:	7530      	strb	r0, [r6, #20]
	if (data->err) {
    c64a:	b148      	cbz	r0, c660 <read_type_cb+0x40>
		if (data->rsp->len) {
    c64c:	68f3      	ldr	r3, [r6, #12]
    c64e:	781c      	ldrb	r4, [r3, #0]
    c650:	b114      	cbz	r4, c658 <read_type_cb+0x38>
		return BT_GATT_ITER_STOP;
    c652:	4644      	mov	r4, r8
			data->err = 0x00;
    c654:	f886 8014 	strb.w	r8, [r6, #20]
}
    c658:	4620      	mov	r0, r4
    c65a:	b003      	add	sp, #12
    c65c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data->item = net_buf_add(data->buf, sizeof(*data->item));
    c660:	68b0      	ldr	r0, [r6, #8]
    c662:	2102      	movs	r1, #2
    c664:	3008      	adds	r0, #8
    c666:	f000 fca9 	bl	cfbc <net_buf_simple_add>
	data->item->handle = sys_cpu_to_le16(attr->handle);
    c66a:	8a2b      	ldrh	r3, [r5, #16]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    c66c:	68b1      	ldr	r1, [r6, #8]
	data->item = net_buf_add(data->buf, sizeof(*data->item));
    c66e:	6130      	str	r0, [r6, #16]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    c670:	898a      	ldrh	r2, [r1, #12]
	data->item->handle = sys_cpu_to_le16(attr->handle);
    c672:	8003      	strh	r3, [r0, #0]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    c674:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
    c678:	6889      	ldr	r1, [r1, #8]
    c67a:	1a9b      	subs	r3, r3, r2
    c67c:	9400      	str	r4, [sp, #0]
    c67e:	440a      	add	r2, r1
    c680:	f8d5 8004 	ldr.w	r8, [r5, #4]
    c684:	4629      	mov	r1, r5
    c686:	b29b      	uxth	r3, r3
    c688:	4648      	mov	r0, r9
    c68a:	47c0      	blx	r8
	if (read < 0) {
    c68c:	1e01      	subs	r1, r0, #0
    c68e:	da07      	bge.n	c6a0 <read_type_cb+0x80>
	if (err < 0 && err >= -0xff) {
    c690:	f111 0fff 	cmn.w	r1, #255	; 0xff
	return BT_ATT_ERR_UNLIKELY;
    c694:	bf32      	itee	cc
    c696:	210e      	movcc	r1, #14
		return -err;
    c698:	4249      	negcs	r1, r1
    c69a:	b2c9      	uxtbcs	r1, r1
		data->err = err_to_att(read);
    c69c:	7531      	strb	r1, [r6, #20]
		return BT_GATT_ITER_STOP;
    c69e:	e7db      	b.n	c658 <read_type_cb+0x38>
	if (!data->rsp->len) {
    c6a0:	68f5      	ldr	r5, [r6, #12]
    c6a2:	68b0      	ldr	r0, [r6, #8]
    c6a4:	782a      	ldrb	r2, [r5, #0]
    c6a6:	1c8b      	adds	r3, r1, #2
    c6a8:	b97a      	cbnz	r2, c6ca <read_type_cb+0xaa>
		data->rsp->len = read + sizeof(*data->item);
    c6aa:	702b      	strb	r3, [r5, #0]
	net_buf_add(data->buf, read);
    c6ac:	3008      	adds	r0, #8
    c6ae:	f000 fc85 	bl	cfbc <net_buf_simple_add>
	return att->chan.tx.mtu - data->buf->len > data->rsp->len ?
    c6b2:	68b3      	ldr	r3, [r6, #8]
    c6b4:	f8b7 4042 	ldrh.w	r4, [r7, #66]	; 0x42
    c6b8:	899b      	ldrh	r3, [r3, #12]
    c6ba:	1ae4      	subs	r4, r4, r3
    c6bc:	68f3      	ldr	r3, [r6, #12]
    c6be:	781b      	ldrb	r3, [r3, #0]
	       BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    c6c0:	429c      	cmp	r4, r3
    c6c2:	bfd4      	ite	le
    c6c4:	2400      	movle	r4, #0
    c6c6:	2401      	movgt	r4, #1
    c6c8:	e7c6      	b.n	c658 <read_type_cb+0x38>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
    c6ca:	429a      	cmp	r2, r3
    c6cc:	d0ee      	beq.n	c6ac <read_type_cb+0x8c>
		data->buf->len -= sizeof(*data->item);
    c6ce:	8983      	ldrh	r3, [r0, #12]
    c6d0:	3b02      	subs	r3, #2
    c6d2:	8183      	strh	r3, [r0, #12]
		return BT_GATT_ITER_STOP;
    c6d4:	e7c0      	b.n	c658 <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
    c6d6:	2401      	movs	r4, #1
    c6d8:	e7be      	b.n	c658 <read_type_cb+0x38>

0000c6da <find_info_cb>:
	if (!data->rsp) {
    c6da:	688b      	ldr	r3, [r1, #8]
{
    c6dc:	b570      	push	{r4, r5, r6, lr}
    c6de:	4605      	mov	r5, r0
    c6e0:	460c      	mov	r4, r1
	struct bt_att *att = data->att;
    c6e2:	680e      	ldr	r6, [r1, #0]
	if (!data->rsp) {
    c6e4:	b963      	cbnz	r3, c700 <find_info_cb+0x26>
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    c6e6:	6848      	ldr	r0, [r1, #4]
    c6e8:	2101      	movs	r1, #1
    c6ea:	3008      	adds	r0, #8
    c6ec:	f000 fc66 	bl	cfbc <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
    c6f0:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    c6f2:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
    c6f4:	781b      	ldrb	r3, [r3, #0]
    c6f6:	2b00      	cmp	r3, #0
    c6f8:	bf0c      	ite	eq
    c6fa:	2301      	moveq	r3, #1
    c6fc:	2302      	movne	r3, #2
    c6fe:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
    c700:	68a3      	ldr	r3, [r4, #8]
    c702:	781b      	ldrb	r3, [r3, #0]
    c704:	2b01      	cmp	r3, #1
    c706:	d003      	beq.n	c710 <find_info_cb+0x36>
    c708:	2b02      	cmp	r3, #2
    c70a:	d01a      	beq.n	c742 <find_info_cb+0x68>
			return BT_GATT_ITER_STOP;
    c70c:	2000      	movs	r0, #0
    c70e:	e017      	b.n	c740 <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
    c710:	682b      	ldr	r3, [r5, #0]
    c712:	781b      	ldrb	r3, [r3, #0]
    c714:	2b00      	cmp	r3, #0
    c716:	d1f9      	bne.n	c70c <find_info_cb+0x32>
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
    c718:	6860      	ldr	r0, [r4, #4]
    c71a:	2104      	movs	r1, #4
    c71c:	3008      	adds	r0, #8
    c71e:	f000 fc4d 	bl	cfbc <net_buf_simple_add>
		data->info16->handle = sys_cpu_to_le16(attr->handle);
    c722:	8a2b      	ldrh	r3, [r5, #16]
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
    c724:	60e0      	str	r0, [r4, #12]
		data->info16->handle = sys_cpu_to_le16(attr->handle);
    c726:	8003      	strh	r3, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
    c728:	682b      	ldr	r3, [r5, #0]
    c72a:	885b      	ldrh	r3, [r3, #2]
    c72c:	8043      	strh	r3, [r0, #2]
		if (att->chan.tx.mtu - data->buf->len >
    c72e:	6863      	ldr	r3, [r4, #4]
    c730:	f8b6 0042 	ldrh.w	r0, [r6, #66]	; 0x42
    c734:	899b      	ldrh	r3, [r3, #12]
    c736:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
    c738:	2804      	cmp	r0, #4
    c73a:	bf94      	ite	ls
    c73c:	2000      	movls	r0, #0
    c73e:	2001      	movhi	r0, #1
}
    c740:	bd70      	pop	{r4, r5, r6, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
    c742:	682b      	ldr	r3, [r5, #0]
    c744:	781b      	ldrb	r3, [r3, #0]
    c746:	2b02      	cmp	r3, #2
    c748:	d1e0      	bne.n	c70c <find_info_cb+0x32>
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
    c74a:	6860      	ldr	r0, [r4, #4]
    c74c:	2112      	movs	r1, #18
    c74e:	3008      	adds	r0, #8
    c750:	f000 fc34 	bl	cfbc <net_buf_simple_add>
		data->info128->handle = sys_cpu_to_le16(attr->handle);
    c754:	8a2b      	ldrh	r3, [r5, #16]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
    c756:	6829      	ldr	r1, [r5, #0]
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
    c758:	60e0      	str	r0, [r4, #12]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
    c75a:	2210      	movs	r2, #16
		data->info128->handle = sys_cpu_to_le16(attr->handle);
    c75c:	f820 3b02 	strh.w	r3, [r0], #2
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
    c760:	3101      	adds	r1, #1
    c762:	f7ff fb9c 	bl	be9e <memcpy>
		if (att->chan.tx.mtu - data->buf->len >
    c766:	6863      	ldr	r3, [r4, #4]
    c768:	f8b6 0042 	ldrh.w	r0, [r6, #66]	; 0x42
    c76c:	899b      	ldrh	r3, [r3, #12]
    c76e:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
    c770:	2812      	cmp	r0, #18
    c772:	e7e2      	b.n	c73a <find_info_cb+0x60>

0000c774 <att_exec_write_req>:
    c774:	2006      	movs	r0, #6
    c776:	4770      	bx	lr

0000c778 <att_pdu_sent>:
{
    c778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    c77c:	2104      	movs	r1, #4
{
    c77e:	4680      	mov	r8, r0
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    c780:	f7ff fe77 	bl	c472 <bt_l2cap_le_lookup_tx_cid>
    c784:	4606      	mov	r6, r0
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
    c786:	f100 07d8 	add.w	r7, r0, #216	; 0xd8
    c78a:	2100      	movs	r1, #0
    c78c:	4638      	mov	r0, r7
    c78e:	f000 fbe7 	bl	cf60 <net_buf_get>
    c792:	4604      	mov	r4, r0
    c794:	b928      	cbnz	r0, c7a2 <att_pdu_sent+0x2a>
	z_impl_k_sem_give(sem);
    c796:	f106 00c0 	add.w	r0, r6, #192	; 0xc0
}
    c79a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    c79e:	f7fd bb71 	b.w	9e84 <z_impl_k_sem_give>
		if (att->req && att->req->buf == buf) {
    c7a2:	f8d6 5094 	ldr.w	r5, [r6, #148]	; 0x94
    c7a6:	b14d      	cbz	r5, c7bc <att_pdu_sent+0x44>
    c7a8:	692b      	ldr	r3, [r5, #16]
    c7aa:	42a3      	cmp	r3, r4
    c7ac:	d106      	bne.n	c7bc <att_pdu_sent+0x44>
	state->offset = net_buf_simple_headroom(buf);
    c7ae:	f104 0008 	add.w	r0, r4, #8
    c7b2:	f000 fc43 	bl	d03c <net_buf_simple_headroom>
	state->len = buf->len;
    c7b6:	89a3      	ldrh	r3, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
    c7b8:	81a8      	strh	r0, [r5, #12]
	state->len = buf->len;
    c7ba:	81eb      	strh	r3, [r5, #14]
		if (!att_send(conn, buf, NULL, NULL)) {
    c7bc:	2300      	movs	r3, #0
    c7be:	4621      	mov	r1, r4
    c7c0:	461a      	mov	r2, r3
    c7c2:	4640      	mov	r0, r8
    c7c4:	f7fa f918 	bl	69f8 <att_send>
    c7c8:	2800      	cmp	r0, #0
    c7ca:	d1de      	bne.n	c78a <att_pdu_sent+0x12>
}
    c7cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000c7d0 <att_cfm_sent>:
{
    c7d0:	b538      	push	{r3, r4, r5, lr}
    c7d2:	460d      	mov	r5, r1
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    c7d4:	2104      	movs	r1, #4
{
    c7d6:	4604      	mov	r4, r0
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    c7d8:	f7ff fe4b 	bl	c472 <bt_l2cap_le_lookup_tx_cid>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    c7dc:	3090      	adds	r0, #144	; 0x90
    c7de:	e8d0 3fef 	ldaex	r3, [r0]
    c7e2:	f023 0302 	bic.w	r3, r3, #2
    c7e6:	e8c0 3fe2 	stlex	r2, r3, [r0]
    c7ea:	2a00      	cmp	r2, #0
    c7ec:	d1f7      	bne.n	c7de <att_cfm_sent+0xe>
	att_pdu_sent(conn, user_data);
    c7ee:	4629      	mov	r1, r5
    c7f0:	4620      	mov	r0, r4
}
    c7f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	att_pdu_sent(conn, user_data);
    c7f6:	f7ff bfbf 	b.w	c778 <att_pdu_sent>

0000c7fa <att_rsp_sent>:
{
    c7fa:	b538      	push	{r3, r4, r5, lr}
    c7fc:	460d      	mov	r5, r1
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    c7fe:	2104      	movs	r1, #4
{
    c800:	4604      	mov	r4, r0
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    c802:	f7ff fe36 	bl	c472 <bt_l2cap_le_lookup_tx_cid>
    c806:	3090      	adds	r0, #144	; 0x90
    c808:	e8d0 3fef 	ldaex	r3, [r0]
    c80c:	f023 0301 	bic.w	r3, r3, #1
    c810:	e8c0 3fe2 	stlex	r2, r3, [r0]
    c814:	2a00      	cmp	r2, #0
    c816:	d1f7      	bne.n	c808 <att_rsp_sent+0xe>
	att_pdu_sent(conn, user_data);
    c818:	4629      	mov	r1, r5
    c81a:	4620      	mov	r0, r4
}
    c81c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	att_pdu_sent(conn, user_data);
    c820:	f7ff bfaa 	b.w	c778 <att_pdu_sent>

0000c824 <write_cb>:
{
    c824:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    c826:	460c      	mov	r4, r1
    c828:	4606      	mov	r6, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
    c82a:	4601      	mov	r1, r0
    c82c:	222a      	movs	r2, #42	; 0x2a
    c82e:	6820      	ldr	r0, [r4, #0]
    c830:	f000 facd 	bl	cdce <bt_gatt_check_perm>
    c834:	4605      	mov	r5, r0
    c836:	7520      	strb	r0, [r4, #20]
	if (data->err) {
    c838:	bb00      	cbnz	r0, c87c <write_cb+0x58>
	if (!data->req) {
    c83a:	7a23      	ldrb	r3, [r4, #8]
	write = attr->write(data->conn, attr, data->value, data->len,
    c83c:	68b7      	ldr	r7, [r6, #8]
	if (!data->req) {
    c83e:	2b00      	cmp	r3, #0
		flags |= BT_GATT_WRITE_FLAG_CMD;
    c840:	bf14      	ite	ne
    c842:	2300      	movne	r3, #0
    c844:	2302      	moveq	r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
    c846:	9301      	str	r3, [sp, #4]
    c848:	8a63      	ldrh	r3, [r4, #18]
    c84a:	68e2      	ldr	r2, [r4, #12]
    c84c:	9300      	str	r3, [sp, #0]
    c84e:	4631      	mov	r1, r6
    c850:	8a23      	ldrh	r3, [r4, #16]
    c852:	6820      	ldr	r0, [r4, #0]
    c854:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
    c856:	2800      	cmp	r0, #0
    c858:	db05      	blt.n	c866 <write_cb+0x42>
    c85a:	8a23      	ldrh	r3, [r4, #16]
    c85c:	4298      	cmp	r0, r3
    c85e:	d10b      	bne.n	c878 <write_cb+0x54>
	data->err = 0U;
    c860:	7525      	strb	r5, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
    c862:	2501      	movs	r5, #1
    c864:	e005      	b.n	c872 <write_cb+0x4e>
	if (err < 0 && err >= -0xff) {
    c866:	f110 0fff 	cmn.w	r0, #255	; 0xff
    c86a:	d305      	bcc.n	c878 <write_cb+0x54>
		return -err;
    c86c:	4240      	negs	r0, r0
    c86e:	b2c0      	uxtb	r0, r0
		data->err = err_to_att(write);
    c870:	7520      	strb	r0, [r4, #20]
}
    c872:	4628      	mov	r0, r5
    c874:	b003      	add	sp, #12
    c876:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return BT_ATT_ERR_UNLIKELY;
    c878:	200e      	movs	r0, #14
    c87a:	e7f9      	b.n	c870 <write_cb+0x4c>
		return BT_GATT_ITER_STOP;
    c87c:	2500      	movs	r5, #0
    c87e:	e7f8      	b.n	c872 <write_cb+0x4e>

0000c880 <read_cb>:
{
    c880:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    c884:	4606      	mov	r6, r0
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    c886:	6888      	ldr	r0, [r1, #8]
	struct bt_att *att = data->att;
    c888:	f8d1 9000 	ldr.w	r9, [r1]
{
    c88c:	460c      	mov	r4, r1
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    c88e:	3008      	adds	r0, #8
    c890:	2100      	movs	r1, #0
	struct bt_conn *conn = att->chan.chan.conn;
    c892:	f8d9 8000 	ldr.w	r8, [r9]
	data->err = 0x00;
    c896:	2700      	movs	r7, #0
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    c898:	f000 fb90 	bl	cfbc <net_buf_simple_add>
	data->err = 0x00;
    c89c:	7427      	strb	r7, [r4, #16]
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    c89e:	60e0      	str	r0, [r4, #12]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
    c8a0:	2215      	movs	r2, #21
    c8a2:	4631      	mov	r1, r6
    c8a4:	4640      	mov	r0, r8
    c8a6:	f000 fa92 	bl	cdce <bt_gatt_check_perm>
    c8aa:	4605      	mov	r5, r0
    c8ac:	7420      	strb	r0, [r4, #16]
	if (data->err) {
    c8ae:	bb00      	cbnz	r0, c8f2 <read_cb+0x72>
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    c8b0:	68a1      	ldr	r1, [r4, #8]
    c8b2:	f8b9 3042 	ldrh.w	r3, [r9, #66]	; 0x42
    c8b6:	898a      	ldrh	r2, [r1, #12]
    c8b8:	88a0      	ldrh	r0, [r4, #4]
    c8ba:	6889      	ldr	r1, [r1, #8]
    c8bc:	1a9b      	subs	r3, r3, r2
    c8be:	9000      	str	r0, [sp, #0]
    c8c0:	440a      	add	r2, r1
    c8c2:	6877      	ldr	r7, [r6, #4]
    c8c4:	4631      	mov	r1, r6
    c8c6:	b29b      	uxth	r3, r3
    c8c8:	4640      	mov	r0, r8
    c8ca:	47b8      	blx	r7
	if (read < 0) {
    c8cc:	1e01      	subs	r1, r0, #0
    c8ce:	da0a      	bge.n	c8e6 <read_cb+0x66>
	if (err < 0 && err >= -0xff) {
    c8d0:	f111 0fff 	cmn.w	r1, #255	; 0xff
	return BT_ATT_ERR_UNLIKELY;
    c8d4:	bf32      	itee	cc
    c8d6:	210e      	movcc	r1, #14
		return -err;
    c8d8:	4249      	negcs	r1, r1
    c8da:	b2c9      	uxtbcs	r1, r1
		data->err = err_to_att(read);
    c8dc:	7421      	strb	r1, [r4, #16]
}
    c8de:	4628      	mov	r0, r5
    c8e0:	b003      	add	sp, #12
    c8e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	net_buf_add(data->buf, read);
    c8e6:	68a0      	ldr	r0, [r4, #8]
	return BT_GATT_ITER_CONTINUE;
    c8e8:	2501      	movs	r5, #1
	net_buf_add(data->buf, read);
    c8ea:	3008      	adds	r0, #8
    c8ec:	f000 fb66 	bl	cfbc <net_buf_simple_add>
	return BT_GATT_ITER_CONTINUE;
    c8f0:	e7f5      	b.n	c8de <read_cb+0x5e>
		return BT_GATT_ITER_STOP;
    c8f2:	463d      	mov	r5, r7
    c8f4:	e7f3      	b.n	c8de <read_cb+0x5e>

0000c8f6 <att_read_blob_req>:
{
    c8f6:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
    c8f8:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(att, BT_ATT_OP_READ_BLOB_REQ,
    c8fa:	210c      	movs	r1, #12
    c8fc:	8813      	ldrh	r3, [r2, #0]
    c8fe:	8852      	ldrh	r2, [r2, #2]
    c900:	9200      	str	r2, [sp, #0]
    c902:	220d      	movs	r2, #13
    c904:	f7fa fbee 	bl	70e4 <att_read_rsp>
}
    c908:	b003      	add	sp, #12
    c90a:	f85d fb04 	ldr.w	pc, [sp], #4

0000c90e <att_read_req>:
{
    c90e:	b507      	push	{r0, r1, r2, lr}
	return att_read_rsp(att, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
    c910:	2200      	movs	r2, #0
	handle = sys_le16_to_cpu(req->handle);
    c912:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(att, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
    c914:	210a      	movs	r1, #10
    c916:	881b      	ldrh	r3, [r3, #0]
    c918:	9200      	str	r2, [sp, #0]
    c91a:	220b      	movs	r2, #11
    c91c:	f7fa fbe2 	bl	70e4 <att_read_rsp>
}
    c920:	b003      	add	sp, #12
    c922:	f85d fb04 	ldr.w	pc, [sp], #4

0000c926 <bt_att_init>:
	bt_gatt_init();
    c926:	f7fb b93f 	b.w	7ba8 <bt_gatt_init>

0000c92a <att_req_destroy>:
{
    c92a:	b510      	push	{r4, lr}
    c92c:	4604      	mov	r4, r0
	if (req->buf) {
    c92e:	6900      	ldr	r0, [r0, #16]
    c930:	b108      	cbz	r0, c936 <att_req_destroy+0xc>
		net_buf_unref(req->buf);
    c932:	f7fb fd31 	bl	8398 <net_buf_unref>
	if (req->destroy) {
    c936:	68a3      	ldr	r3, [r4, #8]
    c938:	b10b      	cbz	r3, c93e <att_req_destroy+0x14>
		req->destroy(req);
    c93a:	4620      	mov	r0, r4
    c93c:	4798      	blx	r3
	bt_att_req_free(req);
    c93e:	4620      	mov	r0, r4
}
    c940:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_req_free(req);
    c944:	f7fa bda6 	b.w	7494 <bt_att_req_free>

0000c948 <att_confirm>:
	return att_handle_rsp(att, buf->data, buf->len, 0);
    c948:	898a      	ldrh	r2, [r1, #12]
    c94a:	2300      	movs	r3, #0
    c94c:	6889      	ldr	r1, [r1, #8]
    c94e:	f7fa bdad 	b.w	74ac <att_handle_rsp>

0000c952 <att_reset>:
{
    c952:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    c954:	4604      	mov	r4, r0
	while ((buf = k_fifo_get(&att->tx_queue, K_NO_WAIT))) {
    c956:	f100 05d8 	add.w	r5, r0, #216	; 0xd8
	return z_impl_k_queue_get(queue, timeout);
    c95a:	2100      	movs	r1, #0
    c95c:	4628      	mov	r0, r5
    c95e:	f001 f9a6 	bl	dcae <z_impl_k_queue_get>
    c962:	b9e0      	cbnz	r0, c99e <att_reset+0x4c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c964:	f104 0390 	add.w	r3, r4, #144	; 0x90
    c968:	e8d3 2fef 	ldaex	r2, [r3]
    c96c:	f042 0204 	orr.w	r2, r2, #4
    c970:	e8c3 2fe1 	stlex	r1, r2, [r3]
    c974:	2900      	cmp	r1, #0
    c976:	d1f7      	bne.n	c968 <att_reset+0x16>
    c978:	2505      	movs	r5, #5
		k_sem_give(&att->tx_sem);
    c97a:	f104 06c0 	add.w	r6, r4, #192	; 0xc0
	z_impl_k_sem_give(sem);
    c97e:	4630      	mov	r0, r6
    c980:	f7fd fa80 	bl	9e84 <z_impl_k_sem_give>
	for (i = 0; i < CONFIG_BT_ATT_TX_MAX; i++) {
    c984:	3d01      	subs	r5, #1
    c986:	d1fa      	bne.n	c97e <att_reset+0x2c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    c988:	f8d4 5098 	ldr.w	r5, [r4, #152]	; 0x98
    c98c:	b955      	cbnz	r5, c9a4 <att_reset+0x52>
	list->head = NULL;
    c98e:	2200      	movs	r2, #0
	if (!att->req) {
    c990:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
	list->tail = NULL;
    c994:	e9c4 2226 	strd	r2, r2, [r4, #152]	; 0x98
    c998:	b9ab      	cbnz	r3, c9c6 <att_reset+0x74>
}
    c99a:	b003      	add	sp, #12
    c99c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		net_buf_unref(buf);
    c99e:	f7fb fcfb 	bl	8398 <net_buf_unref>
    c9a2:	e7da      	b.n	c95a <att_reset+0x8>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    c9a4:	682e      	ldr	r6, [r5, #0]
		if (req->func) {
    c9a6:	686f      	ldr	r7, [r5, #4]
    c9a8:	b12f      	cbz	r7, c9b6 <att_reset+0x64>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0, req);
    c9aa:	2300      	movs	r3, #0
    c9ac:	9500      	str	r5, [sp, #0]
    c9ae:	461a      	mov	r2, r3
    c9b0:	210e      	movs	r1, #14
    c9b2:	4618      	mov	r0, r3
    c9b4:	47b8      	blx	r7
		att_req_destroy(req);
    c9b6:	4628      	mov	r0, r5
    c9b8:	f7ff ffb7 	bl	c92a <att_req_destroy>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    c9bc:	2e00      	cmp	r6, #0
    c9be:	d0e6      	beq.n	c98e <att_reset+0x3c>
    c9c0:	4635      	mov	r5, r6
    c9c2:	6836      	ldr	r6, [r6, #0]
    c9c4:	e7ef      	b.n	c9a6 <att_reset+0x54>
	att_handle_rsp(att, NULL, 0, BT_ATT_ERR_UNLIKELY);
    c9c6:	230e      	movs	r3, #14
    c9c8:	4611      	mov	r1, r2
    c9ca:	4620      	mov	r0, r4
}
    c9cc:	b003      	add	sp, #12
    c9ce:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	att_handle_rsp(att, NULL, 0, BT_ATT_ERR_UNLIKELY);
    c9d2:	f7fa bd6b 	b.w	74ac <att_handle_rsp>

0000c9d6 <bt_att_disconnected>:
{
    c9d6:	b510      	push	{r4, lr}
    c9d8:	4604      	mov	r4, r0
	att_reset(att);
    c9da:	f7ff ffba 	bl	c952 <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
    c9de:	6820      	ldr	r0, [r4, #0]
}
    c9e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_gatt_disconnected(ch->chan.conn);
    c9e4:	f7fb bbe0 	b.w	81a8 <bt_gatt_disconnected>

0000c9e8 <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf, bt_conn_tx_cb_t cb,
		void *user_data)
{
    c9e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c9ec:	4607      	mov	r7, r0
    c9ee:	460d      	mov	r5, r1
    c9f0:	4614      	mov	r4, r2
    c9f2:	4698      	mov	r8, r3
	int err;

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(buf);

	att = att_chan_get(conn);
    c9f4:	f7fa f87c 	bl	6af0 <att_chan_get>
	if (!att) {
    c9f8:	4606      	mov	r6, r0
    c9fa:	b938      	cbnz	r0, ca0c <bt_att_send+0x24>
		net_buf_unref(buf);
    c9fc:	4628      	mov	r0, r5
    c9fe:	f7fb fccb 	bl	8398 <net_buf_unref>
		return -ENOTCONN;
    ca02:	f06f 0538 	mvn.w	r5, #56	; 0x38
		}
		return err;
	}

	return 0;
}
    ca06:	4628      	mov	r0, r5
    ca08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!cb) {
    ca0c:	b964      	cbnz	r4, ca28 <bt_att_send+0x40>
	return z_impl_k_sem_take(sem, timeout);
    ca0e:	4621      	mov	r1, r4
    ca10:	30c0      	adds	r0, #192	; 0xc0
    ca12:	f7fd fa63 	bl	9edc <z_impl_k_sem_take>
		if (k_sem_take(&att->tx_sem, K_NO_WAIT) < 0) {
    ca16:	2800      	cmp	r0, #0
    ca18:	da06      	bge.n	ca28 <bt_att_send+0x40>
			k_fifo_put(&att->tx_queue, buf);
    ca1a:	4629      	mov	r1, r5
    ca1c:	f106 00d8 	add.w	r0, r6, #216	; 0xd8
    ca20:	f001 f917 	bl	dc52 <k_queue_append>
			return 0;
    ca24:	4625      	mov	r5, r4
    ca26:	e7ee      	b.n	ca06 <bt_att_send+0x1e>
	err = att_send(conn, buf, cb, user_data);
    ca28:	4629      	mov	r1, r5
    ca2a:	4643      	mov	r3, r8
    ca2c:	4622      	mov	r2, r4
    ca2e:	4638      	mov	r0, r7
    ca30:	f7f9 ffe2 	bl	69f8 <att_send>
	if (err) {
    ca34:	4605      	mov	r5, r0
    ca36:	2800      	cmp	r0, #0
    ca38:	d0e5      	beq.n	ca06 <bt_att_send+0x1e>
		if (!cb) {
    ca3a:	2c00      	cmp	r4, #0
    ca3c:	d1e3      	bne.n	ca06 <bt_att_send+0x1e>
	z_impl_k_sem_give(sem);
    ca3e:	f106 00c0 	add.w	r0, r6, #192	; 0xc0
    ca42:	f7fd fa1f 	bl	9e84 <z_impl_k_sem_give>
    ca46:	e7de      	b.n	ca06 <bt_att_send+0x1e>

0000ca48 <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
    ca48:	b538      	push	{r3, r4, r5, lr}
    ca4a:	460c      	mov	r4, r1
	BT_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(req);

	att = att_chan_get(conn);
    ca4c:	f7fa f850 	bl	6af0 <att_chan_get>
	if (!att) {
    ca50:	4605      	mov	r5, r0
    ca52:	b930      	cbnz	r0, ca62 <bt_att_req_send+0x1a>
		net_buf_unref(req->buf);
    ca54:	6920      	ldr	r0, [r4, #16]
    ca56:	f7fb fc9f 	bl	8398 <net_buf_unref>
		req->buf = NULL;
		return -ENOTCONN;
    ca5a:	f06f 0038 	mvn.w	r0, #56	; 0x38
		req->buf = NULL;
    ca5e:	6125      	str	r5, [r4, #16]
		sys_slist_append(&att->reqs, &req->node);
		return 0;
	}

	return att_send_req(att, req);
}
    ca60:	bd38      	pop	{r3, r4, r5, pc}
	if (att->req) {
    ca62:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
    ca66:	b163      	cbz	r3, ca82 <bt_att_req_send+0x3a>
	parent->next = child;
    ca68:	2000      	movs	r0, #0
    ca6a:	6020      	str	r0, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
    ca6c:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
    ca70:	b91b      	cbnz	r3, ca7a <bt_att_req_send+0x32>
	list->head = node;
    ca72:	e9c5 4426 	strd	r4, r4, [r5, #152]	; 0x98
		return 0;
    ca76:	4618      	mov	r0, r3
    ca78:	e7f2      	b.n	ca60 <bt_att_req_send+0x18>
	parent->next = child;
    ca7a:	601c      	str	r4, [r3, #0]
	list->tail = node;
    ca7c:	f8c5 409c 	str.w	r4, [r5, #156]	; 0x9c
    ca80:	e7ee      	b.n	ca60 <bt_att_req_send+0x18>
	return att_send_req(att, req);
    ca82:	4621      	mov	r1, r4
}
    ca84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return att_send_req(att, req);
    ca88:	f7fa b890 	b.w	6bac <att_send_req>

0000ca8c <find_next>:
	*next = (struct bt_gatt_attr *)attr;
    ca8c:	6008      	str	r0, [r1, #0]
}
    ca8e:	2000      	movs	r0, #0
    ca90:	4770      	bx	lr

0000ca92 <gatt_ccc_changed>:
{
    ca92:	460b      	mov	r3, r1
		if (ccc->cfg[i].value > value) {
    ca94:	8909      	ldrh	r1, [r1, #8]
	if (value != ccc->value) {
    ca96:	895a      	ldrh	r2, [r3, #10]
    ca98:	428a      	cmp	r2, r1
    ca9a:	d003      	beq.n	caa4 <gatt_ccc_changed+0x12>
		ccc->value = value;
    ca9c:	8159      	strh	r1, [r3, #10]
		if (ccc->cfg_changed) {
    ca9e:	68db      	ldr	r3, [r3, #12]
    caa0:	b103      	cbz	r3, caa4 <gatt_ccc_changed+0x12>
			ccc->cfg_changed(attr, value);
    caa2:	4718      	bx	r3
}
    caa4:	4770      	bx	lr

0000caa6 <gatt_indicate_rsp>:
{
    caa6:	b410      	push	{r4}
    caa8:	9b01      	ldr	r3, [sp, #4]
	params->func(conn, params->attr, err);
    caaa:	460a      	mov	r2, r1
    caac:	689c      	ldr	r4, [r3, #8]
    caae:	6859      	ldr	r1, [r3, #4]
    cab0:	4623      	mov	r3, r4
}
    cab2:	bc10      	pop	{r4}
	params->func(conn, params->attr, err);
    cab4:	4718      	bx	r3

0000cab6 <gen_hash_m>:
{
    cab6:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
    cab8:	6807      	ldr	r7, [r0, #0]
{
    caba:	b089      	sub	sp, #36	; 0x24
	if (attr->uuid->type != BT_UUID_TYPE_16)
    cabc:	783d      	ldrb	r5, [r7, #0]
{
    cabe:	4606      	mov	r6, r0
    cac0:	460c      	mov	r4, r1
	if (attr->uuid->type != BT_UUID_TYPE_16)
    cac2:	b10d      	cbz	r5, cac8 <gen_hash_m+0x12>
		return BT_GATT_ITER_CONTINUE;
    cac4:	2501      	movs	r5, #1
    cac6:	e015      	b.n	caf4 <gen_hash_m+0x3e>
	switch (u16->val) {
    cac8:	887b      	ldrh	r3, [r7, #2]
    caca:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
    cace:	d004      	beq.n	cada <gen_hash_m+0x24>
    cad0:	d813      	bhi.n	cafa <gen_hash_m+0x44>
    cad2:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
    cad6:	2b03      	cmp	r3, #3
    cad8:	d8f4      	bhi.n	cac4 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(attr->handle);
    cada:	8a33      	ldrh	r3, [r6, #16]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
    cadc:	2202      	movs	r2, #2
    cade:	f10d 010e 	add.w	r1, sp, #14
    cae2:	4620      	mov	r0, r4
		value = sys_cpu_to_le16(attr->handle);
    cae4:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
    cae8:	f7fe fa42 	bl	af70 <tc_cmac_update>
    caec:	b9d8      	cbnz	r0, cb26 <gen_hash_m+0x70>
			state->err = -EINVAL;
    caee:	f06f 0315 	mvn.w	r3, #21
    caf2:	65a3      	str	r3, [r4, #88]	; 0x58
}
    caf4:	4628      	mov	r0, r5
    caf6:	b009      	add	sp, #36	; 0x24
    caf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
    cafa:	f642 1205 	movw	r2, #10501	; 0x2905
    cafe:	4293      	cmp	r3, r2
    cb00:	d8e0      	bhi.n	cac4 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(attr->handle);
    cb02:	8a03      	ldrh	r3, [r0, #16]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
    cb04:	2202      	movs	r2, #2
    cb06:	f10d 010e 	add.w	r1, sp, #14
    cb0a:	4620      	mov	r0, r4
		value = sys_cpu_to_le16(attr->handle);
    cb0c:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
    cb10:	f7fe fa2e 	bl	af70 <tc_cmac_update>
    cb14:	2800      	cmp	r0, #0
    cb16:	d0ea      	beq.n	caee <gen_hash_m+0x38>
		value = sys_cpu_to_le16(u16->val);
    cb18:	887b      	ldrh	r3, [r7, #2]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
    cb1a:	2202      	movs	r2, #2
		value = sys_cpu_to_le16(u16->val);
    cb1c:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
    cb20:	f10d 010e 	add.w	r1, sp, #14
    cb24:	e017      	b.n	cb56 <gen_hash_m+0xa0>
		value = sys_cpu_to_le16(u16->val);
    cb26:	887b      	ldrh	r3, [r7, #2]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
    cb28:	2202      	movs	r2, #2
    cb2a:	f10d 010e 	add.w	r1, sp, #14
    cb2e:	4620      	mov	r0, r4
		value = sys_cpu_to_le16(u16->val);
    cb30:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
    cb34:	f7fe fa1c 	bl	af70 <tc_cmac_update>
    cb38:	2800      	cmp	r0, #0
    cb3a:	d0d8      	beq.n	caee <gen_hash_m+0x38>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
    cb3c:	2000      	movs	r0, #0
    cb3e:	2310      	movs	r3, #16
    cb40:	9000      	str	r0, [sp, #0]
    cb42:	eb0d 0203 	add.w	r2, sp, r3
    cb46:	6877      	ldr	r7, [r6, #4]
    cb48:	4631      	mov	r1, r6
    cb4a:	47b8      	blx	r7
		if (len < 0) {
    cb4c:	1e02      	subs	r2, r0, #0
    cb4e:	da01      	bge.n	cb54 <gen_hash_m+0x9e>
			state->err = len;
    cb50:	65a2      	str	r2, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
    cb52:	e7cf      	b.n	caf4 <gen_hash_m+0x3e>
		if (tc_cmac_update(&state->state, data, len) ==
    cb54:	a904      	add	r1, sp, #16
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
    cb56:	4620      	mov	r0, r4
    cb58:	f7fe fa0a 	bl	af70 <tc_cmac_update>
    cb5c:	2800      	cmp	r0, #0
    cb5e:	d1b1      	bne.n	cac4 <gen_hash_m+0xe>
    cb60:	e7c5      	b.n	caee <gen_hash_m+0x38>

0000cb62 <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
    cb62:	2301      	movs	r3, #1
    cb64:	fa03 f101 	lsl.w	r1, r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    cb68:	e8d0 3fef 	ldaex	r3, [r0]
    cb6c:	430b      	orrs	r3, r1
    cb6e:	e8c0 3fe2 	stlex	r2, r3, [r0]
    cb72:	2a00      	cmp	r2, #0
    cb74:	d1f8      	bne.n	cb68 <atomic_set_bit+0x6>
}
    cb76:	4770      	bx	lr

0000cb78 <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    cb78:	e8d0 0faf 	lda	r0, [r0]
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    cb7c:	4108      	asrs	r0, r1
}
    cb7e:	f000 0001 	and.w	r0, r0, #1
    cb82:	4770      	bx	lr

0000cb84 <match_uuid>:
    cb84:	6008      	str	r0, [r1, #0]
    cb86:	2000      	movs	r0, #0
    cb88:	4770      	bx	lr

0000cb8a <sc_restore_rsp>:
{
    cb8a:	b508      	push	{r3, lr}
	cfg = find_cf_cfg(conn);
    cb8c:	f7fa fdfe 	bl	778c <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
    cb90:	b140      	cbz	r0, cba4 <sc_restore_rsp+0x1a>
    cb92:	7a03      	ldrb	r3, [r0, #8]
    cb94:	07db      	lsls	r3, r3, #31
    cb96:	d505      	bpl.n	cba4 <sc_restore_rsp+0x1a>
}
    cb98:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
    cb9c:	2100      	movs	r1, #0
    cb9e:	300c      	adds	r0, #12
    cba0:	f7ff bfdf 	b.w	cb62 <atomic_set_bit>
}
    cba4:	bd08      	pop	{r3, pc}

0000cba6 <find_ccc_cfg>:
{
    cba6:	b513      	push	{r0, r1, r4, lr}
    cba8:	460c      	mov	r4, r1
		if (conn) {
    cbaa:	b168      	cbz	r0, cbc8 <find_ccc_cfg+0x22>
			if (conn->id == ccc->cfg[i].id &&
    cbac:	7a02      	ldrb	r2, [r0, #8]
    cbae:	780b      	ldrb	r3, [r1, #0]
    cbb0:	429a      	cmp	r2, r3
    cbb2:	d002      	beq.n	cbba <find_ccc_cfg+0x14>
	return NULL;
    cbb4:	2000      	movs	r0, #0
}
    cbb6:	b002      	add	sp, #8
    cbb8:	bd10      	pop	{r4, pc}
			    !bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    cbba:	3101      	adds	r1, #1
    cbbc:	f7ff fbb2 	bl	c324 <bt_conn_addr_le_cmp>
			if (conn->id == ccc->cfg[i].id &&
    cbc0:	2800      	cmp	r0, #0
    cbc2:	d1f7      	bne.n	cbb4 <find_ccc_cfg+0xe>
				return &ccc->cfg[i];
    cbc4:	4620      	mov	r0, r4
    cbc6:	e7f6      	b.n	cbb6 <find_ccc_cfg+0x10>
		} else if (!bt_addr_le_cmp(&ccc->cfg[i].peer, BT_ADDR_LE_ANY)) {
    cbc8:	9000      	str	r0, [sp, #0]
    cbca:	2207      	movs	r2, #7
    cbcc:	f8cd 0003 	str.w	r0, [sp, #3]
    cbd0:	4669      	mov	r1, sp
    cbd2:	1c60      	adds	r0, r4, #1
    cbd4:	f7ff f953 	bl	be7e <memcmp>
    cbd8:	e7f2      	b.n	cbc0 <find_ccc_cfg+0x1a>

0000cbda <read_appearance>:
{
    cbda:	b513      	push	{r0, r1, r4, lr}
    cbdc:	4610      	mov	r0, r2
	u16_t appearance = sys_cpu_to_le16(gap_appearance);
    cbde:	f240 32c2 	movw	r2, #962	; 0x3c2
{
    cbe2:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	u16_t appearance = sys_cpu_to_le16(gap_appearance);
    cbe6:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
    cbea:	2902      	cmp	r1, #2
    cbec:	d80d      	bhi.n	cc0a <read_appearance+0x30>
	len = MIN(buf_len, value_len - offset);
    cbee:	f1c1 0402 	rsb	r4, r1, #2
    cbf2:	429c      	cmp	r4, r3
    cbf4:	bfa8      	it	ge
    cbf6:	461c      	movge	r4, r3
	memcpy(buf, (u8_t *)value + offset, len);
    cbf8:	f10d 0306 	add.w	r3, sp, #6
    cbfc:	4622      	mov	r2, r4
    cbfe:	4419      	add	r1, r3
    cc00:	f7ff f94d 	bl	be9e <memcpy>
}
    cc04:	4620      	mov	r0, r4
    cc06:	b002      	add	sp, #8
    cc08:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    cc0a:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
    cc0e:	e7f9      	b.n	cc04 <read_appearance+0x2a>

0000cc10 <read_name>:
{
    cc10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cc14:	4698      	mov	r8, r3
    cc16:	4616      	mov	r6, r2
    cc18:	f8bd 5018 	ldrh.w	r5, [sp, #24]
	const char *name = bt_get_name();
    cc1c:	f7f7 fe84 	bl	4928 <bt_get_name>
    cc20:	4607      	mov	r7, r0
				 strlen(name));
    cc22:	f7ff f90a 	bl	be3a <strlen>
	if (offset > value_len) {
    cc26:	b283      	uxth	r3, r0
    cc28:	42ab      	cmp	r3, r5
    cc2a:	d30c      	bcc.n	cc46 <read_name+0x36>
	len = MIN(buf_len, value_len - offset);
    cc2c:	1b5c      	subs	r4, r3, r5
    cc2e:	4544      	cmp	r4, r8
    cc30:	bfa8      	it	ge
    cc32:	4644      	movge	r4, r8
    cc34:	b2a4      	uxth	r4, r4
	memcpy(buf, (u8_t *)value + offset, len);
    cc36:	4622      	mov	r2, r4
    cc38:	1979      	adds	r1, r7, r5
    cc3a:	4630      	mov	r0, r6
    cc3c:	f7ff f92f 	bl	be9e <memcpy>
}
    cc40:	4620      	mov	r0, r4
    cc42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    cc46:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
    cc4a:	e7f9      	b.n	cc40 <read_name+0x30>

0000cc4c <bt_gatt_attr_read_ccc>:
{
    cc4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	cfg = find_ccc_cfg(conn, ccc);
    cc4e:	68c9      	ldr	r1, [r1, #12]
{
    cc50:	4616      	mov	r6, r2
    cc52:	461f      	mov	r7, r3
    cc54:	f8bd 5020 	ldrh.w	r5, [sp, #32]
	cfg = find_ccc_cfg(conn, ccc);
    cc58:	f7ff ffa5 	bl	cba6 <find_ccc_cfg>
	if (cfg) {
    cc5c:	b100      	cbz	r0, cc60 <bt_gatt_attr_read_ccc+0x14>
		value = sys_cpu_to_le16(cfg->value);
    cc5e:	8900      	ldrh	r0, [r0, #8]
	if (offset > value_len) {
    cc60:	2d02      	cmp	r5, #2
    cc62:	f8ad 0006 	strh.w	r0, [sp, #6]
    cc66:	d80e      	bhi.n	cc86 <bt_gatt_attr_read_ccc+0x3a>
	len = MIN(buf_len, value_len - offset);
    cc68:	f1c5 0402 	rsb	r4, r5, #2
    cc6c:	42bc      	cmp	r4, r7
    cc6e:	bfa8      	it	ge
    cc70:	463c      	movge	r4, r7
	memcpy(buf, (u8_t *)value + offset, len);
    cc72:	f10d 0306 	add.w	r3, sp, #6
    cc76:	4622      	mov	r2, r4
    cc78:	1959      	adds	r1, r3, r5
    cc7a:	4630      	mov	r0, r6
    cc7c:	f7ff f90f 	bl	be9e <memcpy>
}
    cc80:	4620      	mov	r0, r4
    cc82:	b003      	add	sp, #12
    cc84:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    cc86:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
    cc8a:	e7f9      	b.n	cc80 <bt_gatt_attr_read_ccc+0x34>

0000cc8c <cf_read>:
{
    cc8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    cc8e:	461f      	mov	r7, r3
	u8_t data[1] = {};
    cc90:	2300      	movs	r3, #0
{
    cc92:	4616      	mov	r6, r2
    cc94:	f8bd 5020 	ldrh.w	r5, [sp, #32]
	u8_t data[1] = {};
    cc98:	f88d 3004 	strb.w	r3, [sp, #4]
	cfg = find_cf_cfg(conn);
    cc9c:	f7fa fd76 	bl	778c <find_cf_cfg>
	if (cfg) {
    cca0:	b128      	cbz	r0, ccae <cf_read+0x22>
		memcpy(data, cfg->data, sizeof(data));
    cca2:	f100 0108 	add.w	r1, r0, #8
    cca6:	2201      	movs	r2, #1
    cca8:	a801      	add	r0, sp, #4
    ccaa:	f7ff f8f8 	bl	be9e <memcpy>
	if (offset > value_len) {
    ccae:	2d01      	cmp	r5, #1
    ccb0:	d80d      	bhi.n	ccce <cf_read+0x42>
	len = MIN(buf_len, value_len - offset);
    ccb2:	f1c5 0401 	rsb	r4, r5, #1
    ccb6:	42bc      	cmp	r4, r7
    ccb8:	bfa8      	it	ge
    ccba:	463c      	movge	r4, r7
	memcpy(buf, (u8_t *)value + offset, len);
    ccbc:	ab01      	add	r3, sp, #4
    ccbe:	4622      	mov	r2, r4
    ccc0:	1959      	adds	r1, r3, r5
    ccc2:	4630      	mov	r0, r6
    ccc4:	f7ff f8eb 	bl	be9e <memcpy>
}
    ccc8:	4620      	mov	r0, r4
    ccca:	b003      	add	sp, #12
    cccc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    ccce:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
    ccd2:	e7f9      	b.n	ccc8 <cf_read+0x3c>

0000ccd4 <bt_gatt_attr_read_service>:
{
    ccd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_uuid *uuid = attr->user_data;
    ccd6:	68c9      	ldr	r1, [r1, #12]
{
    ccd8:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
    ccda:	780a      	ldrb	r2, [r1, #0]
{
    ccdc:	f8bd 5018 	ldrh.w	r5, [sp, #24]
	if (uuid->type == BT_UUID_TYPE_16) {
    cce0:	b992      	cbnz	r2, cd08 <bt_gatt_attr_read_service+0x34>
		u16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
    cce2:	884a      	ldrh	r2, [r1, #2]
	if (offset > value_len) {
    cce4:	2d02      	cmp	r5, #2
		u16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
    cce6:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
    ccea:	d819      	bhi.n	cd20 <bt_gatt_attr_read_service+0x4c>
	len = MIN(buf_len, value_len - offset);
    ccec:	f1c5 0402 	rsb	r4, r5, #2
    ccf0:	429c      	cmp	r4, r3
    ccf2:	bfa8      	it	ge
    ccf4:	461c      	movge	r4, r3
	memcpy(buf, (u8_t *)value + offset, len);
    ccf6:	4622      	mov	r2, r4
    ccf8:	f10d 0306 	add.w	r3, sp, #6
    ccfc:	1959      	adds	r1, r3, r5
    ccfe:	f7ff f8ce 	bl	be9e <memcpy>
}
    cd02:	4620      	mov	r0, r4
    cd04:	b003      	add	sp, #12
    cd06:	bd30      	pop	{r4, r5, pc}
	if (offset > value_len) {
    cd08:	2d10      	cmp	r5, #16
				 BT_UUID_128(uuid)->val, 16);
    cd0a:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
    cd0e:	d807      	bhi.n	cd20 <bt_gatt_attr_read_service+0x4c>
	len = MIN(buf_len, value_len - offset);
    cd10:	f1c5 0410 	rsb	r4, r5, #16
    cd14:	429c      	cmp	r4, r3
    cd16:	bfa8      	it	ge
    cd18:	461c      	movge	r4, r3
	memcpy(buf, (u8_t *)value + offset, len);
    cd1a:	4429      	add	r1, r5
    cd1c:	4622      	mov	r2, r4
    cd1e:	e7ee      	b.n	ccfe <bt_gatt_attr_read_service+0x2a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    cd20:	f06f 0406 	mvn.w	r4, #6
    cd24:	e7ed      	b.n	cd02 <bt_gatt_attr_read_service+0x2e>

0000cd26 <sc_ccc_cfg_write>:
{
    cd26:	4601      	mov	r1, r0
    cd28:	b508      	push	{r3, lr}
	if (value == BT_GATT_CCC_INDICATE) {
    cd2a:	2a02      	cmp	r2, #2
    cd2c:	7a00      	ldrb	r0, [r0, #8]
    cd2e:	f101 0170 	add.w	r1, r1, #112	; 0x70
    cd32:	d105      	bne.n	cd40 <sc_ccc_cfg_write+0x1a>
		sc_save(conn->id, &conn->le.dst, 0, 0);
    cd34:	2300      	movs	r3, #0
    cd36:	461a      	mov	r2, r3
    cd38:	f7fa fe4e 	bl	79d8 <sc_save>
}
    cd3c:	2002      	movs	r0, #2
    cd3e:	bd08      	pop	{r3, pc}
		cfg = find_sc_cfg(conn->id, &conn->le.dst);
    cd40:	f7fa fd14 	bl	776c <find_sc_cfg>
		if (cfg) {
    cd44:	2800      	cmp	r0, #0
    cd46:	d0f9      	beq.n	cd3c <sc_ccc_cfg_write+0x16>
	memset(cfg, 0, sizeof(*cfg));
    cd48:	220c      	movs	r2, #12
    cd4a:	2100      	movs	r1, #0
    cd4c:	f7ff f8d1 	bl	bef2 <memset>
    cd50:	e7f4      	b.n	cd3c <sc_ccc_cfg_write+0x16>

0000cd52 <bt_gatt_attr_read_chrc>:
{
    cd52:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
    cd54:	68ce      	ldr	r6, [r1, #12]
{
    cd56:	461c      	mov	r4, r3
	pdu.properties = chrc->properties;
    cd58:	79b3      	ldrb	r3, [r6, #6]
{
    cd5a:	b087      	sub	sp, #28
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
    cd5c:	4608      	mov	r0, r1
	pdu.properties = chrc->properties;
    cd5e:	f88d 3004 	strb.w	r3, [sp, #4]
{
    cd62:	4617      	mov	r7, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
    cd64:	f7fa ff5e 	bl	7c24 <bt_gatt_attr_value_handle>
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
    cd68:	6831      	ldr	r1, [r6, #0]
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
    cd6a:	f8ad 0005 	strh.w	r0, [sp, #5]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
    cd6e:	780b      	ldrb	r3, [r1, #0]
{
    cd70:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
    cd74:	b99b      	cbnz	r3, cd9e <bt_gatt_attr_read_chrc+0x4c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
    cd76:	884b      	ldrh	r3, [r1, #2]
    cd78:	f8ad 3007 	strh.w	r3, [sp, #7]
		value_len += 2U;
    cd7c:	2305      	movs	r3, #5
	if (offset > value_len) {
    cd7e:	42ab      	cmp	r3, r5
    cd80:	d315      	bcc.n	cdae <bt_gatt_attr_read_chrc+0x5c>
	len = MIN(buf_len, value_len - offset);
    cd82:	1b5b      	subs	r3, r3, r5
    cd84:	42a3      	cmp	r3, r4
    cd86:	bfa8      	it	ge
    cd88:	4623      	movge	r3, r4
    cd8a:	b29c      	uxth	r4, r3
	memcpy(buf, (u8_t *)value + offset, len);
    cd8c:	ab01      	add	r3, sp, #4
    cd8e:	4622      	mov	r2, r4
    cd90:	1959      	adds	r1, r3, r5
    cd92:	4638      	mov	r0, r7
    cd94:	f7ff f883 	bl	be9e <memcpy>
}
    cd98:	4620      	mov	r0, r4
    cd9a:	b007      	add	sp, #28
    cd9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
    cd9e:	2210      	movs	r2, #16
    cda0:	3101      	adds	r1, #1
    cda2:	f10d 0007 	add.w	r0, sp, #7
    cda6:	f7ff f87a 	bl	be9e <memcpy>
		value_len += 16U;
    cdaa:	2313      	movs	r3, #19
    cdac:	e7e7      	b.n	cd7e <bt_gatt_attr_read_chrc+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    cdae:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
    cdb2:	e7f1      	b.n	cd98 <bt_gatt_attr_read_chrc+0x46>

0000cdb4 <bt_gatt_foreach_attr>:
{
    cdb4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
    cdb6:	e9cd 2301 	strd	r2, r3, [sp, #4]
    cdba:	2300      	movs	r3, #0
    cdbc:	9300      	str	r3, [sp, #0]
    cdbe:	461a      	mov	r2, r3
    cdc0:	f7fa ff48 	bl	7c54 <bt_gatt_foreach_attr_type>
}
    cdc4:	b005      	add	sp, #20
    cdc6:	f85d fb04 	ldr.w	pc, [sp], #4

0000cdca <db_hash_process>:
	db_hash_gen(true);
    cdca:	f7fa bfa1 	b.w	7d10 <db_hash_gen.isra.9>

0000cdce <bt_gatt_check_perm>:
	if ((mask & BT_GATT_PERM_READ) &&
    cdce:	07d3      	lsls	r3, r2, #31
{
    cdd0:	b510      	push	{r4, lr}
    cdd2:	7c8c      	ldrb	r4, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
    cdd4:	d504      	bpl.n	cde0 <bt_gatt_check_perm+0x12>
    cdd6:	f014 0f15 	tst.w	r4, #21
    cdda:	d017      	beq.n	ce0c <bt_gatt_check_perm+0x3e>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
    cddc:	684b      	ldr	r3, [r1, #4]
    cdde:	b1ab      	cbz	r3, ce0c <bt_gatt_check_perm+0x3e>
	if ((mask & BT_GATT_PERM_WRITE) &&
    cde0:	0793      	lsls	r3, r2, #30
    cde2:	d504      	bpl.n	cdee <bt_gatt_check_perm+0x20>
    cde4:	f014 0f2a 	tst.w	r4, #42	; 0x2a
    cde8:	d012      	beq.n	ce10 <bt_gatt_check_perm+0x42>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
    cdea:	688b      	ldr	r3, [r1, #8]
    cdec:	b183      	cbz	r3, ce10 <bt_gatt_check_perm+0x42>
	mask &= attr->perm;
    cdee:	4014      	ands	r4, r2
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
    cdf0:	f014 0f30 	tst.w	r4, #48	; 0x30
    cdf4:	d104      	bne.n	ce00 <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
    cdf6:	f014 000c 	ands.w	r0, r4, #12
    cdfa:	bf18      	it	ne
    cdfc:	200f      	movne	r0, #15
}
    cdfe:	bd10      	pop	{r4, pc}
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
    ce00:	f7ff fa8e 	bl	c320 <bt_conn_get_security>
    ce04:	2802      	cmp	r0, #2
    ce06:	d8f6      	bhi.n	cdf6 <bt_gatt_check_perm+0x28>
			return BT_ATT_ERR_AUTHENTICATION;
    ce08:	2005      	movs	r0, #5
    ce0a:	e7f8      	b.n	cdfe <bt_gatt_check_perm+0x30>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
    ce0c:	2002      	movs	r0, #2
    ce0e:	e7f6      	b.n	cdfe <bt_gatt_check_perm+0x30>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
    ce10:	2003      	movs	r0, #3
    ce12:	e7f4      	b.n	cdfe <bt_gatt_check_perm+0x30>

0000ce14 <bt_gatt_is_subscribed>:
{
    ce14:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    ce16:	7a83      	ldrb	r3, [r0, #10]
{
    ce18:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
    ce1a:	2b06      	cmp	r3, #6
{
    ce1c:	460c      	mov	r4, r1
    ce1e:	4616      	mov	r6, r2
	if (conn->state != BT_CONN_CONNECTED) {
    ce20:	d13d      	bne.n	ce9e <bt_gatt_is_subscribed+0x8a>
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
    ce22:	2300      	movs	r3, #0
    ce24:	f88d 3004 	strb.w	r3, [sp, #4]
    ce28:	f642 0303 	movw	r3, #10243	; 0x2803
    ce2c:	a901      	add	r1, sp, #4
    ce2e:	6820      	ldr	r0, [r4, #0]
    ce30:	f8ad 3006 	strh.w	r3, [sp, #6]
    ce34:	f7ff f904 	bl	c040 <bt_uuid_cmp>
    ce38:	b940      	cbnz	r0, ce4c <bt_gatt_is_subscribed+0x38>
		if (!(chrc->properties &
    ce3a:	68e3      	ldr	r3, [r4, #12]
    ce3c:	799b      	ldrb	r3, [r3, #6]
    ce3e:	f013 0f30 	tst.w	r3, #48	; 0x30
    ce42:	d02c      	beq.n	ce9e <bt_gatt_is_subscribed+0x8a>
		attr = bt_gatt_attr_next(attr);
    ce44:	4620      	mov	r0, r4
    ce46:	f7fa ffb3 	bl	7db0 <bt_gatt_attr_next>
    ce4a:	4604      	mov	r4, r0
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
    ce4c:	2300      	movs	r3, #0
    ce4e:	6820      	ldr	r0, [r4, #0]
    ce50:	f88d 3008 	strb.w	r3, [sp, #8]
    ce54:	f642 1302 	movw	r3, #10498	; 0x2902
    ce58:	a902      	add	r1, sp, #8
    ce5a:	f8ad 300a 	strh.w	r3, [sp, #10]
    ce5e:	f7ff f8ef 	bl	c040 <bt_uuid_cmp>
    ce62:	b118      	cbz	r0, ce6c <bt_gatt_is_subscribed+0x58>
		attr = bt_gatt_attr_next(attr);
    ce64:	4620      	mov	r0, r4
    ce66:	f7fa ffa3 	bl	7db0 <bt_gatt_attr_next>
    ce6a:	4604      	mov	r4, r0
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
    ce6c:	2300      	movs	r3, #0
    ce6e:	6820      	ldr	r0, [r4, #0]
    ce70:	f88d 300c 	strb.w	r3, [sp, #12]
    ce74:	f642 1302 	movw	r3, #10498	; 0x2902
    ce78:	a903      	add	r1, sp, #12
    ce7a:	f8ad 300e 	strh.w	r3, [sp, #14]
    ce7e:	f7ff f8df 	bl	c040 <bt_uuid_cmp>
    ce82:	b960      	cbnz	r0, ce9e <bt_gatt_is_subscribed+0x8a>
	ccc = attr->user_data;
    ce84:	68e4      	ldr	r4, [r4, #12]
		if (conn->id == ccc->cfg[i].id &&
    ce86:	7a2a      	ldrb	r2, [r5, #8]
    ce88:	7823      	ldrb	r3, [r4, #0]
    ce8a:	429a      	cmp	r2, r3
    ce8c:	d107      	bne.n	ce9e <bt_gatt_is_subscribed+0x8a>
		    !bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer) &&
    ce8e:	1c61      	adds	r1, r4, #1
    ce90:	4628      	mov	r0, r5
    ce92:	f7ff fa47 	bl	c324 <bt_conn_addr_le_cmp>
		if (conn->id == ccc->cfg[i].id &&
    ce96:	b910      	cbnz	r0, ce9e <bt_gatt_is_subscribed+0x8a>
		    !bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer) &&
    ce98:	8923      	ldrh	r3, [r4, #8]
    ce9a:	421e      	tst	r6, r3
    ce9c:	d102      	bne.n	cea4 <bt_gatt_is_subscribed+0x90>
	return false;
    ce9e:	2000      	movs	r0, #0
}
    cea0:	b004      	add	sp, #16
    cea2:	bd70      	pop	{r4, r5, r6, pc}
			return true;
    cea4:	2001      	movs	r0, #1
    cea6:	e7fb      	b.n	cea0 <bt_gatt_is_subscribed+0x8c>

0000cea8 <bt_gatt_change_aware>:
{
    cea8:	b510      	push	{r4, lr}
    ceaa:	460c      	mov	r4, r1
	cfg = find_cf_cfg(conn);
    ceac:	f7fa fc6e 	bl	778c <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
    ceb0:	b910      	cbnz	r0, ceb8 <bt_gatt_change_aware+0x10>
		return true;
    ceb2:	2401      	movs	r4, #1
}
    ceb4:	4620      	mov	r0, r4
    ceb6:	bd10      	pop	{r4, pc}
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
    ceb8:	7a03      	ldrb	r3, [r0, #8]
    ceba:	07db      	lsls	r3, r3, #31
    cebc:	d5f9      	bpl.n	ceb2 <bt_gatt_change_aware+0xa>
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
    cebe:	f100 030c 	add.w	r3, r0, #12
    cec2:	2100      	movs	r1, #0
    cec4:	4618      	mov	r0, r3
    cec6:	f7ff fe57 	bl	cb78 <atomic_test_bit>
    ceca:	4602      	mov	r2, r0
    cecc:	2800      	cmp	r0, #0
    cece:	d1f0      	bne.n	ceb2 <bt_gatt_change_aware+0xa>
	if (!req) {
    ced0:	2c00      	cmp	r4, #0
    ced2:	d0ef      	beq.n	ceb4 <bt_gatt_change_aware+0xc>
	if (atomic_test_bit(cfg->flags, CF_OUT_OF_SYNC)) {
    ced4:	2101      	movs	r1, #1
    ced6:	4618      	mov	r0, r3
    ced8:	f7ff fe4e 	bl	cb78 <atomic_test_bit>
    cedc:	4604      	mov	r4, r0
    cede:	b160      	cbz	r0, cefa <bt_gatt_change_aware+0x52>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    cee0:	e8d3 1fef 	ldaex	r1, [r3]
    cee4:	f021 0102 	bic.w	r1, r1, #2
    cee8:	e8c3 1fe0 	stlex	r0, r1, [r3]
    ceec:	2800      	cmp	r0, #0
    ceee:	d1f7      	bne.n	cee0 <bt_gatt_change_aware+0x38>
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
    cef0:	4611      	mov	r1, r2
	atomic_set_bit(cfg->flags, CF_OUT_OF_SYNC);
    cef2:	4618      	mov	r0, r3
    cef4:	f7ff fe35 	bl	cb62 <atomic_set_bit>
	return false;
    cef8:	e7dc      	b.n	ceb4 <bt_gatt_change_aware+0xc>
	atomic_set_bit(cfg->flags, CF_OUT_OF_SYNC);
    cefa:	2101      	movs	r1, #1
    cefc:	e7f9      	b.n	cef2 <bt_gatt_change_aware+0x4a>

0000cefe <bt_smp_recv>:
{
    cefe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	buf = bt_l2cap_create_pdu(NULL, 0);
    cf00:	2100      	movs	r1, #0
	struct bt_conn *conn = chan->conn;
    cf02:	6807      	ldr	r7, [r0, #0]
	buf = bt_l2cap_create_pdu(NULL, 0);
    cf04:	f04f 32ff 	mov.w	r2, #4294967295
    cf08:	4608      	mov	r0, r1
    cf0a:	f7ff fa96 	bl	c43a <bt_l2cap_create_pdu_timeout>
	hdr = net_buf_add(buf, sizeof(*hdr));
    cf0e:	f100 0608 	add.w	r6, r0, #8
	buf = bt_l2cap_create_pdu(NULL, 0);
    cf12:	4605      	mov	r5, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    cf14:	2101      	movs	r1, #1
    cf16:	4630      	mov	r0, r6
    cf18:	f000 f850 	bl	cfbc <net_buf_simple_add>
	hdr->code = BT_SMP_CMD_PAIRING_FAIL;
    cf1c:	2405      	movs	r4, #5
	rsp = net_buf_add(buf, sizeof(*rsp));
    cf1e:	2101      	movs	r1, #1
	hdr->code = BT_SMP_CMD_PAIRING_FAIL;
    cf20:	7004      	strb	r4, [r0, #0]
	rsp = net_buf_add(buf, sizeof(*rsp));
    cf22:	4630      	mov	r0, r6
    cf24:	f000 f84a 	bl	cfbc <net_buf_simple_add>
	rsp->reason = BT_SMP_ERR_PAIRING_NOTSUPP;
    cf28:	7004      	strb	r4, [r0, #0]
    cf2a:	2400      	movs	r4, #0
    cf2c:	462a      	mov	r2, r5
    cf2e:	9400      	str	r4, [sp, #0]
    cf30:	4623      	mov	r3, r4
    cf32:	2106      	movs	r1, #6
    cf34:	4638      	mov	r0, r7
    cf36:	f7ff fa83 	bl	c440 <bt_l2cap_send_cb>
}
    cf3a:	4620      	mov	r0, r4
    cf3c:	b003      	add	sp, #12
    cf3e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000cf40 <bt_smp_sign>:
    cf40:	f06f 0022 	mvn.w	r0, #34	; 0x22
    cf44:	4770      	bx	lr

0000cf46 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_fixed_chan, BT_L2CAP_CID_SMP, bt_smp_accept, NULL);

int bt_smp_init(void)
{
	return 0;
}
    cf46:	2000      	movs	r0, #0
    cf48:	4770      	bx	lr

0000cf4a <fixed_data_unref>:
}
    cf4a:	4770      	bx	lr

0000cf4c <k_uptime_get_32>:
{
    cf4c:	b508      	push	{r3, lr}
	return z_impl_k_uptime_get();
    cf4e:	f001 f8ed 	bl	e12c <z_impl_k_uptime_get>
}
    cf52:	bd08      	pop	{r3, pc}

0000cf54 <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
    cf54:	6983      	ldr	r3, [r0, #24]
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
    cf56:	460a      	mov	r2, r1
    cf58:	685b      	ldr	r3, [r3, #4]
    cf5a:	6819      	ldr	r1, [r3, #0]
    cf5c:	f7fb b9aa 	b.w	82b4 <net_buf_alloc_len>

0000cf60 <net_buf_get>:
{
    cf60:	b570      	push	{r4, r5, r6, lr}
    cf62:	4606      	mov	r6, r0
	return z_impl_k_queue_get(queue, timeout);
    cf64:	f000 fea3 	bl	dcae <z_impl_k_queue_get>
	if (!buf) {
    cf68:	4605      	mov	r5, r0
    cf6a:	b128      	cbz	r0, cf78 <net_buf_get+0x18>
    cf6c:	4604      	mov	r4, r0
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
    cf6e:	7963      	ldrb	r3, [r4, #5]
    cf70:	f013 0301 	ands.w	r3, r3, #1
    cf74:	d102      	bne.n	cf7c <net_buf_get+0x1c>
	frag->frags = NULL;
    cf76:	6023      	str	r3, [r4, #0]
}
    cf78:	4628      	mov	r0, r5
    cf7a:	bd70      	pop	{r4, r5, r6, pc}
    cf7c:	2100      	movs	r1, #0
    cf7e:	4630      	mov	r0, r6
    cf80:	f000 fe95 	bl	dcae <z_impl_k_queue_get>
		frag->flags &= ~NET_BUF_FRAGS;
    cf84:	7963      	ldrb	r3, [r4, #5]
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
    cf86:	6020      	str	r0, [r4, #0]
		frag->flags &= ~NET_BUF_FRAGS;
    cf88:	f023 0301 	bic.w	r3, r3, #1
    cf8c:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
    cf8e:	4604      	mov	r4, r0
    cf90:	e7ed      	b.n	cf6e <net_buf_get+0xe>

0000cf92 <net_buf_simple_reserve>:
	buf->data = buf->__buf + reserve;
    cf92:	6883      	ldr	r3, [r0, #8]
    cf94:	4419      	add	r1, r3
    cf96:	6001      	str	r1, [r0, #0]
}
    cf98:	4770      	bx	lr

0000cf9a <net_buf_put>:
	for (tail = buf; tail->frags; tail = tail->frags) {
    cf9a:	460a      	mov	r2, r1
{
    cf9c:	b410      	push	{r4}
	for (tail = buf; tail->frags; tail = tail->frags) {
    cf9e:	6814      	ldr	r4, [r2, #0]
    cfa0:	b914      	cbnz	r4, cfa8 <net_buf_put+0xe>
}
    cfa2:	bc10      	pop	{r4}
	k_fifo_put_list(fifo, buf, tail);
    cfa4:	f000 be5f 	b.w	dc66 <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
    cfa8:	7953      	ldrb	r3, [r2, #5]
    cfaa:	f043 0301 	orr.w	r3, r3, #1
    cfae:	7153      	strb	r3, [r2, #5]
    cfb0:	4622      	mov	r2, r4
    cfb2:	e7f4      	b.n	cf9e <net_buf_put+0x4>

0000cfb4 <net_buf_ref>:
{
	__ASSERT_NO_MSG(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
    cfb4:	7903      	ldrb	r3, [r0, #4]
    cfb6:	3301      	adds	r3, #1
    cfb8:	7103      	strb	r3, [r0, #4]
	return buf;
}
    cfba:	4770      	bx	lr

0000cfbc <net_buf_simple_add>:
	return buf->data + buf->len;
    cfbc:	8883      	ldrh	r3, [r0, #4]
    cfbe:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
    cfc0:	4419      	add	r1, r3
    cfc2:	8081      	strh	r1, [r0, #4]
	return tail;
}
    cfc4:	18d0      	adds	r0, r2, r3
    cfc6:	4770      	bx	lr

0000cfc8 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
    cfc8:	b430      	push	{r4, r5}
    cfca:	8883      	ldrh	r3, [r0, #4]
    cfcc:	6804      	ldr	r4, [r0, #0]
	buf->len += len;
    cfce:	189d      	adds	r5, r3, r2
    cfd0:	8085      	strh	r5, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
    cfd2:	18e0      	adds	r0, r4, r3
}
    cfd4:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
    cfd6:	f7fe bf62 	b.w	be9e <memcpy>

0000cfda <net_buf_simple_add_u8>:

u8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, u8_t val)
{
    cfda:	b510      	push	{r4, lr}
    cfdc:	8883      	ldrh	r3, [r0, #4]
    cfde:	6802      	ldr	r2, [r0, #0]
	buf->len += len;
    cfe0:	1c5c      	adds	r4, r3, #1
    cfe2:	8084      	strh	r4, [r0, #4]
	u8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
    cfe4:	54d1      	strb	r1, [r2, r3]

	return u8;
}
    cfe6:	18d0      	adds	r0, r2, r3
    cfe8:	bd10      	pop	{r4, pc}

0000cfea <net_buf_simple_push>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
    cfea:	6803      	ldr	r3, [r0, #0]
	buf->len += len;
    cfec:	8882      	ldrh	r2, [r0, #4]
	buf->data -= len;
    cfee:	1a5b      	subs	r3, r3, r1
	buf->len += len;
    cff0:	4411      	add	r1, r2
	buf->data -= len;
    cff2:	6003      	str	r3, [r0, #0]
	buf->len += len;
    cff4:	8081      	strh	r1, [r0, #4]
	return buf->data;
}
    cff6:	4618      	mov	r0, r3
    cff8:	4770      	bx	lr

0000cffa <net_buf_simple_push_u8>:
	buf->data -= len;
    cffa:	6802      	ldr	r2, [r0, #0]
    cffc:	1e53      	subs	r3, r2, #1
    cffe:	6003      	str	r3, [r0, #0]
	buf->len += len;
    d000:	8883      	ldrh	r3, [r0, #4]
    d002:	3301      	adds	r3, #1
    d004:	8083      	strh	r3, [r0, #4]

void net_buf_simple_push_u8(struct net_buf_simple *buf, u8_t val)
{
	u8_t *data = net_buf_simple_push(buf, 1);

	*data = val;
    d006:	f802 1c01 	strb.w	r1, [r2, #-1]
}
    d00a:	4770      	bx	lr

0000d00c <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
    d00c:	8883      	ldrh	r3, [r0, #4]
    d00e:	1a5b      	subs	r3, r3, r1
    d010:	8083      	strh	r3, [r0, #4]
	return buf->data += len;
    d012:	6803      	ldr	r3, [r0, #0]
    d014:	4419      	add	r1, r3
    d016:	6001      	str	r1, [r0, #0]
}
    d018:	4608      	mov	r0, r1
    d01a:	4770      	bx	lr

0000d01c <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
    d01c:	4603      	mov	r3, r0
	void *data = buf->data;
    d01e:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
    d020:	889a      	ldrh	r2, [r3, #4]
    d022:	1a52      	subs	r2, r2, r1
	buf->data += len;
    d024:	4401      	add	r1, r0
	buf->len -= len;
    d026:	809a      	strh	r2, [r3, #4]
	buf->data += len;
    d028:	6019      	str	r1, [r3, #0]

	return data;
}
    d02a:	4770      	bx	lr

0000d02c <net_buf_simple_pull_le16>:

	return val;
}

u16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
    d02c:	b508      	push	{r3, lr}
	u16_t val;

	val = UNALIGNED_GET((u16_t *)buf->data);
    d02e:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, sizeof(val));
    d030:	2102      	movs	r1, #2
	val = UNALIGNED_GET((u16_t *)buf->data);
    d032:	881a      	ldrh	r2, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
    d034:	f7ff ffea 	bl	d00c <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
    d038:	4610      	mov	r0, r2
    d03a:	bd08      	pop	{r3, pc}

0000d03c <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
    d03c:	6802      	ldr	r2, [r0, #0]
    d03e:	6880      	ldr	r0, [r0, #8]
}
    d040:	1a10      	subs	r0, r2, r0
    d042:	4770      	bx	lr

0000d044 <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
    d044:	8883      	ldrh	r3, [r0, #4]
    d046:	88c2      	ldrh	r2, [r0, #6]
    d048:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
    d04a:	6803      	ldr	r3, [r0, #0]
    d04c:	6880      	ldr	r0, [r0, #8]
    d04e:	1a18      	subs	r0, r3, r0
}
    d050:	1a10      	subs	r0, r2, r0
    d052:	4770      	bx	lr

0000d054 <gpio_nrfx_write>:
{
    d054:	b510      	push	{r4, lr}
	return port->config->config_info;
    d056:	6804      	ldr	r4, [r0, #0]
    d058:	6880      	ldr	r0, [r0, #8]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    d05a:	68a4      	ldr	r4, [r4, #8]
	if (access_op == GPIO_ACCESS_BY_PORT) {
    d05c:	2901      	cmp	r1, #1
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    d05e:	6824      	ldr	r4, [r4, #0]
	if (access_op == GPIO_ACCESS_BY_PORT) {
    d060:	69c0      	ldr	r0, [r0, #28]
    d062:	d103      	bne.n	d06c <gpio_nrfx_write+0x18>
		nrf_gpio_port_out_write(reg, value ^ data->inverted);
    d064:	4058      	eors	r0, r3
    p_reg->OUT = value;
    d066:	6060      	str	r0, [r4, #4]
}
    d068:	2000      	movs	r0, #0
    d06a:	bd10      	pop	{r4, pc}
		if ((value > 0) ^ ((BIT(pin) & data->inverted) != 0)) {
    d06c:	3300      	adds	r3, #0
    d06e:	f04f 0101 	mov.w	r1, #1
    d072:	bf18      	it	ne
    d074:	2301      	movne	r3, #1
    d076:	40d0      	lsrs	r0, r2
    d078:	f000 0001 	and.w	r0, r0, #1
    d07c:	4091      	lsls	r1, r2
    d07e:	4283      	cmp	r3, r0
    p_reg->OUTSET = set_mask;
    d080:	bf14      	ite	ne
    d082:	60a1      	strne	r1, [r4, #8]
}


NRF_STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
    d084:	60e1      	streq	r1, [r4, #12]
    d086:	e7ef      	b.n	d068 <gpio_nrfx_write+0x14>

0000d088 <gpio_nrfx_read>:
{
    d088:	b570      	push	{r4, r5, r6, lr}
	return port->config->config_info;
    d08a:	6804      	ldr	r4, [r0, #0]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
    d08c:	6880      	ldr	r0, [r0, #8]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    d08e:	68a4      	ldr	r4, [r4, #8]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
    d090:	69c0      	ldr	r0, [r0, #28]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    d092:	6825      	ldr	r5, [r4, #0]
	if (access_op == GPIO_ACCESS_BY_PORT) {
    d094:	2901      	cmp	r1, #1
    return p_reg->DIR;
    d096:	696e      	ldr	r6, [r5, #20]
    return p_reg->IN;
    d098:	692c      	ldr	r4, [r5, #16]
    return p_reg->OUT;
    d09a:	686d      	ldr	r5, [r5, #4]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
    d09c:	ea80 0004 	eor.w	r0, r0, r4
    d0a0:	ea84 0405 	eor.w	r4, r4, r5
    d0a4:	ea04 0406 	and.w	r4, r4, r6
    d0a8:	ea80 0004 	eor.w	r0, r0, r4
		*value = (port_val & BIT(pin)) ? 1 : 0;
    d0ac:	bf1c      	itt	ne
    d0ae:	40d0      	lsrne	r0, r2
    d0b0:	f000 0001 	andne.w	r0, r0, #1
    d0b4:	6018      	str	r0, [r3, #0]
}
    d0b6:	2000      	movs	r0, #0
    d0b8:	bd70      	pop	{r4, r5, r6, pc}

0000d0ba <gpio_nrfx_manage_callback>:
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    d0ba:	6883      	ldr	r3, [r0, #8]
{
    d0bc:	b530      	push	{r4, r5, lr}
Z_GENLIST_IS_EMPTY(slist)
    d0be:	6818      	ldr	r0, [r3, #0]
					bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
    d0c0:	b158      	cbz	r0, d0da <gpio_nrfx_manage_callback+0x20>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    d0c2:	2400      	movs	r4, #0
    d0c4:	4281      	cmp	r1, r0
    d0c6:	d113      	bne.n	d0f0 <gpio_nrfx_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
    d0c8:	6808      	ldr	r0, [r1, #0]
    d0ca:	b95c      	cbnz	r4, d0e4 <gpio_nrfx_manage_callback+0x2a>
    d0cc:	685c      	ldr	r4, [r3, #4]
	list->head = node;
    d0ce:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
    d0d0:	42a1      	cmp	r1, r4
    d0d2:	d100      	bne.n	d0d6 <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
    d0d4:	6058      	str	r0, [r3, #4]
	parent->next = child;
    d0d6:	2000      	movs	r0, #0
    d0d8:	6008      	str	r0, [r1, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
    d0da:	b972      	cbnz	r2, d0fa <gpio_nrfx_manage_callback+0x40>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
    d0dc:	2000      	movs	r0, #0
}
    d0de:	bd30      	pop	{r4, r5, pc}
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    d0e0:	4628      	mov	r0, r5
    d0e2:	e7ef      	b.n	d0c4 <gpio_nrfx_manage_callback+0xa>
	parent->next = child;
    d0e4:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
    d0e6:	6858      	ldr	r0, [r3, #4]
    d0e8:	4281      	cmp	r1, r0
	list->tail = node;
    d0ea:	bf08      	it	eq
    d0ec:	605c      	streq	r4, [r3, #4]
    d0ee:	e7f2      	b.n	d0d6 <gpio_nrfx_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    d0f0:	6805      	ldr	r5, [r0, #0]
	return node->next;
    d0f2:	4604      	mov	r4, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    d0f4:	2d00      	cmp	r5, #0
    d0f6:	d1f3      	bne.n	d0e0 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
    d0f8:	b13a      	cbz	r2, d10a <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
    d0fa:	681a      	ldr	r2, [r3, #0]
	parent->next = child;
    d0fc:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
    d0fe:	6858      	ldr	r0, [r3, #4]
	list->head = node;
    d100:	6019      	str	r1, [r3, #0]
Z_GENLIST_PREPEND(slist, snode)
    d102:	2800      	cmp	r0, #0
    d104:	d1ea      	bne.n	d0dc <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
    d106:	6059      	str	r1, [r3, #4]
    d108:	e7e9      	b.n	d0de <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
    d10a:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    d10e:	e7e6      	b.n	d0de <gpio_nrfx_manage_callback+0x24>

0000d110 <fire_callbacks>:
{
    d110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct gpio_nrfx_data *data = get_port_data(port);
    d112:	6885      	ldr	r5, [r0, #8]
{
    d114:	460f      	mov	r7, r1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    d116:	6829      	ldr	r1, [r5, #0]
{
    d118:	4606      	mov	r6, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    d11a:	b169      	cbz	r1, d138 <fire_callbacks+0x28>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    d11c:	680c      	ldr	r4, [r1, #0]
		if ((cb->pin_mask & pins) & data->int_en) {
    d11e:	68eb      	ldr	r3, [r5, #12]
    d120:	688a      	ldr	r2, [r1, #8]
    d122:	403b      	ands	r3, r7
    d124:	4213      	tst	r3, r2
    d126:	d003      	beq.n	d130 <fire_callbacks+0x20>
			cb->handler(port, cb, pins);
    d128:	684b      	ldr	r3, [r1, #4]
    d12a:	463a      	mov	r2, r7
    d12c:	4630      	mov	r0, r6
    d12e:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    d130:	b114      	cbz	r4, d138 <fire_callbacks+0x28>
    d132:	4621      	mov	r1, r4
    d134:	6824      	ldr	r4, [r4, #0]
    d136:	e7f2      	b.n	d11e <fire_callbacks+0xe>
}
    d138:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000d13a <gpio_nrfx_pin_disable_callback>:
	if (access_op == GPIO_ACCESS_BY_PORT) {
    d13a:	2901      	cmp	r1, #1
{
    d13c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		from_pin = pin;
    d140:	bf18      	it	ne
    d142:	b2d4      	uxtbne	r4, r2
{
    d144:	4606      	mov	r6, r0
		to_pin   = pin;
    d146:	bf12      	itee	ne
    d148:	4625      	movne	r5, r4
		to_pin   = 31U;
    d14a:	251f      	moveq	r5, #31
		from_pin = 0U;
    d14c:	2400      	moveq	r4, #0
		WRITE_BIT(data->int_en, curr_pin, enable);
    d14e:	f04f 0801 	mov.w	r8, #1
	struct gpio_nrfx_data *data = get_port_data(port);
    d152:	6887      	ldr	r7, [r0, #8]
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    d154:	42ac      	cmp	r4, r5
    d156:	d902      	bls.n	d15e <gpio_nrfx_pin_disable_callback+0x24>
	return res;
    d158:	2000      	movs	r0, #0
}
    d15a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		WRITE_BIT(data->int_en, curr_pin, enable);
    d15e:	68fb      	ldr	r3, [r7, #12]
    d160:	fa08 f204 	lsl.w	r2, r8, r4
    d164:	ea23 0302 	bic.w	r3, r3, r2
    d168:	60fb      	str	r3, [r7, #12]
		res = gpiote_pin_int_cfg(port, curr_pin);
    d16a:	4621      	mov	r1, r4
    d16c:	4630      	mov	r0, r6
    d16e:	f7fb f96f 	bl	8450 <gpiote_pin_int_cfg>
		if (res != 0) {
    d172:	2800      	cmp	r0, #0
    d174:	d1f1      	bne.n	d15a <gpio_nrfx_pin_disable_callback+0x20>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    d176:	3401      	adds	r4, #1
    d178:	b2e4      	uxtb	r4, r4
    d17a:	e7eb      	b.n	d154 <gpio_nrfx_pin_disable_callback+0x1a>

0000d17c <check_level_trigger_pins>:
{
    d17c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	u32_t bit = 1U << pin;
    d180:	2601      	movs	r6, #1
	u32_t pin = 0U;
    d182:	2700      	movs	r7, #0
	return port->config->config_info;
    d184:	6802      	ldr	r2, [r0, #0]
	struct gpio_nrfx_data *data = get_port_data(port);
    d186:	6883      	ldr	r3, [r0, #8]
	return port->config->config_info;
    d188:	f8d2 8008 	ldr.w	r8, [r2, #8]
	u32_t out = data->int_en & data->pin_int_en;
    d18c:	e9d3 2402 	ldrd	r2, r4, [r3, #8]
    d190:	4014      	ands	r4, r2
	out &= ~data->trig_edge & ~data->double_edge;
    d192:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
    d196:	430a      	orrs	r2, r1
    d198:	ea24 0402 	bic.w	r4, r4, r2
	u32_t port_in = nrf_gpio_port_in_read(cfg->port);
    d19c:	f8d8 2000 	ldr.w	r2, [r8]
	u32_t pin_states = ~(port_in ^ data->inverted ^ data->active_level);
    d1a0:	69dd      	ldr	r5, [r3, #28]
    d1a2:	691b      	ldr	r3, [r3, #16]
    return p_reg->IN;
    d1a4:	6912      	ldr	r2, [r2, #16]
    d1a6:	405d      	eors	r5, r3
    d1a8:	4055      	eors	r5, r2
	u32_t out = pin_states & level_pins;
    d1aa:	ea24 0505 	bic.w	r5, r4, r5
	while (level_pins) {
    d1ae:	b914      	cbnz	r4, d1b6 <check_level_trigger_pins+0x3a>
}
    d1b0:	4628      	mov	r0, r5
    d1b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
    d1b6:	4234      	tst	r4, r6
    d1b8:	d00a      	beq.n	d1d0 <check_level_trigger_pins+0x54>
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    d1ba:	f898 3004 	ldrb.w	r3, [r8, #4]
    d1be:	f007 001f 	and.w	r0, r7, #31
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
    d1c2:	2100      	movs	r1, #0
    d1c4:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
    d1c8:	f7fb f92c 	bl	8424 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
    d1cc:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
    d1d0:	3701      	adds	r7, #1
		bit <<= 1;
    d1d2:	0076      	lsls	r6, r6, #1
    d1d4:	e7eb      	b.n	d1ae <check_level_trigger_pins+0x32>

0000d1d6 <cfg_level_pins>:
{
    d1d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	u32_t bit = 1U << pin;
    d1da:	f04f 0801 	mov.w	r8, #1
	u32_t pin = 0U;
    d1de:	2700      	movs	r7, #0
	const struct gpio_nrfx_data *data = get_port_data(port);
    d1e0:	6885      	ldr	r5, [r0, #8]
	return port->config->config_info;
    d1e2:	6803      	ldr	r3, [r0, #0]
    d1e4:	689e      	ldr	r6, [r3, #8]
	u32_t out = data->int_en & data->pin_int_en;
    d1e6:	e9d5 3402 	ldrd	r3, r4, [r5, #8]
    d1ea:	401c      	ands	r4, r3
	out &= ~data->trig_edge & ~data->double_edge;
    d1ec:	e9d5 3205 	ldrd	r3, r2, [r5, #20]
    d1f0:	4313      	orrs	r3, r2
    d1f2:	ea24 0403 	bic.w	r4, r4, r3
	while (level_pins) {
    d1f6:	b90c      	cbnz	r4, d1fc <cfg_level_pins+0x26>
}
    d1f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
    d1fc:	ea18 0f04 	tst.w	r8, r4
    d200:	d012      	beq.n	d228 <cfg_level_pins+0x52>
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
    d202:	692b      	ldr	r3, [r5, #16]
    d204:	69ea      	ldr	r2, [r5, #28]
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    d206:	f896 c004 	ldrb.w	ip, [r6, #4]
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
    d20a:	4053      	eors	r3, r2
    d20c:	40fb      	lsrs	r3, r7
		return NRF_GPIO_PIN_SENSE_HIGH;
    d20e:	f013 0f01 	tst.w	r3, #1
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    d212:	f007 001f 	and.w	r0, r7, #31
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    d216:	bf0c      	ite	eq
    d218:	2103      	moveq	r1, #3
    d21a:	2102      	movne	r1, #2
    d21c:	ea40 104c 	orr.w	r0, r0, ip, lsl #5
    d220:	f7fb f900 	bl	8424 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
    d224:	ea24 0408 	bic.w	r4, r4, r8
		++pin;
    d228:	3701      	adds	r7, #1
		bit <<= 1;
    d22a:	ea4f 0848 	mov.w	r8, r8, lsl #1
    d22e:	e7e2      	b.n	d1f6 <cfg_level_pins+0x20>

0000d230 <gpio_nrfx_pin_enable_callback>:
	if (access_op == GPIO_ACCESS_BY_PORT) {
    d230:	2901      	cmp	r1, #1
{
    d232:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		from_pin = pin;
    d236:	bf18      	it	ne
    d238:	b2d4      	uxtbne	r4, r2
{
    d23a:	4606      	mov	r6, r0
		to_pin   = pin;
    d23c:	bf12      	itee	ne
    d23e:	4625      	movne	r5, r4
		to_pin   = 31U;
    d240:	251f      	moveq	r5, #31
		from_pin = 0U;
    d242:	2400      	moveq	r4, #0
		WRITE_BIT(data->int_en, curr_pin, enable);
    d244:	f04f 0801 	mov.w	r8, #1
	struct gpio_nrfx_data *data = get_port_data(port);
    d248:	6887      	ldr	r7, [r0, #8]
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    d24a:	42ac      	cmp	r4, r5
    d24c:	d902      	bls.n	d254 <gpio_nrfx_pin_enable_callback+0x24>
	return res;
    d24e:	2000      	movs	r0, #0
}
    d250:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		WRITE_BIT(data->int_en, curr_pin, enable);
    d254:	68fb      	ldr	r3, [r7, #12]
    d256:	fa08 f204 	lsl.w	r2, r8, r4
    d25a:	4313      	orrs	r3, r2
    d25c:	60fb      	str	r3, [r7, #12]
		res = gpiote_pin_int_cfg(port, curr_pin);
    d25e:	4621      	mov	r1, r4
    d260:	4630      	mov	r0, r6
    d262:	f7fb f8f5 	bl	8450 <gpiote_pin_int_cfg>
		if (res != 0) {
    d266:	2800      	cmp	r0, #0
    d268:	d1f2      	bne.n	d250 <gpio_nrfx_pin_enable_callback+0x20>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    d26a:	3401      	adds	r4, #1
    d26c:	b2e4      	uxtb	r4, r4
    d26e:	e7ec      	b.n	d24a <gpio_nrfx_pin_enable_callback+0x1a>

0000d270 <vipm_nrf_max_data_size_get>:
static inline int z_impl_ipm_max_data_size_get(struct device *ipmdev)
{
	const struct ipm_driver_api *api =
		(const struct ipm_driver_api *)ipmdev->driver_api;

	return api->max_data_size_get(ipmdev);
    d270:	6843      	ldr	r3, [r0, #4]
    d272:	689b      	ldr	r3, [r3, #8]
    d274:	4718      	bx	r3

0000d276 <vipm_nrf_max_id_val_get>:
}
    d276:	2000      	movs	r0, #0
    d278:	4770      	bx	lr

0000d27a <vipm_nrf_1_set_enabled>:
UTIL_LISTIFY(NRFX_IPC_ID_MAX_VALUE, VIPM_DEVICE, _);
    d27a:	b508      	push	{r3, lr}
    d27c:	b139      	cbz	r1, d28e <vipm_nrf_1_set_enabled+0x14>
    d27e:	202a      	movs	r0, #42	; 0x2a
    d280:	f7f4 fe40 	bl	1f04 <arch_irq_enable>
    d284:	2001      	movs	r0, #1
    d286:	f7fb fd01 	bl	8c8c <nrfx_ipc_receive_event_enable>
    d28a:	2000      	movs	r0, #0
    d28c:	bd08      	pop	{r3, pc}
    d28e:	2001      	movs	r0, #1
    d290:	f7fb fd06 	bl	8ca0 <nrfx_ipc_receive_event_disable>
    d294:	e7f9      	b.n	d28a <vipm_nrf_1_set_enabled+0x10>

0000d296 <uarte_nrfx_config_get>:
{
    d296:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
    d298:	6882      	ldr	r2, [r0, #8]
    d29a:	e892 0003 	ldmia.w	r2, {r0, r1}
    d29e:	e883 0003 	stmia.w	r3, {r0, r1}
}
    d2a2:	2000      	movs	r0, #0
    d2a4:	4770      	bx	lr

0000d2a6 <uarte_nrfx_err_check>:
	return dev->config->config_info;
    d2a6:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
    d2a8:	689b      	ldr	r3, [r3, #8]
    d2aa:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    d2ac:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    d2b0:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    d2b4:	4770      	bx	lr

0000d2b6 <uarte_nrfx_poll_in>:
	return dev->config->config_info;
    d2b6:	6803      	ldr	r3, [r0, #0]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
    d2b8:	6882      	ldr	r2, [r0, #8]
	return config->uarte_regs;
    d2ba:	689b      	ldr	r3, [r3, #8]
    d2bc:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    d2be:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    d2c2:	b138      	cbz	r0, d2d4 <uarte_nrfx_poll_in+0x1e>
	*c = data->rx_data;
    d2c4:	7a12      	ldrb	r2, [r2, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    d2c6:	2000      	movs	r0, #0
    d2c8:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    d2ca:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    d2cc:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    d2d0:	601a      	str	r2, [r3, #0]
	return 0;
    d2d2:	4770      	bx	lr
		return -1;
    d2d4:	f04f 30ff 	mov.w	r0, #4294967295
}
    d2d8:	4770      	bx	lr

0000d2da <uarte_nrfx_poll_out>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    d2da:	2200      	movs	r2, #0
	return dev->config->config_info;
    d2dc:	6803      	ldr	r3, [r0, #0]
{
    d2de:	b082      	sub	sp, #8
	return config->uarte_regs;
    d2e0:	689b      	ldr	r3, [r3, #8]
{
    d2e2:	f88d 1007 	strb.w	r1, [sp, #7]
	return config->uarte_regs;
    d2e6:	681b      	ldr	r3, [r3, #0]
    d2e8:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    d2ec:	f10d 0207 	add.w	r2, sp, #7
    d2f0:	f8c3 2544 	str.w	r2, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    d2f4:	2201      	movs	r2, #1
    d2f6:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    d2fa:	609a      	str	r2, [r3, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    d2fc:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    d300:	2900      	cmp	r1, #0
    d302:	d0fb      	beq.n	d2fc <uarte_nrfx_poll_out+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    d304:	60da      	str	r2, [r3, #12]
}
    d306:	b002      	add	sp, #8
    d308:	4770      	bx	lr

0000d30a <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    d30a:	4700      	bx	r0

0000d30c <metal_device_open>:
{
    d30c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    d30e:	460c      	mov	r4, r1
    d310:	4615      	mov	r5, r2
	if (!bus_name || !strlen(bus_name) ||
    d312:	4606      	mov	r6, r0
    d314:	b918      	cbnz	r0, d31e <metal_device_open+0x12>
		return -EINVAL;
    d316:	f06f 0015 	mvn.w	r0, #21
}
    d31a:	b002      	add	sp, #8
    d31c:	bd70      	pop	{r4, r5, r6, pc}
	if (!bus_name || !strlen(bus_name) ||
    d31e:	f7fe fd8c 	bl	be3a <strlen>
    d322:	2800      	cmp	r0, #0
    d324:	d0f7      	beq.n	d316 <metal_device_open+0xa>
    d326:	2c00      	cmp	r4, #0
    d328:	d0f5      	beq.n	d316 <metal_device_open+0xa>
	    !dev_name || !strlen(dev_name) ||
    d32a:	4620      	mov	r0, r4
    d32c:	f7fe fd85 	bl	be3a <strlen>
    d330:	2800      	cmp	r0, #0
    d332:	d0f0      	beq.n	d316 <metal_device_open+0xa>
    d334:	2d00      	cmp	r5, #0
    d336:	d0ee      	beq.n	d316 <metal_device_open+0xa>
	error = metal_bus_find(bus_name, &bus);
    d338:	a901      	add	r1, sp, #4
    d33a:	4630      	mov	r0, r6
    d33c:	f7fb fcfa 	bl	8d34 <metal_bus_find>
	if (error)
    d340:	2800      	cmp	r0, #0
    d342:	d1ea      	bne.n	d31a <metal_device_open+0xe>
	if (!bus->ops.dev_open)
    d344:	9801      	ldr	r0, [sp, #4]
    d346:	6883      	ldr	r3, [r0, #8]
    d348:	b11b      	cbz	r3, d352 <metal_device_open+0x46>
	error = (*bus->ops.dev_open)(bus, dev_name, device);
    d34a:	462a      	mov	r2, r5
    d34c:	4621      	mov	r1, r4
    d34e:	4798      	blx	r3
	if (error)
    d350:	e7e3      	b.n	d31a <metal_device_open+0xe>
		return -ENODEV;
    d352:	f06f 0012 	mvn.w	r0, #18
    d356:	e7e0      	b.n	d31a <metal_device_open+0xe>

0000d358 <metal_io_block_read>:
	metal_sys_io_mem_map(io);
}

int metal_io_block_read(struct metal_io_region *io, unsigned long offset,
	       void *restrict dst, int len)
{
    d358:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return (io->virt != METAL_BAD_VA && offset < io->size
    d35a:	6804      	ldr	r4, [r0, #0]
    d35c:	6885      	ldr	r5, [r0, #8]
		: NULL);
    d35e:	1c66      	adds	r6, r4, #1
    d360:	d00f      	beq.n	d382 <metal_io_block_read+0x2a>
	return (io->virt != METAL_BAD_VA && offset < io->size
    d362:	428d      	cmp	r5, r1
    d364:	d932      	bls.n	d3cc <metal_io_block_read+0x74>
		: NULL);
    d366:	440c      	add	r4, r1
	unsigned char *dest = dst;
	int retlen;

	if (offset >= io->size)
		return -ERANGE;
	if ((offset + len) > io->size)
    d368:	185e      	adds	r6, r3, r1
    d36a:	42ae      	cmp	r6, r5
		len = io->size - offset;
    d36c:	bf88      	it	hi
    d36e:	1a6b      	subhi	r3, r5, r1
	retlen = len;
	if (io->ops.block_read) {
    d370:	6a05      	ldr	r5, [r0, #32]
    d372:	b155      	cbz	r5, d38a <metal_io_block_read+0x32>
		retlen = (*io->ops.block_read)(
    d374:	9300      	str	r3, [sp, #0]
    d376:	2305      	movs	r3, #5
    d378:	47a8      	blx	r5
    d37a:	4603      	mov	r3, r0
		for (; len != 0; dest++, ptr++, len--)
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
	}
	return retlen;
}
    d37c:	4618      	mov	r0, r3
    d37e:	b002      	add	sp, #8
    d380:	bd70      	pop	{r4, r5, r6, pc}
	if (offset >= io->size)
    d382:	428d      	cmp	r5, r1
    d384:	d922      	bls.n	d3cc <metal_io_block_read+0x74>
    d386:	2400      	movs	r4, #0
    d388:	e7ee      	b.n	d368 <metal_io_block_read+0x10>
		atomic_thread_fence(memory_order_seq_cst);
    d38a:	4621      	mov	r1, r4
    d38c:	f3bf 8f5b 	dmb	ish
		while ( len && (
    d390:	461c      	mov	r4, r3
    d392:	2c00      	cmp	r4, #0
    d394:	d0f2      	beq.n	d37c <metal_io_block_read+0x24>
			((uintptr_t)dest % sizeof(int)) ||
    d396:	ea42 0001 	orr.w	r0, r2, r1
    d39a:	0780      	lsls	r0, r0, #30
    d39c:	d10a      	bne.n	d3b4 <metal_io_block_read+0x5c>
		for (; len >= (int)sizeof(int); dest += sizeof(int),
    d39e:	2c03      	cmp	r4, #3
    d3a0:	dc0e      	bgt.n	d3c0 <metal_io_block_read+0x68>
    d3a2:	3901      	subs	r1, #1
    d3a4:	4414      	add	r4, r2
		for (; len != 0; dest++, ptr++, len--)
    d3a6:	42a2      	cmp	r2, r4
    d3a8:	d0e8      	beq.n	d37c <metal_io_block_read+0x24>
				*(const unsigned char *)ptr;
    d3aa:	f811 0f01 	ldrb.w	r0, [r1, #1]!
			*(unsigned char *)dest =
    d3ae:	f802 0b01 	strb.w	r0, [r2], #1
    d3b2:	e7f8      	b.n	d3a6 <metal_io_block_read+0x4e>
				*(const unsigned char *)ptr;
    d3b4:	f811 0b01 	ldrb.w	r0, [r1], #1
			len--;
    d3b8:	3c01      	subs	r4, #1
			*(unsigned char *)dest =
    d3ba:	f802 0b01 	strb.w	r0, [r2], #1
			len--;
    d3be:	e7e8      	b.n	d392 <metal_io_block_read+0x3a>
			*(unsigned int *)dest = *(const unsigned int *)ptr;
    d3c0:	f851 0b04 	ldr.w	r0, [r1], #4
    d3c4:	3c04      	subs	r4, #4
    d3c6:	f842 0b04 	str.w	r0, [r2], #4
    d3ca:	e7e8      	b.n	d39e <metal_io_block_read+0x46>
		return -ERANGE;
    d3cc:	f06f 0325 	mvn.w	r3, #37	; 0x25
    d3d0:	e7d4      	b.n	d37c <metal_io_block_read+0x24>

0000d3d2 <metal_io_block_write>:

int metal_io_block_write(struct metal_io_region *io, unsigned long offset,
	       const void *restrict src, int len)
{
    d3d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return (io->virt != METAL_BAD_VA && offset < io->size
    d3d4:	6804      	ldr	r4, [r0, #0]
    d3d6:	6885      	ldr	r5, [r0, #8]
		: NULL);
    d3d8:	1c66      	adds	r6, r4, #1
    d3da:	d00e      	beq.n	d3fa <metal_io_block_write+0x28>
	return (io->virt != METAL_BAD_VA && offset < io->size
    d3dc:	428d      	cmp	r5, r1
    d3de:	d930      	bls.n	d442 <metal_io_block_write+0x70>
		: NULL);
    d3e0:	440c      	add	r4, r1
	const unsigned char *source = src;
	int retlen;

	if (offset >= io->size)
		return -ERANGE;
	if ((offset + len) > io->size)
    d3e2:	185e      	adds	r6, r3, r1
    d3e4:	42ae      	cmp	r6, r5
		len = io->size - offset;
    d3e6:	bf88      	it	hi
    d3e8:	1a6b      	subhi	r3, r5, r1
	retlen = len;
	if (io->ops.block_write) {
    d3ea:	6a45      	ldr	r5, [r0, #36]	; 0x24
    d3ec:	b94d      	cbnz	r5, d402 <metal_io_block_write+0x30>
    d3ee:	4619      	mov	r1, r3
		retlen = (*io->ops.block_write)(
			io, offset, src, memory_order_seq_cst, len);
	} else {
		while ( len && (
    d3f0:	b991      	cbnz	r1, d418 <metal_io_block_write+0x46>
					len -= sizeof(int))
			*(unsigned int *)ptr = *(const unsigned int *)source;
		for (; len != 0; ptr++, source++, len--)
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
		atomic_thread_fence(memory_order_seq_cst);
    d3f2:	f3bf 8f5b 	dmb	ish
	retlen = len;
    d3f6:	4618      	mov	r0, r3
    d3f8:	e006      	b.n	d408 <metal_io_block_write+0x36>
	if (offset >= io->size)
    d3fa:	428d      	cmp	r5, r1
    d3fc:	d921      	bls.n	d442 <metal_io_block_write+0x70>
    d3fe:	2400      	movs	r4, #0
    d400:	e7ef      	b.n	d3e2 <metal_io_block_write+0x10>
		retlen = (*io->ops.block_write)(
    d402:	9300      	str	r3, [sp, #0]
    d404:	2305      	movs	r3, #5
    d406:	47a8      	blx	r5
	}
	return retlen;
}
    d408:	b002      	add	sp, #8
    d40a:	bd70      	pop	{r4, r5, r6, pc}
				*(const unsigned char *)source;
    d40c:	f812 0b01 	ldrb.w	r0, [r2], #1
			len--;
    d410:	3901      	subs	r1, #1
			*(unsigned char *)ptr =
    d412:	f804 0b01 	strb.w	r0, [r4], #1
			len--;
    d416:	e7eb      	b.n	d3f0 <metal_io_block_write+0x1e>
			((uintptr_t)ptr % sizeof(int)) ||
    d418:	ea44 0002 	orr.w	r0, r4, r2
    d41c:	0780      	lsls	r0, r0, #30
    d41e:	d1f5      	bne.n	d40c <metal_io_block_write+0x3a>
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
    d420:	2903      	cmp	r1, #3
    d422:	dc08      	bgt.n	d436 <metal_io_block_write+0x64>
    d424:	3a01      	subs	r2, #1
    d426:	4421      	add	r1, r4
		for (; len != 0; ptr++, source++, len--)
    d428:	428c      	cmp	r4, r1
    d42a:	d0e2      	beq.n	d3f2 <metal_io_block_write+0x20>
				*(const unsigned char *)source;
    d42c:	f812 0f01 	ldrb.w	r0, [r2, #1]!
			*(unsigned char *)ptr =
    d430:	f804 0b01 	strb.w	r0, [r4], #1
    d434:	e7f8      	b.n	d428 <metal_io_block_write+0x56>
			*(unsigned int *)ptr = *(const unsigned int *)source;
    d436:	f852 0b04 	ldr.w	r0, [r2], #4
    d43a:	3904      	subs	r1, #4
    d43c:	f844 0b04 	str.w	r0, [r4], #4
    d440:	e7ee      	b.n	d420 <metal_io_block_write+0x4e>
		return -ERANGE;
    d442:	f06f 0025 	mvn.w	r0, #37	; 0x25
    d446:	e7df      	b.n	d408 <metal_io_block_write+0x36>

0000d448 <metal_io_block_set>:

int metal_io_block_set(struct metal_io_region *io, unsigned long offset,
	       unsigned char value, int len)
{
    d448:	b573      	push	{r0, r1, r4, r5, r6, lr}
    d44a:	461c      	mov	r4, r3
	return (io->virt != METAL_BAD_VA && offset < io->size
    d44c:	6803      	ldr	r3, [r0, #0]
    d44e:	6885      	ldr	r5, [r0, #8]
		: NULL);
    d450:	1c5e      	adds	r6, r3, #1
    d452:	d00e      	beq.n	d472 <metal_io_block_set+0x2a>
	return (io->virt != METAL_BAD_VA && offset < io->size
    d454:	42a9      	cmp	r1, r5
    d456:	d22d      	bcs.n	d4b4 <metal_io_block_set+0x6c>
		: NULL);
    d458:	440b      	add	r3, r1
	unsigned char *ptr = metal_io_virt(io, offset);
	int retlen = len;

	if (offset >= io->size)
		return -ERANGE;
	if ((offset + len) > io->size)
    d45a:	1866      	adds	r6, r4, r1
    d45c:	42ae      	cmp	r6, r5
		len = io->size - offset;
    d45e:	bf88      	it	hi
    d460:	1a6c      	subhi	r4, r5, r1
	retlen = len;
	if (io->ops.block_set) {
    d462:	6a85      	ldr	r5, [r0, #40]	; 0x28
    d464:	b185      	cbz	r5, d488 <metal_io_block_set+0x40>
		(*io->ops.block_set)(
    d466:	9400      	str	r4, [sp, #0]
    d468:	2305      	movs	r3, #5
    d46a:	47a8      	blx	r5
		for (; len != 0; ptr++, len--)
			*(unsigned char *)ptr = (unsigned char) value;
		atomic_thread_fence(memory_order_seq_cst);
	}
	return retlen;
}
    d46c:	4620      	mov	r0, r4
    d46e:	b002      	add	sp, #8
    d470:	bd70      	pop	{r4, r5, r6, pc}
	if (offset >= io->size)
    d472:	42a9      	cmp	r1, r5
    d474:	d21e      	bcs.n	d4b4 <metal_io_block_set+0x6c>
    d476:	2300      	movs	r3, #0
    d478:	e7ef      	b.n	d45a <metal_io_block_set+0x12>
			*(unsigned char *)ptr = (unsigned char) value;
    d47a:	f803 2b01 	strb.w	r2, [r3], #1
		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
    d47e:	3901      	subs	r1, #1
    d480:	b921      	cbnz	r1, d48c <metal_io_block_set+0x44>
		atomic_thread_fence(memory_order_seq_cst);
    d482:	f3bf 8f5b 	dmb	ish
    d486:	e7f1      	b.n	d46c <metal_io_block_set+0x24>
    d488:	4621      	mov	r1, r4
    d48a:	e7f9      	b.n	d480 <metal_io_block_set+0x38>
		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
    d48c:	0798      	lsls	r0, r3, #30
    d48e:	d1f4      	bne.n	d47a <metal_io_block_set+0x32>
			cint |= ((unsigned int)value << (CHAR_BIT * i));
    d490:	0610      	lsls	r0, r2, #24
    d492:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
    d496:	4310      	orrs	r0, r2
    d498:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
    d49c:	2903      	cmp	r1, #3
    d49e:	dc05      	bgt.n	d4ac <metal_io_block_set+0x64>
    d4a0:	4419      	add	r1, r3
		for (; len != 0; ptr++, len--)
    d4a2:	428b      	cmp	r3, r1
    d4a4:	d0ed      	beq.n	d482 <metal_io_block_set+0x3a>
			*(unsigned char *)ptr = (unsigned char) value;
    d4a6:	f803 2b01 	strb.w	r2, [r3], #1
    d4aa:	e7fa      	b.n	d4a2 <metal_io_block_set+0x5a>
			*(unsigned int *)ptr = cint;
    d4ac:	f843 0b04 	str.w	r0, [r3], #4
    d4b0:	3904      	subs	r1, #4
    d4b2:	e7f3      	b.n	d49c <metal_io_block_set+0x54>
		return -ERANGE;
    d4b4:	f06f 0425 	mvn.w	r4, #37	; 0x25
    d4b8:	e7d8      	b.n	d46c <metal_io_block_set+0x24>

0000d4ba <metal_generic_dev_sys_open>:

	/* Since Zephyr runs bare-metal there is no mapping that needs to be
	 * done of IO regions
	 */
	return 0;
}
    d4ba:	2000      	movs	r0, #0
    d4bc:	4770      	bx	lr

0000d4be <virtio_create_virtqueues>:
}

int virtio_create_virtqueues(struct virtio_device *vdev, unsigned int flags,
			     unsigned int nvqs, const char *names[],
			     vq_callback *callbacks[])
{
    d4be:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d4c2:	469b      	mov	fp, r3
	unsigned int num_vrings, i;
	int ret;
	(void)flags;

	num_vrings = vdev->vrings_num;
	if (nvqs > num_vrings)
    d4c4:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
    d4c6:	b085      	sub	sp, #20
	if (nvqs > num_vrings)
    d4c8:	4293      	cmp	r3, r2
{
    d4ca:	4606      	mov	r6, r0
    d4cc:	4617      	mov	r7, r2
	if (nvqs > num_vrings)
    d4ce:	d340      	bcc.n	d552 <virtio_create_virtqueues+0x94>
		return -ERROR_VQUEUE_INVLD_PARAM;
	/* Initialize virtqueue for each vring */
	for (i = 0; i < nvqs; i++) {
    d4d0:	2500      	movs	r5, #0
    d4d2:	42bd      	cmp	r5, r7
    d4d4:	d103      	bne.n	d4de <virtio_create_virtqueues+0x20>
				       callbacks[i], vdev->func->notify,
				       vring_info->vq);
		if (ret)
			return ret;
	}
	return 0;
    d4d6:	2000      	movs	r0, #0
}
    d4d8:	b005      	add	sp, #20
    d4da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		vring_info = &vdev->vrings_info[i];
    d4de:	2318      	movs	r3, #24
    d4e0:	fb03 f805 	mul.w	r8, r3, r5
    d4e4:	f8d6 902c 	ldr.w	r9, [r6, #44]	; 0x2c
		if (vdev->role == VIRTIO_DEV_MASTER) {
    d4e8:	69b2      	ldr	r2, [r6, #24]
		vring_info = &vdev->vrings_info[i];
    d4ea:	eb09 0408 	add.w	r4, r9, r8
		vring_alloc = &vring_info->info;
    d4ee:	f104 0a04 	add.w	sl, r4, #4
		if (vdev->role == VIRTIO_DEV_MASTER) {
    d4f2:	b9ca      	cbnz	r2, d528 <virtio_create_virtqueues+0x6a>
			struct metal_io_region *io = vring_info->io;
    d4f4:	6960      	ldr	r0, [r4, #20]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
    d4f6:	6863      	ldr	r3, [r4, #4]
    d4f8:	6801      	ldr	r1, [r0, #0]
			metal_io_block_set(io, offset, 0,
    d4fa:	f8b4 c00c 	ldrh.w	ip, [r4, #12]
    d4fe:	1a59      	subs	r1, r3, r1
						      vring_alloc->align));
    d500:	68a3      	ldr	r3, [r4, #8]
static inline int vring_size(unsigned int num, unsigned long align)
{
	int size;

	size = num * sizeof(struct vring_desc);
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
    d502:	f10c 0e03 	add.w	lr, ip, #3
	    sizeof(uint16_t);
	size = (size + align - 1) & ~(align - 1);
    d506:	1e5c      	subs	r4, r3, #1
    d508:	eb04 140c 	add.w	r4, r4, ip, lsl #4
    d50c:	eb04 044e 	add.w	r4, r4, lr, lsl #1
    d510:	425b      	negs	r3, r3
    d512:	4023      	ands	r3, r4
			metal_io_block_set(io, offset, 0,
    d514:	6884      	ldr	r4, [r0, #8]
	size += sizeof(struct vring_used) +
    d516:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
    d51a:	3306      	adds	r3, #6
    d51c:	42a1      	cmp	r1, r4
    d51e:	bf28      	it	cs
    d520:	f04f 31ff 	movcs.w	r1, #4294967295
    d524:	f7ff ff90 	bl	d448 <metal_io_block_set>
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
    d528:	f859 3008 	ldr.w	r3, [r9, r8]
    d52c:	f85b 2025 	ldr.w	r2, [fp, r5, lsl #2]
    d530:	9302      	str	r3, [sp, #8]
    d532:	6a33      	ldr	r3, [r6, #32]
    d534:	b2a9      	uxth	r1, r5
    d536:	6a1b      	ldr	r3, [r3, #32]
    d538:	4630      	mov	r0, r6
    d53a:	9301      	str	r3, [sp, #4]
    d53c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    d53e:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
    d542:	9300      	str	r3, [sp, #0]
    d544:	4653      	mov	r3, sl
    d546:	f000 f91e 	bl	d786 <virtqueue_create>
		if (ret)
    d54a:	2800      	cmp	r0, #0
    d54c:	d1c4      	bne.n	d4d8 <virtio_create_virtqueues+0x1a>
	for (i = 0; i < nvqs; i++) {
    d54e:	3501      	adds	r5, #1
    d550:	e7bf      	b.n	d4d2 <virtio_create_virtqueues+0x14>
		return -ERROR_VQUEUE_INVLD_PARAM;
    d552:	f44f 603c 	mov.w	r0, #3008	; 0xbc0
    d556:	e7bf      	b.n	d4d8 <virtio_create_virtqueues+0x1a>

0000d558 <metal_io_phys>:
 *		of offset.
 */
static inline metal_phys_addr_t
metal_io_phys(struct metal_io_region *io, unsigned long offset)
{
	if (!io->ops.offset_to_phys) {
    d558:	6b02      	ldr	r2, [r0, #48]	; 0x30
{
    d55a:	b410      	push	{r4}
    d55c:	460b      	mov	r3, r1
    d55e:	4604      	mov	r4, r0
	if (!io->ops.offset_to_phys) {
    d560:	b982      	cbnz	r2, d584 <metal_io_phys+0x2c>
		unsigned long page = (io->page_shift >=
    d562:	68c1      	ldr	r1, [r0, #12]
				     sizeof(offset) * CHAR_BIT ?
				     0 : offset >> io->page_shift);
    d564:	291f      	cmp	r1, #31
    d566:	bf98      	it	ls
    d568:	fa23 f201 	lsrls.w	r2, r3, r1
		return (io->physmap != NULL && offset < io->size
    d56c:	6841      	ldr	r1, [r0, #4]
			? io->physmap[page] + (offset & io->page_mask)
			: METAL_BAD_PHYS);
    d56e:	b159      	cbz	r1, d588 <metal_io_phys+0x30>
		return (io->physmap != NULL && offset < io->size
    d570:	6880      	ldr	r0, [r0, #8]
    d572:	4283      	cmp	r3, r0
    d574:	d208      	bcs.n	d588 <metal_io_phys+0x30>
			? io->physmap[page] + (offset & io->page_mask)
    d576:	6920      	ldr	r0, [r4, #16]
    d578:	4003      	ands	r3, r0
			: METAL_BAD_PHYS);
    d57a:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
    d57e:	4418      	add	r0, r3
	}

	return io->ops.offset_to_phys(io, offset);
}
    d580:	bc10      	pop	{r4}
    d582:	4770      	bx	lr
    d584:	bc10      	pop	{r4}
	return io->ops.offset_to_phys(io, offset);
    d586:	4710      	bx	r2
			: METAL_BAD_PHYS);
    d588:	f04f 30ff 	mov.w	r0, #4294967295
    d58c:	e7f8      	b.n	d580 <metal_io_phys+0x28>

0000d58e <virtqueue_add_buffer>:
{
    d58e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		head_idx = vq->vq_desc_head_idx;
    d592:	f8b0 a030 	ldrh.w	sl, [r0, #48]	; 0x30
{
    d596:	4604      	mov	r4, r0

	(void)vq;

	needed = readable + writable;

	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
    d598:	4656      	mov	r6, sl
    d59a:	2500      	movs	r5, #0
	needed = readable + writable;
    d59c:	eb02 0803 	add.w	r8, r2, r3
{
    d5a0:	4693      	mov	fp, r2
		dxp->cookie = cookie;
    d5a2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    d5a4:	eb00 03ca 	add.w	r3, r0, sl, lsl #3
    d5a8:	639a      	str	r2, [r3, #56]	; 0x38
		dxp->ndescs = needed;
    d5aa:	f8a3 803c 	strh.w	r8, [r3, #60]	; 0x3c
		idx = vq_ring_add_buffer(vq, vq->vq_ring.desc, head_idx,
    d5ae:	69c3      	ldr	r3, [r0, #28]
    d5b0:	f101 0904 	add.w	r9, r1, #4
    d5b4:	9300      	str	r3, [sp, #0]
		dp = &desc[idx];
		dp->addr = virtqueue_virt_to_phys(vq, buf_list[i].buf);
		dp->len = buf_list[i].len;
		dp->flags = 0;

		if (i < needed - 1)
    d5b6:	f108 32ff 	add.w	r2, r8, #4294967295
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
    d5ba:	45a8      	cmp	r8, r5
    d5bc:	dc1a      	bgt.n	d5f4 <virtqueue_add_buffer+0x66>
		vq->vq_free_cnt -= needed;
    d5be:	8d23      	ldrh	r3, [r4, #40]	; 0x28
	 * it usable to the host. The chain is made available now rather than
	 * deferring to virtqueue_notify() in the hopes that if the host is
	 * currently running on another CPU, we can keep it processing the new
	 * descriptor.
	 */
	avail_idx = vq->vq_ring.avail->idx & (vq->vq_nentries - 1);
    d5c0:	6a22      	ldr	r2, [r4, #32]
		vq->vq_free_cnt -= needed;
    d5c2:	eba3 0308 	sub.w	r3, r3, r8
    d5c6:	8523      	strh	r3, [r4, #40]	; 0x28
	avail_idx = vq->vq_ring.avail->idx & (vq->vq_nentries - 1);
    d5c8:	8963      	ldrh	r3, [r4, #10]
    d5ca:	8851      	ldrh	r1, [r2, #2]
    d5cc:	3b01      	subs	r3, #1
	vq->vq_ring.avail->ring[avail_idx] = desc_idx;
    d5ce:	400b      	ands	r3, r1
    d5d0:	eb02 0343 	add.w	r3, r2, r3, lsl #1
		vq->vq_desc_head_idx = idx;
    d5d4:	8626      	strh	r6, [r4, #48]	; 0x30
	vq->vq_ring.avail->ring[avail_idx] = desc_idx;
    d5d6:	f8a3 a004 	strh.w	sl, [r3, #4]

	atomic_thread_fence(memory_order_seq_cst);
    d5da:	f3bf 8f5b 	dmb	ish
}
    d5de:	2000      	movs	r0, #0

	vq->vq_ring.avail->idx++;
    d5e0:	6a22      	ldr	r2, [r4, #32]
    d5e2:	8853      	ldrh	r3, [r2, #2]
    d5e4:	3301      	adds	r3, #1
    d5e6:	8053      	strh	r3, [r2, #2]

	/* Keep pending count until virtqueue_notify(). */
	vq->vq_queued_cnt++;
    d5e8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    d5ea:	3301      	adds	r3, #1
    d5ec:	8563      	strh	r3, [r4, #42]	; 0x2a
}
    d5ee:	b003      	add	sp, #12
    d5f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dp = &desc[idx];
    d5f4:	9b00      	ldr	r3, [sp, #0]
		dp->addr = virtqueue_virt_to_phys(vq, buf_list[i].buf);
    d5f6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
		dp = &desc[idx];
    d5f8:	0136      	lsls	r6, r6, #4
    d5fa:	199f      	adds	r7, r3, r6
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
    d5fc:	f859 1c04 	ldr.w	r1, [r9, #-4]
    d600:	6803      	ldr	r3, [r0, #0]
    d602:	9201      	str	r2, [sp, #4]
    d604:	1ac9      	subs	r1, r1, r3
 *		physical address.
 */
static inline metal_phys_addr_t
metal_io_virt_to_phys(struct metal_io_region *io, void *virt)
{
	return metal_io_phys(io, metal_io_virt_to_offset(io, virt));
    d606:	6883      	ldr	r3, [r0, #8]
    d608:	f109 0908 	add.w	r9, r9, #8
    d60c:	4299      	cmp	r1, r3
    d60e:	bf28      	it	cs
    d610:	f04f 31ff 	movcs.w	r1, #4294967295
    d614:	f7ff ffa0 	bl	d558 <metal_io_phys>
		dp->addr = virtqueue_virt_to_phys(vq, buf_list[i].buf);
    d618:	9b00      	ldr	r3, [sp, #0]
		if (i < needed - 1)
    d61a:	9a01      	ldr	r2, [sp, #4]
		dp->addr = virtqueue_virt_to_phys(vq, buf_list[i].buf);
    d61c:	5198      	str	r0, [r3, r6]
    d61e:	2300      	movs	r3, #0
		dp->len = buf_list[i].len;
    d620:	f859 1c08 	ldr.w	r1, [r9, #-8]
		if (i < needed - 1)
    d624:	4295      	cmp	r5, r2
		dp->len = buf_list[i].len;
    d626:	60b9      	str	r1, [r7, #8]
		dp->flags = 0;
    d628:	bfb4      	ite	lt
    d62a:	2101      	movlt	r1, #1
    d62c:	4619      	movge	r1, r3
		if (i >= readable)
    d62e:	45ab      	cmp	fp, r5
		dp->flags = 0;
    d630:	81b9      	strh	r1, [r7, #12]
			dp->flags |= VRING_DESC_F_WRITE;
    d632:	bfdc      	itt	le
    d634:	b289      	uxthle	r1, r1
    d636:	f041 0102 	orrle.w	r1, r1, #2
		dp->addr = virtqueue_virt_to_phys(vq, buf_list[i].buf);
    d63a:	607b      	str	r3, [r7, #4]
			dp->flags |= VRING_DESC_F_WRITE;
    d63c:	bfd8      	it	le
    d63e:	81b9      	strhle	r1, [r7, #12]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
    d640:	3501      	adds	r5, #1
    d642:	89fe      	ldrh	r6, [r7, #14]
    d644:	e7b9      	b.n	d5ba <virtqueue_add_buffer+0x2c>

0000d646 <virtqueue_get_buffer>:
{
    d646:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!vq || vq->vq_used_cons_idx == vq->vq_ring.used->idx)
    d648:	2800      	cmp	r0, #0
    d64a:	d02a      	beq.n	d6a2 <virtqueue_get_buffer+0x5c>
    d64c:	6a45      	ldr	r5, [r0, #36]	; 0x24
    d64e:	8e43      	ldrh	r3, [r0, #50]	; 0x32
    d650:	886c      	ldrh	r4, [r5, #2]
    d652:	429c      	cmp	r4, r3
    d654:	d030      	beq.n	d6b8 <virtqueue_get_buffer+0x72>
	used_idx = vq->vq_used_cons_idx++ & (vq->vq_nentries - 1);
    d656:	1c5c      	adds	r4, r3, #1
    d658:	8644      	strh	r4, [r0, #50]	; 0x32
    d65a:	8944      	ldrh	r4, [r0, #10]
	atomic_thread_fence(memory_order_seq_cst);
    d65c:	f3bf 8f5b 	dmb	ish
	used_idx = vq->vq_used_cons_idx++ & (vq->vq_nentries - 1);
    d660:	3c01      	subs	r4, #1
    d662:	401c      	ands	r4, r3
	desc_idx = (uint16_t)uep->id;
    d664:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
    d668:	686b      	ldr	r3, [r5, #4]
    d66a:	b29f      	uxth	r7, r3
	if (len)
    d66c:	b109      	cbz	r1, d672 <virtqueue_get_buffer+0x2c>
		*len = uep->len;
    d66e:	68ad      	ldr	r5, [r5, #8]
    d670:	600d      	str	r5, [r1, #0]
	dp = &vq->vq_ring.desc[desc_idx];
    d672:	f8d0 c01c 	ldr.w	ip, [r0, #28]
    d676:	b29b      	uxth	r3, r3
    d678:	eb0c 1103 	add.w	r1, ip, r3, lsl #4
	vq->vq_free_cnt += dxp->ndescs;
    d67c:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
    d680:	8f9d      	ldrh	r5, [r3, #60]	; 0x3c
    d682:	8d06      	ldrh	r6, [r0, #40]	; 0x28
    d684:	442e      	add	r6, r5
	dxp->ndescs--;
    d686:	3d01      	subs	r5, #1
	vq->vq_free_cnt += dxp->ndescs;
    d688:	8506      	strh	r6, [r0, #40]	; 0x28
	dxp->ndescs--;
    d68a:	879d      	strh	r5, [r3, #60]	; 0x3c
	if ((dp->flags & VRING_DESC_F_INDIRECT) == 0) {
    d68c:	898d      	ldrh	r5, [r1, #12]
    d68e:	076e      	lsls	r6, r5, #29
    d690:	d50e      	bpl.n	d6b0 <virtqueue_get_buffer+0x6a>
	dp->next = vq->vq_desc_head_idx;
    d692:	8e05      	ldrh	r5, [r0, #48]	; 0x30
    d694:	81cd      	strh	r5, [r1, #14]
	vq->vq_descx[desc_idx].cookie = NULL;
    d696:	2100      	movs	r1, #0
	vq->vq_desc_head_idx = desc_idx;
    d698:	8607      	strh	r7, [r0, #48]	; 0x30
	cookie = vq->vq_descx[desc_idx].cookie;
    d69a:	6b98      	ldr	r0, [r3, #56]	; 0x38
	vq->vq_descx[desc_idx].cookie = NULL;
    d69c:	6399      	str	r1, [r3, #56]	; 0x38
	if (idx)
    d69e:	b102      	cbz	r2, d6a2 <virtqueue_get_buffer+0x5c>
		*idx = used_idx;
    d6a0:	8014      	strh	r4, [r2, #0]
}
    d6a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			dxp->ndescs--;
    d6a4:	8f9d      	ldrh	r5, [r3, #60]	; 0x3c
			dp = &vq->vq_ring.desc[dp->next];
    d6a6:	89c9      	ldrh	r1, [r1, #14]
			dxp->ndescs--;
    d6a8:	3d01      	subs	r5, #1
			dp = &vq->vq_ring.desc[dp->next];
    d6aa:	eb0c 1101 	add.w	r1, ip, r1, lsl #4
			dxp->ndescs--;
    d6ae:	879d      	strh	r5, [r3, #60]	; 0x3c
		while (dp->flags & VRING_DESC_F_NEXT) {
    d6b0:	898d      	ldrh	r5, [r1, #12]
    d6b2:	07ed      	lsls	r5, r5, #31
    d6b4:	d4f6      	bmi.n	d6a4 <virtqueue_get_buffer+0x5e>
    d6b6:	e7ec      	b.n	d692 <virtqueue_get_buffer+0x4c>
		return (NULL);
    d6b8:	2000      	movs	r0, #0
    d6ba:	e7f2      	b.n	d6a2 <virtqueue_get_buffer+0x5c>

0000d6bc <virtqueue_get_available_buffer>:
{
    d6bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	atomic_thread_fence(memory_order_seq_cst);
    d6c0:	f3bf 8f5b 	dmb	ish
{
    d6c4:	4617      	mov	r7, r2
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
    d6c6:	6a02      	ldr	r2, [r0, #32]
{
    d6c8:	460e      	mov	r6, r1
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
    d6ca:	8853      	ldrh	r3, [r2, #2]
    d6cc:	8e81      	ldrh	r1, [r0, #52]	; 0x34
{
    d6ce:	4605      	mov	r5, r0
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
    d6d0:	428b      	cmp	r3, r1
    d6d2:	d044      	beq.n	d75e <virtqueue_get_available_buffer+0xa2>
	head_idx = vq->vq_available_idx++ & (vq->vq_nentries - 1);
    d6d4:	1c4b      	adds	r3, r1, #1
    d6d6:	8683      	strh	r3, [r0, #52]	; 0x34
    d6d8:	8943      	ldrh	r3, [r0, #10]
	buffer = virtqueue_phys_to_virt(vq, vq->vq_ring.desc[*avail_idx].addr);
    d6da:	f8d0 802c 	ldr.w	r8, [r0, #44]	; 0x2c
	head_idx = vq->vq_available_idx++ & (vq->vq_nentries - 1);
    d6de:	3b01      	subs	r3, #1
	*avail_idx = vq->vq_ring.avail->ring[head_idx];
    d6e0:	400b      	ands	r3, r1
    d6e2:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    d6e6:	889b      	ldrh	r3, [r3, #4]
	buffer = virtqueue_phys_to_virt(vq, vq->vq_ring.desc[*avail_idx].addr);
    d6e8:	69c2      	ldr	r2, [r0, #28]
	*avail_idx = vq->vq_ring.avail->ring[head_idx];
    d6ea:	8033      	strh	r3, [r6, #0]
	buffer = virtqueue_phys_to_virt(vq, vq->vq_ring.desc[*avail_idx].addr);
    d6ec:	011b      	lsls	r3, r3, #4
    d6ee:	f852 9003 	ldr.w	r9, [r2, r3]
	if (!io->ops.phys_to_offset) {
    d6f2:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
    d6f6:	bb5b      	cbnz	r3, d750 <virtqueue_get_available_buffer+0x94>
			(io->page_mask == (metal_phys_addr_t)(-1) ?
    d6f8:	f8d8 4010 	ldr.w	r4, [r8, #16]
			phys - io->physmap[0] :  phys & io->page_mask);
    d6fc:	1c62      	adds	r2, r4, #1
    d6fe:	bf09      	itett	eq
    d700:	f8d8 3004 	ldreq.w	r3, [r8, #4]
    d704:	ea09 0404 	andne.w	r4, r9, r4
    d708:	681c      	ldreq	r4, [r3, #0]
    d70a:	eba9 0404 	subeq.w	r4, r9, r4
			if (metal_io_phys(io, offset) == phys)
    d70e:	4621      	mov	r1, r4
    d710:	4640      	mov	r0, r8
    d712:	f7ff ff21 	bl	d558 <metal_io_phys>
    d716:	4581      	cmp	r9, r0
    d718:	d009      	beq.n	d72e <virtqueue_get_available_buffer+0x72>
			offset += io->page_mask + 1;
    d71a:	f8d8 3010 	ldr.w	r3, [r8, #16]
    d71e:	3301      	adds	r3, #1
    d720:	441c      	add	r4, r3
		} while (offset < io->size);
    d722:	f8d8 3008 	ldr.w	r3, [r8, #8]
    d726:	429c      	cmp	r4, r3
    d728:	d3f1      	bcc.n	d70e <virtqueue_get_available_buffer+0x52>
		return METAL_BAD_OFFSET;
    d72a:	f04f 34ff 	mov.w	r4, #4294967295
	return (io->virt != METAL_BAD_VA && offset < io->size
    d72e:	f8d8 0000 	ldr.w	r0, [r8]
		: NULL);
    d732:	1c43      	adds	r3, r0, #1
    d734:	d011      	beq.n	d75a <virtqueue_get_available_buffer+0x9e>
	return (io->virt != METAL_BAD_VA && offset < io->size
    d736:	f8d8 3008 	ldr.w	r3, [r8, #8]
    d73a:	42a3      	cmp	r3, r4
    d73c:	d90d      	bls.n	d75a <virtqueue_get_available_buffer+0x9e>
		: NULL);
    d73e:	4420      	add	r0, r4
	*len = vq->vq_ring.desc[*avail_idx].len;
    d740:	8832      	ldrh	r2, [r6, #0]
    d742:	69eb      	ldr	r3, [r5, #28]
    d744:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    d748:	689b      	ldr	r3, [r3, #8]
    d74a:	603b      	str	r3, [r7, #0]
}
    d74c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return (*io->ops.phys_to_offset)(io, phys);
    d750:	4649      	mov	r1, r9
    d752:	4640      	mov	r0, r8
    d754:	4798      	blx	r3
    d756:	4604      	mov	r4, r0
    d758:	e7e9      	b.n	d72e <virtqueue_get_available_buffer+0x72>
		: NULL);
    d75a:	2000      	movs	r0, #0
    d75c:	e7f0      	b.n	d740 <virtqueue_get_available_buffer+0x84>
		return NULL;
    d75e:	2000      	movs	r0, #0
    d760:	e7f4      	b.n	d74c <virtqueue_get_available_buffer+0x90>

0000d762 <virtqueue_disable_cb>:
	if (vq->vq_flags & VIRTQUEUE_FLAG_EVENT_IDX) {
    d762:	68c2      	ldr	r2, [r0, #12]
    d764:	6a03      	ldr	r3, [r0, #32]
    d766:	0792      	lsls	r2, r2, #30
    d768:	d508      	bpl.n	d77c <virtqueue_disable_cb+0x1a>
		vring_used_event(&vq->vq_ring) =
    d76a:	6982      	ldr	r2, [r0, #24]
		    vq->vq_used_cons_idx - vq->vq_nentries - 1;
    d76c:	8941      	ldrh	r1, [r0, #10]
		vring_used_event(&vq->vq_ring) =
    d76e:	eb03 0342 	add.w	r3, r3, r2, lsl #1
		    vq->vq_used_cons_idx - vq->vq_nentries - 1;
    d772:	8e42      	ldrh	r2, [r0, #50]	; 0x32
    d774:	1a52      	subs	r2, r2, r1
    d776:	3a01      	subs	r2, #1
		vring_used_event(&vq->vq_ring) =
    d778:	809a      	strh	r2, [r3, #4]
	VQUEUE_IDLE(vq);
    d77a:	4770      	bx	lr
		vq->vq_ring.avail->flags |= VRING_AVAIL_F_NO_INTERRUPT;
    d77c:	881a      	ldrh	r2, [r3, #0]
    d77e:	f042 0201 	orr.w	r2, r2, #1
    d782:	801a      	strh	r2, [r3, #0]
}
    d784:	4770      	bx	lr

0000d786 <virtqueue_create>:
{
    d786:	b538      	push	{r3, r4, r5, lr}
    d788:	9c06      	ldr	r4, [sp, #24]
		vq->vq_queue_index = id;
    d78a:	8121      	strh	r1, [r4, #8]
		vq->callback = callback;
    d78c:	9904      	ldr	r1, [sp, #16]
		vq->vq_name =  name;
    d78e:	e9c4 0200 	strd	r0, r2, [r4]
		vq->vq_nentries = ring->num_descs;
    d792:	891a      	ldrh	r2, [r3, #8]
		vq->callback = callback;
    d794:	6121      	str	r1, [r4, #16]
		vq->notify = notify;
    d796:	9905      	ldr	r1, [sp, #20]
{
	vr->num = num;
	vr->desc = (struct vring_desc *)p;
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
	vr->used = (struct vring_used *)
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
    d798:	1c95      	adds	r5, r2, #2
    d79a:	6161      	str	r1, [r4, #20]
		vq_ring_init(vq, (void *)ring->vaddr, ring->align);
    d79c:	e9d3 1000 	ldrd	r1, r0, [r3]
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
    d7a0:	eb01 1302 	add.w	r3, r1, r2, lsl #4
    d7a4:	6223      	str	r3, [r4, #32]
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
    d7a6:	eb03 0345 	add.w	r3, r3, r5, lsl #1
	      align - 1) & ~(align - 1));
    d7aa:	1c45      	adds	r5, r0, #1
    d7ac:	442b      	add	r3, r5
    d7ae:	4240      	negs	r0, r0
    d7b0:	4003      	ands	r3, r0
	vr->used = (struct vring_used *)
    d7b2:	6263      	str	r3, [r4, #36]	; 0x24
	for (i = 0; i < size - 1; i++)
    d7b4:	2300      	movs	r3, #0
		vq->vq_nentries = ring->num_descs;
    d7b6:	8162      	strh	r2, [r4, #10]
		vq->vq_free_cnt = vq->vq_nentries;
    d7b8:	8522      	strh	r2, [r4, #40]	; 0x28
	vr->desc = (struct vring_desc *)p;
    d7ba:	e9c4 2106 	strd	r2, r1, [r4, #24]
		vr->desc[i].next = i + 1;
    d7be:	f101 000e 	add.w	r0, r1, #14
	for (i = 0; i < size - 1; i++)
    d7c2:	3a01      	subs	r2, #1
    d7c4:	4293      	cmp	r3, r2
    d7c6:	db0c      	blt.n	d7e2 <virtqueue_create+0x5c>
	vr->desc[i].next = VQ_RING_DESC_CHAIN_END;
    d7c8:	0112      	lsls	r2, r2, #4
    d7ca:	2a00      	cmp	r2, #0
    d7cc:	bfac      	ite	ge
    d7ce:	188a      	addge	r2, r1, r2
    d7d0:	1c0a      	addlt	r2, r1, #0
    d7d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
		virtqueue_disable_cb(vq);
    d7d6:	4620      	mov	r0, r4
	vr->desc[i].next = VQ_RING_DESC_CHAIN_END;
    d7d8:	81d3      	strh	r3, [r2, #14]
		virtqueue_disable_cb(vq);
    d7da:	f7ff ffc2 	bl	d762 <virtqueue_disable_cb>
}
    d7de:	2000      	movs	r0, #0
    d7e0:	bd38      	pop	{r3, r4, r5, pc}
		vr->desc[i].next = i + 1;
    d7e2:	011d      	lsls	r5, r3, #4
    d7e4:	3301      	adds	r3, #1
    d7e6:	5343      	strh	r3, [r0, r5]
    d7e8:	e7ec      	b.n	d7c4 <virtqueue_create+0x3e>

0000d7ea <virtqueue_kick>:
{
    d7ea:	b510      	push	{r4, lr}
	atomic_thread_fence(memory_order_seq_cst);
    d7ec:	f3bf 8f5b 	dmb	ish
 */
static int vq_ring_must_notify_host(struct virtqueue *vq)
{
	uint16_t new_idx, prev_idx, event_idx;

	if (vq->vq_flags & VIRTQUEUE_FLAG_EVENT_IDX) {
    d7f0:	68c3      	ldr	r3, [r0, #12]
{
    d7f2:	4604      	mov	r4, r0
	if (vq->vq_flags & VIRTQUEUE_FLAG_EVENT_IDX) {
    d7f4:	f013 0f02 	tst.w	r3, #2
    d7f8:	6a43      	ldr	r3, [r0, #36]	; 0x24
    d7fa:	d015      	beq.n	d828 <virtqueue_kick+0x3e>
		new_idx = vq->vq_ring.avail->idx;
		prev_idx = new_idx - vq->vq_queued_cnt;
		event_idx = vring_avail_event(&vq->vq_ring);
    d7fc:	6981      	ldr	r1, [r0, #24]
		new_idx = vq->vq_ring.avail->idx;
    d7fe:	6a02      	ldr	r2, [r0, #32]
		event_idx = vring_avail_event(&vq->vq_ring);
    d800:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    d804:	685b      	ldr	r3, [r3, #4]
 * event?
 */
static inline int
vring_need_event(uint16_t event_idx, uint16_t new_idx, uint16_t old)
{
	return (uint16_t)(new_idx - event_idx - 1) <
    d806:	8852      	ldrh	r2, [r2, #2]
    d808:	1ad2      	subs	r2, r2, r3
    d80a:	3a01      	subs	r2, #1
    d80c:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
    d80e:	b292      	uxth	r2, r2
    d810:	4293      	cmp	r3, r2
    d812:	bf94      	ite	ls
    d814:	2300      	movls	r3, #0
    d816:	2301      	movhi	r3, #1
	if (vq_ring_must_notify_host(vq))
    d818:	b11b      	cbz	r3, d822 <virtqueue_kick+0x38>
 * vq_ring_notify_host
 *
 */
static void vq_ring_notify_host(struct virtqueue *vq)
{
	if (vq->notify)
    d81a:	6963      	ldr	r3, [r4, #20]
    d81c:	b10b      	cbz	r3, d822 <virtqueue_kick+0x38>
		vq->notify(vq);
    d81e:	4620      	mov	r0, r4
    d820:	4798      	blx	r3
	vq->vq_queued_cnt = 0;
    d822:	2300      	movs	r3, #0
    d824:	8563      	strh	r3, [r4, #42]	; 0x2a
}
    d826:	bd10      	pop	{r4, pc}
	return ((vq->vq_ring.used->flags & VRING_USED_F_NO_NOTIFY) == 0);
    d828:	881b      	ldrh	r3, [r3, #0]
    d82a:	43db      	mvns	r3, r3
    d82c:	f003 0301 	and.w	r3, r3, #1
    d830:	e7f2      	b.n	d818 <virtqueue_kick+0x2e>

0000d832 <virtqueue_get_desc_size>:
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
    d832:	6a02      	ldr	r2, [r0, #32]
    d834:	8e81      	ldrh	r1, [r0, #52]	; 0x34
    d836:	8853      	ldrh	r3, [r2, #2]
    d838:	428b      	cmp	r3, r1
    d83a:	d00a      	beq.n	d852 <virtqueue_get_desc_size+0x20>
	head_idx = vq->vq_available_idx & (vq->vq_nentries - 1);
    d83c:	8943      	ldrh	r3, [r0, #10]
    d83e:	3b01      	subs	r3, #1
	avail_idx = vq->vq_ring.avail->ring[head_idx];
    d840:	400b      	ands	r3, r1
    d842:	eb02 0343 	add.w	r3, r2, r3, lsl #1
	len = vq->vq_ring.desc[avail_idx].len;
    d846:	889a      	ldrh	r2, [r3, #4]
    d848:	69c3      	ldr	r3, [r0, #28]
    d84a:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    d84e:	6898      	ldr	r0, [r3, #8]
	return len;
    d850:	4770      	bx	lr
		return 0;
    d852:	2000      	movs	r0, #0
}
    d854:	4770      	bx	lr

0000d856 <virtqueue_notification>:
	atomic_thread_fence(memory_order_seq_cst);
    d856:	f3bf 8f5b 	dmb	ish
	if (vq->callback)
    d85a:	6903      	ldr	r3, [r0, #16]
    d85c:	b103      	cbz	r3, d860 <virtqueue_notification+0xa>
		vq->callback(vq);
    d85e:	4718      	bx	r3
}
    d860:	4770      	bx	lr

0000d862 <rpmsg_unregister_endpoint>:
{
    d862:	b510      	push	{r4, lr}
	if (!ept)
    d864:	b1d0      	cbz	r0, d89c <rpmsg_unregister_endpoint+0x3a>
	if (ept->addr != RPMSG_ADDR_ANY)
    d866:	6a43      	ldr	r3, [r0, #36]	; 0x24
    d868:	1c5a      	adds	r2, r3, #1
    d86a:	d00f      	beq.n	d88c <rpmsg_unregister_endpoint+0x2a>
	if (addr < size)
    d86c:	2b03      	cmp	r3, #3
    d86e:	dc0d      	bgt.n	d88c <rpmsg_unregister_endpoint+0x2a>
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
    d870:	2101      	movs	r1, #1
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
    d872:	6a02      	ldr	r2, [r0, #32]
	bitmap[bit / METAL_BITS_PER_ULONG] &=
    d874:	095c      	lsrs	r4, r3, #5
    d876:	3248      	adds	r2, #72	; 0x48
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
    d878:	f003 031f 	and.w	r3, r3, #31
    d87c:	fa01 f303 	lsl.w	r3, r1, r3
	bitmap[bit / METAL_BITS_PER_ULONG] &=
    d880:	f852 1024 	ldr.w	r1, [r2, r4, lsl #2]
    d884:	ea21 0103 	bic.w	r1, r1, r3
    d888:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
	metal_list_del(&ept->node);
    d88c:	f100 0334 	add.w	r3, r0, #52	; 0x34
	return list->next == list;
}

static inline void metal_list_del(struct metal_list *node)
{
	node->next->prev = node->prev;
    d890:	e9d0 120d 	ldrd	r1, r2, [r0, #52]	; 0x34
    d894:	604a      	str	r2, [r1, #4]
	node->prev->next = node->next;
    d896:	6011      	str	r1, [r2, #0]
	node->next = node->prev = node;
    d898:	e9c0 330d 	strd	r3, r3, [r0, #52]	; 0x34
}
    d89c:	bd10      	pop	{r4, pc}

0000d89e <__metal_mutex_acquire>:
	return z_impl_k_sem_take(sem, timeout);
    d89e:	f04f 31ff 	mov.w	r1, #4294967295
    d8a2:	f7fc bb1b 	b.w	9edc <z_impl_k_sem_take>

0000d8a6 <rpmsg_send_ns_message>:
{
    d8a6:	b510      	push	{r4, lr}
	ns_msg.addr = ept->addr;
    d8a8:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
    d8aa:	b08c      	sub	sp, #48	; 0x30
    d8ac:	4604      	mov	r4, r0
	ns_msg.flags = flags;
    d8ae:	910b      	str	r1, [sp, #44]	; 0x2c
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
    d8b0:	2220      	movs	r2, #32
    d8b2:	4601      	mov	r1, r0
    d8b4:	a802      	add	r0, sp, #8
	ns_msg.addr = ept->addr;
    d8b6:	930a      	str	r3, [sp, #40]	; 0x28
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
    d8b8:	f7fe fa9e 	bl	bdf8 <strncpy>
	ret = rpmsg_send_offchannel_raw(ept, ept->addr,
    d8bc:	2328      	movs	r3, #40	; 0x28
    d8be:	2201      	movs	r2, #1
    d8c0:	6a61      	ldr	r1, [r4, #36]	; 0x24
    d8c2:	e9cd 3200 	strd	r3, r2, [sp]
    d8c6:	4620      	mov	r0, r4
    d8c8:	ab02      	add	r3, sp, #8
    d8ca:	2235      	movs	r2, #53	; 0x35
    d8cc:	f7fb fb02 	bl	8ed4 <rpmsg_send_offchannel_raw>
}
    d8d0:	ea00 70e0 	and.w	r0, r0, r0, asr #31
    d8d4:	b00c      	add	sp, #48	; 0x30
    d8d6:	bd10      	pop	{r4, pc}

0000d8d8 <rpmsg_get_endpoint>:
{
    d8d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d8dc:	4680      	mov	r8, r0
    d8de:	4689      	mov	r9, r1
    d8e0:	4616      	mov	r6, r2
    d8e2:	461f      	mov	r7, r3
	metal_list_for_each(&rdev->endpoints, node) {
    d8e4:	6805      	ldr	r5, [r0, #0]
    d8e6:	45a8      	cmp	r8, r5
    d8e8:	d101      	bne.n	d8ee <rpmsg_get_endpoint+0x16>
	return NULL;
    d8ea:	2400      	movs	r4, #0
    d8ec:	e021      	b.n	d932 <rpmsg_get_endpoint+0x5a>
		ept = metal_container_of(node, struct rpmsg_endpoint, node);
    d8ee:	f1a5 0434 	sub.w	r4, r5, #52	; 0x34
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
    d8f2:	1c71      	adds	r1, r6, #1
    d8f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    d8f6:	d006      	beq.n	d906 <rpmsg_get_endpoint+0x2e>
    d8f8:	429e      	cmp	r6, r3
		if (addr == ept->addr && dest_addr == ept->dest_addr)
    d8fa:	d01a      	beq.n	d932 <rpmsg_get_endpoint+0x5a>
		if (name)
    d8fc:	f1b9 0f00 	cmp.w	r9, #0
    d900:	d106      	bne.n	d910 <rpmsg_get_endpoint+0x38>
	metal_list_for_each(&rdev->endpoints, node) {
    d902:	682d      	ldr	r5, [r5, #0]
    d904:	e7ef      	b.n	d8e6 <rpmsg_get_endpoint+0xe>
		if (addr == ept->addr && dest_addr == ept->dest_addr)
    d906:	3301      	adds	r3, #1
    d908:	d1f8      	bne.n	d8fc <rpmsg_get_endpoint+0x24>
    d90a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    d90c:	42bb      	cmp	r3, r7
    d90e:	e7f4      	b.n	d8fa <rpmsg_get_endpoint+0x22>
			name_match = !strncmp(ept->name, name,
    d910:	2220      	movs	r2, #32
    d912:	4649      	mov	r1, r9
    d914:	4620      	mov	r0, r4
    d916:	f7fe faa3 	bl	be60 <strncmp>
		if (!name || !name_match)
    d91a:	2800      	cmp	r0, #0
    d91c:	d1f1      	bne.n	d902 <rpmsg_get_endpoint+0x2a>
		if (dest_addr != RPMSG_ADDR_ANY && ept->dest_addr == dest_addr)
    d91e:	1c7a      	adds	r2, r7, #1
    d920:	d002      	beq.n	d928 <rpmsg_get_endpoint+0x50>
    d922:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    d924:	42bb      	cmp	r3, r7
    d926:	d004      	beq.n	d932 <rpmsg_get_endpoint+0x5a>
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
    d928:	1c73      	adds	r3, r6, #1
    d92a:	d1ea      	bne.n	d902 <rpmsg_get_endpoint+0x2a>
    d92c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    d92e:	3301      	adds	r3, #1
    d930:	d1e7      	bne.n	d902 <rpmsg_get_endpoint+0x2a>
}
    d932:	4620      	mov	r0, r4
    d934:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000d938 <rpmsg_register_endpoint>:
	new_node->prev = node->prev;
    d938:	6842      	ldr	r2, [r0, #4]
	metal_list_add_tail(&rdev->endpoints, &ept->node);
    d93a:	f101 0334 	add.w	r3, r1, #52	; 0x34
	new_node->next = node;
    d93e:	e9c1 020d 	strd	r0, r2, [r1, #52]	; 0x34
	ept->rdev = rdev;
    d942:	6208      	str	r0, [r1, #32]
	new_node->next->prev = new_node;
    d944:	6043      	str	r3, [r0, #4]
	new_node->prev->next = new_node;
    d946:	6b8a      	ldr	r2, [r1, #56]	; 0x38
}
    d948:	2000      	movs	r0, #0
    d94a:	6013      	str	r3, [r2, #0]
    d94c:	4770      	bx	lr

0000d94e <rpmsg_destroy_ept>:
 *
 * @param ept - pointer to endpoint to destroy
 *
 */
void rpmsg_destroy_ept(struct rpmsg_endpoint *ept)
{
    d94e:	b538      	push	{r3, r4, r5, lr}
	struct rpmsg_device *rdev;

	if (!ept)
    d950:	4605      	mov	r5, r0
    d952:	b190      	cbz	r0, d97a <rpmsg_destroy_ept+0x2c>
		return;

	rdev = ept->rdev;
	if (ept->addr != RPMSG_NS_EPT_ADDR)
    d954:	e9d0 4308 	ldrd	r4, r3, [r0, #32]
    d958:	2b35      	cmp	r3, #53	; 0x35
    d95a:	d002      	beq.n	d962 <rpmsg_destroy_ept+0x14>
		(void)rpmsg_send_ns_message(ept, RPMSG_NS_DESTROY);
    d95c:	2101      	movs	r1, #1
    d95e:	f7ff ffa2 	bl	d8a6 <rpmsg_send_ns_message>
	metal_mutex_acquire(&rdev->lock);
    d962:	3458      	adds	r4, #88	; 0x58
    d964:	4620      	mov	r0, r4
    d966:	f7ff ff9a 	bl	d89e <__metal_mutex_acquire>
	rpmsg_unregister_endpoint(ept);
    d96a:	4628      	mov	r0, r5
    d96c:	f7ff ff79 	bl	d862 <rpmsg_unregister_endpoint>
	z_impl_k_sem_give(sem);
    d970:	4620      	mov	r0, r4
	metal_mutex_release(&rdev->lock);
}
    d972:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    d976:	f7fc ba85 	b.w	9e84 <z_impl_k_sem_give>
    d97a:	bd38      	pop	{r3, r4, r5, pc}

0000d97c <rpmsg_virtio_tx_callback>:
}
    d97c:	4770      	bx	lr

0000d97e <k_sem_give>:
    d97e:	f7fc ba81 	b.w	9e84 <z_impl_k_sem_give>

0000d982 <rpmsg_virtio_get_rx_buffer>:
	return rvdev->vdev->role;
    d982:	6f83      	ldr	r3, [r0, #120]	; 0x78
{
    d984:	b430      	push	{r4, r5}
    d986:	699b      	ldr	r3, [r3, #24]
    d988:	4614      	mov	r4, r2
	if (role == RPMSG_MASTER) {
    d98a:	b91b      	cbnz	r3, d994 <rpmsg_virtio_get_rx_buffer+0x12>
}
    d98c:	bc30      	pop	{r4, r5}
		data = virtqueue_get_buffer(rvdev->rvq, (uint32_t *)len, idx);
    d98e:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
    d990:	f7ff be59 	b.w	d646 <virtqueue_get_buffer>
	if (role == RPMSG_REMOTE) {
    d994:	2b01      	cmp	r3, #1
    d996:	d105      	bne.n	d9a4 <rpmsg_virtio_get_rx_buffer+0x22>
		    virtqueue_get_available_buffer(rvdev->rvq, idx,
    d998:	460a      	mov	r2, r1
    d99a:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
    d99c:	4621      	mov	r1, r4
}
    d99e:	bc30      	pop	{r4, r5}
		    virtqueue_get_available_buffer(rvdev->rvq, idx,
    d9a0:	f7ff be8c 	b.w	d6bc <virtqueue_get_available_buffer>
}
    d9a4:	2000      	movs	r0, #0
    d9a6:	bc30      	pop	{r4, r5}
    d9a8:	4770      	bx	lr

0000d9aa <__metal_mutex_acquire>:
	return z_impl_k_sem_take(sem, timeout);
    d9aa:	f04f 31ff 	mov.w	r1, #4294967295
    d9ae:	f7fc ba95 	b.w	9edc <z_impl_k_sem_take>

0000d9b2 <rpmsg_virtio_ns_callback>:
{
    d9b2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (len != sizeof(*ns_msg))
    d9b6:	2a28      	cmp	r2, #40	; 0x28
{
    d9b8:	b089      	sub	sp, #36	; 0x24
    d9ba:	4681      	mov	r9, r0
    d9bc:	4688      	mov	r8, r1
	if (len != sizeof(*ns_msg))
    d9be:	d12d      	bne.n	da1c <rpmsg_virtio_ns_callback+0x6a>
	struct rpmsg_device *rdev = ept->rdev;
    d9c0:	6a05      	ldr	r5, [r0, #32]
	metal_io_block_read(io,
    d9c2:	2320      	movs	r3, #32
	struct metal_io_region *io = rvdev->shbuf_io;
    d9c4:	f8d5 0084 	ldr.w	r0, [r5, #132]	; 0x84
	metal_io_block_read(io,
    d9c8:	466a      	mov	r2, sp
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
    d9ca:	6801      	ldr	r1, [r0, #0]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
    d9cc:	6884      	ldr	r4, [r0, #8]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
    d9ce:	eba8 0101 	sub.w	r1, r8, r1
    d9d2:	42a1      	cmp	r1, r4
    d9d4:	bf28      	it	cs
    d9d6:	f04f 31ff 	movcs.w	r1, #4294967295
    d9da:	f7ff fcbd 	bl	d358 <metal_io_block_read>
	metal_mutex_acquire(&rdev->lock);
    d9de:	f105 0658 	add.w	r6, r5, #88	; 0x58
	dest = ns_msg->addr;
    d9e2:	f8d8 7020 	ldr.w	r7, [r8, #32]
    d9e6:	4630      	mov	r0, r6
    d9e8:	f7ff ffdf 	bl	d9aa <__metal_mutex_acquire>
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
    d9ec:	463b      	mov	r3, r7
    d9ee:	f04f 32ff 	mov.w	r2, #4294967295
    d9f2:	4669      	mov	r1, sp
    d9f4:	4628      	mov	r0, r5
    d9f6:	f7ff ff6f 	bl	d8d8 <rpmsg_get_endpoint>
	if (ns_msg->flags & RPMSG_NS_DESTROY) {
    d9fa:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
    d9fe:	4604      	mov	r4, r0
	if (ns_msg->flags & RPMSG_NS_DESTROY) {
    da00:	07db      	lsls	r3, r3, #31
    da02:	d50f      	bpl.n	da24 <rpmsg_virtio_ns_callback+0x72>
		if (_ept)
    da04:	b110      	cbz	r0, da0c <rpmsg_virtio_ns_callback+0x5a>
			_ept->dest_addr = RPMSG_ADDR_ANY;
    da06:	f04f 33ff 	mov.w	r3, #4294967295
    da0a:	6283      	str	r3, [r0, #40]	; 0x28
    da0c:	4630      	mov	r0, r6
    da0e:	f7ff ffb6 	bl	d97e <k_sem_give>
		if (_ept && _ept->ns_unbind_cb)
    da12:	b11c      	cbz	r4, da1c <rpmsg_virtio_ns_callback+0x6a>
    da14:	6b23      	ldr	r3, [r4, #48]	; 0x30
    da16:	b10b      	cbz	r3, da1c <rpmsg_virtio_ns_callback+0x6a>
			_ept->ns_unbind_cb(ept);
    da18:	4648      	mov	r0, r9
    da1a:	4798      	blx	r3
}
    da1c:	2000      	movs	r0, #0
    da1e:	b009      	add	sp, #36	; 0x24
    da20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (!_ept) {
    da24:	b950      	cbnz	r0, da3c <rpmsg_virtio_ns_callback+0x8a>
    da26:	4630      	mov	r0, r6
    da28:	f7ff ffa9 	bl	d97e <k_sem_give>
			if (rdev->ns_bind_cb)
    da2c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
    da2e:	2b00      	cmp	r3, #0
    da30:	d0f4      	beq.n	da1c <rpmsg_virtio_ns_callback+0x6a>
				rdev->ns_bind_cb(rdev, name, dest);
    da32:	463a      	mov	r2, r7
    da34:	4669      	mov	r1, sp
    da36:	4628      	mov	r0, r5
    da38:	4798      	blx	r3
    da3a:	e7ef      	b.n	da1c <rpmsg_virtio_ns_callback+0x6a>
			_ept->dest_addr = dest;
    da3c:	6287      	str	r7, [r0, #40]	; 0x28
    da3e:	4630      	mov	r0, r6
    da40:	f7ff ff9d 	bl	d97e <k_sem_give>
    da44:	e7ea      	b.n	da1c <rpmsg_virtio_ns_callback+0x6a>

0000da46 <rpmsg_virtio_rx_callback>:
{
    da46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct rpmsg_virtio_device *rvdev = vdev->priv;
    da4a:	6803      	ldr	r3, [r0, #0]
{
    da4c:	b086      	sub	sp, #24
	struct rpmsg_virtio_device *rvdev = vdev->priv;
    da4e:	6a5d      	ldr	r5, [r3, #36]	; 0x24
	metal_mutex_acquire(&rdev->lock);
    da50:	f105 0758 	add.w	r7, r5, #88	; 0x58
    da54:	4638      	mov	r0, r7
    da56:	f7ff ffa8 	bl	d9aa <__metal_mutex_acquire>
			 rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
    da5a:	f10d 020a 	add.w	r2, sp, #10
    da5e:	a903      	add	r1, sp, #12
    da60:	4628      	mov	r0, r5
    da62:	f7ff ff8e 	bl	d982 <rpmsg_virtio_get_rx_buffer>
    da66:	4604      	mov	r4, r0
    da68:	4638      	mov	r0, r7
    da6a:	f7ff ff88 	bl	d97e <k_sem_give>
	while (rp_hdr) {
    da6e:	b914      	cbnz	r4, da76 <rpmsg_virtio_rx_callback+0x30>
}
    da70:	b006      	add	sp, #24
    da72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    da76:	4638      	mov	r0, r7
    da78:	f7ff ff97 	bl	d9aa <__metal_mutex_acquire>
			    struct rpmsg_endpoint *ept);

static inline struct rpmsg_endpoint *
rpmsg_get_ept_from_addr(struct rpmsg_device *rdev, uint32_t addr)
{
	return rpmsg_get_endpoint(rdev, NULL, addr, RPMSG_ADDR_ANY);
    da7c:	f04f 33ff 	mov.w	r3, #4294967295
    da80:	6862      	ldr	r2, [r4, #4]
    da82:	2100      	movs	r1, #0
    da84:	4628      	mov	r0, r5
    da86:	f7ff ff27 	bl	d8d8 <rpmsg_get_endpoint>
    da8a:	4606      	mov	r6, r0
    da8c:	4638      	mov	r0, r7
    da8e:	f7ff ff76 	bl	d97e <k_sem_give>
		if (!ept)
    da92:	2e00      	cmp	r6, #0
    da94:	d0ec      	beq.n	da70 <rpmsg_virtio_rx_callback+0x2a>
		if (ept->dest_addr == RPMSG_ADDR_ANY) {
    da96:	6ab3      	ldr	r3, [r6, #40]	; 0x28
		status = ept->cb(ept, (void *)RPMSG_LOCATE_DATA(rp_hdr),
    da98:	f104 0110 	add.w	r1, r4, #16
		if (ept->dest_addr == RPMSG_ADDR_ANY) {
    da9c:	3301      	adds	r3, #1
			ept->dest_addr = rp_hdr->src;
    da9e:	bf08      	it	eq
    daa0:	6823      	ldreq	r3, [r4, #0]
		status = ept->cb(ept, (void *)RPMSG_LOCATE_DATA(rp_hdr),
    daa2:	4630      	mov	r0, r6
			ept->dest_addr = rp_hdr->src;
    daa4:	bf08      	it	eq
    daa6:	62b3      	streq	r3, [r6, #40]	; 0x28
		status = ept->cb(ept, (void *)RPMSG_LOCATE_DATA(rp_hdr),
    daa8:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    daaa:	89a2      	ldrh	r2, [r4, #12]
    daac:	9300      	str	r3, [sp, #0]
    daae:	f8d6 802c 	ldr.w	r8, [r6, #44]	; 0x2c
    dab2:	6a73      	ldr	r3, [r6, #36]	; 0x24
    dab4:	47c0      	blx	r8
		RPMSG_ASSERT(status == RPMSG_SUCCESS,
    dab6:	b100      	cbz	r0, daba <rpmsg_virtio_rx_callback+0x74>
    dab8:	e7fe      	b.n	dab8 <rpmsg_virtio_rx_callback+0x72>
    daba:	4638      	mov	r0, r7
    dabc:	f7ff ff75 	bl	d9aa <__metal_mutex_acquire>
    dac0:	6faa      	ldr	r2, [r5, #120]	; 0x78
		rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
    dac2:	9b03      	ldr	r3, [sp, #12]
    dac4:	6992      	ldr	r2, [r2, #24]
	if (role == RPMSG_MASTER) {
    dac6:	b942      	cbnz	r2, dada <rpmsg_virtio_rx_callback+0x94>
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
    dac8:	9400      	str	r4, [sp, #0]
		vqbuf.len = len;
    daca:	e9cd 4304 	strd	r4, r3, [sp, #16]
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
    dace:	a904      	add	r1, sp, #16
    dad0:	2301      	movs	r3, #1
    dad2:	6fe8      	ldr	r0, [r5, #124]	; 0x7c
    dad4:	f7ff fd5b 	bl	d58e <virtqueue_add_buffer>
	if (role == RPMSG_REMOTE) {
    dad8:	e7bf      	b.n	da5a <rpmsg_virtio_rx_callback+0x14>
    dada:	2a01      	cmp	r2, #1
    dadc:	d1bd      	bne.n	da5a <rpmsg_virtio_rx_callback+0x14>
		virtqueue_add_consumed_buffer(rvdev->rvq, idx, len);
    dade:	461a      	mov	r2, r3
    dae0:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    dae4:	6fe8      	ldr	r0, [r5, #124]	; 0x7c
    dae6:	f7fb f9dd 	bl	8ea4 <virtqueue_add_consumed_buffer>
    daea:	e7b6      	b.n	da5a <rpmsg_virtio_rx_callback+0x14>

0000daec <rpmsg_virtio_shm_pool_get_buffer>:
	if (shpool->avail < size)
    daec:	6843      	ldr	r3, [r0, #4]
{
    daee:	b510      	push	{r4, lr}
	if (shpool->avail < size)
    daf0:	428b      	cmp	r3, r1
		return NULL;
    daf2:	bf31      	iteee	cc
    daf4:	2200      	movcc	r2, #0
	buffer =  (void *)((char *)shpool->base + shpool->size - shpool->avail);
    daf6:	6882      	ldrcs	r2, [r0, #8]
    daf8:	1ad4      	subcs	r4, r2, r3
    dafa:	6802      	ldrcs	r2, [r0, #0]
	shpool->avail -= size;
    dafc:	bf22      	ittt	cs
    dafe:	1a5b      	subcs	r3, r3, r1
	buffer =  (void *)((char *)shpool->base + shpool->size - shpool->avail);
    db00:	1912      	addcs	r2, r2, r4
	shpool->avail -= size;
    db02:	6043      	strcs	r3, [r0, #4]
}
    db04:	4610      	mov	r0, r2
    db06:	bd10      	pop	{r4, pc}

0000db08 <rpmsg_virtio_init_shm_pool>:
	if (!shpool)
    db08:	b138      	cbz	r0, db1a <rpmsg_virtio_init_shm_pool+0x12>
	shpool->size = WORD_ALIGN(size);
    db0a:	0793      	lsls	r3, r2, #30
    db0c:	bf1c      	itt	ne
    db0e:	f022 0203 	bicne.w	r2, r2, #3
    db12:	3204      	addne	r2, #4
	shpool->avail = WORD_ALIGN(size);
    db14:	e9c0 2201 	strd	r2, r2, [r0, #4]
	shpool->base = shb;
    db18:	6001      	str	r1, [r0, #0]
}
    db1a:	4770      	bx	lr

0000db1c <z_sys_power_save_idle_exit>:
	z_clock_idle_exit();
    db1c:	f7fe b920 	b.w	bd60 <z_clock_idle_exit>

0000db20 <k_mem_slab_init>:
{
    db20:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
    db22:	2400      	movs	r4, #0
    db24:	6184      	str	r4, [r0, #24]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    db26:	ea41 0402 	orr.w	r4, r1, r2
    db2a:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
    db2e:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->buffer = buffer;
    db32:	6101      	str	r1, [r0, #16]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    db34:	d10c      	bne.n	db50 <k_mem_slab_init+0x30>
	slab->free_list = NULL;
    db36:	6144      	str	r4, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    db38:	42a3      	cmp	r3, r4
    db3a:	d103      	bne.n	db44 <k_mem_slab_init+0x24>
	list->tail = (sys_dnode_t *)list;
    db3c:	e9c0 0000 	strd	r0, r0, [r0]
    db40:	2000      	movs	r0, #0
}
    db42:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
    db44:	6945      	ldr	r5, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    db46:	3401      	adds	r4, #1
		*(char **)p = slab->free_list;
    db48:	600d      	str	r5, [r1, #0]
		slab->free_list = p;
    db4a:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
    db4c:	4411      	add	r1, r2
    db4e:	e7f3      	b.n	db38 <k_mem_slab_init+0x18>
		return -EINVAL;
    db50:	f06f 0015 	mvn.w	r0, #21
	return rc;
    db54:	e7f5      	b.n	db42 <k_mem_slab_init+0x22>

0000db56 <k_mem_pool_malloc>:
{
    db56:	b513      	push	{r0, r1, r4, lr}
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
    db58:	2404      	movs	r4, #4
    db5a:	190a      	adds	r2, r1, r4
    db5c:	d204      	bcs.n	db68 <k_mem_pool_malloc+0x12>
	if (k_mem_pool_alloc(pool, &block, size, K_NO_WAIT) != 0) {
    db5e:	2300      	movs	r3, #0
    db60:	4669      	mov	r1, sp
    db62:	f7fb fdd7 	bl	9714 <k_mem_pool_alloc>
    db66:	b110      	cbz	r0, db6e <k_mem_pool_malloc+0x18>
		return NULL;
    db68:	2000      	movs	r0, #0
}
    db6a:	b002      	add	sp, #8
    db6c:	bd10      	pop	{r4, pc}
	(void)memcpy(block.data, &block.id, sizeof(struct k_mem_block_id));
    db6e:	4622      	mov	r2, r4
    db70:	a901      	add	r1, sp, #4
    db72:	9800      	ldr	r0, [sp, #0]
    db74:	f7fe f993 	bl	be9e <memcpy>
	return (char *)block.data + WB_UP(sizeof(struct k_mem_block_id));
    db78:	9800      	ldr	r0, [sp, #0]
    db7a:	3004      	adds	r0, #4
    db7c:	e7f5      	b.n	db6a <k_mem_pool_malloc+0x14>

0000db7e <k_free>:
	if (ptr != NULL) {
    db7e:	b110      	cbz	r0, db86 <k_free+0x8>
		k_mem_pool_free_id(ptr);
    db80:	3804      	subs	r0, #4
    db82:	f7fb be13 	b.w	97ac <k_mem_pool_free_id>
}
    db86:	4770      	bx	lr

0000db88 <queue_insert>:
#include <syscalls/k_queue_cancel_wait_mrsh.c>
#endif

static s32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			  bool alloc)
{
    db88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    db8c:	4604      	mov	r4, r0
    db8e:	460f      	mov	r7, r1
    db90:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
    db92:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
    db96:	f04f 0220 	mov.w	r2, #32
    db9a:	f3ef 8611 	mrs	r6, BASEPRI
    db9e:	f382 8811 	msr	BASEPRI, r2
    dba2:	f3bf 8f6f 	isb	sy
		return 0;
	}
#endif /* !CONFIG_POLL */

	/* Only need to actually allocate if no threads are pending */
	if (alloc) {
    dba6:	b1db      	cbz	r3, dbe0 <queue_insert+0x58>
		struct alloc_node *anode;

		anode = z_thread_malloc(sizeof(*anode));
    dba8:	2008      	movs	r0, #8
    dbaa:	f7fb fe31 	bl	9810 <z_thread_malloc>
		if (anode == NULL) {
    dbae:	b938      	cbnz	r0, dbc0 <queue_insert+0x38>
	__asm__ volatile(
    dbb0:	f386 8811 	msr	BASEPRI, r6
    dbb4:	f3bf 8f6f 	isb	sy
			k_spin_unlock(&queue->lock, key);
			return -ENOMEM;
    dbb8:	f06f 000b 	mvn.w	r0, #11
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
#endif /* CONFIG_POLL */

	z_reschedule(&queue->lock, key);
	return 0;
}
    dbbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, u8_t flags)
{
	__ASSERT((flags & ~SYS_SFLIST_FLAGS_MASK) == 0UL, "flags too large");
	node->next_and_flags = flags;
    dbc0:	2301      	movs	r3, #1
		anode->data = data;
    dbc2:	f8c0 8004 	str.w	r8, [r0, #4]
    dbc6:	6003      	str	r3, [r0, #0]
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
    dbc8:	6803      	ldr	r3, [r0, #0]
    dbca:	f003 0203 	and.w	r2, r3, #3
    dbce:	b95f      	cbnz	r7, dbe8 <queue_insert+0x60>
	parent->next_and_flags = cur_flags | (unative_t)child;
    dbd0:	6823      	ldr	r3, [r4, #0]
    dbd2:	4313      	orrs	r3, r2
    dbd4:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
    dbd6:	6863      	ldr	r3, [r4, #4]
	list->head = node;
    dbd8:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
    dbda:	b973      	cbnz	r3, dbfa <queue_insert+0x72>
	list->tail = node;
    dbdc:	6060      	str	r0, [r4, #4]
    dbde:	e00c      	b.n	dbfa <queue_insert+0x72>
	node->next_and_flags = flags;
    dbe0:	f8c8 3000 	str.w	r3, [r8]
    dbe4:	4640      	mov	r0, r8
    dbe6:	e7ef      	b.n	dbc8 <queue_insert+0x40>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    dbe8:	683b      	ldr	r3, [r7, #0]
Z_GENLIST_INSERT(sflist, sfnode)
    dbea:	f033 0303 	bics.w	r3, r3, #3
    dbee:	d114      	bne.n	dc1a <queue_insert+0x92>
	parent->next_and_flags = cur_flags | (unative_t)child;
    dbf0:	6002      	str	r2, [r0, #0]
Z_GENLIST_APPEND(sflist, sfnode)
    dbf2:	6862      	ldr	r2, [r4, #4]
    dbf4:	b95a      	cbnz	r2, dc0e <queue_insert+0x86>
	list->head = node;
    dbf6:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
    dbfa:	2104      	movs	r1, #4
    dbfc:	4628      	mov	r0, r5
    dbfe:	f000 fbc8 	bl	e392 <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
    dc02:	4628      	mov	r0, r5
    dc04:	4631      	mov	r1, r6
    dc06:	f000 f8f2 	bl	ddee <z_reschedule>
	return 0;
    dc0a:	2000      	movs	r0, #0
    dc0c:	e7d6      	b.n	dbbc <queue_insert+0x34>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    dc0e:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
    dc10:	f003 0303 	and.w	r3, r3, #3
    dc14:	4303      	orrs	r3, r0
    dc16:	6013      	str	r3, [r2, #0]
    dc18:	e7e0      	b.n	dbdc <queue_insert+0x54>
    dc1a:	4313      	orrs	r3, r2
    dc1c:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    dc1e:	683b      	ldr	r3, [r7, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
    dc20:	f003 0303 	and.w	r3, r3, #3
    dc24:	4318      	orrs	r0, r3
    dc26:	6038      	str	r0, [r7, #0]
    dc28:	e7e7      	b.n	dbfa <queue_insert+0x72>

0000dc2a <z_queue_node_peek>:
{
    dc2a:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (u8_t)0)) {
    dc2c:	4604      	mov	r4, r0
    dc2e:	b130      	cbz	r0, dc3e <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    dc30:	6802      	ldr	r2, [r0, #0]
    dc32:	0793      	lsls	r3, r2, #30
    dc34:	d003      	beq.n	dc3e <z_queue_node_peek+0x14>
		ret = anode->data;
    dc36:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
    dc38:	b109      	cbz	r1, dc3e <z_queue_node_peek+0x14>
			k_free(anode);
    dc3a:	f7ff ffa0 	bl	db7e <k_free>
}
    dc3e:	4620      	mov	r0, r4
    dc40:	bd10      	pop	{r4, pc}

0000dc42 <z_impl_k_queue_init>:
	list->head = NULL;
    dc42:	2300      	movs	r3, #0
	list->tail = NULL;
    dc44:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dlist_init(&queue->poll_events);
    dc48:	f100 0308 	add.w	r3, r0, #8
    dc4c:	e9c0 3302 	strd	r3, r3, [r0, #8]
}
    dc50:	4770      	bx	lr

0000dc52 <k_queue_append>:
	(void)queue_insert(queue, prev, data, false);
}

void k_queue_append(struct k_queue *queue, void *data)
{
	(void)queue_insert(queue, sys_sflist_peek_tail(&queue->data_q),
    dc52:	460a      	mov	r2, r1
    dc54:	2300      	movs	r3, #0
    dc56:	6841      	ldr	r1, [r0, #4]
    dc58:	f7ff bf96 	b.w	db88 <queue_insert>

0000dc5c <k_queue_prepend>:
			   data, false);
}

void k_queue_prepend(struct k_queue *queue, void *data)
{
	(void)queue_insert(queue, NULL, data, false);
    dc5c:	2300      	movs	r3, #0
    dc5e:	460a      	mov	r2, r1
    dc60:	4619      	mov	r1, r3
    dc62:	f7ff bf91 	b.w	db88 <queue_insert>

0000dc66 <k_queue_append_list>:
}
#include <syscalls/k_queue_alloc_prepend_mrsh.c>
#endif

int k_queue_append_list(struct k_queue *queue, void *head, void *tail)
{
    dc66:	b570      	push	{r4, r5, r6, lr}
	/* invalid head or tail of list */
	CHECKIF(head == NULL || tail == NULL) {
    dc68:	b1f1      	cbz	r1, dca8 <k_queue_append_list+0x42>
    dc6a:	b1ea      	cbz	r2, dca8 <k_queue_append_list+0x42>
		return -EINVAL;
	}

	k_spinlock_key_t key = k_spin_lock(&queue->lock);
    dc6c:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
    dc70:	f04f 0320 	mov.w	r3, #32
    dc74:	f3ef 8611 	mrs	r6, BASEPRI
    dc78:	f383 8811 	msr	BASEPRI, r3
    dc7c:	f3bf 8f6f 	isb	sy
Z_GENLIST_APPEND_LIST(sflist, sfnode)
    dc80:	6843      	ldr	r3, [r0, #4]
    dc82:	b95b      	cbnz	r3, dc9c <k_queue_append_list+0x36>
	list->head = node;
    dc84:	6001      	str	r1, [r0, #0]
	list->tail = node;
    dc86:	6042      	str	r2, [r0, #4]
	z_handle_obj_poll_events(&queue->poll_events, state);
    dc88:	2104      	movs	r1, #4
    dc8a:	4628      	mov	r0, r5
    dc8c:	f000 fb81 	bl	e392 <z_handle_obj_poll_events>
#else
	sys_sflist_append_list(&queue->data_q, head, tail);
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
#endif /* !CONFIG_POLL */

	z_reschedule(&queue->lock, key);
    dc90:	4628      	mov	r0, r5
    dc92:	4631      	mov	r1, r6
    dc94:	f000 f8ab 	bl	ddee <z_reschedule>

	return 0;
    dc98:	2000      	movs	r0, #0
}
    dc9a:	bd70      	pop	{r4, r5, r6, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    dc9c:	681c      	ldr	r4, [r3, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
    dc9e:	f004 0403 	and.w	r4, r4, #3
    dca2:	4321      	orrs	r1, r4
    dca4:	6019      	str	r1, [r3, #0]
    dca6:	e7ee      	b.n	dc86 <k_queue_append_list+0x20>
		return -EINVAL;
    dca8:	f06f 0015 	mvn.w	r0, #21
    dcac:	e7f5      	b.n	dc9a <k_queue_append_list+0x34>

0000dcae <z_impl_k_queue_get>:
	return val;
}
#endif /* CONFIG_POLL */

void *z_impl_k_queue_get(struct k_queue *queue, s32_t timeout)
{
    dcae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dcb2:	4604      	mov	r4, r0
    dcb4:	b086      	sub	sp, #24
    dcb6:	460d      	mov	r5, r1
    dcb8:	f04f 0320 	mov.w	r3, #32
    dcbc:	f3ef 8711 	mrs	r7, BASEPRI
    dcc0:	f383 8811 	msr	BASEPRI, r3
    dcc4:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(sflist)
    dcc8:	6800      	ldr	r0, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
    dcca:	b188      	cbz	r0, dcf0 <z_impl_k_queue_get+0x42>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    dccc:	6803      	ldr	r3, [r0, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
    dcce:	6862      	ldr	r2, [r4, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    dcd0:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
    dcd4:	4290      	cmp	r0, r2
	list->head = node;
    dcd6:	6023      	str	r3, [r4, #0]
	list->tail = node;
    dcd8:	bf08      	it	eq
    dcda:	6063      	streq	r3, [r4, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
    dcdc:	2101      	movs	r1, #1
    dcde:	f7ff ffa4 	bl	dc2a <z_queue_node_peek>
	__asm__ volatile(
    dce2:	f387 8811 	msr	BASEPRI, r7
    dce6:	f3bf 8f6f 	isb	sy
#else
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);

	return (ret != 0) ? NULL : _current->base.swap_data;
#endif /* CONFIG_POLL */
}
    dcea:	b006      	add	sp, #24
    dcec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (timeout == K_NO_WAIT) {
    dcf0:	2900      	cmp	r1, #0
    dcf2:	d0f6      	beq.n	dce2 <z_impl_k_queue_get+0x34>
    dcf4:	f387 8811 	msr	BASEPRI, r7
    dcf8:	f3bf 8f6f 	isb	sy
	k_poll_event_init(&event, K_POLL_TYPE_FIFO_DATA_AVAILABLE,
    dcfc:	2104      	movs	r1, #4
    dcfe:	4602      	mov	r2, r0
    dd00:	4623      	mov	r3, r4
    dd02:	eb0d 0001 	add.w	r0, sp, r1
    dd06:	f7fc fbdf 	bl	a4c8 <k_poll_event_init>
	if (timeout != K_FOREVER) {
    dd0a:	1c6a      	adds	r2, r5, #1
    dd0c:	d002      	beq.n	dd14 <z_impl_k_queue_get+0x66>
	return z_impl_k_uptime_get();
    dd0e:	f000 fa0d 	bl	e12c <z_impl_k_uptime_get>
    dd12:	4606      	mov	r6, r0
{
    dd14:	2700      	movs	r7, #0
		event.state = K_POLL_STATE_NOT_READY;
    dd16:	9b04      	ldr	r3, [sp, #16]
    dd18:	f36f 3310 	bfc	r3, #12, #5
    dd1c:	9304      	str	r3, [sp, #16]
	return z_impl_k_poll(events, num_events, timeout);
    dd1e:	2101      	movs	r1, #1
    dd20:	1bea      	subs	r2, r5, r7
    dd22:	a801      	add	r0, sp, #4
    dd24:	f7fc fbe4 	bl	a4f0 <z_impl_k_poll>
		if (err && err != -EAGAIN) {
    dd28:	b118      	cbz	r0, dd32 <z_impl_k_queue_get+0x84>
    dd2a:	300b      	adds	r0, #11
    dd2c:	d001      	beq.n	dd32 <z_impl_k_queue_get+0x84>
			return NULL;
    dd2e:	2000      	movs	r0, #0
    dd30:	e7db      	b.n	dcea <z_impl_k_queue_get+0x3c>
	__asm__ volatile(
    dd32:	f04f 0320 	mov.w	r3, #32
    dd36:	f3ef 8811 	mrs	r8, BASEPRI
    dd3a:	f383 8811 	msr	BASEPRI, r3
    dd3e:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(sflist)
    dd42:	6820      	ldr	r0, [r4, #0]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_sfnode_t *sys_sflist_get(sys_sflist_t *list);

Z_GENLIST_GET(sflist, sfnode)
    dd44:	b138      	cbz	r0, dd56 <z_impl_k_queue_get+0xa8>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    dd46:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
    dd48:	6862      	ldr	r2, [r4, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    dd4a:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
    dd4e:	4290      	cmp	r0, r2
	list->head = node;
    dd50:	6023      	str	r3, [r4, #0]
	list->tail = node;
    dd52:	bf08      	it	eq
    dd54:	6063      	streq	r3, [r4, #4]
		val = z_queue_node_peek(sys_sflist_get(&queue->data_q), true);
    dd56:	2101      	movs	r1, #1
    dd58:	f7ff ff67 	bl	dc2a <z_queue_node_peek>
	__asm__ volatile(
    dd5c:	f388 8811 	msr	BASEPRI, r8
    dd60:	f3bf 8f6f 	isb	sy
		if ((val == NULL) && (timeout != K_FOREVER)) {
    dd64:	2800      	cmp	r0, #0
    dd66:	d1c0      	bne.n	dcea <z_impl_k_queue_get+0x3c>
    dd68:	1c6b      	adds	r3, r5, #1
    dd6a:	d0d4      	beq.n	dd16 <z_impl_k_queue_get+0x68>
	return z_impl_k_uptime_get();
    dd6c:	f000 f9de 	bl	e12c <z_impl_k_uptime_get>
			elapsed = k_uptime_get_32() - start;
    dd70:	1b87      	subs	r7, r0, r6
	} while (!val && !done);
    dd72:	42bd      	cmp	r5, r7
    dd74:	dacf      	bge.n	dd16 <z_impl_k_queue_get+0x68>
    dd76:	e7da      	b.n	dd2e <z_impl_k_queue_get+0x80>

0000dd78 <z_is_thread_ready>:
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    dd78:	7b43      	ldrb	r3, [r0, #13]
    dd7a:	06db      	lsls	r3, r3, #27
    dd7c:	bf03      	ittte	eq
    dd7e:	6980      	ldreq	r0, [r0, #24]
    dd80:	fab0 f080 	clzeq	r0, r0
    dd84:	0940      	lsreq	r0, r0, #5
    dd86:	2000      	movne	r0, #0
}
    dd88:	4770      	bx	lr

0000dd8a <z_is_t1_higher_prio_than_t2>:
	if (thread_1->base.prio < thread_2->base.prio) {
    dd8a:	f990 000e 	ldrsb.w	r0, [r0, #14]
    dd8e:	f991 300e 	ldrsb.w	r3, [r1, #14]
}
    dd92:	4298      	cmp	r0, r3
    dd94:	bfac      	ite	ge
    dd96:	2000      	movge	r0, #0
    dd98:	2001      	movlt	r0, #1
    dd9a:	4770      	bx	lr

0000dd9c <z_find_first_thread_to_unpend>:
{
    dd9c:	b510      	push	{r4, lr}
	__asm__ volatile(
    dd9e:	f04f 0320 	mov.w	r3, #32
    dda2:	f3ef 8411 	mrs	r4, BASEPRI
    dda6:	f383 8811 	msr	BASEPRI, r3
    ddaa:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
    ddae:	f000 f85d 	bl	de6c <z_priq_dumb_best>
	__asm__ volatile(
    ddb2:	f384 8811 	msr	BASEPRI, r4
    ddb6:	f3bf 8f6f 	isb	sy
}
    ddba:	bd10      	pop	{r4, pc}

0000ddbc <z_unpend_thread_no_timeout>:
{
    ddbc:	b538      	push	{r3, r4, r5, lr}
    ddbe:	4604      	mov	r4, r0
	__asm__ volatile(
    ddc0:	f04f 0320 	mov.w	r3, #32
    ddc4:	f3ef 8511 	mrs	r5, BASEPRI
    ddc8:	f383 8811 	msr	BASEPRI, r3
    ddcc:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
    ddd0:	4601      	mov	r1, r0
    ddd2:	6880      	ldr	r0, [r0, #8]
    ddd4:	f7fb fd88 	bl	98e8 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    ddd8:	7b63      	ldrb	r3, [r4, #13]
    ddda:	f023 0302 	bic.w	r3, r3, #2
    ddde:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
    dde0:	f385 8811 	msr	BASEPRI, r5
    dde4:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
    dde8:	2300      	movs	r3, #0
    ddea:	60a3      	str	r3, [r4, #8]
}
    ddec:	bd38      	pop	{r3, r4, r5, pc}

0000ddee <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    ddee:	b921      	cbnz	r1, ddfa <z_reschedule+0xc>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    ddf0:	f3ef 8005 	mrs	r0, IPSR
    ddf4:	b908      	cbnz	r0, ddfa <z_reschedule+0xc>
    ddf6:	f7f4 b831 	b.w	1e5c <arch_swap>
    ddfa:	f381 8811 	msr	BASEPRI, r1
    ddfe:	f3bf 8f6f 	isb	sy
}
    de02:	4770      	bx	lr

0000de04 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    de04:	4603      	mov	r3, r0
    de06:	b920      	cbnz	r0, de12 <z_reschedule_irqlock+0xe>
    de08:	f3ef 8205 	mrs	r2, IPSR
    de0c:	b90a      	cbnz	r2, de12 <z_reschedule_irqlock+0xe>
    de0e:	f7f4 b825 	b.w	1e5c <arch_swap>
    de12:	f383 8811 	msr	BASEPRI, r3
    de16:	f3bf 8f6f 	isb	sy
}
    de1a:	4770      	bx	lr

0000de1c <z_reschedule_unlocked>:
	__asm__ volatile(
    de1c:	f04f 0320 	mov.w	r3, #32
    de20:	f3ef 8011 	mrs	r0, BASEPRI
    de24:	f383 8811 	msr	BASEPRI, r3
    de28:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    de2c:	f7ff bfea 	b.w	de04 <z_reschedule_irqlock>

0000de30 <z_unpend_thread>:
{
    de30:	b538      	push	{r3, r4, r5, lr}
    de32:	4604      	mov	r4, r0
    de34:	f04f 0320 	mov.w	r3, #32
    de38:	f3ef 8511 	mrs	r5, BASEPRI
    de3c:	f383 8811 	msr	BASEPRI, r3
    de40:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
    de44:	4601      	mov	r1, r0
    de46:	6880      	ldr	r0, [r0, #8]
    de48:	f7fb fd4e 	bl	98e8 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    de4c:	7b63      	ldrb	r3, [r4, #13]
    de4e:	f023 0302 	bic.w	r3, r3, #2
    de52:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
    de54:	f385 8811 	msr	BASEPRI, r5
    de58:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
    de5c:	2300      	movs	r3, #0
	return z_abort_timeout(&thread->base.timeout);
    de5e:	f104 0018 	add.w	r0, r4, #24
    de62:	60a3      	str	r3, [r4, #8]
}
    de64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    de68:	f000 b91c 	b.w	e0a4 <z_abort_timeout>

0000de6c <z_priq_dumb_best>:
	return list->head == list;
    de6c:	6803      	ldr	r3, [r0, #0]
}
    de6e:	4298      	cmp	r0, r3
    de70:	bf14      	ite	ne
    de72:	4618      	movne	r0, r3
    de74:	2000      	moveq	r0, #0
    de76:	4770      	bx	lr

0000de78 <z_thread_timeout>:
	if (thread->base.pended_on != NULL) {
    de78:	f850 3c10 	ldr.w	r3, [r0, #-16]
{
    de7c:	b570      	push	{r4, r5, r6, lr}
    de7e:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
    de80:	f1a0 0518 	sub.w	r5, r0, #24
	if (thread->base.pended_on != NULL) {
    de84:	b1cb      	cbz	r3, deba <z_thread_timeout+0x42>
	__asm__ volatile(
    de86:	f04f 0320 	mov.w	r3, #32
    de8a:	f3ef 8611 	mrs	r6, BASEPRI
    de8e:	f383 8811 	msr	BASEPRI, r3
    de92:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
    de96:	4629      	mov	r1, r5
    de98:	f850 0c10 	ldr.w	r0, [r0, #-16]
    de9c:	f7fb fd24 	bl	98e8 <z_priq_dumb_remove>
    dea0:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    dea4:	f023 0302 	bic.w	r3, r3, #2
    dea8:	f804 3c0b 	strb.w	r3, [r4, #-11]
	__asm__ volatile(
    deac:	f386 8811 	msr	BASEPRI, r6
    deb0:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
    deb4:	2300      	movs	r3, #0
    deb6:	f844 3c10 	str.w	r3, [r4, #-16]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    deba:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
	if (z_is_thread_ready(thread)) {
    debe:	4628      	mov	r0, r5
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    dec0:	f023 0314 	bic.w	r3, r3, #20
    dec4:	f804 3c0b 	strb.w	r3, [r4, #-11]
	if (z_is_thread_ready(thread)) {
    dec8:	f7ff ff56 	bl	dd78 <z_is_thread_ready>
    decc:	b120      	cbz	r0, ded8 <z_thread_timeout+0x60>
		z_add_thread_to_ready_q(thread);
    dece:	4628      	mov	r0, r5
}
    ded0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ded4:	f7fb bd58 	b.w	9988 <z_add_thread_to_ready_q>
    ded8:	bd70      	pop	{r4, r5, r6, pc}

0000deda <z_unpend_first_thread>:
{
    deda:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    dedc:	f04f 0320 	mov.w	r3, #32
    dee0:	f3ef 8211 	mrs	r2, BASEPRI
    dee4:	f383 8811 	msr	BASEPRI, r3
    dee8:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
    deec:	f7ff ffbe 	bl	de6c <z_priq_dumb_best>
    def0:	4604      	mov	r4, r0
	__asm__ volatile(
    def2:	f382 8811 	msr	BASEPRI, r2
    def6:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
    defa:	b1c8      	cbz	r0, df30 <z_unpend_first_thread+0x56>
	__asm__ volatile(
    defc:	f04f 0320 	mov.w	r3, #32
    df00:	f3ef 8511 	mrs	r5, BASEPRI
    df04:	f383 8811 	msr	BASEPRI, r3
    df08:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
    df0c:	4601      	mov	r1, r0
    df0e:	6880      	ldr	r0, [r0, #8]
    df10:	f7fb fcea 	bl	98e8 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    df14:	7b63      	ldrb	r3, [r4, #13]
    df16:	f023 0302 	bic.w	r3, r3, #2
    df1a:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
    df1c:	f385 8811 	msr	BASEPRI, r5
    df20:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
    df24:	2300      	movs	r3, #0
    df26:	f104 0018 	add.w	r0, r4, #24
    df2a:	60a3      	str	r3, [r4, #8]
    df2c:	f000 f8ba 	bl	e0a4 <z_abort_timeout>
}
    df30:	4620      	mov	r0, r4
    df32:	bd38      	pop	{r3, r4, r5, pc}

0000df34 <z_unpend_all>:
{
    df34:	b570      	push	{r4, r5, r6, lr}
    df36:	4606      	mov	r6, r0
	int need_sched = 0;
    df38:	2500      	movs	r5, #0
    df3a:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    df3c:	42a6      	cmp	r6, r4
    df3e:	d000      	beq.n	df42 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    df40:	b90c      	cbnz	r4, df46 <z_unpend_all+0x12>
}
    df42:	4628      	mov	r0, r5
    df44:	bd70      	pop	{r4, r5, r6, pc}
		z_unpend_thread(thread);
    df46:	4620      	mov	r0, r4
    df48:	f7ff ff72 	bl	de30 <z_unpend_thread>
	if (z_is_thread_ready(thread)) {
    df4c:	4620      	mov	r0, r4
    df4e:	f7ff ff13 	bl	dd78 <z_is_thread_ready>
		need_sched = 1;
    df52:	2501      	movs	r5, #1
    df54:	2800      	cmp	r0, #0
    df56:	d0f0      	beq.n	df3a <z_unpend_all+0x6>
		z_add_thread_to_ready_q(thread);
    df58:	4620      	mov	r0, r4
    df5a:	f7fb fd15 	bl	9988 <z_add_thread_to_ready_q>
    df5e:	e7ec      	b.n	df3a <z_unpend_all+0x6>

0000df60 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || initial_count > limit) {
    df60:	b15a      	cbz	r2, df7a <z_impl_k_sem_init+0x1a>
    df62:	428a      	cmp	r2, r1
    df64:	d309      	bcc.n	df7a <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
    df66:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
    df6a:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
    df6e:	e9c0 0000 	strd	r0, r0, [r0]
    df72:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
    df76:	2000      	movs	r0, #0
    df78:	4770      	bx	lr
		return -EINVAL;
    df7a:	f06f 0015 	mvn.w	r0, #21
}
    df7e:	4770      	bx	lr

0000df80 <k_is_in_isr>:
    df80:	f3ef 8005 	mrs	r0, IPSR
}
    df84:	3000      	adds	r0, #0
    df86:	bf18      	it	ne
    df88:	2001      	movne	r0, #1
    df8a:	4770      	bx	lr

0000df8c <z_impl_k_thread_name_set>:
}
    df8c:	f06f 0046 	mvn.w	r0, #70	; 0x46
    df90:	4770      	bx	lr

0000df92 <k_thread_name_get>:
}
    df92:	2000      	movs	r0, #0
    df94:	4770      	bx	lr

0000df96 <z_new_thread_init>:
{
    df96:	b510      	push	{r4, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
    df98:	9c02      	ldr	r4, [sp, #8]
	thread_base->thread_state = (u8_t)initial_state;

	thread_base->prio = priority;
    df9a:	7383      	strb	r3, [r0, #14]
	thread_base->user_options = (u8_t)options;
    df9c:	7304      	strb	r4, [r0, #12]

	thread_base->sched_locked = 0U;
    df9e:	2300      	movs	r3, #0
	thread_base->thread_state = (u8_t)initial_state;
    dfa0:	2404      	movs	r4, #4
	thread_base->sched_locked = 0U;
    dfa2:	73c3      	strb	r3, [r0, #15]
	thread_base->thread_state = (u8_t)initial_state;
    dfa4:	7344      	strb	r4, [r0, #13]
	node->prev = NULL;
    dfa6:	e9c0 3306 	strd	r3, r3, [r0, #24]
	thread->fn_abort = NULL;
    dfaa:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
	thread->stack_info.size = (u32_t)stackSize;
    dfae:	e9c0 1216 	strd	r1, r2, [r0, #88]	; 0x58
}
    dfb2:	bd10      	pop	{r4, pc}

0000dfb4 <k_work_submit_to_queue>:
{
    dfb4:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    dfb6:	f101 0308 	add.w	r3, r1, #8
    dfba:	e8d3 2fef 	ldaex	r2, [r3]
    dfbe:	f042 0c01 	orr.w	ip, r2, #1
    dfc2:	e8c3 cfee 	stlex	lr, ip, [r3]
    dfc6:	f1be 0f00 	cmp.w	lr, #0
    dfca:	d1f6      	bne.n	dfba <k_work_submit_to_queue+0x6>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    dfcc:	07d3      	lsls	r3, r2, #31
    dfce:	d403      	bmi.n	dfd8 <k_work_submit_to_queue+0x24>
}
    dfd0:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
    dfd4:	f7ff be3d 	b.w	dc52 <k_queue_append>
}
    dfd8:	f85d fb04 	ldr.w	pc, [sp], #4

0000dfdc <work_timeout>:
	k_work_submit_to_queue(w->work_q, &w->work);
    dfdc:	f1a0 010c 	sub.w	r1, r0, #12
    dfe0:	6900      	ldr	r0, [r0, #16]
    dfe2:	f7ff bfe7 	b.w	dfb4 <k_work_submit_to_queue>

0000dfe6 <work_cancel>:
	CHECKIF(work->work_q == NULL) {
    dfe6:	69c3      	ldr	r3, [r0, #28]
{
    dfe8:	b570      	push	{r4, r5, r6, lr}
    dfea:	4604      	mov	r4, r0
	CHECKIF(work->work_q == NULL) {
    dfec:	2b00      	cmp	r3, #0
    dfee:	d039      	beq.n	e064 <work_cancel+0x7e>
	return atomic_test_bit(work->flags, K_WORK_STATE_PENDING);
    dff0:	f100 0508 	add.w	r5, r0, #8
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    dff4:	e8d5 3faf 	lda	r3, [r5]
	if (k_work_pending(&work->work)) {
    dff8:	07db      	lsls	r3, r3, #31
    dffa:	d52f      	bpl.n	e05c <work_cancel+0x76>
 * @return true if node was removed
 */
static inline bool sys_sflist_find_and_remove(sys_sflist_t *list,
					      sys_sfnode_t *node);

Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
    dffc:	2100      	movs	r1, #0
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
    dffe:	69c2      	ldr	r2, [r0, #28]
    e000:	6813      	ldr	r3, [r2, #0]
    e002:	b913      	cbnz	r3, e00a <work_cancel+0x24>
			return -EINVAL;
    e004:	f06f 0015 	mvn.w	r0, #21
}
    e008:	bd70      	pop	{r4, r5, r6, pc}
    e00a:	429c      	cmp	r4, r3
    e00c:	d121      	bne.n	e052 <work_cancel+0x6c>
Z_GENLIST_REMOVE(sflist, sfnode)
    e00e:	6823      	ldr	r3, [r4, #0]
    e010:	6856      	ldr	r6, [r2, #4]
    e012:	f023 0003 	bic.w	r0, r3, #3
    e016:	b991      	cbnz	r1, e03e <work_cancel+0x58>
    e018:	42b4      	cmp	r4, r6
	list->head = node;
    e01a:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
    e01c:	d100      	bne.n	e020 <work_cancel+0x3a>
	list->tail = node;
    e01e:	6050      	str	r0, [r2, #4]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    e020:	6823      	ldr	r3, [r4, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
    e022:	f003 0303 	and.w	r3, r3, #3
    e026:	6023      	str	r3, [r4, #0]
	work->work_q = NULL;
    e028:	2000      	movs	r0, #0
    e02a:	61e0      	str	r0, [r4, #28]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    e02c:	e8d5 3fef 	ldaex	r3, [r5]
    e030:	f023 0301 	bic.w	r3, r3, #1
    e034:	e8c5 3fe2 	stlex	r2, r3, [r5]
    e038:	2a00      	cmp	r2, #0
    e03a:	d0e5      	beq.n	e008 <work_cancel+0x22>
    e03c:	e7f6      	b.n	e02c <work_cancel+0x46>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    e03e:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
    e040:	42b4      	cmp	r4, r6
	parent->next_and_flags = cur_flags | (unative_t)child;
    e042:	f003 0303 	and.w	r3, r3, #3
    e046:	ea43 0300 	orr.w	r3, r3, r0
    e04a:	600b      	str	r3, [r1, #0]
	list->tail = node;
    e04c:	bf08      	it	eq
    e04e:	6051      	streq	r1, [r2, #4]
    e050:	e7e6      	b.n	e020 <work_cancel+0x3a>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    e052:	6818      	ldr	r0, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
    e054:	4619      	mov	r1, r3
    e056:	f020 0303 	bic.w	r3, r0, #3
    e05a:	e7d2      	b.n	e002 <work_cancel+0x1c>
		(void)z_abort_timeout(&work->timeout);
    e05c:	300c      	adds	r0, #12
    e05e:	f000 f821 	bl	e0a4 <z_abort_timeout>
    e062:	e7e1      	b.n	e028 <work_cancel+0x42>
		return -EAGAIN;
    e064:	f06f 000a 	mvn.w	r0, #10
    e068:	e7ce      	b.n	e008 <work_cancel+0x22>

0000e06a <k_delayed_work_init>:
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    e06a:	2300      	movs	r3, #0
    e06c:	e9c0 3100 	strd	r3, r1, [r0]
	node->next = NULL;
    e070:	e9c0 3302 	strd	r3, r3, [r0, #8]
	node->prev = NULL;
    e074:	6103      	str	r3, [r0, #16]
	work->work_q = NULL;
    e076:	61c3      	str	r3, [r0, #28]
}
    e078:	4770      	bx	lr

0000e07a <k_delayed_work_cancel>:

int k_delayed_work_cancel(struct k_delayed_work *work)
{
	if (!work->work_q) {
    e07a:	69c3      	ldr	r3, [r0, #28]
{
    e07c:	b510      	push	{r4, lr}
	if (!work->work_q) {
    e07e:	b173      	cbz	r3, e09e <k_delayed_work_cancel+0x24>
	__asm__ volatile(
    e080:	f04f 0320 	mov.w	r3, #32
    e084:	f3ef 8411 	mrs	r4, BASEPRI
    e088:	f383 8811 	msr	BASEPRI, r3
    e08c:	f3bf 8f6f 	isb	sy
		return -EINVAL;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	int ret = work_cancel(work);
    e090:	f7ff ffa9 	bl	dfe6 <work_cancel>
	__asm__ volatile(
    e094:	f384 8811 	msr	BASEPRI, r4
    e098:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
    e09c:	bd10      	pop	{r4, pc}
		return -EINVAL;
    e09e:	f06f 0015 	mvn.w	r0, #21
    e0a2:	e7fb      	b.n	e09c <k_delayed_work_cancel+0x22>

0000e0a4 <z_abort_timeout>:
{
    e0a4:	b510      	push	{r4, lr}
	__asm__ volatile(
    e0a6:	f04f 0220 	mov.w	r2, #32
    e0aa:	f3ef 8411 	mrs	r4, BASEPRI
    e0ae:	f382 8811 	msr	BASEPRI, r2
    e0b2:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    e0b6:	6803      	ldr	r3, [r0, #0]
    e0b8:	b13b      	cbz	r3, e0ca <z_abort_timeout+0x26>
			remove_timeout(to);
    e0ba:	f7fc f8a3 	bl	a204 <remove_timeout>
			ret = 0;
    e0be:	2000      	movs	r0, #0
	__asm__ volatile(
    e0c0:	f384 8811 	msr	BASEPRI, r4
    e0c4:	f3bf 8f6f 	isb	sy
}
    e0c8:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    e0ca:	f06f 0015 	mvn.w	r0, #21
    e0ce:	e7f7      	b.n	e0c0 <z_abort_timeout+0x1c>

0000e0d0 <z_get_next_timeout_expiry>:
{
    e0d0:	b510      	push	{r4, lr}
	__asm__ volatile(
    e0d2:	f04f 0320 	mov.w	r3, #32
    e0d6:	f3ef 8411 	mrs	r4, BASEPRI
    e0da:	f383 8811 	msr	BASEPRI, r3
    e0de:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
    e0e2:	f7fc f8a3 	bl	a22c <next_timeout>
	__asm__ volatile(
    e0e6:	f384 8811 	msr	BASEPRI, r4
    e0ea:	f3bf 8f6f 	isb	sy
}
    e0ee:	bd10      	pop	{r4, pc}

0000e0f0 <z_set_timeout_expiry>:
{
    e0f0:	b570      	push	{r4, r5, r6, lr}
    e0f2:	4604      	mov	r4, r0
    e0f4:	460e      	mov	r6, r1
	__asm__ volatile(
    e0f6:	f04f 0320 	mov.w	r3, #32
    e0fa:	f3ef 8511 	mrs	r5, BASEPRI
    e0fe:	f383 8811 	msr	BASEPRI, r3
    e102:	f3bf 8f6f 	isb	sy
		int next = next_timeout();
    e106:	f7fc f891 	bl	a22c <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    e10a:	2801      	cmp	r0, #1
    e10c:	dd05      	ble.n	e11a <z_set_timeout_expiry+0x2a>
    e10e:	42a0      	cmp	r0, r4
    e110:	dd03      	ble.n	e11a <z_set_timeout_expiry+0x2a>
			z_clock_set_timeout(ticks, idle);
    e112:	4631      	mov	r1, r6
    e114:	4620      	mov	r0, r4
    e116:	f7f3 fe09 	bl	1d2c <z_clock_set_timeout>
	__asm__ volatile(
    e11a:	f385 8811 	msr	BASEPRI, r5
    e11e:	f3bf 8f6f 	isb	sy
}
    e122:	bd70      	pop	{r4, r5, r6, pc}

0000e124 <z_tick_get_32>:

u32_t z_tick_get_32(void)
{
    e124:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (u32_t)z_tick_get();
    e126:	f7fc f95f 	bl	a3e8 <z_tick_get>
#else
	return (u32_t)curr_tick;
#endif
}
    e12a:	bd08      	pop	{r3, pc}

0000e12c <z_impl_k_uptime_get>:

s64_t z_impl_k_uptime_get(void)
{
    e12c:	b510      	push	{r4, lr}
	return k_ticks_to_ms_floor64(z_tick_get());
    e12e:	f7fc f95b 	bl	a3e8 <z_tick_get>
			return (t * to_hz + off) / from_hz;
    e132:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    e136:	fba0 2304 	umull	r2, r3, r0, r4
    e13a:	fb04 3301 	mla	r3, r4, r1, r3
    e13e:	0bd0      	lsrs	r0, r2, #15
}
    e140:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
    e144:	0bd9      	lsrs	r1, r3, #15
    e146:	bd10      	pop	{r4, pc}

0000e148 <k_timer_init>:
	timer->status = 0U;
    e148:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
    e14a:	e9c0 1206 	strd	r1, r2, [r0, #24]
    e14e:	f100 0210 	add.w	r2, r0, #16
	timer->status = 0U;
    e152:	6243      	str	r3, [r0, #36]	; 0x24
	list->tail = (sys_dnode_t *)list;
    e154:	e9c0 2204 	strd	r2, r2, [r0, #16]
	node->prev = NULL;
    e158:	e9c0 3300 	strd	r3, r3, [r0]
	timer->user_data = NULL;
    e15c:	6283      	str	r3, [r0, #40]	; 0x28
}
    e15e:	4770      	bx	lr

0000e160 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
    e160:	b510      	push	{r4, lr}
    e162:	4604      	mov	r4, r0
	int inactive = z_abort_timeout(&timer->timeout) != 0;
    e164:	f7ff ff9e 	bl	e0a4 <z_abort_timeout>

	if (inactive) {
    e168:	bb00      	cbnz	r0, e1ac <z_impl_k_timer_stop+0x4c>
		return;
	}

	if (timer->stop_fn != NULL) {
    e16a:	69e3      	ldr	r3, [r4, #28]
    e16c:	b10b      	cbz	r3, e172 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
    e16e:	4620      	mov	r0, r4
    e170:	4798      	blx	r3
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);
    e172:	f104 0010 	add.w	r0, r4, #16
    e176:	2100      	movs	r1, #0
    e178:	f7ff fe10 	bl	dd9c <z_find_first_thread_to_unpend>
	if (thread != NULL) {
    e17c:	4604      	mov	r4, r0
    e17e:	b1a8      	cbz	r0, e1ac <z_impl_k_timer_stop+0x4c>
		z_unpend_thread_no_timeout(thread);
    e180:	f7ff fe1c 	bl	ddbc <z_unpend_thread_no_timeout>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    e184:	7b63      	ldrb	r3, [r4, #13]
    e186:	06db      	lsls	r3, r3, #27
    e188:	d104      	bne.n	e194 <z_impl_k_timer_stop+0x34>
	if (z_is_thread_ready(thread)) {
    e18a:	69a3      	ldr	r3, [r4, #24]
    e18c:	b913      	cbnz	r3, e194 <z_impl_k_timer_stop+0x34>
		z_add_thread_to_ready_q(thread);
    e18e:	4620      	mov	r0, r4
    e190:	f7fb fbfa 	bl	9988 <z_add_thread_to_ready_q>
	__asm__ volatile(
    e194:	f04f 0320 	mov.w	r3, #32
    e198:	f3ef 8011 	mrs	r0, BASEPRI
    e19c:	f383 8811 	msr	BASEPRI, r3
    e1a0:	f3bf 8f6f 	isb	sy

	if (pending_thread != NULL) {
		z_ready_thread(pending_thread);
		z_reschedule_unlocked();
	}
}
    e1a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
    e1a8:	f7ff be2c 	b.w	de04 <z_reschedule_irqlock>
    e1ac:	bd10      	pop	{r4, pc}

0000e1ae <clear_event_registrations>:
	while (num_events--) {
    e1ae:	2314      	movs	r3, #20
{
    e1b0:	b570      	push	{r4, r5, r6, lr}
	event->poller = NULL;
    e1b2:	2400      	movs	r4, #0
    e1b4:	2601      	movs	r6, #1
    e1b6:	fb03 0101 	mla	r1, r3, r1, r0
	while (num_events--) {
    e1ba:	4281      	cmp	r1, r0
    e1bc:	d100      	bne.n	e1c0 <clear_event_registrations+0x12>
}
    e1be:	bd70      	pop	{r4, r5, r6, pc}
	switch (event->type) {
    e1c0:	f811 3c07 	ldrb.w	r3, [r1, #-7]
	event->poller = NULL;
    e1c4:	f841 4c0c 	str.w	r4, [r1, #-12]
	switch (event->type) {
    e1c8:	f003 030f 	and.w	r3, r3, #15
    e1cc:	2b04      	cmp	r3, #4
    e1ce:	d80d      	bhi.n	e1ec <clear_event_registrations+0x3e>
    e1d0:	fa06 f303 	lsl.w	r3, r6, r3
    e1d4:	f013 0f16 	tst.w	r3, #22
    e1d8:	d008      	beq.n	e1ec <clear_event_registrations+0x3e>
	if (remove && sys_dnode_is_linked(&event->_node)) {
    e1da:	f851 3c14 	ldr.w	r3, [r1, #-20]
    e1de:	b12b      	cbz	r3, e1ec <clear_event_registrations+0x3e>
	node->prev->next = node->next;
    e1e0:	f851 5c10 	ldr.w	r5, [r1, #-16]
    e1e4:	602b      	str	r3, [r5, #0]
	node->next->prev = node->prev;
    e1e6:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
    e1e8:	e941 4405 	strd	r4, r4, [r1, #-20]
	__asm__ volatile(
    e1ec:	f382 8811 	msr	BASEPRI, r2
    e1f0:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
    e1f4:	f04f 0320 	mov.w	r3, #32
    e1f8:	f3ef 8211 	mrs	r2, BASEPRI
    e1fc:	f383 8811 	msr	BASEPRI, r3
    e200:	f3bf 8f6f 	isb	sy
    e204:	3914      	subs	r1, #20
    e206:	e7d8      	b.n	e1ba <clear_event_registrations+0xc>

0000e208 <signal_poll_event>:
{
    e208:	b570      	push	{r4, r5, r6, lr}
	struct _poller *poller = event->poller;
    e20a:	6884      	ldr	r4, [r0, #8]
{
    e20c:	4605      	mov	r5, r0
    e20e:	460e      	mov	r6, r1
	if (poller) {
    e210:	b19c      	cbz	r4, e23a <signal_poll_event+0x32>
		if (poller->cb != NULL) {
    e212:	68a3      	ldr	r3, [r4, #8]
    e214:	b95b      	cbnz	r3, e22e <signal_poll_event+0x26>
	int retcode = 0;
    e216:	4618      	mov	r0, r3
		poller->is_polling = false;
    e218:	7023      	strb	r3, [r4, #0]
	event->poller = NULL;
    e21a:	2300      	movs	r3, #0
    e21c:	60ab      	str	r3, [r5, #8]
	event->state |= state;
    e21e:	68eb      	ldr	r3, [r5, #12]
    e220:	f3c3 3204 	ubfx	r2, r3, #12, #5
    e224:	4316      	orrs	r6, r2
    e226:	f366 3310 	bfi	r3, r6, #12, #5
    e22a:	60eb      	str	r3, [r5, #12]
	return retcode;
    e22c:	e004      	b.n	e238 <signal_poll_event+0x30>
			retcode = poller->cb(event, state);
    e22e:	4798      	blx	r3
		poller->is_polling = false;
    e230:	2300      	movs	r3, #0
		if (retcode < 0) {
    e232:	2800      	cmp	r0, #0
		poller->is_polling = false;
    e234:	7023      	strb	r3, [r4, #0]
		if (retcode < 0) {
    e236:	daf0      	bge.n	e21a <signal_poll_event+0x12>
}
    e238:	bd70      	pop	{r4, r5, r6, pc}
	int retcode = 0;
    e23a:	4620      	mov	r0, r4
    e23c:	e7ed      	b.n	e21a <signal_poll_event+0x12>

0000e23e <k_poll_poller_cb>:
{
    e23e:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *thread = event->poller->thread;
    e240:	6883      	ldr	r3, [r0, #8]
{
    e242:	460d      	mov	r5, r1
	struct k_thread *thread = event->poller->thread;
    e244:	685c      	ldr	r4, [r3, #4]
	if (!z_is_thread_pending(thread)) {
    e246:	7b63      	ldrb	r3, [r4, #13]
    e248:	079a      	lsls	r2, r3, #30
    e24a:	d401      	bmi.n	e250 <k_poll_poller_cb+0x12>
		return 0;
    e24c:	2000      	movs	r0, #0
}
    e24e:	bd38      	pop	{r3, r4, r5, pc}
	if (z_is_thread_timeout_expired(thread)) {
    e250:	6a23      	ldr	r3, [r4, #32]
    e252:	3302      	adds	r3, #2
    e254:	d012      	beq.n	e27c <k_poll_poller_cb+0x3e>
	z_unpend_thread(thread);
    e256:	4620      	mov	r0, r4
    e258:	f7ff fdea 	bl	de30 <z_unpend_thread>
	arch_thread_return_value_set(thread,
    e25c:	2d08      	cmp	r5, #8
    e25e:	bf0c      	ite	eq
    e260:	f06f 0303 	mvneq.w	r3, #3
    e264:	2300      	movne	r3, #0
    e266:	66a3      	str	r3, [r4, #104]	; 0x68
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    e268:	7b63      	ldrb	r3, [r4, #13]
    e26a:	06db      	lsls	r3, r3, #27
    e26c:	d1ee      	bne.n	e24c <k_poll_poller_cb+0xe>
	if (!z_is_thread_ready(thread)) {
    e26e:	69a5      	ldr	r5, [r4, #24]
    e270:	2d00      	cmp	r5, #0
    e272:	d1eb      	bne.n	e24c <k_poll_poller_cb+0xe>
		z_add_thread_to_ready_q(thread);
    e274:	4620      	mov	r0, r4
    e276:	f7fb fb87 	bl	9988 <z_add_thread_to_ready_q>
	return 0;
    e27a:	e7e7      	b.n	e24c <k_poll_poller_cb+0xe>
		return -EAGAIN;
    e27c:	f06f 000a 	mvn.w	r0, #10
    e280:	e7e5      	b.n	e24e <k_poll_poller_cb+0x10>

0000e282 <add_event>:
{
    e282:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e284:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
    e286:	e9d0 2300 	ldrd	r2, r3, [r0]
    e28a:	4290      	cmp	r0, r2
    e28c:	4604      	mov	r4, r0
    e28e:	460d      	mov	r5, r1
    e290:	d106      	bne.n	e2a0 <add_event+0x1e>
	node->prev = list->tail;
    e292:	6863      	ldr	r3, [r4, #4]
	node->next = list;
    e294:	602c      	str	r4, [r5, #0]
	node->prev = list->tail;
    e296:	606b      	str	r3, [r5, #4]
	list->tail->next = node;
    e298:	6863      	ldr	r3, [r4, #4]
    e29a:	601d      	str	r5, [r3, #0]
	list->tail = node;
    e29c:	6065      	str	r5, [r4, #4]
}
    e29e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
    e2a0:	2b00      	cmp	r3, #0
    e2a2:	d0f6      	beq.n	e292 <add_event+0x10>
		z_is_t1_higher_prio_than_t2(pending->poller->thread,
    e2a4:	689b      	ldr	r3, [r3, #8]
    e2a6:	6879      	ldr	r1, [r7, #4]
    e2a8:	6858      	ldr	r0, [r3, #4]
    e2aa:	f7ff fd6e 	bl	dd8a <z_is_t1_higher_prio_than_t2>
	if ((pending == NULL) ||
    e2ae:	2800      	cmp	r0, #0
    e2b0:	d1ef      	bne.n	e292 <add_event+0x10>
	return list->head == list;
    e2b2:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    e2b4:	42b4      	cmp	r4, r6
    e2b6:	d0ec      	beq.n	e292 <add_event+0x10>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
    e2b8:	2e00      	cmp	r6, #0
    e2ba:	d0ea      	beq.n	e292 <add_event+0x10>
		if (z_is_t1_higher_prio_than_t2(poller->thread,
    e2bc:	68b3      	ldr	r3, [r6, #8]
    e2be:	6878      	ldr	r0, [r7, #4]
    e2c0:	6859      	ldr	r1, [r3, #4]
    e2c2:	f7ff fd62 	bl	dd8a <z_is_t1_higher_prio_than_t2>
    e2c6:	b128      	cbz	r0, e2d4 <add_event+0x52>
	node->prev = successor->prev;
    e2c8:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
    e2ca:	e9c5 6300 	strd	r6, r3, [r5]
	successor->prev->next = node;
    e2ce:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    e2d0:	6075      	str	r5, [r6, #4]
			return;
    e2d2:	e7e4      	b.n	e29e <add_event+0x1c>
	return (node == list->tail) ? NULL : node->next;
    e2d4:	6863      	ldr	r3, [r4, #4]
    e2d6:	429e      	cmp	r6, r3
    e2d8:	d0db      	beq.n	e292 <add_event+0x10>
    e2da:	6836      	ldr	r6, [r6, #0]
    e2dc:	e7ec      	b.n	e2b8 <add_event+0x36>

0000e2de <register_events>:
{
    e2de:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
    e2e2:	f04f 0b00 	mov.w	fp, #0
{
    e2e6:	4688      	mov	r8, r1
    e2e8:	4615      	mov	r5, r2
    e2ea:	4699      	mov	r9, r3
    e2ec:	4604      	mov	r4, r0
	int events_registered = 0;
    e2ee:	465e      	mov	r6, fp
	event->poller = NULL;
    e2f0:	465f      	mov	r7, fp
	for (int ii = 0; ii < num_events; ii++) {
    e2f2:	45c3      	cmp	fp, r8
    e2f4:	db02      	blt.n	e2fc <register_events+0x1e>
}
    e2f6:	4630      	mov	r0, r6
    e2f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e2fc:	f04f 0320 	mov.w	r3, #32
    e300:	f3ef 8a11 	mrs	sl, BASEPRI
    e304:	f383 8811 	msr	BASEPRI, r3
    e308:	f3bf 8f6f 	isb	sy
	switch (event->type) {
    e30c:	7b63      	ldrb	r3, [r4, #13]
    e30e:	f003 030f 	and.w	r3, r3, #15
    e312:	2b02      	cmp	r3, #2
    e314:	d005      	beq.n	e322 <register_events+0x44>
    e316:	2b04      	cmp	r3, #4
    e318:	d006      	beq.n	e328 <register_events+0x4a>
    e31a:	2b01      	cmp	r3, #1
    e31c:	d118      	bne.n	e350 <register_events+0x72>
		if (event->signal->signaled != 0U) {
    e31e:	6922      	ldr	r2, [r4, #16]
    e320:	e000      	b.n	e324 <register_events+0x46>
		if (k_sem_count_get(event->sem) > 0) {
    e322:	6922      	ldr	r2, [r4, #16]
		if (event->signal->signaled != 0U) {
    e324:	6892      	ldr	r2, [r2, #8]
    e326:	e001      	b.n	e32c <register_events+0x4e>
		if (!k_queue_is_empty(event->queue)) {
    e328:	6922      	ldr	r2, [r4, #16]
    e32a:	6812      	ldr	r2, [r2, #0]
		if (event->signal->signaled != 0U) {
    e32c:	b182      	cbz	r2, e350 <register_events+0x72>
	event->state |= state;
    e32e:	68e2      	ldr	r2, [r4, #12]
	event->poller = NULL;
    e330:	60a7      	str	r7, [r4, #8]
	event->state |= state;
    e332:	f3c2 3104 	ubfx	r1, r2, #12, #5
    e336:	430b      	orrs	r3, r1
    e338:	f363 3210 	bfi	r2, r3, #12, #5
    e33c:	60e2      	str	r2, [r4, #12]
			poller->is_polling = false;
    e33e:	702f      	strb	r7, [r5, #0]
	__asm__ volatile(
    e340:	f38a 8811 	msr	BASEPRI, sl
    e344:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
    e348:	f10b 0b01 	add.w	fp, fp, #1
    e34c:	3414      	adds	r4, #20
    e34e:	e7d0      	b.n	e2f2 <register_events+0x14>
		} else if (!just_check && poller->is_polling) {
    e350:	f1b9 0f00 	cmp.w	r9, #0
    e354:	d1f4      	bne.n	e340 <register_events+0x62>
    e356:	782b      	ldrb	r3, [r5, #0]
    e358:	2b00      	cmp	r3, #0
    e35a:	d0f1      	beq.n	e340 <register_events+0x62>
	switch (event->type) {
    e35c:	7b63      	ldrb	r3, [r4, #13]
    e35e:	f003 030f 	and.w	r3, r3, #15
    e362:	2b02      	cmp	r3, #2
    e364:	d007      	beq.n	e376 <register_events+0x98>
    e366:	2b04      	cmp	r3, #4
    e368:	d00e      	beq.n	e388 <register_events+0xaa>
    e36a:	2b01      	cmp	r3, #1
    e36c:	d109      	bne.n	e382 <register_events+0xa4>
		add_event(&event->signal->poll_events, event, poller);
    e36e:	462a      	mov	r2, r5
    e370:	4621      	mov	r1, r4
    e372:	6920      	ldr	r0, [r4, #16]
    e374:	e003      	b.n	e37e <register_events+0xa0>
		add_event(&event->sem->poll_events, event, poller);
    e376:	462a      	mov	r2, r5
    e378:	4621      	mov	r1, r4
    e37a:	6920      	ldr	r0, [r4, #16]
    e37c:	3010      	adds	r0, #16
		add_event(&event->signal->poll_events, event, poller);
    e37e:	f7ff ff80 	bl	e282 <add_event>
	event->poller = poller;
    e382:	60a5      	str	r5, [r4, #8]
				events_registered += 1;
    e384:	3601      	adds	r6, #1
    e386:	e7db      	b.n	e340 <register_events+0x62>
		add_event(&event->queue->poll_events, event, poller);
    e388:	6920      	ldr	r0, [r4, #16]
    e38a:	462a      	mov	r2, r5
    e38c:	4621      	mov	r1, r4
    e38e:	3008      	adds	r0, #8
    e390:	e7f5      	b.n	e37e <register_events+0xa0>

0000e392 <z_handle_obj_poll_events>:
	return list->head == list;
    e392:	6803      	ldr	r3, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
    e394:	4298      	cmp	r0, r3
    e396:	d009      	beq.n	e3ac <z_handle_obj_poll_events+0x1a>
	node->prev->next = node->next;
    e398:	e9d3 2000 	ldrd	r2, r0, [r3]
    e39c:	6002      	str	r2, [r0, #0]
	node->next->prev = node->prev;
    e39e:	6050      	str	r0, [r2, #4]
	node->next = NULL;
    e3a0:	2200      	movs	r2, #0
		(void) signal_poll_event(poll_event, state);
    e3a2:	4618      	mov	r0, r3
	node->prev = NULL;
    e3a4:	e9c3 2200 	strd	r2, r2, [r3]
    e3a8:	f7ff bf2e 	b.w	e208 <signal_poll_event>
}
    e3ac:	4770      	bx	lr

0000e3ae <_OffsetAbsSyms>:
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
#endif

GEN_ABS_SYM_END
    e3ae:	4770      	bx	lr
